[{"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the farecard has reached the off peak daily cap limit and is outside of the transfer window. The fare payment should be successful and the correct amount should be deducted from the ePurse balance. The SA Tool should also correctly display the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Route Transfer where Premium fare is higher than Special Event fare on SA Tool", "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare upgrade from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window. The fare payment should be successful and the correct upgrade fare should be deducted from the ePurse balance. The SA Tool should also correctly display the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Route Transfer where Premium fare is lower than Special Event fare on SA Tool", "Test_Sce_Description": "Verify that the SA Tool correctly computes and allows a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window. The fare payment should be successful and no amount should be deducted from the ePurse balance. The SA Tool should also correctly display the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Valid Non-Adult Concession on Farecard on SA Tool", "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession. The fare payment should be successful and the correct upgrade fare should be deducted from the ePurse balance. The SA Tool should also correctly display the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection on SA Tool", "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The fare payment should be successful and the correct fare should be deducted from the ePurse balance. The SA Tool should also correctly record both the fare payment and inspection transactions and return to the Tap Card screen with a toast notification of the corresponding inspection action."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment on SA Tool with Premium Service Class and Valid Special Event Transfer Product", "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare from the Virtual Card E-Purse when the Service Class is Premium, the Farecard has a valid Special Event Transfer Product, and the tap is within the Transfer Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Communication from ATS to SA Tool", "Test_Sce_Description": "Verify that the ATS correctly communicates the computed fare and deducted amount back to the SA Tool after the fare payment process."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "POP Print Flag Functionality on SA Tool", "Test_Sce_Description": "Verify that the SA Tool correctly sets the POP Print Flag to 0 to ensure accurate display of the transfer print status when the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment on SA Tool with Off Peak Daily Cap Limit Reached", "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare from the Virtual Card E-Purse when the Farecard has reached the off peak Daily Cap Limit, has not reached the Peak Daily Cap limit, and is out of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment on SA Tool with Premium Service Class and Lower Premium Fare", "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare from the Virtual Card E-Purse when the Service Class is Premium, the Farecard has a valid Special Event Transfer Product, the tap is within the Transfer Window, and the Premium fare is lower than the Special Event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment on SA Tool with Valid Non-Adult Concession", "Test_Sce_Description": "Verify that the SA Tool correctly processes the fare payment when the customer's Farecard has a Valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment on SA Tool with Farecard on Action or Load Value List", "Test_Sce_Description": "Verify that the SA Tool correctly verifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly during the fare payment process."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment on SA Tool with Daily Cap Reached", "Test_Sce_Description": "Verify that the SA Tool correctly deducts no fare when the Farecard has reached the Daily Cap Limit and is out of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment on SA Tool with Premium or Special Event Service Class", "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the Premium or Special Event fare when the Service Class is Premium or Special Event."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment on SA Tool with Premium or Special Event Service Class and Valid Regular Service Transfer Product", "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the Upgrade fare when the Service Class is Premium or Special Event, the Farecard has a valid Regular Service Transfer Product, and the tap is within the Transfer Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment on SA Tool with Off Peak Daily Cap Limit Reached and Peak Daily Cap Limit Not Reached", "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare from the Virtual Card E-Purse when the Farecard has reached the off peak Daily Cap Limit, has not reached the Peak Daily Cap limit, and is out of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment on SA Tool during Premium Service with Lower Fare than Special Event", "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare from the ePurse Balance when a customer taps on a premium service route/location after previously riding on a Special Event service route within the transfer window. The fare deducted should be free as the premium fare is lower than the special event fare. The SA Tool should also set the POP Print Flag to 0 to accurately display the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment on SA Tool during Peak Hours after Reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare from the ePurse Balance when a customer taps on peak hours after previously reaching off peak daily cap and is outside the transfer window. The fare deducted should be the peak fare as the farecard has not reached the Peak Daily Cap limit."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment on SA Tool with Valid Non-Adult Concession", "Test_Sce_Description": "Verify that the SA Tool correctly identifies and applies the Valid Non-Adult concession on the customer's Farecard during fare payment. The fare deducted should be according to the concession rules."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment on SA Tool with Farecard on Action or Load Value List", "Test_Sce_Description": "Verify that the SA Tool correctly identifies if the Farecard is on the Action or Load Value List and updates the Farecard accordingly during fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment on SA Tool with Daily Cap Reached", "Test_Sce_Description": "Verify that the SA Tool correctly identifies if the Farecard has reached the Daily Cap Limit and is out of transfer window. In this case, the SA Tool should deduct no fare from the ePurse Balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment on SA Tool during Premium Service or Special Route/Location", "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the Premium or Special Event fare from the ePurse Balance when a customer taps on a premium service or special route/location. The SA Tool should also create a Transfer Product for the Premium Service or special event Class."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment on SA Tool during Premium Service or Special Route/Location with Fare Upgrade", "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the Upgrade fare from the ePurse Balance when a customer taps on a premium service or special event route/location after previously riding on a regular service route within the transfer window. The SA Tool should also set the POP Print Flag to 0 to accurately display the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Performance of SA Tool during Fare Payment", "Test_Sce_Description": "Verify that the SA Tool performs efficiently during fare payment. The tool should not lag or freeze during the process and should be able to handle multiple fare payments simultaneously."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Security of SA Tool during Fare Payment", "Test_Sce_Description": "Verify that the SA Tool maintains the security of the customer's ePurse Balance and other sensitive information during fare payment. The tool should not expose any sensitive data during the process."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet Concession Deduction on Farecard", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and deducts the Non-Adult, Non-Child, Non-discreet Concession from the customer's Farecard. The test will involve a customer with a valid Non-Adult, Non-Child, Non-discreet concession on their Farecard using the SA Tool to pay for their fare. The expected result is that the SA Tool correctly identifies the concession and deducts the appropriate amount."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating ePurse Balance Overdraft on Farecard", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount. The test will involve a customer with an ePurse balance less than the fare amount using the SA Tool to pay for their fare. The expected result is that the SA Tool correctly puts the Farecard into overdraft."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Transfer Product Processing on Farecard", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and processes a valid transfer product on the customer's Farecard. The test will involve a customer with a valid transfer product on their Farecard using the SA Tool to pay for their fare. The expected result is that the SA Tool correctly identifies the transfer product and computes the free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Inter-agency Transfer Processing on Farecard", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and processes an inter-agency transfer product on the customer's Farecard. The test will involve a customer with a valid inter-agency transfer product on their Farecard using the SA Tool to pay for their fare. The expected result is that the SA Tool correctly identifies the transfer product and computes the fare based on the transfer agreement between the transit agencies."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Autoload Threshold Processing on Farecard", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies when the Autoload threshold is met on the customer's Farecard and adds the Autoload amount to the ePurse balance. The test will involve a customer with Autoload enabled on their Farecard using the SA Tool to pay for their fare. The expected result is that the SA Tool correctly identifies when the Autoload threshold is met and adds the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Action or Load Value List Processing on Farecard", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies when the customer's Farecard is on the Action or Load Value list and updates the Farecard accordingly. The test will involve a customer with their Farecard on the Action or Load Value list using the SA Tool to pay for their fare. The expected result is that the SA Tool correctly identifies the Farecard on the list and updates it accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Unreadable Virtual Card Processing", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies when a Virtual Card is unreadable. The test will involve a customer with an unreadable Virtual Card using the SA Tool to pay for their fare. The expected result is that the SA Tool correctly identifies the unreadable Virtual Card and provides the appropriate feedback to the operator."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult Concession Processing on Virtual Card", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and processes a Non-Adult concession on the customer's Virtual Card. The test will involve a customer with a Non-Adult concession on their Virtual Card using the SA Tool to pay for their fare. The expected result is that the SA Tool correctly identifies the concession and provides the appropriate feedback to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating ePurse Balance Overdraft on Virtual Card", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly puts the customer's Virtual Card into overdraft when the ePurse balance is less than the fare amount. The test will involve a customer with an ePurse balance less than the fare amount on their Virtual Card using the SA Tool to pay for their fare. The expected result is that the SA Tool correctly puts the Virtual Card into overdraft."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Intra-SP Transfer Processing on Virtual Card", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and processes an intra-SP transfer product on the customer's Virtual Card. The test will involve a customer with an intra-SP transfer product on their Virtual Card using the SA Tool to pay for their fare. The expected result is that the SA Tool correctly identifies the transfer product and provides the appropriate feedback to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Inter-SP Transfer Processing on Virtual Card", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and processes an inter-SP transfer product on the customer's Virtual Card. The test will involve a customer with an inter-SP transfer product on their Virtual Card using the SA Tool to pay for their fare. The expected result is that the SA Tool correctly identifies the transfer product and provides the appropriate feedback to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Farecard is on the Action or Load Value List", "Test_Sce_Description": "Ensure that the SA Tool correctly verifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly. This is to test the functionality of the SA Tool in processing the Farecard information."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Audio Messages for Fare Payment", "Test_Sce_Description": "Ensure that when a customer requests audio messages for fare payment, the SA Tool correctly enables audio mode and plays the corresponding audio message in the default language of the Farecard. This is to test the functionality and performance of the audio mode in the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment with Daily Cap Reached", "Test_Sce_Description": "Ensure that when a Farecard has reached the Daily Cap Limit and is out of transfer window, the SA Tool correctly deducts no fare. This is to test the functionality of the SA Tool in handling fare payment under specific conditions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment for Premium Service or Special Route/Location", "Test_Sce_Description": "Ensure that when a tap on a premium service or special route/location is made, the SA Tool correctly computes and deducts the Premium or Special Event fare. This is to test the functionality of the SA Tool in handling fare payment for premium services or special routes/locations."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Upgrade for Premium Service or Special Route/Location", "Test_Sce_Description": "Ensure that when a tap on a premium service or special event route/location is made after previously riding on a regular service route (within the transfer window), the SA Tool correctly computes and deducts the Upgrade fare. This is to test the functionality of the SA Tool in handling fare upgrades."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Ensure that when a tap on peak hours is made after previously reaching off peak daily cap (outside the transfer window), the SA Tool correctly processes the fare payment. This is to test the functionality of the SA Tool in handling fare payment under specific conditions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment with Period Pass for Higher Fare Value Service Class", "Test_Sce_Description": "Ensure that when a Farecard with a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value is used, the SA Tool correctly computes and deducts the Upgrade fare. This is to test the functionality of the SA Tool in handling fare payment with Period Pass for higher fare value service class."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment with Period Pass for Lower Fare Value Service Class", "Test_Sce_Description": "Ensure that when a Farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used, the SA Tool correctly accepts the period pass fare payment. This is to test the functionality of the SA Tool in handling fare payment with Period Pass for lower fare value service class."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment with Limited Period Pass", "Test_Sce_Description": "Ensure that when a Farecard with a valid Limited Period Pass and the current time is within the limits of the product is used, the SA Tool correctly processes the fare payment. This is to test the functionality of the SA Tool in handling fare payment with Limited Period Pass."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment with Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "Ensure that when a Farecard with a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction is used, the SA Tool correctly processes the fare payment. This is to test the functionality of the SA Tool in handling fare payment under specific conditions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Daily Cap Reached outside of Transfer window on SA Tool", "Test_Scnario": "Testing Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made during peak hours after the farecard has reached its off peak daily cap limit and is outside the transfer window. The test will ensure that the SA Tool correctly computes and deducts the fare from the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Daily Cap Reached outside of Transfer window on SA Tool", "Test_Scnario": "Testing Fare Payment on Premium Service or Special Route/Location on SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made on a premium service or special route/location. The test will ensure that the SA Tool correctly computes and deducts the premium or special event fare from the ePurse balance and creates a Transfer Product for the Premium Service or special event Class."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Daily Cap Reached outside of Transfer window on SA Tool", "Test_Scnario": "Testing Fare Payment on Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made on a premium service or special event route/location after previously riding on a regular service route within the transfer window. The test will ensure that the SA Tool correctly computes and deducts the upgrade fare from the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Daily Cap Reached outside of Transfer window on SA Tool", "Test_Scnario": "Testing Fare Payment when Daily Cap Reached outside of Transfer window on SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made after the farecard has reached its daily cap limit and is outside the transfer window. The test will ensure that the SA Tool correctly identifies that the daily cap has been reached and does not deduct any fare from the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Daily Cap Reached outside of Transfer window on SA Tool", "Test_Scnario": "Testing Fare Payment with Valid Non-Adult Concession on Farecard on SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made with a farecard that has a valid non-adult concession. The test will ensure that the SA Tool correctly identifies the concession and applies the appropriate fare deduction from the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Daily Cap Reached outside of Transfer window on SA Tool", "Test_Scnario": "Testing Fare Payment with Farecard on Action or Load Value List on SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made with a farecard that is on the Action or Load Value List. The test will ensure that the SA Tool correctly identifies the farecard's status and updates the farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Daily Cap Reached outside of Transfer window on SA Tool", "Test_Scnario": "Testing Fare Payment with Customer requesting Audio Messages on SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made and the customer requests audio messages for the fare payment. The test will ensure that the SA Tool correctly enables audio mode and plays the corresponding audio message in the default language of the farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Daily Cap Reached outside of Transfer window on SA Tool", "Test_Scnario": "Testing Performance of SA Tool during Fare Payment", "Test_Sce_Description": "This scenario will test the performance of the SA Tool during fare payment. The test will ensure that the SA Tool processes fare payments quickly and efficiently, without any lag or delay."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Daily Cap Reached outside of Transfer window on SA Tool", "Test_Scnario": "Testing Security of SA Tool during Fare Payment", "Test_Sce_Description": "This scenario will test the security of the SA Tool during fare payment. The test will ensure that the SA Tool securely processes fare payments, protecting customer data and preventing unauthorized access."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location on SA Tool", "Test_Scnario": "Verify fare deduction from ePurse Balance during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Sce_Description": "Ensure that the fare is correctly computed and deducted from the ePurse Balance when a tap is made during peak hours after previously reaching off peak daily cap (outside the transfer window). The fare payment should be made on the SA Tool, the Farecard should have reached off peak Daily Cap Limit, the Farecard should not have reached Peak Daily Cap limit, and the Farecard should be out of transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location on SA Tool", "Test_Scnario": "Verify fare upgrade on Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Sce_Description": "Ensure that the fare is correctly computed and deducted from the ePurse Balance when a tap is made on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The fare payment should be made on the SA Tool, the Service Class should be Premium, the Farecard should have a valid Special Event Transfer Product, and the Tap should be within Transfer Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location on SA Tool", "Test_Scnario": "Verify free transfer on Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Sce_Description": "Ensure that the fare is correctly computed and deducted from the ePurse Balance when a tap is made on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The fare payment should be made on the SA Tool, the Service Class should be Premium, the Farecard should have a valid Special Event Transfer Product, and the Tap should be within Transfer Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location on SA Tool", "Test_Scnario": "Verify fare payment from a Farecard using ePurse Balance when customer has a Valid Non-Adult Concession on their Farecard", "Test_Sce_Description": "Ensure that the fare is correctly computed and deducted from the ePurse Balance when a customer with a Valid Non-Adult concession on their Farecard makes a payment. The fare payment should be made on the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location on SA Tool", "Test_Scnario": "Verify fare payment from a Farecard using ePurse Balance during Premium Service or Special Route/Location on SA Tool", "Test_Sce_Description": "Ensure that the fare is correctly computed and deducted from the ePurse Balance when a tap is made during Premium Service or Special Route/Location. The fare payment should be made on the SA Tool, the Service Class should be Premium or Special Event, the Farecard should have a valid Regular Service Transfer Product, and the Tap should be within Transfer Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location on SA Tool", "Test_Scnario": "Verify fare payment from a Farecard using ePurse Balance when the Farecard is on the hotlist", "Test_Sce_Description": "Ensure that the fare payment is not allowed when the Farecard is on the hotlist. The fare payment should be made on the SA Tool, and the Farecard should be on the hotlist."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location on SA Tool", "Test_Scnario": "Verify fare payment from a Farecard using ePurse Balance when the ePurse balance is insufficient", "Test_Sce_Description": "Ensure that the fare payment is not allowed when the ePurse balance is insufficient. The fare payment should be made on the SA Tool, and the ePurse balance should be insufficient."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location on SA Tool", "Test_Scnario": "Verify fare payment from a Farecard using ePurse Balance when the Farecard is not on the reader", "Test_Sce_Description": "Ensure that the fare payment is not allowed when the Farecard is not on the reader. The fare payment should be made on the SA Tool, and the Farecard should not be on the reader."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location on SA Tool", "Test_Scnario": "Verify fare payment from a Farecard using ePurse Balance when the Farecard is not valid", "Test_Sce_Description": "Ensure that the fare payment is not allowed when the Farecard is not valid. The fare payment should be made on the SA Tool, and the Farecard should not be valid."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location on SA Tool", "Test_Scnario": "Verify fare payment from a Farecard using ePurse Balance when the Farecard has reached Peak Daily Cap limit", "Test_Sce_Description": "Ensure that the fare payment is not allowed when the Farecard has reached Peak Daily Cap limit. The fare payment should be made on the SA Tool, and the Farecard should have reached Peak Daily Cap limit."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Test_Scnario": "Verify fare deduction from ePurse Balance for Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Test_Sce_Description": "This scenario is to verify that the SA Tool correctly computes and deducts the Upgrade fare from the ePurse Balance when a customer taps on a premium service or special event route/location after previously riding on a regular service route within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Test_Scnario": "Verify fare deduction from ePurse Balance for Premium Service or Special Route/Location with Fare Upgrade on SA Tool during peak hours", "Test_Sce_Description": "This scenario is to verify that the SA Tool correctly computes and deducts the Upgrade fare from the ePurse Balance when a customer taps on a premium service or special event route/location after previously riding on a regular service route within the transfer window during peak hours."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Test_Scnario": "Verify fare deduction from ePurse Balance for Premium Service or Special Route/Location with Fare Upgrade on SA Tool after reaching off peak daily cap", "Test_Sce_Description": "This scenario is to verify that the SA Tool correctly computes and deducts the Upgrade fare from the ePurse Balance when a customer taps on a premium service or special event route/location after previously riding on a regular service route within the transfer window and after reaching off peak daily cap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Test_Scnario": "Verify fare deduction from ePurse Balance for Premium Service or Special Route/Location with Fare Upgrade on SA Tool when Farecard has not reached Peak Daily Cap limit", "Test_Sce_Description": "This scenario is to verify that the SA Tool correctly computes and deducts the Upgrade fare from the ePurse Balance when a customer taps on a premium service or special event route/location after previously riding on a regular service route within the transfer window and when the Farecard has not reached Peak Daily Cap limit."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Test_Scnario": "Verify fare deduction from ePurse Balance for Premium Service or Special Route/Location with Fare Upgrade on SA Tool when Farecard is out of transfer window", "Test_Sce_Description": "This scenario is to verify that the SA Tool correctly computes and deducts the Upgrade fare from the ePurse Balance when a customer taps on a premium service or special event route/location after previously riding on a regular service route and the Farecard is out of transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Test_Scnario": "Verify fare deduction from ePurse Balance for Premium Service or Special Route/Location with Fare Upgrade on SA Tool when Farecard has a valid Regular Service Transfer Product", "Test_Sce_Description": "This scenario is to verify that the SA Tool correctly computes and deducts the Upgrade fare from the ePurse Balance when a customer taps on a premium service or special event route/location after previously riding on a regular service route and the Farecard has a valid Regular Service Transfer Product."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Test_Scnario": "Verify the performance of the SA Tool during fare deduction from ePurse Balance for Premium Service or Special Route/Location with Fare Upgrade", "Test_Sce_Description": "This scenario is to verify the performance of the SA Tool during the fare deduction process from the ePurse Balance when a customer taps on a premium service or special event route/location after previously riding on a regular service route within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Test_Scnario": "Verify the security of the SA Tool during fare deduction from ePurse Balance for Premium Service or Special Route/Location with Fare Upgrade", "Test_Sce_Description": "This scenario is to verify the security measures implemented in the SA Tool during the fare deduction process from the ePurse Balance when a customer taps on a premium service or special event route/location after previously riding on a regular service route within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment with Valid Child Concession on CLIENT Ticket", "Test_Sce_Description": "This scenario is to validate the fare payment process when a customer's ticket has a valid child concession. The SA Tool should be able to detect the valid child concession, display the successful child fare payment screen, and play the successful fare payment audio tone for child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment with Empty Ride Balance", "Test_Sce_Description": "This scenario is to validate the fare payment process when a customer's ride balance is empty. The SA Tool should be able to detect the empty ride balance, display a declined message to the customer, and play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment with Low Battery Threshold", "Test_Sce_Description": "This scenario is to validate the fare payment process when the SA Tool device battery goes below the low battery threshold during a successful ticket tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment with Non-CLIENT Media Card", "Test_Sce_Description": "This scenario is to validate the fare payment process when a customer's card is not CLIENT media. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment within Anti-Passback Window", "Test_Sce_Description": "This scenario is to validate the fare payment process when a customer's ticket is within the Anti-Passback Window. The device should detect that the ticket fails the Anti-Passback checks, display a declined message to the customer, and play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "This scenario is to validate the fare payment process when a customer's ticket is not activated. The SA Tool should be able to detect the non-activated ticket, display a declined message to the customer, and play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment with Valid Non-Adult, Non-Child Concession", "Test_Sce_Description": "This scenario is to validate the fare payment process when a customer's ticket has a valid non-adult, non-child concession. The SA Tool should be able to detect the valid non-adult, non-child concession, display the successful fare payment screen, and play the successful fare payment audio tone for a concession other than adult or child."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment within Intra-agency Transfer Window", "Test_Sce_Description": "This scenario is to validate the fare payment process when a customer's ticket has a valid transfer product and the tap is within the transfer window. The SA Tool should be able to detect the valid transfer product, compute the free transfer, and complete the fare payment process."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment with Audio Messages Request", "Test_Sce_Description": "This scenario is to validate the fare payment process when a customer requests audio messages for the fare payment. The operator should enable audio mode, adjust the volume level using the physical device buttons at the customer's discretion, and the SA Tool should display the ticket fare payment screen to the operator and customer for the duration of the audio message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment on Premium Service or Special Route/Location", "Test_Sce_Description": "This scenario is to validate the fare payment process when the fare payment is being made on the FLATFARE BASED SA Tool and the service class is premium or special event. The SA Tool should be able to process the fare payment without differentiating between service class for CLIENT Ticket."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Valid Child Concession on TTC Ticket", "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment from a TTC ticket with a valid child concession. The tool should display a successful fare payment screen and play the corresponding audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Test the SA Tool's ability to process fare payment after a failed ticket inspection. The tool should record both the fare payment and inspection transactions, and return to the Tap Card screen with a toast notification of the inspection action."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Empty Ride Balance on BFTP Ticket", "Test_Sce_Description": "Check the SA Tool's response when a fare payment is attempted with a BFTP ticket that has an empty ride balance. The tool should display a declined message, play the declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment During Low Battery Threshold", "Test_Sce_Description": "Test the SA Tool's functionality when the device battery goes below the low battery threshold during a fare payment. The tool should switch to 'Out of Service' mode either before or after processing the fare payment, depending on when the threshold is reached."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Non-CLIENT Media Card", "Test_Sce_Description": "Verify the SA Tool's response when a non-CLIENT media card is tapped for fare payment. The tool should not respond and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Ticket in Anti-Passback Window", "Test_Sce_Description": "Test the SA Tool's ability to detect and decline fare payment from a ticket that is within the Anti-Passback Window. The tool should display a declined message, play the declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Check the SA Tool's response when a non-activated ticket is tapped for fare payment. The tool should display a declined message, play the declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Expired Ticket", "Test_Sce_Description": "Verify the SA Tool's ability to detect and decline fare payment from an expired ticket. The tool should display a declined message, play the declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Invalid Period Pass on Transit Agency Ticket", "Test_Sce_Description": "Test the SA Tool's functionality when a fare payment is attempted with a Transit Agency ticket that has an invalid period pass. The tool should display a declined message, play the declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment During Low Battery Threshold with Period Pass", "Test_Sce_Description": "Check the SA Tool's response when the device battery goes below the low battery threshold during a fare payment with a period pass. The tool should switch to 'Out of Service' mode either before or after processing the fare payment, depending on when the threshold is reached."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's ride balance is empty and appropriately declines the transaction. The SA Tool should display a declined message to the customer and play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "Ensure that the SA Tool correctly switches to 'Out of Service' mode when the low battery threshold is reached during a fare payment process. If the low battery threshold is reached before Step 5, the application should switch to 'Out of Service' mode. If it is reached after Step 5, the customer's fare payment should be processed before switching to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "Test that the SA Tool correctly identifies when a customer's card is not CLIENT media and does not respond. The device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's Ticket is within the Anti-Passback Window and declines the transaction. The SA Tool should display a declined message to the customer and play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Ensure that the SA Tool correctly identifies when a customer's Ticket is not activated and declines the transaction. The SA Tool should display a declined message to the customer and play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "Test that the SA Tool correctly identifies when a Farecard is locked and does not proceed with the inspection. The device should display a declined screen to the operator."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Unreadable TICKET", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a TICKET is unreadable and indicates this to the operator. If the tap is unsuccessful, the SA Tool application should indicate to the operator that the TICKET is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession", "Test_Sce_Description": "Ensure that the SA Tool correctly identifies when a customer's TICKET has a Valid Non-Adult, Non-Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on TTC SA Tool when Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario will test the functionality of the TTC SA Tool when the battery goes below the threshold during a fare payment. The test will ensure that the application switches to 'Out of Service' mode if the low battery threshold is reached before Step 5 of the Main Use Case. If the threshold is not reached before Step 5, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on BFTP SA Tool when Customer\u2019s card is not CLIENT media", "Test_Sce_Description": "This scenario will test the functionality of the BFTP SA Tool when a customer taps a card that is not CLIENT media. The test will ensure that the SA Tool application does not respond, but the device error message 'Card Read Error' is displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on TTC SA Tool when Customer\u2019s Ticket is within the Anti-Passback Window", "Test_Sce_Description": "This scenario will test the functionality of the TTC SA Tool when a customer's ticket is within the Anti-Passback Window. The test will ensure that the device detects that the TICKET fails the Anti-Passback checks and the SA Tool application displays a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on BFTP SA Tool when Customer\u2019s Ticket is not activated", "Test_Sce_Description": "This scenario will test the functionality of the BFTP SA Tool when a customer taps a non-activated ticket. The test will ensure that the SA Tool application does not respond, but the device error message 'Card Read Error' is displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Performance of TTC SA Tool during Fare Payment", "Test_Sce_Description": "This scenario will test the performance of the TTC SA Tool during a fare payment. The test will measure the response time of the application during the fare payment process and ensure that it meets the performance requirements."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Security of BFTP SA Tool during Fare Payment", "Test_Sce_Description": "This scenario will test the security of the BFTP SA Tool during a fare payment. The test will ensure that the application securely processes the fare payment and protects the customer's payment information."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Non-CLIENT Media Card", "Test_Sce_Description": "Validate the system's response when a customer attempts to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Unreadable TICKET", "Test_Sce_Description": "Validate the system's ability to detect and handle an unreadable TICKET. The system should indicate to the operator that the TICKET is unreadable and log the error in the background for troubleshooting."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Test_Sce_Description": "Test the system's ability to process fare payments from a TICKET with a valid non-adult, non-child concession. The system should correctly identify the concession and process the fare payment accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Validate the system's response when a customer attempts to make a fare payment with a TICKET that has an empty ride balance. The system should detect the empty balance, decline the transaction, and display a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Low Battery Threshold", "Test_Sce_Description": "Test the system's ability to handle fare payments when the device battery goes below the low battery threshold during a successful TICKET tap. The system should switch to 'Out of Service' mode after processing the fare payment if the low battery threshold is reached."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with TICKET in Anti-Passback Window", "Test_Sce_Description": "Validate the system's ability to detect and handle a TICKET that is within the Anti-Passback Window. The system should detect the Anti-Passback violation, decline the transaction, and display a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Non-Activated TICKET", "Test_Sce_Description": "Test the system's ability to handle fare payments from a non-activated TICKET. The system should detect that the TICKET is not activated, decline the transaction, and display a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "Validate the system's ability to detect and handle a locked farecard. The system should detect that the farecard is locked, decline the transaction, and display a declined message to the operator."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Test the system's ability to handle fare payments resulting from a failed inspection. The system should record both the fare payment and inspection transactions and display a notification of the corresponding inspection action."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Valid Child Concession", "Test_Sce_Description": "Validate the system's ability to process fare payments from a TICKET with a valid child concession. The system should correctly identify the concession, process the fare payment, and display the successful fare payment screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing the Anti-Passback Window functionality on SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the Anti-Passback Window on the SA Tool. The test will involve a customer's TICKET that is within the Anti-Passback Window. The expected outcome is that the device should detect that the TICKET fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing the audio tone functionality on SA Tool during Anti-Passback Window", "Test_Sce_Description": "This scenario will test the audio tone functionality of the SA Tool when a TICKET is within the Anti-Passback Window. The expected outcome is that the SA Tool should play a declined audio tone when the TICKET fails the Anti-Passback checks."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing the timeout functionality on SA Tool during Anti-Passback Window", "Test_Sce_Description": "This scenario will test the timeout functionality of the SA Tool when a TICKET is within the Anti-Passback Window. The expected outcome is that after a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing the performance of SA Tool during Anti-Passback Window", "Test_Sce_Description": "This scenario will test the performance of the SA Tool when a TICKET is within the Anti-Passback Window. The expected outcome is that the SA Tool should be able to handle multiple TICKET taps within the Anti-Passback Window without any performance issues."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing the security of SA Tool during Anti-Passback Window", "Test_Sce_Description": "This scenario will test the security of the SA Tool when a TICKET is within the Anti-Passback Window. The expected outcome is that the SA Tool should securely handle the TICKET information and not allow any unauthorized access."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing the exception flow of SA Tool during Anti-Passback Window", "Test_Sce_Description": "This scenario will test the exception flow of the SA Tool when a TICKET is within the Anti-Passback Window. The expected outcome is that the SA Tool should handle any exceptions or errors gracefully and not crash or hang."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing the alternate flow of SA Tool during Anti-Passback Window", "Test_Sce_Description": "This scenario will test the alternate flow of the SA Tool when a TICKET is within the Anti-Passback Window. The expected outcome is that the SA Tool should be able to handle alternate flows smoothly and not disrupt the user experience."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Validate the system's response when a customer attempts to make a fare payment using a non-activated ticket. The system should detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Test the system's response when a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should detect that the ride balance is empty and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Low Battery Threshold", "Test_Sce_Description": "Verify the system's behavior when the device's battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-CLIENT Media Card", "Test_Sce_Description": "Test the system's response when a customer attempts to make a fare payment using a non-CLIENT media card. The system should not respond and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Validate the system's response when a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should detect that the ticket fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "Test the system's response when a customer attempts to make a fare payment with a locked farecard. The system should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Unreadable Ticket", "Test_Sce_Description": "Validate the system's response when a customer attempts to make a fare payment with an unreadable ticket. The system should detect the ticket but fail to read it, and indicate to the operator that the ticket is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession", "Test_Sce_Description": "Test the system's response when a customer with a non-adult, non-child concession attempts to make a fare payment. The system should detect the valid non-adult, non-child concession and process the fare payment accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Unreadable Virtual Card", "Test_Sce_Description": "Verify that the SA Tool application correctly detects and handles an unreadable Virtual Card. The application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is still unsuccessful, the application should again indicate to the operator that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Handling Non-Adult, Non-Child, Non-Discreet Concessions", "Test_Sce_Description": "Verify that the SA Tool correctly processes a fare payment from a Virtual Card with a valid non-adult, non-child, non-discreet concession. The application should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Handling Insufficient ePurse Balance", "Test_Sce_Description": "Verify that the SA Tool correctly processes a fare payment from a Virtual Card with an ePurse balance less than the fare amount. The application should send the tap to ATS for processing, which should check the online hotlist, complete the fare processing, remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Handling Intra-SP Transfer", "Test_Sce_Description": "Verify that the SA Tool correctly processes a fare payment from a Virtual Card with a valid transfer product within the Intra-SP Transfer window. The application should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Handling Inter-SP Transfer", "Test_Sce_Description": "Verify that the SA Tool correctly processes a fare payment from a Virtual Card with a valid transfer product within the Inter-SP Transfer window. The application should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Handling Audio Messages Request", "Test_Sce_Description": "Verify that the SA Tool correctly handles a customer's request for audio messages for fare payment. The operator should enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion. The SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message and play the corresponding audio message to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Unreadable Virtual Card", "Test_Sce_Description": "Validate the system's behavior when the SA Tool NFC reader detects the Virtual Card but is unable to read it. The system should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is unsuccessful, the system should again indicate to the operator that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Non-Adult, Non-Child, non-discreet concessions", "Test_Sce_Description": "Validate the system's behavior when the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Insufficient ePurse Balance", "Test_Sce_Description": "Validate the system's behavior when the customer's ePurse balance is less than the fare amount. The system should send the tap to ATS for processing, which checks the online hotlist and completes the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Intra-SP Transfer window", "Test_Sce_Description": "Validate the system's behavior when the customer's Virtual Card has a valid transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card, and the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Inter-SP Transfer window", "Test_Sce_Description": "Validate the system's behavior when the customer's Virtual Card has a valid transfer product from other service provider and a transfer agreement between the service providers has been established. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card, and the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Non-Adult, Non-Child, non-discreet concessions", "Test_Sce_Description": "Validate the system's behavior when the customer's Farecard has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should deduct the correct Non-Adult, Non-Child, Non-discreet Concessions and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Insufficient ePurse Balance", "Test_Sce_Description": "Validate the system's behavior when the customer's ePurse balance is less than the fare amount. The customer's Farecard should be put into overdraft (negative balance)."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Intra-agency Transfer window", "Test_Sce_Description": "Validate the system's behavior when the customer's Farecard has a valid transfer product. The SA Tool should compute the free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Inter-agency Transfer window", "Test_Sce_Description": "Validate the system's behavior when the customer's Farecard has a valid transfer product from other transit agency and a transfer agreement between the transit agencies has been established. The SA Tool should compute the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies, and deduct the appropriate fare, if applicable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Autoload Threshold is met", "Test_Sce_Description": "Validate the system's behavior when the customer's Farecard has Autoload enabled and meets or drops below Autoload Threshold. The SA Tool should check that the ePurse balance (after deducting the travel fare) is under the Autoload threshold and add the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Farecard is on the Action or Load Value List", "Test_Sce_Description": "Validate the system's behavior when the customer's Farecard is on the Action or Load Value list. The SA Tool should verify that the Farecard is on the Action or Load Value List and update the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing the functionality of the SA Tool when the Virtual Card is unreadable", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the Virtual Card is unreadable. The SA Tool NFC reader should detect the Virtual Card but fail to read it correctly. The SA Tool application should indicate to the operator that the Virtual Card is unreadable. The customer should then tap on the NFC reader again. If the tap is successful, the process should continue. If the tap is unsuccessful, the SA Tool application should indicate to the operator that the CLIENT (Virtual) Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing the functionality of the SA Tool when the customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card. The SA Tool should show the successful fare payment screen for non-adult concession, and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing the functionality of the SA Tool when the customer has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount. The device should send the tap to ATS for processing. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly. The device should provide the appropriate feedback to the Cardholder of a successful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing the functionality of the SA Tool when the transaction is within Intra-SP Transfer window", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the transaction is within Intra-SP Transfer window. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card, the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing the functionality of the SA Tool when the transaction is within Inter-SP Transfer window", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the transaction is within Inter-SP Transfer window. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card; the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Testing the functionality of the SA Tool when the Virtual Card is unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it detects a Virtual Card but fails to read it correctly. The test will involve the customer tapping on the NFC reader again and the SA Tool application indicating to the operator that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Testing the functionality of the SA Tool when the customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The test will involve the SA Tool showing the successful fare payment screen for non-adult concession and playing the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Testing the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount. The test will involve the device sending the tap to ATS for processing, ATS checking the online hotlist and completing the fare processing, and ATS removing the fare from the Virtual Card e-Purse and putting the card into overdraft."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Testing the functionality of the SA Tool when the transaction is within the Intra-SP Transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product and the transaction is within the Intra-SP Transfer window. The test will involve ATS reading that the Virtual Card contains a valid intra-agency transfer product and deducting $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Testing the functionality of the SA Tool when the transaction is within the Inter-SP Transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product from another service provider and the transaction is within the Inter-SP Transfer window. The test will involve ATS reading that the Virtual Card contains a valid inter-agency transfer product and deducting $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Testing the functionality of the SA Tool when the customer requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer requests audio messages for fare payment. The test will involve the operator enabling audio mode and changing the volume level using the physical device buttons at the customer's discretion."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Testing the functionality of the SA Tool when the Daily Cap is reached outside of Transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the fare payment is being made on the SA Tool, the Farecard has reached Daily Cap Limit, and the Farecard is out of transfer window. The test will involve ATS deducting no fare since the Daily Cap is reached."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Testing the functionality of the SA Tool when a tap on a premium service or special route/location results in a fare payment for the premium or special event fare amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the fare payment is being made on the SA Tool and the Service Class is Premium or Special Event. The test will involve ATS computing the fare and deducting the amount from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Testing the functionality of the SA Tool when a tap on a premium service or special event route/location after previously riding on a regular service route results in a fare upgrade", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the fare payment is being made on the SA Tool, the Service Class is Premium or Special Event, the Farecard has a valid Regular Service Transfer Product, and the Tap is within Transfer Window. The test will involve ATS computing the fare and deducting the amount from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing the functionality of the SA Tool when the Virtual Card is unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it detects a Virtual Card but is unable to read it. The test will involve the customer tapping on the NFC reader again and the SA Tool application indicating to the operator that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing the fare payment process for non-adult concession on the SA Tool", "Test_Sce_Description": "This scenario tests the fare payment process when the customer's Virtual Card has a valid non-adult, non-child, non-discreet concession. The test will involve the SA Tool showing the successful fare payment screen for non-adult concession and playing the successful fare payment audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing the fare payment process when the customer's ePurse balance is less than the fare amount", "Test_Sce_Description": "This scenario tests the fare payment process when the customer's ePurse balance is less than the fare amount. The test will involve the device sending the tap to ATS for processing, ATS removing the fare from the Virtual Card e-Purse and putting the card into overdraft, and the device providing the appropriate feedback to the Cardholder of a successful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing the fare payment process when the transaction is within the Intra-SP Transfer window", "Test_Sce_Description": "This scenario tests the fare payment process when the customer's Virtual Card has a valid transfer product and the transaction is within the Intra-SP Transfer window. The test will involve ATS reading that the Virtual Card contains a valid intra-agency transfer product and deducting $0 from the Virtual Card E-Purse, and the device providing the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing the fare payment process when the transaction is within the Inter-SP Transfer window", "Test_Sce_Description": "This scenario tests the fare payment process when the customer's Virtual Card has a valid transfer product from another service provider and the transaction is within the Inter-SP Transfer window. The test will involve ATS reading that the Virtual Card contains a valid inter-agency transfer product and deducting $0 from the Virtual Card E-Purse, and the device providing the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing the fare payment process when the customer requests audio messages", "Test_Sce_Description": "This scenario tests the fare payment process when the customer requests audio messages for fare payment. The test will involve the operator enabling audio mode, changing the volume level at the customer's discretion, and the SA Tool playing the corresponding audio message in the default language of the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing the fare payment process when the daily cap is reached outside of the transfer window on the SA Tool", "Test_Sce_Description": "This scenario tests the fare payment process when the Farecard has reached the daily cap limit and is out of the transfer window. The test will involve ATS deducting no fare since the daily cap is reached."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing the fare payment process for a premium service or special route/location on the SA Tool", "Test_Sce_Description": "This scenario tests the fare payment process when the service class is premium or special event. The test will involve ATS computing the fare and deducting the amount from the Virtual Card E-Purse, and the SA Tool providing the appropriate feedback to the Cardholder of a successful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing the fare payment process for a premium service or special route/location with fare upgrade on the SA Tool", "Test_Sce_Description": "This scenario tests the fare payment process when the service class is premium or special event, the Farecard has a valid regular service transfer product, and the tap is within the transfer window. The test will involve ATS computing the fare and deducting the amount from the Virtual Card E-Purse, and the SA Tool providing the appropriate feedback to the Cardholder of a successful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass within valid time", "Test_Sce_Description": "Verify that the SA Tool correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the valid time. The farecard should have a valid Limited Period Pass product on it and the time at tap should be within the time limit of the Limited Period Pass Product."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "Verify that the SA Tool correctly accepts fare payment from a virtual card with a valid Limited Period Pass outside the valid time but with sufficient e-Purse balance. The farecard should have a valid Limited Period Pass product on it and the time at tap should be outside the time limit of the Limited Period Pass Product."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "Verify that the SA Tool correctly declines fare payment from an anonymous virtual card with an expired period pass and ePurse balance less than the fare amount. The customer should have an expired period pass, ePurse balance less than the fare amount and an anonymous Virtual Card."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "Verify that the SA Tool correctly declines fare payment from a blocked virtual card. The customer\u2019s Farecard should be blocked."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "Verify that the SA Tool correctly declines fare payment from a virtual card on the Deny List. The customer\u2019s Virtual Card should be on the Deny List."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment even when the battery goes below the low battery threshold during payment. The low battery threshold should be high enough that the remote lists can be processed even after the SA Tool battery goes below the low battery threshold during a successful Farecard tap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card Has Sufficient ePurse Balance and an Expired Period Pass", "Test_Sce_Description": "Verify that the SA Tool correctly accepts fare payment from a virtual card with sufficient ePurse balance and an expired period pass. The customer\u2019s Virtual Card should have an expired period pass and ePurse balance more than the fare amount."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount and an Expired Period Pass", "Test_Sce_Description": "Verify that the SA Tool correctly accepts fare payment from a registered virtual card with positive ePurse balance less than the fare amount and an expired period pass. The customer\u2019s ePurse balance should be less than the fare amount and the Virtual Card should have an expired period pass."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Farecard using Period Pass - Transaction is within Inter-SP Transfer window", "Test_Sce_Description": "Verify that the SA Tool correctly accepts fare payment from a farecard with a valid transfer product from other service provider within the Inter-SP Transfer window. A transfer agreement between the service providers should have been established."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Farecard using Period Pass \u2013 Customer requests Audio Messages", "Test_Sce_Description": "Verify that the SA Tool correctly provides audio messages for fare payment when requested by the customer. The customer should ask to pay for the trip with their Virtual Card and request audio messages for fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass within valid time", "Test_Sce_Description": "This scenario involves testing the functionality of the SA Tool when a fare payment is made using a Virtual Card with a valid Limited Period Pass within the valid time. The test will ensure that the fare payment is accepted and processed correctly by the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario involves testing the functionality of the SA Tool when a fare payment is made using a Virtual Card with a valid Limited Period Pass outside the valid time but with sufficient e-Purse balance. The test will ensure that the fare payment is accepted and processed correctly by the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario involves testing the functionality of the SA Tool when a fare payment is made using an Anonymous Virtual Card with an expired Period Pass and ePurse balance less than the fare amount. The test will ensure that the fare payment is declined and the correct message is displayed to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "This scenario involves testing the functionality of the SA Tool when a fare payment is made using a blocked Virtual Card. The test will ensure that the fare payment is declined and the correct message is displayed to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario involves testing the functionality of the SA Tool when a fare payment is made using a Virtual Card that is on the Deny List. The test will ensure that the fare payment is declined, the card is set to blocked, and the correct message is displayed to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario involves testing the functionality of the SA Tool when the battery goes below the low battery threshold during a fare payment. The test will ensure that the fare payment is processed correctly even when the battery level is low."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card Has Sufficient ePurse Balance and an Expired Period Pass", "Test_Sce_Description": "This scenario involves testing the functionality of the SA Tool when a fare payment is made using a Virtual Card with sufficient ePurse balance and an expired Period Pass. The test will ensure that the fare payment is accepted and processed correctly by the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount and an Expired Period Pass", "Test_Sce_Description": "This scenario involves testing the functionality of the SA Tool when a fare payment is made using a Registered Virtual Card with positive ePurse balance less than the fare amount and an expired Period Pass. The test will ensure that the fare payment is accepted, the Virtual Card is put into overdraft, and processed correctly by the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Farecard using Period Pass - Transaction is within Inter-SP Transfer window", "Test_Sce_Description": "This scenario involves testing the functionality of the SA Tool when a fare payment is made using a Farecard with a valid transfer product from another service provider within the Inter-SP Transfer window. The test will ensure that the fare payment is accepted and processed correctly by the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Farecard using Period Pass \u2013 Customer requests Audio Messages", "Test_Sce_Description": "This scenario involves testing the functionality of the SA Tool when a customer requests audio messages for fare payment. The test will ensure that the audio messages are played correctly and the fare payment is processed correctly by the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass within valid time", "Test_Sce_Description": "Verify that the SA Tool correctly accepts fare payment from a Virtual Card using a Limited Period Pass within its valid time. The farecard should have a valid Limited Period Pass product on it and the time at tap should be within the time limit of the Limited Period Pass Product."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "Verify that the SA Tool correctly accepts fare payment from a Virtual Card using a Limited Period Pass outside its valid time but with sufficient e-Purse balance. The farecard should have a valid Limited Period Pass product on it and the time at tap should be outside the time limit of the Limited Period Pass Product."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "Verify that the SA Tool correctly declines fare payment from an Anonymous Virtual Card with an expired Period Pass and ePurse balance less than the fare amount. The customer should have an expired period pass, ePurse balance less than the fare amount and an anonymous Virtual Card."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "Verify that the SA Tool correctly declines fare payment from a blocked Virtual Card. The customer\u2019s Farecard should be blocked."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "Verify that the SA Tool correctly declines fare payment from a Virtual Card on the Deny List. The customer\u2019s Virtual Card should be on the Deny List."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the battery goes below the low battery threshold during payment. The low battery threshold should be high enough that the remote lists can be processed even after the SA Tool battery goes below the low battery threshold during a successful Farecard tap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Tap counter is at the configured limit", "Test_Sce_Description": "Verify that the SA Tool correctly declines fare payment when the tap counter is at the limit. The tap counter should be at the configured limit."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the Virtual Card is unreadable. The SA Tool application should detect the Virtual Card and fail to read it correctly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card Has Sufficient ePurse Balance and an Expired Period Pass", "Test_Sce_Description": "Verify that the SA Tool correctly accepts fare payment from a Virtual Card with sufficient ePurse balance and an expired Period Pass. The customer\u2019s Virtual Card should have an expired period pass and ePurse balance more than the fare amount."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario tests the functionality of the Online SA Tool when a customer tries to make a fare payment using a Virtual Card that has a valid Limited Period Pass but the current time is outside the time limits of the product. The farecard should have sufficient e-Purse balance to cover the transaction. The ATS should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, and deduct the fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the Online SA Tool when a customer tries to make a fare payment using an Anonymous Farecard that has an expired period pass and the ePurse balance is less than the fare amount. The ATS should detect the card is Anonymous and the ePurse Balance is less than the fare amount, and return a declined result back to the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the Online SA Tool when a customer tries to make a fare payment using a blocked Virtual Card. The ATS should detect the card is blocked, and return a declined result back to the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario tests the functionality of the Online SA Tool when a customer tries to make a fare payment using a Virtual Card that is on the Deny List. The ATS should detect the card is on the Deny List, remove the card from the Deny List and set it to blocked, and return a declined result back to the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the Online SA Tool when the battery goes below the low battery threshold during a fare payment. The low battery threshold should be high enough that the remote lists can be processed even after the SA Tool battery goes below the low battery threshold during a successful Farecard tap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Testing Fare Payment from a Farecard using Period Pass - Customer\u2019s Farecard is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the Online SA Tool when a customer tries to make a fare payment using a blocked Farecard. The SA Tool application should detect that the Farecard is blocked, and display a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Testing Fare Payment from a Farecard using Period Pass - Customer\u2019s Farecard is on the Hotlist", "Test_Sce_Description": "This scenario tests the functionality of the Online SA Tool when a customer tries to make a fare payment using a Farecard that is on the hotlist. The SA Tool application should detect that the Farecard is on the hotlist, update the card\u2019s status to blocked, and display a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Testing Fare Payment from a Farecard using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the Online SA Tool when the battery goes below the low battery threshold during a fare payment. The low battery threshold should be high enough that the remote lists can be processed even after the SA Tool battery goes below the low battery threshold during a successful Farecard tap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Testing Fare Payment from a Farecard using Period Pass \u2013 Customer taps a card that is not a Farecard", "Test_Sce_Description": "This scenario tests the functionality of the Online SA Tool when a customer tries to make a fare payment using a card that is not a Farecard. The SA Tool should display the \u201cCard Read Error\u201d toast message for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Testing Fare Payment from a Farecard using Period Pass \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the Online SA Tool when a customer tries to make a fare payment using a Farecard that is within the Anti-Passback Window. The device should detect that the Farecard fails the Anti-Passback checks, and the SA Tool application should display a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Testing Fare Payment from a Farecard using Period Pass \u2013 Customer taps a non-activated card", "Test_Sce_Description": "This scenario tests the functionality of the Online SA Tool when a customer tries to make a fare payment using a non-activated card. The customer\u2019s card should not be on the action list available on the device."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the deny list", "Test_Scnario": "Open Payments Media is on the deny list", "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the deny list", "Test_Scnario": "Open Payments Media is on the local deny list and device is offline", "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the deny list", "Test_Scnario": "Multiple NFC media are presented to the device at one time", "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the deny list", "Test_Scnario": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Sce_Description": "Verify that when the device is in Out-of-Service state, the Not In Service Screen is provided to the cardholder when they attempt to tap their Open Payments Media on the card reader. The device should not detect the media and should remain in Out-of-Service State."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the deny list", "Test_Scnario": "Customer attempts to tap on and an error has occurred", "Test_Sce_Description": "Verify that when an error has occurred on the device that does not cover the exception cases above, the device records the tap. The Declined \u2013 See Customer Service Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the deny list", "Test_Scnario": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Sce_Description": "Verify that when the Open Payments Media is not on the approved media list and the device is in beta mode, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or the Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the deny list", "Test_Scnario": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)", "Test_Sce_Description": "Verify that when the cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the deny list", "Test_Scnario": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is offline (anti-passback)", "Test_Sce_Description": "Verify that when the cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window and the device is offline, the device should not detect the media and should remain in Out-of-Service State."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Open Payments Media is on the deny list", "Test_Sce_Description": "This scenario tests the functionality of the system when the Open Payments Media is on the deny list. The system should not confer the right to travel. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Open Payments Media is on the local deny list and device is offline", "Test_Sce_Description": "This scenario tests the functionality of the system when the Open Payments Media is on the local deny list and the device is offline. The system should not confer the right to travel. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Multiple NFC media are presented to the device at one time", "Test_Sce_Description": "This scenario tests the functionality of the system when multiple NFC media are presented to the device at one time. The device should block all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Sce_Description": "This scenario tests the functionality of the system when the SA Tool is in Out-of-Service state. The device should not detect the media and remain in Out-of-Service State."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Customer attempts to tap on and an error has occurred", "Test_Sce_Description": "This scenario tests the functionality of the system when an error has occurred on the device. The device should record the tap and provide the Declined \u2013 See Customer Service Screen to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Sce_Description": "This scenario tests the functionality of the system when the customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode. The system should not confer the right to travel. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)", "Test_Sce_Description": "This scenario tests the functionality of the system when the customer attempts to tap-on immediately after tapping-off at the same station and the device is online. The device should send the tap to ATS and return a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is offline (anti-passback)", "Test_Sce_Description": "This scenario tests the functionality of the system when the customer attempts to tap-on immediately after tapping-off at the same station and the device is offline. The device should not detect the tap and remain in the offline state."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Multiple NFC media presented to the device at once", "Test_Sce_Description": "This scenario will test the functionality of the device when multiple NFC media are presented at once. The device should block all fare payment functionality and present an Anti-Collision toast message to the customer. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Non-activated Farecard tapped on the device", "Test_Sce_Description": "This scenario will test the functionality of the device when a non-activated Farecard is tapped. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Card reading error occurs when Farecard is tapped", "Test_Sce_Description": "This scenario will test the functionality of the device when a Farecard is tapped and a card reading error occurs. The device should not provide any feedback and screen remains \u201cIn-Service\u201d display. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Card write error occurs when Farecard is tapped", "Test_Sce_Description": "This scenario will test the functionality of the device when a Farecard is tapped and a card write error occurs. The device should not provide any feedback and screen remains \u201cIn-Service\u201d display. The device should delete the transaction information. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Farecard tapped when device is in Out-of-Service state", "Test_Sce_Description": "This scenario will test the functionality of the device when a Farecard is tapped while the device is in an Out-of-Service state. The device should not detect the media and remain in the Out-of-Service state."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Virtual Card Media tapped when device is in Out-of-Service state", "Test_Sce_Description": "This scenario will test the functionality of the device when a Virtual Card Media is tapped while the device is in an Out-of-Service state. The device should not detect the media and remain in the Out-of-Service state."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Customer attempts to tap-on immediately after tapping-off at the same station and the device is online", "Test_Sce_Description": "This scenario will test the functionality of the device when a customer attempts to tap-on immediately after tapping-off at the same station and the device is online. The device should send the tap to ATS which returns a response that the cardholder has already tapped on at the same station and is within the Tap-off anti-passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Customer attempts to tap-on immediately after tapping-off at the same station and the device is offline", "Test_Sce_Description": "This scenario will test the functionality of the device when a customer attempts to tap-on immediately after tapping-off at the same station and the device is offline. The device should check the latent transaction processor on the same device for a previous tap within the tap-off anti-passback window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Error occurs when customer attempts to tap on", "Test_Sce_Description": "This scenario will test the functionality of the device when an error occurs as a customer attempts to tap on. The device should record the tap and provide the Declined \u2013 See Customer Service Screen to the cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Virtual Card has insufficient E-Purse to cover the Tap-On Fare", "Test_Sce_Description": "This scenario will test the functionality of the device when a Virtual Card has insufficient E-Purse to cover the Tap-On Fare. The device should detect the insufficient balance and provide the appropriate feedback to the cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing Open Payments Media tap when SA Tool is in Out-of-Service state", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader. The expected outcome is that the device will not detect the media and remain in the Out-of-Service state."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing Open Payments Media tap when SA Tool is configured for Farecard reversals only", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is configured for only farecard reversals and a customer attempts to tap their Open Payments Media on the card reader. The expected outcome is that the device will display an error message indicating that it is only available for Farecard reversals."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing Open Payments Media tap with unapproved media in Pilot mode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Pilot mode and a customer attempts to tap an Open Payments Media that is not on the approved media list. The expected outcome is that the device will display a 'Declined \u2013 Not Accepted, Tap Farecard' screen to the cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing Open Payments Media tap with media on the BIN Blocking List", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to tap an Open Payments Media that is on the BIN Blocking List. The expected outcome is that the device will play a decline audio tone and display a 'Declined \u2013 Try Another Card (BIN Blocked)' screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing fare payment reversal with Interac Card while Interac is disabled on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to reverse a fare payment with an Interac Card while Interac is disabled on the device. The expected outcome is that the device will display an error message and the fare payment reversal will not be recorded."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing fare payment reversal with Open Payment Card while Open Payments are disabled on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to reverse a fare payment with an Open Payment Card while Open Payments are disabled on the device. The expected outcome is that the device will display an error message and the fare payment reversal will not be recorded."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing fare payment reversal with Open Payment Card while corresponding payment method / card brand is disabled on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to reverse a fare payment with an Open Payment Card while the corresponding payment method / card brand is disabled on the device. The expected outcome is that the device will display an error message and the fare payment reversal will not be recorded."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing SA Tool in Standby State", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Standby state. The expected outcome is that the device will disconnect from all peripherals to conserve battery life and the screen will turn off."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing SA Tool in Revenue Mode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Revenue Mode. The expected outcome is that the device will allow the operator to interact with customers and perform various operations such as inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing SA Tool in Training Mode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Training Mode. The expected outcome is that the device will mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Error Occurrence on Device", "Test_Sce_Description": "Validate the functionality of the device when an error occurs that does not cover the exception cases. This includes checking if the device records the tap, provides the 'Declined \u2013 Please Contact Customer Service' screen to the cardholder, and sends the declined tap to ATS."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Open Payments Media Not on Approved List", "Test_Sce_Description": "Test the device's response when an Open Payments media not on the approved media list is tapped while the device is in Pilot mode. The device should check the approved media list and provide the 'Declined \u2013 Not Accepted, Tap Farecard' screen to the cardholder if the media is not found on the list."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Open Payments Media on BIN Blocking List", "Test_Sce_Description": "Verify the device's functionality when the customer\u2019s Open Payments Media is on the BIN Blocking List. The device should check its local BIN Blocking list, play the decline audio tone and display the 'Declined \u2013 Try Another Card (BIN Blocked)' screen if the card\u2019s BIN is found to be on the BIN Blocking List."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Interac Card Decline Due to Media In Debt", "Test_Sce_Description": "Test the device's response when a customer is travelling with an Interac Card, and ATS returns a decline response due to Media In Debt. The device should send the tap to ATS and return a response that the Interac media is on the deny list, and not confer the right to travel."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Interac Card on Local Deny List", "Test_Sce_Description": "Validate the device's functionality when a customer is travelling with an Interac Card, the device is offline, and Interac media is on the local deny list due to Media In Debt. The device should check the local deny list instead of sending the tap to ATS, and not confer the right to travel if the media is on the local deny list."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Interac Card Tap While Interac is Disabled", "Test_Sce_Description": "Test the device's response when a customer taps Interac Card while Interac is disabled on SA Tool. The device should detect the Interac media, determine that the media tapped is not supported, display an error message, and not record a transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Open Payment Card Tap While Open Payments are Disabled", "Test_Sce_Description": "Verify the device's functionality when a customer taps Open Payment Card while Open Payments are disabled on SA Tool. The device should record the tap, provide the 'Declined \u2013 See Customer Service Screen' to the cardholder, capture and log an error in the background, and send the declined tap to ATS."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Insufficient E-Purse Balance on Virtual Card", "Test_Sce_Description": "Test the device's response when a Virtual Card\u2019s E-Purse balance is less than that of the Tap-On Fare. The device should send the tap to ATS which returns a response that the virtual card does not have a sufficient E-Purse balance to cover the tap-on fare, and provide the 'Declined \u2013 Insufficient E-Purse Balance' to the cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Virtual Card Media on Online Hotlist", "Test_Sce_Description": "Validate the device's functionality when the Virtual Card media is on the online hotlist. The device should send the tap to ATS and return a response that the media is on the online hotlist, not confer the right to travel, provide the 'Declined \u2013 Blocked Screen' to the cardholder, and update the blocking parameter on the Virtual Card Scratchpad to be enabled."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Virtual Card Media on Local Hotlist", "Test_Sce_Description": "Test the device's response when the Virtual Card media is on the local hotlist and the device is offline. The device should check the local hotlist instead of sending the tap to ATS, and not confer the right to travel if the media is on the local hotlist."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Open Payments Media on the deny list", "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Open Payments Media on the local deny list and device is offline", "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Multiple NFC media presented to the device at one time", "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Sce_Description": "Verify that when the SA Tool is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Customer attempts to tap on and an error has occurred", "Test_Sce_Description": "Verify that when an error has occurred on the device that does not cover the exception cases above, the device records the tap. The Declined \u2013 See Customer Service Screen should be provided to the cardholder. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Sce_Description": "Verify that when a customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)", "Test_Sce_Description": "Verify that when a cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is offline (anti-passback)", "Test_Sce_Description": "Verify that when a cardholder taps-on again at an SA Tool after just tapping-off at the same station and the device is offline, the device should not allow the tap and should display an error message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)", "Test_Scnario": "Testing the Anti-passback feature of the SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to tap-on immediately after tapping-off at the same station. The device should check the latent transaction processor for a previous tap within the anti-passback window and store the tap until it is connected to ATS for reconciliation. The device should then display the 'Declined \u2013 Already Tapped' screen and log an error in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)", "Test_Scnario": "Testing the error handling of the SA Tool", "Test_Sce_Description": "This scenario will test how the SA Tool handles errors that do not fall under the exception cases. The device should record the tap, display the 'Declined \u2013 See Customer Service' screen, log an error in the SOTI logs, and send the declined tap to ATS."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)", "Test_Scnario": "Testing the beta mode of the SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in beta mode and an Open Payments media not on the approved media list is tapped. The device should check the approved media list, display the 'Declined \u2013 Tap Farecard' screen if the media is not approved, log an error in the SOTI logs, and send the declined tap to ATS."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)", "Test_Scnario": "Testing the BIN Blocking List of the SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's Open Payments Media is on the BIN Blocking List. The device should check its local BIN Blocking list, play the decline audio tone and display the 'Declined \u2013 BIN Blocked' screen if the media is on the list, log an error in the SOTI logs, and send the decline to ATS."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)", "Test_Scnario": "Testing the Interac Card handling of the SA Tool", "Test_Sce_Description": "This scenario will test how the SA Tool handles an Interac Card that is on the deny list. The device should send the tap to ATS, not confer the right to travel if the media is on the deny list, display the 'Declined \u2013 Interac Unpaid Fares Online' screen, and log an error in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)", "Test_Scnario": "Testing the handling of blocked Farecards by the SA Tool", "Test_Sce_Description": "This scenario will test how the SA Tool handles a blocked Farecard. The device should detect that the Farecard is blocked, not confer the right to travel, provide the appropriate feedback to the Cardholder, and log an error in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)", "Test_Scnario": "Testing the handling of multiple NFC media by the SA Tool", "Test_Sce_Description": "This scenario will test how the SA Tool handles multiple NFC media presented at once. The device should block all user functionality, present the Anti-Collision HMI to the customer, and log an error in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)", "Test_Scnario": "Testing the handling of non-activated Farecards by the SA Tool", "Test_Sce_Description": "This scenario will test how the SA Tool handles a non-activated Farecard. The device should detect that the Farecard is not activated, provide feedback to the Cardholder of an unsuccessful transaction, and log an error in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)", "Test_Scnario": "Testing the handling of card reading errors by the SA Tool", "Test_Sce_Description": "This scenario will test how the SA Tool handles a card reading error. The device should log an error in the SOTI logs when a Cardholder taps a Farecard and a Card reading error occurs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Temporal Class Supplement Tap-On Transaction", "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the device correctly displays the Temporal Class on the HMI and processes the Tap-On Transaction as a normal tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Autoload Enabled Farecard Transaction", "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the device correctly adds the Autoload amount to the E-Purse balance and deducts the Fare from the Farecard E-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Default Trip Override", "Test_Sce_Description": "Verify that when a Farecard without a Default O/D is tapped on a device in Override mode, the device correctly processes the tap as a result tap-on and provides appropriate feedback to the Cardholder of a successful transaction and that the Default Trip was overridden."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Audio Messages Request", "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator correctly enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Farecard Validation Failure at Tap-On", "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device correctly provides the appropriate feedback to the cardholder without updating the Farecard and logs the error in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Blocked Farecard", "Test_Sce_Description": "Verify that when a blocked Farecard is tapped on a device, the device correctly does not confer the right to travel and provides the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Max Travel Duration Exceeded", "Test_Sce_Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device correctly auto-settles the Underpayment and opens a new trip."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Multiple NFC Media Presentation", "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device correctly blocks all fare payment functionality and presents Anti-Collision HMI to customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Non-Activated Farecard Tap-On", "Test_Sce_Description": "Verify that when a non-activated Farecard is tapped on the device, the device correctly detects that the Farecard is not activated and provides feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Card Reading Error", "Test_Sce_Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device correctly detects the error and provides appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Testing Autoload functionality when Farecard is tapped on BFTP device", "Test_Sce_Description": "This scenario is to test if the Autoload functionality works as expected when the Farecard is tapped on a BFTP device and the Fare amount crosses the Auto-load threshold. The device should detect that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, which triggers the Autoload amount to be added to the Farecard. The device should then deduct the Fare from the Farecard E-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Testing feedback to the Cardholder when Autoload is successful on TTC device", "Test_Sce_Description": "This scenario is to test if the TTC device provides the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the autoload was successful. The feedback should be in line with the specifications mentioned in [R1]."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Testing ticketing logic for Autoload Processing on Transit Agency device", "Test_Sce_Description": "This scenario is to test if the ticketing logic for Autoload Processing works as expected on a Transit Agency device. The details of the ticketing logic for Autoload Processing should be in line with the specifications mentioned in section 5.11 within [R6]."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Testing performance of Autoload functionality on BFTP device", "Test_Sce_Description": "This scenario is to test the performance of the Autoload functionality on a BFTP device. The device should be able to handle multiple autoload transactions without any performance issues."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Testing security of Autoload transactions on TTC device", "Test_Sce_Description": "This scenario is to test the security of Autoload transactions on a TTC device. The device should ensure that the Autoload transactions are secure and there is no unauthorized access to the Farecard data."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Testing Autoload functionality during Exception Flow on Transit Agency device", "Test_Sce_Description": "This scenario is to test the Autoload functionality during the Exception Flow on a Transit Agency device. The device should be able to handle exceptions and still perform the Autoload functionality as expected."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Testing Autoload functionality during Alternate Flow on BFTP device", "Test_Sce_Description": "This scenario is to test the Autoload functionality during the Alternate Flow on a BFTP device. The device should be able to handle alternate flows and still perform the Autoload functionality as expected."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Fare-by-Zone transaction processing with default O/D on Farecard", "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. The default trip should use PAR as the card identifier."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Override of default O/D on Open Payments Media", "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on. The customer should be able to request the override of a Default Trip by interacting with the Device. The Device HMI should inform the customer that the Device is prepared to override the Default Trip."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Capping discount eligibility check", "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list and complete the fare processing. ATS should calculate the capping discount and apply to the fare calculation."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Multiple capping discounts eligibility check", "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list and complete the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS should take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Capping discount eligibility check when device is offline", "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services. The tap should then be rated in ATS. Capping rules should follow use-case logic outlined in ticketing use cases."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Handling of Open Payments Media failing ODA check", "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Handling of mismatch between Farecard tapped during identification and write tap", "Test_Sce_Description": "Verify that if the Farecard tapped during the write tap does not match the Farecard tapped during the identification tap, the SA checks if the serial number matches the serial number detected in the identification tap. The SA should detect that the Farecard tapped during the write tap does not match the Farecard tapped during the identification tap. The SA should display an error message and prompt the operator to tap the correct card in order to proceed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Handling of customer\u2019s Farecard in underpayment", "Test_Sce_Description": "Verify that if the customer\u2019s card is in underpayment, the identification tap will detect the underpayment amount. The operator should inform the customer that they are in underpayment. The operator must determine whether the customer has missed a tap off or just tapped on (and would like to add funds while waiting for their vehicle). They can do this in two ways: Ask the customer directly or Verify by checking the last tap information on the Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of SA Tool when Non-Revenue farecard is tapped in the training mode", "Test_Sce_Description": "This scenario will test if the SA Tool accepts the Non-Revenue farecard when it is tapped in the training mode. The expected outcome is that the device should accept the card and not display a declined HMI."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of SA Tool when Farecard is tapped during a time period that contains an associated Temporal Class Supplement", "Test_Sce_Description": "This scenario will test if the SA Tool correctly processes the Tap-On Transaction as a normal tap-on when the Farecard is tapped during a time period that contains an associated Temporal Class Supplement. The expected outcome is that the device should display an HMI reflecting the Temporal Class Supplement and process the transaction normally."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of SA Tool when Farecard with Autoload Enabled is tapped and the Fare amount crosses the Auto-load threshold", "Test_Sce_Description": "This scenario will test if the SA Tool correctly adds the Autoload amount to the E-Purse balance when the Farecard with Autoload Enabled is tapped and the Fare amount crosses the Auto-load threshold. The expected outcome is that the device should detect that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, trigger the Autoload amount to be added to the Farecard, and deduct the Fare from the Farecard E-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of SA Tool when Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Sce_Description": "This scenario will test if the SA Tool correctly processes the tap as a result tap-on when the Farecard with no Default O/D is tapped on while the device is in Override mode. The expected outcome is that the device should process the tap as a result tap-on and provide the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the Default Trip was overridden."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of SA Tool when Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard and requests Audio Messages", "Test_Sce_Description": "This scenario will test if the SA Tool correctly plays the requested audio messages for the fare payment when the Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard and requests Audio Messages. The expected outcome is that the device should enable audio mode, display the fare payment screen to the operator and customer for the duration of the audio message, and play the corresponding audio message to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of SA Tool when Farecard fails validation checks at Tap-On", "Test_Sce_Description": "This scenario will test how the SA Tool handles a situation where the Farecard fails validation checks at Tap-On. The expected outcome is that the device should display an error message and not process the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of SA Tool when accepting Fare Payment from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes and deducts the Upgrade fare when accepting Fare Payment from a Virtual Card using Period Pass where the Service class fare value is lower than the current route/location Service Class fare value. The expected outcome is that the device should compute and deduct the Upgrade fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of SA Tool when accepting Fare Payment from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Sce_Description": "This scenario will test if the SA Tool correctly accepts the period pass fare payment when accepting Fare Payment from a Virtual Card using Period Pass where the Service class fare value is greater than the current route/location Service Class fare value. The expected outcome is that the device should accept the period pass fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of SA Tool when accepting Fare Payment from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Sce_Description": "This scenario will test if the SA Tool correctly accepts the fare payment when the Farecard has a valid Limited Period Pass and the current time is within the limits of the product. The expected outcome is that the device should accept the fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of SA Tool when accepting Fare Payment from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario will test if the SA Tool correctly deducts the fare from the e-Purse balance when the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction. The expected outcome is that the device should deduct the fare from the e-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Farecard Validation Check at Tap-On", "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard fails the necessary validation checks. The device should return the appropriate feedback, and the right to travel should not be conferred."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Cardholder Taps-On Again at Same Station", "Test_Sce_Description": "This scenario tests the device's response when the cardholder taps-on again at the same station within the SA Tool Tap-on anti-passback Window. The device should provide the appropriate feedback to the cardholder without updating the Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Insufficient E-Purse Balance for Tap-On Fare", "Test_Sce_Description": "This scenario tests the device's response when a Farecard\u2019s E-Purse balance is less than that of the Tap-On Fare. The right to travel should not be conferred and the device should provide the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Blocked Farecard", "Test_Sce_Description": "This scenario tests the device's response when a blocked Farecard is used. The right to travel should not be conferred and the device should provide the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Multiple NFC Media Presented at Once", "Test_Sce_Description": "This scenario tests the device's response when multiple NFC media are presented to the device at one time. The device should block all fare payment functionality and present an Anti-Collision toast message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Non-Activated Farecard", "Test_Sce_Description": "This scenario tests the device's response when a non-activated Farecard is tapped on the device. The transaction should be unsuccessful and the device should provide feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Card Reading Error", "Test_Sce_Description": "This scenario tests the device's response when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs. The device should capture and log the error in the background and in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Performance of Device During Peak Hours", "Test_Sce_Description": "This scenario tests the performance of the device during peak hours. The device should be able to handle multiple transactions simultaneously without any lag or delay."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Security of Farecard Data", "Test_Sce_Description": "This scenario tests the security measures in place to protect Farecard data. The device should encrypt all Farecard data to prevent unauthorized access."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type", "Test_Scnario": "Incorrect Farecard Type Tapped on SA Tool", "Test_Sce_Description": "Validate the functionality of the SA Tool when an incorrect Farecard type is tapped. The test will ensure that the SA Tool correctly identifies the Farecard type and notifies the operator of the incorrect Farecard type. The test will also verify that the use case terminates as expected."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type", "Test_Scnario": "Non-Farecard Tapped on SA Tool", "Test_Sce_Description": "Test the SA Tool's ability to identify when a non-Farecard is tapped to the reader. The test will ensure that the SA Tool correctly identifies the card as a non-Farecard and displays an appropriate error pop up message."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type", "Test_Scnario": "Failure to Read Virtual Card on SA Tool", "Test_Sce_Description": "Validate the SA Tool's ability to handle situations where it fails to read a Virtual Card. The test will ensure that the SA Tool correctly indicates to the operator that the Virtual Card read has failed and allows the operator to retry reading the card."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type", "Test_Scnario": "Non-Virtual Card Tapped on SA Tool", "Test_Sce_Description": "Test the SA Tool's ability to identify when a non-Virtual Card is tapped to the reader. The test will ensure that the SA Tool correctly identifies the card as a non-Virtual Card and displays an appropriate error pop up message."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type", "Test_Scnario": "Blocked/Hotlisted Virtual Card on SA Tool", "Test_Sce_Description": "Validate the SA Tool's ability to detect when a customer's Virtual Card is blocked or hotlisted. The test will ensure that the SA Tool correctly identifies the blocked card and displays the Farecard query screen, preventing further actions on the Farecard."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type", "Test_Scnario": "Ineligible Products in SA Tool Shopping Cart", "Test_Sce_Description": "Test the SA Tool's ability to handle situations where ineligible products are added to the shopping cart. The test will ensure that the SA Tool correctly identifies the ineligible products and allows the operator to remove them from the cart."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type", "Test_Scnario": "ATS Failure to Load Products on SA Tool", "Test_Sce_Description": "Validate the SA Tool's ability to handle situations where ATS fails to load products to the customer's account. The test will ensure that the SA Tool correctly informs the operator of the failure and allows the operator to retry the checkout or provide a refund if the customer paid with cash."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type", "Test_Scnario": "Mismatched Farecard Tapped on SA Tool", "Test_Sce_Description": "Test the SA Tool's ability to detect when the Farecard tapped during the write tap does not match the Farecard tapped during the identification tap. The test will ensure that the SA Tool correctly identifies the mismatch and displays an appropriate error message."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type", "Test_Scnario": "Underpayment Handling on SA Tool", "Test_Sce_Description": "Validate the SA Tool's ability to handle situations where a customer's Farecard is in underpayment. The test will ensure that the SA Tool correctly detects the underpayment amount and allows the operator to handle the underpayment as per the defined process."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Incorrect Farecard Type Tapped on SA Tool", "Test_Sce_Description": "Validate the system's response when an incorrect Farecard type is tapped on the SA Tool. The system should identify the Farecard type, determine it's incorrect for the current mode, and notify the operator. The use case should then terminate."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Non-Farecard Tapped on SA Tool", "Test_Sce_Description": "Test the system's response when a Non-Farecard is tapped on the SA Tool. The system should identify the card as a non-Farecard and display an error pop-up message."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Failure to Read Virtual Card on SA Tool", "Test_Sce_Description": "Validate the system's response when the SA Tool fails to read a Virtual Card. The system should indicate to the operator that the Virtual Card read has failed. The operator should then close the error prompt and attempt to tap the card again."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Non-Virtual Card Tapped on SA Tool", "Test_Sce_Description": "Test the system's response when a Non-Virtual Card is tapped on the SA Tool. The system should identify the card as a non-Virtual Card and display an error pop-up message."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Blocked/Hotlisted Virtual Card on SA Tool", "Test_Sce_Description": "Validate the system's response when a blocked Virtual Card is tapped on the SA Tool. The system should detect that the Farecard is blocked and display the Farecard query screen indicating that the Farecard has been blocked."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Ineligible Products in SA Tool Shopping Cart", "Test_Sce_Description": "Test the system's response when ineligible products are added to the SA Tool shopping cart. The system should display an error confirming that one or more of the products are not available for sale."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "ATS Failure to Load Products on SA Tool", "Test_Sce_Description": "Validate the system's response when ATS fails to load products to the customer\u2019s account after the operator has completed the SA Tool shopping flow. The system should inform the operator that the products purchased were not added to the user\u2019s account."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Farecard Tapped-Off at Same Location on SA Tool", "Test_Sce_Description": "Test the system's response when the Farecard is tapped-off at the same location where tap-on occurred. The system should provide the cardholder with the appropriate feedback without updating the Farecard."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Blocked Farecard on SA Tool", "Test_Sce_Description": "Validate the system's response when a blocked Farecard is tapped on the SA Tool. The system should detect that the Farecard is blocked and not confer the right to travel."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Exceeding Max Travel Duration on SA Tool", "Test_Sce_Description": "Test the system's response when the time since tap-on exceeds the Max Travel Duration. The system should auto-settle the Underpayment and open a new trip."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Multiple NFC Media Presented to SA Tool", "Test_Sce_Description": "Validate the system's response when multiple NFC media are presented to the SA Tool at one time. The system should block all fare payment functionality and present Anti-Collision HMI to the customer."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Non-Activated Farecard Tapped on SA Tool", "Test_Sce_Description": "Test the system's response when a non-activated Farecard is tapped on the SA Tool. The system should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Card Reading Error on SA Tool", "Test_Sce_Description": "Validate the system's response when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs. The system should provide feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Failure to read Virtual Card", "Test_Scnario": "Unreadable Virtual Card", "Test_Sce_Description": "Verify that the SA Tool application correctly detects and indicates when a Virtual Card is unreadable. This can be done by presenting a Virtual Card that is known to be unreadable to the NFC reader and checking the response of the SA Tool application."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Failure to read Virtual Card", "Test_Scnario": "Successful Tap After Unreadable Virtual Card", "Test_Sce_Description": "Verify that the SA Tool application allows for a successful tap after an unreadable Virtual Card has been presented. This can be done by presenting an unreadable Virtual Card, then presenting a readable Virtual Card and checking the response of the SA Tool application."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Failure to read Virtual Card", "Test_Scnario": "Non-Adult, Non-Child, Non-Discreet Concessions", "Test_Sce_Description": "Verify that the SA Tool application correctly processes fare payments for customers with non-adult, non-child, non-discreet concessions on their Virtual Card. This can be done by presenting a Virtual Card with a valid non-adult, non-child, non-discreet concession and checking the response of the SA Tool application."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Failure to read Virtual Card", "Test_Scnario": "ePurse Balance Less Than Fare Amount", "Test_Sce_Description": "Verify that the SA Tool application correctly processes fare payments when the customer's ePurse balance is less than the fare amount. This can be done by presenting a Virtual Card with an ePurse balance less than the fare amount and checking the response of the SA Tool application."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Failure to read Virtual Card", "Test_Scnario": "Valid Intra-SP Transfer", "Test_Sce_Description": "Verify that the SA Tool application correctly processes fare payments when the customer's Virtual Card has a valid intra-SP transfer product. This can be done by presenting a Virtual Card with a valid intra-SP transfer product and checking the response of the SA Tool application."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Failure to read Virtual Card", "Test_Scnario": "Valid Inter-SP Transfer", "Test_Sce_Description": "Verify that the SA Tool application correctly processes fare payments when the customer's Virtual Card has a valid inter-SP transfer product. This can be done by presenting a Virtual Card with a valid inter-SP transfer product and checking the response of the SA Tool application."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Failure to read Virtual Card", "Test_Scnario": "Multiple NFC Media Presented Simultaneously", "Test_Sce_Description": "Verify that the SA Tool application correctly blocks all fare payment functionality when multiple NFC media are presented to the device at one time. This can be done by presenting multiple NFC media to the card reader at once and checking the response of the SA Tool application."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Failure to read Virtual Card", "Test_Scnario": "Device in Out-of-Service State", "Test_Sce_Description": "Verify that the SA Tool application correctly remains in an out-of-service state when a customer attempts to tap their Virtual Card Media on the card reader. This can be done by setting the device to an out-of-service state, then attempting to tap a Virtual Card Media on the card reader and checking the response of the SA Tool application."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Failure to read Virtual Card", "Test_Scnario": "Error Occurrence", "Test_Sce_Description": "Verify that the SA Tool application correctly handles errors that do not cover the exception cases. This can be done by inducing an error on the device and checking the response of the SA Tool application."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Failure to read Virtual Card", "Test_Scnario": "Virtual Card Media on Local Hotlist", "Test_Sce_Description": "Verify that the SA Tool application correctly denies the right to travel when the Virtual Card Media is on the local hotlist. This can be done by presenting a Virtual Card Media that is on the local hotlist and checking the response of the SA Tool application."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Failure to read Virtual Card", "Test_Scnario": "Virtual Card Media's Blocked Parameter Enabled", "Test_Sce_Description": "Verify that the SA Tool application correctly denies the right to travel when the Virtual Card Media's blocked parameter on the scratchpad is enabled. This can be done by presenting a Virtual Card Media with the blocked parameter enabled and checking the response of the SA Tool application."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Virtual Card tapped to the reader", "Test_Scnario": "Virtual Card Tap-on Successful", "Test_Sce_Description": "Verify that when a Virtual Card in good standing is tapped on the SA Tool, the device provides appropriate feedback to the cardholder, resets the tap counter to 0 if it isn't already, and updates the Virtual Card scratchpad to remove the block parameter."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Virtual Card tapped to the reader", "Test_Scnario": "Virtual Card Media Fails Card Authentication Check", "Test_Sce_Description": "Verify that when the Virtual Card Media fails the Card Authentication check, the device returns the appropriate feedback, provides the Declined \u2013 Failed Card Authentication Check screen to the cardholder, captures and logs an error in the background and sends the declined tap to ATS."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Virtual Card tapped to the reader", "Test_Scnario": "Virtual Media has already tapped-on using an Online Device", "Test_Sce_Description": "Verify that when the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window, the device sends the tap to ATS which returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Virtual Card tapped to the reader", "Test_Scnario": "Virtual Card Media has already tapped-on using an Offline Device", "Test_Sce_Description": "Verify that when the SA Tool is not online and not connected to ATS, the device collects offline tap details and once the device returns back online, offline taps are sent to ATS via bulk upload."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Virtual Card tapped to the reader", "Test_Scnario": "Multiple NFC media are presented to the device at one time", "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality and provides the Anti-Collision Error Screen to the cardholder."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Virtual Card tapped to the reader", "Test_Scnario": "Tap a Virtual Card Media when SA Tool is in Out-of-Service state", "Test_Sce_Description": "Verify that when the Virtual Card media is a non-revenue media and the SA Tool is in Out-of-Service state, the device sends the tap like any other Open Payments Media to ATS."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Virtual Card tapped to the reader", "Test_Scnario": "Virtual Card contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Sce_Description": "Verify that when the Virtual Card media contains a default trip and the current tap location is either the origin or destination, the device sends the tap to ATS for processing and displays the default trip success screen."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Virtual Card tapped to the reader", "Test_Scnario": "Virtual Card contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Sce_Description": "Verify that when the Virtual Card media contains a default trip and the current tap location is either the origin or destination, the device overrides the default O/D contained on the Virtual Card and ATS processes the tap as a regular tap-on."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Virtual Card tapped to the reader", "Test_Scnario": "Virtual Card does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Sce_Description": "Verify that when the Virtual Card with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a regular tap-on."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Virtual Card tapped to the reader", "Test_Scnario": "Tap a Virtual Card on online SA Tool where card is in good standing, but scratchpad blocked parameter needs to be updated", "Test_Sce_Description": "Verify that when a Virtual Card is in good standing according to ATS, but scratchpad blocked parameter needs to be updated, the device provides the appropriate feedback to the Cardholder of a successful tap, checks and resets the tap counter to 0 if it isn't already at 0, and updates the Virtual Card scratchpad to remove the block parameter."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card", "Test_Scnario": "Testing the functionality of Virtual Card Media\u2019s scratchpad blocked parameter", "Test_Sce_Description": "This scenario will test the functionality of the Virtual Card Media\u2019s scratchpad blocked parameter when it is set to enabled. The test will verify if the right to travel is not conferred when the Virtual Card Media is blocked. The test will also check if the Declined \u2013 Blocked Screen is provided to the cardholder and if an error is captured and logged in the background when this occurs."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card", "Test_Scnario": "Testing the functionality of Virtual Card Media\u2019s mobile wallet blocked parameter", "Test_Sce_Description": "This scenario will test the functionality of the Virtual Card Media\u2019s mobile wallet blocked parameter when it is set to enabled. The test will verify if the right to travel is not conferred when the Virtual Card Media is blocked in the wallet. The test will also check if there is no interaction with the device on an attempted tap and if the device does not know a tap is attempted and has no action."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card", "Test_Scnario": "Testing the functionality of the tap counter", "Test_Sce_Description": "This scenario will test the functionality of the tap counter when it is greater than the allowable offline taps. The test will verify if the right to travel is not conferred when the Virtual Media has reached its offline tap counter limit. The test will also check if the offline device rejects the tap and the rider is not permitted entry when the tap counter limit has been reached."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card", "Test_Scnario": "Testing the functionality of the E-Ticket", "Test_Sce_Description": "This scenario will test the functionality of the E-Ticket. The test will verify if the operator can accept a fare payment from a e-Ticket. The test will also check if the E-Ticket meets timestamp window requirements, if the E-Ticket is not on the deny list, and if the E-Ticket is valid for travel."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card", "Test_Scnario": "Testing the functionality of the SA Tool when it is offline", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is offline. The test will verify if the device returns the appropriate feedback and the right to travel is not conferred when an E-Ticket fails the necessary validation checks. The test will also check if the result is cached in an offline database to be uploaded to Bytemark API when connection is resumed."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card", "Test_Scnario": "Testing the functionality of the Group QR Code", "Test_Sce_Description": "This scenario will test the functionality of the Group QR Code. The test will verify if the E-Ticket holder can scan the Group QR Code at the SA Tool Barcode Reader."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Virtual Card \u2013 Ineligible Products", "Test_Scnario": "ATS failure to load products", "Test_Sce_Description": "This scenario will test the exception flow when ATS fails to load products onto a customer\u2019s account after checkout. The operator should be informed that the products purchased were not added to the user\u2019s account. The operator should have the option to attempt the checkout again or provide the customer a refund if the customer paid with cash."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Virtual Card \u2013 Ineligible Products", "Test_Scnario": "SVC / VC Shopping Cart", "Test_Sce_Description": "This scenario will test the exception flow when the shopping cart includes both SVC and VC products. The device should not allow both SVC and VC products in the shopping cart at the same time. If the cart has ineligible products, the Operator should receive an error providing them the option to clear the cart."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Virtual Card \u2013 Ineligible Products", "Test_Scnario": "ECP is disabled and Customer\u2019s Artemis device is locked or asleep", "Test_Sce_Description": "This scenario will test the exception flow when the customer\u2019s Artemis device has ECP is disabled and the device is locked or asleep. The virtual card media should not be detected and the screen should remain the same. The Artemis device should prompt the user to provide authentication."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Virtual Card \u2013 Ineligible Products", "Test_Scnario": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is disabled", "Test_Sce_Description": "This scenario will test the exception flow when the customer\u2019s Artemis device is in Power Reserve mode and ECP is disabled. The virtual card media should not be detected and the screen should remain the same. The Artemis device should prompt the user to charge their device."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Virtual Card \u2013 Ineligible Products", "Test_Scnario": "In-Service State", "Test_Sce_Description": "This scenario will test the normal operational state of the device. During \u201cIn-Service\u201d state, the SA Tool application should be successfully launched and in the foreground.  \u201cIn-service\u201d state should have two modes: \u201cOnline\u201d and \u201cOffline\u201d. Both should allow operators to interact with the device, but with different functionalities."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Virtual Card \u2013 Ineligible Products", "Test_Scnario": "Real-Time Mode", "Test_Sce_Description": "This scenario will test the real-time mode of the SA Tool. In real-time mode, Open Payments fare payments & inspections should provide a near real-time response to the Operator of the result for the customer\u2019s media. Real-time mode requires the device to have an active internet connection to ATS in order to provide a near real-time response. If the device does not have an active internet connection, it should default to Queued mode."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Virtual Card \u2013 Ineligible Products", "Test_Scnario": "Queued Mode", "Test_Sce_Description": "This scenario will test the queued mode of the SA Tool. In Queued mode, the device should send the taps collected to ATS, whereby no true inspection or fare payment result is provided to the Operator. When the device is configured in queued mode, it should be unknown to the Operator if the customer has successfully paid their fare. The Operator should rely on the local deny list in order to retrieve the tap results such as declined."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Virtual Card \u2013 Ineligible Products", "Test_Scnario": "Degraded Mode", "Test_Sce_Description": "This scenario will test the degraded mode of the SA Tool. When the device is configured in degraded mode, it should only accept Farecard taps. This mode can either be set through a configuration when Virtual Card is disabled, or after a configurable period of time the device is offline. In this state, a Virtual Card should not be accepted."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "ATS failure to load products", "Test_Scnario": "ATS Failure to Load Products", "Test_Sce_Description": "This scenario tests the functionality of the system when ATS fails to load products onto a customer\u2019s account. The operator has completed the SA Tool shopping flow and ATS is unable to load products to the customer\u2019s account. The SA Tool should inform the operator that the products purchased were not added to the user\u2019s account. The Operator may attempt the checkout again or provide the customer a refund if the customer paid with cash."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "ATS failure to load products", "Test_Scnario": "SVC / VC Shopping Cart", "Test_Sce_Description": "This scenario tests the functionality of the system when the shopping cart includes only Virtual Card or Stored Value Card Products. The device must have either SVC or VC products in the shopping cart and cannot have both SVC and VC products in the shopping cart at the same time. If the cart has ineligible products, the Operator receives an error providing them the option to clear the cart."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "ATS failure to load products", "Test_Scnario": "ECP is disabled and Customer\u2019s Artemis device is locked or asleep", "Test_Sce_Description": "This scenario tests the functionality of the system when the user\u2019s device is locked or asleep and ECP is disabled for the users Virtual Card. The user presents their device to the reader, but the Virtual card media is not detected and the screen remains the same. The Artemis device prompts the user to provide authentication."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "ATS failure to load products", "Test_Scnario": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is disabled", "Test_Sce_Description": "This scenario tests the functionality of the system when the user\u2019s mobile device is in Power Reserve mode and ECP is disabled on the mobile device for the users Virtual Card. The user presents their device to the reader, but the Virtual card media is not detected and the screen remains the same. The Artemis device prompts the user to charge their device."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "ATS failure to load products", "Test_Scnario": "Device is offline and not connected to Accenture Ticketing Services", "Test_Sce_Description": "This scenario tests the functionality of the system when the device is offline and not connected to Accenture Ticketing Services. The device checks the local deny list if the media is on the local deny list. The latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "ATS failure to load products", "Test_Scnario": "Open Payments Media fails ODA check", "Test_Sce_Description": "This scenario tests the functionality of the system when an Open Payments Media fails the ODA check. The device performs the necessary validation and determines that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check Screen is provided to the cardholder."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "ATS failure to load products", "Test_Scnario": "Open Payments Media Fails Expiry Check", "Test_Sce_Description": "This scenario tests the functionality of the system when an Open Payments Media fails the Expiry Check. The device performs the necessary validation and determines that the Open Payments Media is unable to pass the expiry check. The Declined \u2013 Card Expired Screen is provided to the cardholder."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "ATS failure to load products", "Test_Scnario": "Open Payments Media has already tapped-on using an Online Device within Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the system when the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window, whereby the initial device and secondary device(s) tapped on were all online. The device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "ATS failure to load products", "Test_Scnario": "Open Payments Media has already tapped-on using an Offline Device", "Test_Sce_Description": "This scenario tests the functionality of the system when the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window whereby the initial device tapped, and secondary device(s) is the same device and is offline. The device accepts the tap and checks the latent transaction processor on the same device for a previous tap within the anti-passback window."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "ATS failure to load products", "Test_Scnario": "Open Payments Media is on the ATS deny list and the SA Tool is online", "Test_Sce_Description": "This scenario tests the functionality of the system when Open Payments Media is on the deny list and the SA Tool is online. The device should decline the tap and provide the appropriate feedback to the cardholder."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a valid transfer product", "Test_Scnario": "Farecard contains a valid transfer product", "Test_Sce_Description": "This scenario will test the functionality of the device when a Farecard containing a valid transfer product is tapped. The device should correctly process the Tap-On Fare, reducing it to account for the Transfer Discount. The test will verify that the device correctly updates the Farecard and provides the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a valid transfer product", "Test_Scnario": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Sce_Description": "This scenario will test the functionality of the device when a Farecard containing a Default O/D is tapped at either the Origin or Destination Station. The device should correctly process a full Fare-by-Zone transaction, deducting the Full Fare value for the station-to-station trip. The test will verify that the device correctly updates the Farecard and provides the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a valid transfer product", "Test_Scnario": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Sce_Description": "This scenario will test the functionality of the device when a Farecard containing a Default O/D is tapped and the customer requests to override the Default Trip. The device should correctly process the override request, update the Farecard, and provide the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a valid transfer product", "Test_Scnario": "Farecard contains Underpayment from a previous trip", "Test_Sce_Description": "This scenario will test the functionality of the device when a Farecard containing an Underpayment from a previous trip is tapped. The device should correctly detect the Underpayment, deduct the Underpayment Value from the Farecard E-Purse, and clear the underpayment field. The test will verify that the device correctly updates the Farecard and provides the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a valid transfer product", "Test_Scnario": "Non-Revenue Farecard is tapped on the Device", "Test_Sce_Description": "This scenario will test the functionality of the device when a Non-Revenue Farecard is tapped. The device should only accept Non-Revenue farecard in the training mode and display a declined HMI if the Non-Revenue card is tapped in the revenue mode."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a valid transfer product", "Test_Scnario": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Sce_Description": "This scenario will test the functionality of the device when a Farecard is tapped during a time period that contains an associated Temporal Class Supplement. The device should correctly process the Tap-On Fare, reducing it to account for the Temporal Class Supplement. The test will verify that the device correctly updates the Farecard and provides the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a valid transfer product", "Test_Scnario": "Farecard Tapped is the incorrect Farecard Type", "Test_Sce_Description": "This scenario will test the functionality of the device when a Farecard of the incorrect type is tapped. The device should correctly identify the incorrect Farecard Type and notify the operator. The test will verify that the device correctly handles this exception and terminates the use case."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a valid transfer product", "Test_Scnario": "Non-Farecard tapped to the reader", "Test_Sce_Description": "This scenario will test the functionality of the device when a Non-Farecard is tapped. The device should correctly identify the card as a non-Farecard and display an error pop up message. The test will verify that the device correctly handles this exception."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a valid transfer product", "Test_Scnario": "Failure to read Virtual Card", "Test_Sce_Description": "This scenario will test the functionality of the device when it fails to read a Virtual Card. The device should correctly identify the failure and display an error prompt. The test will verify that the device correctly handles this exception and allows the operator to retry the card read."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a valid transfer product", "Test_Scnario": "Non-Virtual Card tapped to the reader", "Test_Sce_Description": "This scenario will test the functionality of the device when a Non-Virtual Card is tapped. The device should correctly identify the card as a non-Virtual Card and display an error pop up message. The test will verify that the device correctly handles this exception."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a valid transfer product", "Test_Scnario": "Blocked/Hotlisted Farecard \u2013 Virtual Card", "Test_Sce_Description": "This scenario will test the functionality of the device when a blocked Virtual Card is tapped. The device should correctly identify the card as blocked and display the Farecard query screen. The test will verify that the device correctly handles this exception and prevents further actions on the Farecard."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a valid transfer product", "Test_Scnario": "Virtual Card \u2013 Ineligible Products", "Test_Sce_Description": "This scenario will test the functionality of the device when the shopping cart contains ineligible products. The device should correctly identify the ineligible products and display an error. The test will verify that the device correctly handles this exception and allows the operator to remove the ineligible products from the cart."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a valid transfer product", "Test_Scnario": "ATS failure to load products", "Test_Sce_Description": "This scenario will test the functionality of the device when ATS fails to load products onto a customer\u2019s account. The device should correctly identify the failure and inform the operator. The test will verify that the device correctly handles this exception and allows the operator to retry the checkout or provide a refund if the customer paid with cash."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Scnario": "Full Fare-by-Zone transaction processing with default O/D on Farecard", "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction when a default O/D is present on the Farecard. The ATS should deduct the full fare value for the station-to-station trip, taking into account all fare considerations associated with the trip. The default trip should use PAR as the card identifier."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Scnario": "Override of default O/D on Open Payments Media", "Test_Sce_Description": "Validate that the device can override the default O/D contained on the Open Payments Media and process the tap as a regular tap-on. The customer should be able to request the override by interacting with the device, and the device HMI should inform the customer that it is prepared to override the default trip."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Scnario": "Capping discount eligibility", "Test_Sce_Description": "Check that when capping is configured and the customer meets any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list, complete the fare processing, calculate the capping discount, and apply it to the fare calculation."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Scnario": "Multiple capping discounts eligibility", "Test_Sce_Description": "Ensure that when the customer meets multiple capping criteria, ATS calculates the capping discount and applies it to the fare calculation. If multiple caps are met, ATS should apply the discount from the capping program with the highest precedence."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Scnario": "Offline device capping discount processing", "Test_Sce_Description": "Verify that if the device is offline and not connected to ATS, it checks the local deny list and stores the tap until it goes back online and connects to ATS. The tap should then be rated in ATS, and capping rules should follow use-case logic outlined in ticketing use cases."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Scnario": "Open Payments Media failing ODA check", "Test_Sce_Description": "Check that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Scnario": "Open Payments Media failing expiry check", "Test_Sce_Description": "Ensure that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device should detect that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Scnario": "Blocked Farecard", "Test_Sce_Description": "Validate that if the Farecard is blocked, the right to travel is not conferred. The card reader should detect that the Farecard is blocked, and the device should provide the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Scnario": "Exceeding Max Travel Duration", "Test_Sce_Description": "Check that if the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment and opens a new trip. The device should determine that the Tap-On Time + Max Travel Duration < Current Time and deduct the underpayment value from the Farecard E-Purse."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Scnario": "Multiple NFC media presented at once", "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality and presents Anti-Collision HMI to the customer."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Scnario": "Non-activated Farecard", "Test_Sce_Description": "Ensure that if a non-activated Farecard is tapped on the device, the transaction is unsuccessful. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Scnario": "Card reading error", "Test_Sce_Description": "Check that if a Cardholder taps a Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Fare-by-Zone transaction with default O/D on Farecard", "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Override of Default Trip on Open Payments Media", "Test_Sce_Description": "Validate that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on when the customer requests the override of a Default Trip by interacting with the Device."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Capping discount eligibility on Open Payments Media", "Test_Sce_Description": "Check that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list, complete the fare processing, calculate the capping discount and apply to the fare calculation."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Multiple capping discounts eligibility on Open Payments Media", "Test_Sce_Description": "Ensure that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should calculate the capping discount, apply to the fare calculation and take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Capping discount eligibility when Device is offline", "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules should follow use-case logic outlined in ticketing use cases."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Open Payments Media fails ODA check", "Test_Sce_Description": "Ensure that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Open Payments Media Fails Expiry Check", "Test_Sce_Description": "Validate that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device should detect that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Blocked Farecard", "Test_Sce_Description": "Check that if the Farecard is blocked, the right to travel is not conferred. The Card reader should detect that Farecard is blocked and the Device should provide the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration", "Test_Sce_Description": "Ensure that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. The Device should determine that the Tap-On Time + Max Travel Duration < Current Time and Auto-settle the Underpayment and deduct the value from the Farecard E-Purse."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Multiple NFC media presented to the device at one time", "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. The Device should block all user functionality and present Anti-Collision HMI to customer."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Non-activated Farecard on an SA Tool", "Test_Sce_Description": "Check that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. The Device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Card reading error on SA Tool", "Test_Sce_Description": "Ensure that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains Underpayment from a previous trip", "Test_Scnario": "Farecard Tapped Does Not Match", "Test_Sce_Description": "This scenario tests the functionality of the system when the Farecard tapped during the write tap does not match the Farecard tapped during the identification tap. The test will ensure that the system correctly identifies this discrepancy and prompts the operator to tap the correct card in order to proceed. The test will also verify that the operator has the option to cancel the transaction."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains Underpayment from a previous trip", "Test_Scnario": "Underpayment Handling", "Test_Sce_Description": "This scenario tests the system's ability to handle situations where the customer's Farecard is in underpayment. The test will verify that the system correctly identifies the underpayment amount during the identification tap and informs the operator. The test will also ensure that the operator can correctly handle the underpayment by either accepting it or waiving it, and that the system correctly calculates the amount to be loaded onto the card."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains Underpayment from a previous trip", "Test_Scnario": "Underpayment Handling with Fee", "Test_Sce_Description": "This scenario tests the system's ability to handle situations where the customer's Farecard is in underpayment and the Transit Agency is charging a fee for underpayment. The test will verify that the system correctly identifies the underpayment amount and the fee during the identification tap and informs the operator. The test will also ensure that the operator can correctly handle the underpayment and the fee by either accepting it or waiving it, and that the system correctly calculates the amount to be loaded onto the card."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains Underpayment from a previous trip", "Test_Scnario": "Overdraft Handling", "Test_Sce_Description": "This scenario tests the system's ability to handle situations where the customer's Farecard is in overdraft. The test will verify that the system correctly identifies the overdraft amount during the identification tap and informs the operator. The test will also ensure that the operator can correctly handle the overdraft by bringing the Farecard balance to 0 and loading the rest, and that the system correctly performs these two loads."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains Underpayment from a previous trip", "Test_Scnario": "Performance of the System", "Test_Sce_Description": "This scenario tests the performance of the system in handling various transactions. The test will verify that the system can handle multiple transactions simultaneously without any degradation in performance. The test will also ensure that the system can handle large volumes of transactions without any slowdown or errors."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard contains Underpayment from a previous trip", "Test_Scnario": "Security of the System", "Test_Sce_Description": "This scenario tests the security features of the system. The test will verify that the system correctly encrypts all sensitive data, such as Farecard information and transaction details, to prevent unauthorized access. The test will also ensure that the system has robust authentication mechanisms in place to prevent unauthorized access to the system."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device", "Test_Scnario": "Non-Revenue Farecard Tapped in Training Mode on SA Tool", "Test_Sce_Description": "Verify that the SA tool accepts a Non-Revenue farecard when it is tapped in the training mode. The device should not display a declined HMI."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device", "Test_Scnario": "Non-Revenue Farecard Tapped in Revenue Mode on SA Tool", "Test_Sce_Description": "Verify that the SA tool does not accept a Non-Revenue farecard when it is tapped in the revenue mode. The device should display a declined HMI."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device", "Test_Scnario": "Farecard Tapped During Temporal Class Supplement on SA Tool", "Test_Sce_Description": "Verify that the device displays an HMI reflecting the Temporal Class Supplement when a farecard is tapped during a time period that contains an associated Temporal Class Supplement. The device should process the Tap-On Transaction as a normal tap-on."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device", "Test_Scnario": "Farecard with Autoload Enabled Tapped on SA Tool", "Test_Sce_Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard will have the Autoload amount automatically added to the E-Purse balance."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device", "Test_Scnario": "Farecard without Default O/D Tapped on SA Tool in Override Mode", "Test_Sce_Description": "Verify that if a Farecard with no Default O/D is tapped on while the device is in Override mode, the device will process the tap as a result tap-on."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device", "Test_Scnario": "Farecard Tapped on SA Tool with Request for Audio Messages", "Test_Sce_Description": "Verify that the device plays the corresponding audio message in the default language of the Farecard when a customer requests audio messages for the fare payment."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device", "Test_Scnario": "Farecard Fails Validation Checks at Tap-On on SA Tool", "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device", "Test_Scnario": "Blocked Farecard Tapped on SA Tool", "Test_Sce_Description": "Verify that if a blocked Farecard is tapped on the device, the right to travel is not conferred."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device", "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration on SA Tool", "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trip."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device", "Test_Scnario": "Multiple NFC Media Presented to SA Tool at Once", "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device", "Test_Scnario": "Non-Activated Farecard Tapped on SA Tool", "Test_Sce_Description": "Verify that if a non-activated Farecard is tapped on the device, the transaction is unsuccessful."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device", "Test_Scnario": "Card Reading Error Occurs when Farecard Tapped on SA Tool", "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Fare Payment with Fare type Discount", "Test_Scnario": "Fare Payment with Fare type Discount on BFTP Device", "Test_Sce_Description": "Verify that the BFTP device correctly reads the concession value from the Farecard, passes this information to the CRE, and the CRE determines the appropriate fare and deducts this value from the Farecard E-Purse."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Fare Payment with Fare type Discount", "Test_Scnario": "Feedback to Cardholder on Successful Transaction with Fare type Discount on TTC Device", "Test_Sce_Description": "Verify that the TTC device provides the appropriate feedback to the Cardholder of a successful transaction with a fare type discount and updates the Farecard accordingly."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Fare Payment with Fare type Discount", "Test_Scnario": "Customer Overrides the Default Trip on Transit Agency Device", "Test_Sce_Description": "Verify that the Transit Agency device correctly processes the customer's request to override a Default Trip and informs the customer that the Device is prepared to override the Default Trip."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Fare Payment with Fare type Discount", "Test_Scnario": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Sce_Description": "Verify that when the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Fare Payment with Fare type Discount", "Test_Scnario": "Farecard fails validation checks at Tap-On on BFTP Device", "Test_Sce_Description": "Verify that if a Farecard fails the necessary validation checks, the BFTP device returns the appropriate feedback, and the right to travel is not conferred."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Fare Payment with Fare type Discount", "Test_Scnario": "Farecard is tapped at the same station as the Tap-On on TTC Device", "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the TTC device provides the cardholder with the appropriate feedback."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Fare Payment with Fare type Discount", "Test_Scnario": "Farecard is blocked on Transit Agency Device", "Test_Sce_Description": "Verify that if the Farecard is blocked, the Transit Agency device provides the cardholder with the appropriate feedback and does not allow the fare payment to be made."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Fare Payment with Fare type Discount", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Sce_Description": "Verify that a tap on peak hours after previously reaching off peak daily cap (outside the transfer window) results in a fare payment on the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Fare Payment with Fare type Discount", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Sce_Description": "Verify that a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a fare upgrade on the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Fare Payment with Fare type Discount", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Sce_Description": "Verify that a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a free transfer on the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Fare Payment with Fare type Discount", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Sce_Description": "Verify that if the customer\u2019s Farecard has a Valid Non-Adult concession, the fare payment is correctly processed on the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing Full Fare-by-Zone transaction with default O/D on the Farecard", "Test_Sce_Description": "This scenario is to test if the ATS correctly deducts the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip when a default O/D is present on the Farecard. The default trip will use PAR as the card identifier."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing override of default O/D on Open Payments Media", "Test_Sce_Description": "This scenario is to test if the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on when the customer requests the override of a Default Trip by interacting with the Device."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing capping discount eligibility", "Test_Sce_Description": "This scenario is to test if the ATS correctly calculates the capping discount and applies it to the fare calculation when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly)."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing multiple capping discounts eligibility", "Test_Sce_Description": "This scenario is to test if the ATS correctly calculates the capping discount and applies it to the fare calculation when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly). ATS should take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing capping discount eligibility when device is offline", "Test_Sce_Description": "This scenario is to test if the device correctly checks the local deny list if the media is on the local deny list when the device is offline and not connected to Accenture Ticketing Services. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing Open Payments Media failing ODA check", "Test_Sce_Description": "This scenario is to test if the device correctly returns the appropriate feedback when an Open Payments Media fails the ODA check. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing Load Value or Action prior to performing the Fare Validation", "Test_Sce_Description": "This scenario is to test if the Device correctly processes the Load or Action Transaction prior to continuing the validation Use Case. The right to travel should be conferred to the Cardholder by updating the Farecard; accordingly, the device should provide the appropriate feedback to the Cardholder of a successful transaction in addition to a List Item processing."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing valid transfer product on Farecard", "Test_Sce_Description": "This scenario is to test if the Tap-On Fare configured on the device as well as the Underpayment Value is correctly reduced to account for the Transfer Discount when a valid transfer product is contained on the Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing default O/D on Farecard and Customer Taps on at either the Origin or Destination Station", "Test_Sce_Description": "This scenario is to test if the Device correctly deducts the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip when a default O/D is present on the Farecard and the Customer Taps on at either the Origin or Destination Station."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing override of default O/D on Farecard", "Test_Sce_Description": "This scenario is to test if the Device correctly overrides the default O/D contained on the Farecard and processes the tap as a regular tap-on when the customer requests the override of a Default Trip by interacting with the Device. The right to travel should be conferred to the Cardholder by updating the Farecard; accordingly, the device should provide the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the Default Trip was Overridden."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing Underpayment from a previous trip on Farecard", "Test_Sce_Description": "This scenario is to test if the Device correctly deducts the Underpayment Value from the Farecard E-Purse prior to performing the Fare Validation when the Farecard has a value contained in the Underpayment Block. The Device should read the Underpayment value from the Farecard and deduct this value from the E-Purse Balance. The Device should then clear the underpayment field."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing Non-Revenue Farecard on the Device", "Test_Sce_Description": "This scenario is to test if the SA tool correctly only accepts Non-Revenue farecard in the training mode. If the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing Farecard tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Sce_Description": "This scenario is to test if the Device correctly processes the tap during a time period that contains an associated Temporal Class Supplement."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of Non-Revenue farecard in training mode", "Test_Sce_Description": "This scenario will test if the SA tool only accepts Non-Revenue farecard in the training mode. The test will involve tapping the Non-Revenue card in the revenue mode and checking if the device displays a declined HMI."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the Temporal Class Supplement functionality", "Test_Sce_Description": "This scenario will test if the device contains an HMI reflecting the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the Autoload Enabled functionality", "Test_Sce_Description": "This scenario will test if the Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Farecard will have the Autoload amount automatically added to the E-Purse balance."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the Override functionality", "Test_Sce_Description": "This scenario will test if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device will process the tap as a result tap-on."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the Audio Messages functionality", "Test_Sce_Description": "This scenario will test if the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the Farecard validation checks at Tap-On", "Test_Sce_Description": "This scenario will test if the Cardholder taps the OP media on the device Card Reader (CID) while the device is in reversal mode and the device determines that the media tapped is not supported and displays an error message."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the Virtual Card Transaction Reversal functionality", "Test_Sce_Description": "This scenario will test the steps for a SP operator to manually perform a Virtual Card transaction reversal with the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the Unreadable Farecard functionality", "Test_Sce_Description": "This scenario will test if the SA Tool application detects the Farecard and fails to read it correctly, the SA Tool NFC reader detects the Farecard but is unable to read it."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the Offline SA Tool functionality", "Test_Sce_Description": "This scenario will test if the SA Tool is offline and not connected to ATS, the device checks the Tap Counter to see if it is exceeded and the SA Tool store request for reversal."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the Audio Messages functionality for Transaction Reversal", "Test_Sce_Description": "This scenario will test if the customer requests to reverse a fare and requests audio messages for fare reversal, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Farecard is tapped at the same station as the Tap-On", "Test_Scnario": "Farecard is tapped-off at the same location where tap-on occurred", "Test_Sce_Description": "Validate that the device provides the appropriate feedback when the Farecard is tapped-off at the same location where tap-on occurred. This should be within the Tap-on anti-passback Window. The device should not update the Farecard and an error should be logged in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Farecard is tapped at the same station as the Tap-On", "Test_Scnario": "Farecard is blocked", "Test_Sce_Description": "Verify that the right to travel is not conferred when a blocked Farecard is detected by the card reader. The device should provide the appropriate feedback to the Cardholder and an error should be logged in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Farecard is tapped at the same station as the Tap-On", "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration", "Test_Sce_Description": "Check if the Device auto-settles the Underpayment and opens a new trip when the time since tap-on exceeds the Max Travel Duration. The Device should determine that the Tap-On Time + Max Travel Duration < Current Time and deduct the value from the Farecard E-Purse."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Farecard is tapped at the same station as the Tap-On", "Test_Scnario": "Multiple NFC media are presented to the device at one time", "Test_Sce_Description": "Ensure that the device blocks all fare payment functionality when multiple NFC media are presented to the device at one time. The device should present Anti-Collision HMI to customer and an error should be logged in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Farecard is tapped at the same station as the Tap-On", "Test_Scnario": "Tap a non-activated Farecard on an SA Tool", "Test_Sce_Description": "Validate that the transaction is unsuccessful when a non-activated Farecard is tapped on the device. The device should provide feedback to the Cardholder of an unsuccessful transaction and an error should be logged in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Farecard is tapped at the same station as the Tap-On", "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Sce_Description": "Check if a Card reading error occurs when a Cardholder taps Farecard on an SA Tool (e.g. Farecard is immediately removed from the card reader). The device should log an error in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Farecard is tapped at the same station as the Tap-On", "Test_Scnario": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Sce_Description": "Verify that the Device processes the Tap-On Transaction as a normal tap-on when the Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement. The Device should contain an HMI reflecting the Temporal Class Supplement."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Farecard is tapped at the same station as the Tap-On", "Test_Scnario": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Sce_Description": "Ensure that the Farecard has the Autoload amount automatically added to the E-Purse balance when the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold. The Device should deduct the Fare from the Farecard E-Purse balance."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Farecard is tapped at the same station as the Tap-On", "Test_Scnario": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Sce_Description": "Check if the device processes the tap as a result tap-on when the Farecard with no Default O/D is tapped on while the device is in Override mode. The device should provide the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the Default Trip was overridden."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Farecard is tapped at the same station as the Tap-On", "Test_Scnario": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Sce_Description": "Validate that the operator enables audio mode when the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment. The operator should be able to change the volume level using the physical device buttons at the customer\u2019s discretion."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Farecard is tapped at the same station as the Tap-On", "Test_Scnario": "Farecard fails validation checks at Tap-On", "Test_Sce_Description": "Verify that the device logs an error in the SOTI logs when the Farecard fails validation checks at Tap-On. The device should provide the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Farecard is blocked", "Test_Scnario": "Multiple NFC media presented to the SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when multiple NFC media are presented to the device at the same time. The expected outcome is that the device should block all fare payment functionality and present an Anti-Collision toast message to the customer. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Farecard is blocked", "Test_Scnario": "Tap a non-activated Farecard on an SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a non-activated Farecard is tapped on the device. The expected outcome is that the transaction should be unsuccessful. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Farecard is blocked", "Test_Scnario": "Card reading error on SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a Cardholder taps Farecard and a Card reading error occurs. The expected outcome is that the device will not provide any feedback and screen remains \u201cIn-Service\u201d display. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Farecard is blocked", "Test_Scnario": "Card write error on SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the device fails to write to the Farecard. The expected outcome is that the device will not provide any feedback and screen remains \u201cIn-Service\u201d display. The device should delete the transaction information. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Farecard is blocked", "Test_Scnario": "Tap a Farecard when SA Tool is in Out-of-Service state", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the device is in Out-of-Service state and a Farecard is tapped. The expected outcome is that the device should not process the transaction and should display an 'Out-of-Service' message to the customer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Farecard is blocked", "Test_Scnario": "Tap-off at the same location where tap-on occurred", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the Farecard is tapped-off at the same location where tap-on occurred. The expected outcome is that the device should provide the cardholder with the appropriate feedback without updating the Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Farecard is blocked", "Test_Scnario": "Farecard is blocked", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the Farecard is blocked. The expected outcome is that the right to travel is not conferred and the device provides the appropriate feedback to the Cardholder. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Farecard is blocked", "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the time since tap-on exceeds the Max Travel Duration. The expected outcome is that the Device will auto-settle the Underpayment and open a new trip."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Offline Mode Tap Details Collection on SA Tool", "Test_Sce_Description": "Verify that when the SA Tool is offline and not connected to ATS, it is able to collect offline tap details. Once the device returns back online, these offline taps should be sent to ATS via bulk upload."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Media Validation on Local Hotlist and Virtual Card Scratchpad", "Test_Sce_Description": "Verify that the device checks if the media is contained on the local hotlist, and if the hotlist parameter on the Virtual Card Scratchpad is enabled. The tap counter should be checked and incremented."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Latent Transaction Processor Functionality", "Test_Sce_Description": "Verify that the latent transaction processor stores the tap till the device goes back online and connects to ATS. The tap should then be rated in ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Right to Travel Conferment and FPS \u2013 E-Purse Tap Off", "Test_Sce_Description": "Verify that the right to travel is conferred to the Cardholder by updating the HMI of the SA Tool. The FPS \u2013 E-Purse Tap Off should be provided to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Audio Assist Mode Activation and Functionality", "Test_Sce_Description": "Verify that when a customer inserts headphones into the Audio jack, the device automatically switches into audio assist mode. Audio instructions should detail how to adjust the volume and prompt the user to tap their media."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Non-Revenue Virtual Card Media Processing", "Test_Sce_Description": "Verify that when the Virtual Card media is a non-revenue media, the device sends the tap like any other Virtual Card Media to ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Default Trip Override Processing", "Test_Sce_Description": "Verify that if the tap-off occurs while the device is in Override mode, the device processes the tap as a normal tap-off."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Card Authentication Check Failure", "Test_Sce_Description": "Verify that if the Virtual Card Media fails the Card Authentication check, the device returns the appropriate feedback and the declined tap is sent to ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Multiple NFC Media Presentation", "Test_Sce_Description": "Verify the device's behavior when multiple NFC media are presented to the device at one time."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Temporal Class Supplement Processing", "Test_Sce_Description": "Verify that the Device will contain an HMI reflecting the Temporal Class Supplement, and will process the Tap-On Transaction as a normal tap-on."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Autoload Threshold Crossing", "Test_Sce_Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard will have the Autoload amount automatically added to the E-Purse balance."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Default Trip Override with No Default O/D", "Test_Sce_Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device will process the tap as a result tap-on."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Audio Messages Request Processing", "Test_Sce_Description": "Verify that when the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Farecard Validation Check Failure", "Test_Sce_Description": "Verify that if the Farecard fails the validation checks at Tap-On, the device returns the appropriate feedback and the declined tap is sent to ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance", "Test_Scnario": "Fare Payment on SA Tool with Premium or Special Event Service Class", "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare from the Virtual Card E-Purse when the Service Class is Premium or Special Event, and the Farecard has a valid Regular Service Transfer Product and the tap is within the Transfer Window."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Sce_Description": "Ensure that the SA Tool correctly computes and deducts the fare from the Virtual Card E-Purse when the Farecard has reached off peak Daily Cap Limit, has not reached Peak Daily Cap limit and is out of transfer window."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance", "Test_Scnario": "Fare Payment on Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Sce_Description": "Check that the SA Tool correctly computes and deducts the fare from the Virtual Card E-Purse when the Service Class is Premium, the Farecard has a valid Special Event Transfer Product and the tap is within the Transfer Window."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance", "Test_Scnario": "Fare Payment on Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Sce_Description": "Validate that the SA Tool correctly computes and deducts the fare from the Virtual Card E-Purse when the Service Class is Premium, the Farecard has a valid Special Event Transfer Product and the tap is within the Transfer Window."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance", "Test_Scnario": "Fare Payment from a Farecard using ePurse Balance with Valid Non-Adult Concession", "Test_Sce_Description": "Confirm that the SA Tool correctly computes and deducts the fare from the Virtual Card E-Purse when the customer\u2019s Farecard has a Valid Non-Adult concession."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance", "Test_Scnario": "Fare Payment from a Virtual Card using ePurse Balance when Virtual Card is Unreadable", "Test_Sce_Description": "Ensure that the SA Tool application correctly detects the Virtual Card and fails to read it correctly, and provides appropriate feedback to the operator."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance", "Test_Scnario": "Fare Payment from a Farecard using ePurse Balance with Non-Adult, Non-Child, non-discreet concessions", "Test_Sce_Description": "Verify that the SA Tool shows the successful fare payment screen for non-adult concession, plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance", "Test_Scnario": "Fare Payment from a Virtual Card using ePurse Balance with ePurse balance less than the fare amount", "Test_Sce_Description": "Check that the ATS checks the online hotlist and completes the fare processing, removes the fare from the Virtual Card e-Purse and puts the card into overdraft when the customer\u2019s ePurse balance is less than the fare amount."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance", "Test_Scnario": "Fare Payment from a Virtual Card using ePurse Balance within Intra-SP Transfer window", "Test_Sce_Description": "Ensure that the ATS reads that the Virtual Card contains a valid intra-agency transfer product and deducts $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance", "Test_Scnario": "Fare Payment from a Virtual Card using ePurse Balance within Inter-SP Transfer window", "Test_Sce_Description": "Validate that the ATS reads that the Virtual Card contains a valid inter-agency transfer product and deducts $0 from the Virtual Card E-Purse when a transfer agreement between the service providers has been established."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance", "Test_Scnario": "Fare Payment from a Farecard using ePurse Balance with Customer requesting Audio Messages", "Test_Sce_Description": "Confirm that the SA Tool correctly provides audio messages to the customer upon request."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Unreadable Farecard on SA Tool", "Test_Sce_Description": "Verify that the SA Tool application correctly detects and handles an unreadable Farecard. The application should indicate to the operator that the Farecard is unreadable and prompt the customer to tap the NFC reader again. If the tap is still unsuccessful, the application should again indicate that the Farecard is unreadable. This scenario should also verify that an error is captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Successful Fare Payment with Non-Adult, Non-Child, Non-Discreet Concessions", "Test_Sce_Description": "Verify that the SA Tool correctly processes a fare payment from a Farecard with a valid non-adult, non-child, non-discreet concession. The application should display the successful fare payment screen and play the successful fare payment audio tone. The Farecard should be updated accordingly."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Fare Payment with Insufficient ePurse Balance", "Test_Sce_Description": "Verify that the SA Tool correctly handles a fare payment attempt from a Farecard with an ePurse balance less than the fare amount. The application should send the tap to ATS for processing, which should remove the fare from the ePurse and put the card into overdraft. The right to travel should be conferred to the cardholder and the application should provide appropriate feedback."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Fare Payment within Intra-SP Transfer Window", "Test_Sce_Description": "Verify that the SA Tool correctly processes a fare payment from a Farecard within the intra-SP transfer window. The application should read that the Farecard contains a valid intra-agency transfer product and deduct $0 from the ePurse. The right to travel should be conferred to the cardholder and the application should provide appropriate feedback."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Fare Payment within Inter-SP Transfer Window", "Test_Sce_Description": "Verify that the SA Tool correctly processes a fare payment from a Farecard within the inter-SP transfer window. The application should read that the Farecard contains a valid inter-agency transfer product and deduct $0 from the ePurse. The right to travel should be conferred to the cardholder and the application should provide appropriate feedback."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Locked Farecard", "Test_Sce_Description": "Verify that the SA Tool correctly handles a locked Farecard. The application should detect that the Farecard is locked and not confer the right to travel. The application should provide appropriate feedback to the cardholder and capture and log an error in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Non-Recognizable Media", "Test_Sce_Description": "Verify that the SA Tool correctly handles a tap from a card that is not recognizable to the reader. The application should display the 'Try Another Card' screen."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Fare Payment with Flat Fare TA", "Test_Sce_Description": "Verify that the SA Tool correctly processes a fare payment from a Farecard using a flat fare TA. The application should compute the value to be deducted from the ePurse and deduct the fare accordingly. The Farecard should be updated and the application should display the successful fare payment screen and play the successful fare payment audio tone."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Farecard", "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet Concessions on Farecard", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's Farecard has a valid Non-Adult, Non-Child, Non-discreet concession. The tool should correctly identify the concession and deduct the appropriate fare."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Farecard", "Test_Scnario": "Testing ePurse Balance Less Than the Fare Amount", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's ePurse balance is less than the fare amount. The tool should correctly put the Farecard into overdraft."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Farecard", "Test_Scnario": "Validating Intra-agency Transfer window", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's Farecard has a valid transfer product. The tool should correctly compute the free transfer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Farecard", "Test_Scnario": "Testing Inter-agency Transfer window", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's Farecard has a valid transfer product from another transit agency. The tool should correctly compute the fare based on the transfer agreement between the transit agencies."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Farecard", "Test_Scnario": "Testing Autoload Threshold", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's Farecard meets or drops below the Autoload Threshold. The tool should correctly add the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Farecard", "Test_Scnario": "Validating Farecard on the Action or Load Value List", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's Farecard is on the Action or Load Value list. The tool should correctly verify the Farecard and update it accordingly."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Farecard", "Test_Scnario": "Testing Unreadable Virtual Card", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's Virtual Card is unreadable. The tool should correctly indicate to the operator that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Farecard", "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet Concessions on Virtual Card", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's Virtual Card has a valid Non-Adult, Non-Child, Non-discreet concession. The tool should correctly show the successful fare payment screen for non-adult concession."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Farecard", "Test_Scnario": "Testing ePurse Balance Less Than the Fare Amount on Virtual Card", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's Virtual Card ePurse balance is less than the fare amount. The tool should correctly put the Virtual Card into overdraft."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Farecard", "Test_Scnario": "Validating Intra-SP Transfer window on Virtual Card", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's Virtual Card has a valid transfer product. The tool should correctly deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Farecard", "Test_Scnario": "Testing Inter-SP Transfer window on Virtual Card", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's Virtual Card has a valid transfer product from another service provider. The tool should correctly deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing Fare Payment with Positive ePurse Balance Less Than the Fare Amount on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a registered Farecard attempts to make a fare payment, but the ePurse balance on the Farecard is less than the fare amount. The test will verify that the SA Tool correctly identifies the insufficient balance and communicates this to the customer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps on peak hours after previously reaching off peak daily cap (outside the transfer window). The test will verify that the SA Tool correctly computes the fare, deducts the amount from the Virtual Card E-Purse, and communicates this back to the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing Fare Payment on Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The test will verify that the SA Tool correctly computes the fare upgrade, deducts the amount from the Virtual Card E-Purse, and communicates this back to the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing Fare Payment on Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The test will verify that the SA Tool correctly computes the free transfer, deducts the amount from the Virtual Card E-Purse, and communicates this back to the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing Fare Payment with a Valid Non-Adult Concession on Farecard on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a valid non-adult concession on their Farecard attempts to make a fare payment. The test will verify that the SA Tool correctly identifies the concession and processes the fare payment accordingly."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing Fare Payment with an Anonymous Farecard with an ePurse Balance Less than the Fare Amount on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with an anonymous Farecard attempts to make a fare payment, but the ePurse balance on the Farecard is less than the fare amount. The test will verify that the SA Tool correctly identifies the insufficient balance and communicates this to the customer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing Fare Payment with an Overdraft on Registered Farecard on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a registered Farecard in overdraft attempts to make a fare payment. The test will verify that the SA Tool correctly identifies the overdraft status and communicates this to the customer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing Fare Payment with a Blocked Farecard on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a blocked Farecard attempts to make a fare payment. The test will verify that the SA Tool correctly identifies the blocked status and communicates this to the customer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing Fare Payment with a Farecard on the Hotlist on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a Farecard on the hotlist attempts to make a fare payment. The test will verify that the SA Tool correctly identifies the hotlist status, updates the card\u2019s status to blocked, and communicates this to the customer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing Fare Payment when Battery goes below the low battery threshold during payment on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a fare payment. The test will verify that the SA Tool correctly switches to \u201cOut of Service\u201d mode if the low battery threshold is reached before the fare payment is processed."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing Fare Payment with a card that is not a Farecard on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a card that is not a Farecard. The test will verify that the SA Tool correctly identifies the card as not a Farecard and communicates this to the customer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing Fare Payment with a Farecard within the Anti-Passback Window on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a Farecard within the Anti-Passback Window attempts to make a fare payment. The test will verify that the SA Tool correctly identifies the Anti-Passback Window status and communicates this to the customer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Intra-agency Transfer window", "Test_Scnario": "Testing Fare Payment from a Farecard using ePurse Balance during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made during peak hours after the farecard has reached its off peak daily cap limit and is outside of the transfer window. The test will verify if the ATS correctly computes the fare and deducts the amount from the Virtual Card E-Purse and communicates this back to the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Intra-agency Transfer window", "Test_Scnario": "Testing Fare Payment from a Farecard using ePurse Balance on Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made on a premium service route/location after previously riding on a Special Event service route within the transfer window. The test will verify if the ATS correctly computes the fare upgrade and deducts the amount from the Virtual Card E-Purse and communicates this back to the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Intra-agency Transfer window", "Test_Scnario": "Testing Fare Payment from a Farecard using ePurse Balance on Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made on a premium service route/location after previously riding on a Special Event service route within the transfer window. The test will verify if the ATS correctly computes the free transfer and deducts no amount from the Virtual Card E-Purse and communicates this back to the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Intra-agency Transfer window", "Test_Scnario": "Testing Fare Payment from a Farecard using ePurse Balance when Customer has a Valid Non-Adult Concession on their Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made by a customer who has a valid non-adult concession on their farecard. The test will verify if the ATS correctly computes the fare and deducts the amount from the Virtual Card E-Purse and communicates this back to the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Intra-agency Transfer window", "Test_Scnario": "Testing Fare Payment from a Virtual Card using ePurse Balance when Customer\u2019s Virtual Card is Unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is attempted from a virtual card that is unreadable. The test will verify if the SA Tool NFC reader correctly detects the unreadable card and communicates this to the operator."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Intra-agency Transfer window", "Test_Scnario": "Testing Fare Payment from a Farecard using ePurse Balance when Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made by a customer who has a concession other than adult, child, or discreet concessions on their virtual card. The test will verify if the SA Tool correctly shows the successful fare payment screen for non-adult concession and plays the successful fare payment audio tone."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Intra-agency Transfer window", "Test_Scnario": "Testing Fare Payment from a Virtual Card using ePurse Balance when Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is attempted from a virtual card that has a positive ePurse balance less than the fare amount. The test will verify if the ATS correctly puts the card into overdraft and communicates this back to the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Intra-agency Transfer window", "Test_Scnario": "Testing Fare Payment from a Virtual Card using ePurse Balance when Transaction is within Intra-SP Transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made within the intra-SP transfer window. The test will verify if the ATS correctly reads that the virtual card contains a valid intra-agency transfer product and deducts $0 from the Virtual Card E-Purse and communicates this back to the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Intra-agency Transfer window", "Test_Scnario": "Testing Fare Payment from a Virtual Card using ePurse Balance when Transaction is within Inter-SP Transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made within the inter-SP transfer window. The test will verify if the ATS correctly reads that the virtual card contains a valid inter-agency transfer product and deducts $0 from the Virtual Card E-Purse and communicates this back to the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Intra-agency Transfer window", "Test_Scnario": "Testing Fare Payment from a Farecard using ePurse Balance when Customer requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer requests audio messages. The test will verify if the SA Tool correctly plays the requested audio messages."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Inter-agency Transfer window", "Test_Scnario": "Testing Fare Payment from a Farecard using ePurse Balance during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made during peak hours after the farecard has reached its off peak daily cap limit and is outside of the transfer window. The test will verify if the ATS correctly computes the fare and deducts the amount from the Virtual Card E-Purse and communicates this back to the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Inter-agency Transfer window", "Test_Scnario": "Testing Fare Payment from a Farecard using ePurse Balance on Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made on a premium service route/location after previously riding on a Special Event service route within the transfer window. The test will verify if the ATS correctly computes the fare upgrade and deducts the amount from the Virtual Card E-Purse and communicates this back to the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Inter-agency Transfer window", "Test_Scnario": "Testing Fare Payment from a Farecard using ePurse Balance on Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made on a premium service route/location after previously riding on a Special Event service route within the transfer window. The test will verify if the ATS correctly computes the free transfer and deducts no amount from the Virtual Card E-Purse and communicates this back to the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Inter-agency Transfer window", "Test_Scnario": "Testing Fare Payment from a Farecard using ePurse Balance when Customer has a Valid Non-Adult Concession on their Farecard", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made by a customer who has a valid non-adult concession on their farecard. The test will verify if the ATS correctly computes the fare and deducts the amount from the Virtual Card E-Purse and communicates this back to the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Inter-agency Transfer window", "Test_Scnario": "Testing Fare Payment from a Virtual Card using ePurse Balance when Customer\u2019s Virtual Card is Unreadable", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is attempted from a virtual card that is unreadable. The test will verify if the SA Tool NFC reader correctly detects the unreadable virtual card and communicates this to the operator."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Inter-agency Transfer window", "Test_Scnario": "Testing Fare Payment from a Farecard using ePurse Balance when Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made by a customer who has a concession other than Adult, Child, or Discreet Concessions on their virtual card. The test will verify if the ATS correctly computes the fare and deducts the amount from the Virtual Card E-Purse and communicates this back to the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Inter-agency Transfer window", "Test_Scnario": "Testing Fare Payment from a Virtual Card using ePurse Balance when Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is attempted from a virtual card that has a positive ePurse balance less than the fare amount. The test will verify if the ATS correctly computes the fare, puts the card into overdraft, and communicates this back to the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Inter-agency Transfer window", "Test_Scnario": "Testing Fare Payment from a Virtual Card using ePurse Balance when Transaction is within Intra-SP Transfer window", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made within the intra-SP transfer window. The test will verify if the ATS correctly computes the fare, deducts $0 from the Virtual Card E-Purse, and communicates this back to the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Inter-agency Transfer window", "Test_Scnario": "Testing Fare Payment from a Virtual Card using ePurse Balance when Transaction is within Inter-SP Transfer window", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made within the inter-SP transfer window. The test will verify if the ATS correctly computes the fare, deducts $0 from the Virtual Card E-Purse, and communicates this back to the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Inter-agency Transfer window", "Test_Scnario": "Testing Fare Payment from a Farecard using ePurse Balance when Customer requests Audio Messages", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer requests audio messages. The test will verify if the SA Tool correctly plays the requested audio messages."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Autoload Threshold is met", "Test_Scnario": "Testing Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly computes and deducts the fare from the ePurse Balance when a tap is made during peak hours after previously reaching off peak daily cap (outside the transfer window). The farecard should have reached off peak Daily Cap Limit, not reached Peak Daily Cap limit and should be out of transfer window."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Autoload Threshold is met", "Test_Scnario": "Testing Fare Payment on Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly computes and deducts the fare from the ePurse Balance when a tap is made on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The farecard should have a valid Special Event Transfer Product and the tap should be within Transfer Window."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Autoload Threshold is met", "Test_Scnario": "Testing Fare Payment on Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly computes and deducts the fare from the ePurse Balance when a tap is made on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The farecard should have a valid Special Event Transfer Product and the tap should be within Transfer Window."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Autoload Threshold is met", "Test_Scnario": "Testing Fare Payment from a Farecard using ePurse Balance when Customer has a Valid Non-Adult Concession on their Farecard", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly verifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly when the customer\u2019s Farecard has a Valid Non-Adult concession."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Autoload Threshold is met", "Test_Scnario": "Testing Fare Payment from a Farecard using ePurse Balance when Customer requests Audio Messages", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly enables audio mode and plays the corresponding audio message to the customer in the default language of their Farecard when the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Autoload Threshold is met", "Test_Scnario": "Testing Fare Payment from a Farecard using ePurse Balance when Daily Cap Reached outside of Transfer window on SA Tool", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly deducts no fare since the Daily Cap is reached when the fare payment is being made on the SA Tool, the Farecard has reached Daily Cap Limit and the Farecard is out of transfer window."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Autoload Threshold is met", "Test_Scnario": "Testing Fare Payment from a Farecard using ePurse Balance on Premium Service or Special Route/Location on SA Tool", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly computes and deducts the Premium or Special Event fare when a tap is made on a premium service or special route/location."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Autoload Threshold is met", "Test_Scnario": "Testing Fare Payment from a Farecard using ePurse Balance on Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly computes and deducts the Upgrade fare when a tap is made on a premium service or special event route/location after previously riding on a regular service route (within the transfer window). The farecard should have a valid Regular Service Transfer Product and the tap should be within Transfer Window."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Action or Load Value List", "Test_Scnario": "Verify Farecard is on the Action or Load Value List", "Test_Sce_Description": "Test the functionality of the SA Tool to verify that the Farecard is on the Action or Load Value List and updates the Farecard accordingly. This scenario will test the tool's ability to correctly identify and process Farecards that are on the list."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Action or Load Value List", "Test_Scnario": "Verify Audio Messages for Fare Payment", "Test_Sce_Description": "Test the functionality of the SA Tool when a customer requests audio messages for the fare payment. This scenario will test the tool's ability to enable audio mode, adjust the volume level, and play the corresponding audio message in the default language of the Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Action or Load Value List", "Test_Scnario": "Verify Fare Payment with Daily Cap Reached", "Test_Sce_Description": "Test the functionality of the SA Tool when the Farecard has reached the Daily Cap Limit and is out of the transfer window. This scenario will test the tool's ability to correctly identify the cap limit and deduct no fare."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Action or Load Value List", "Test_Scnario": "Verify Fare Payment for Premium Service or Special Route/Location", "Test_Sce_Description": "Test the functionality of the SA Tool when the fare payment is being made for a Premium Service or Special Event. This scenario will test the tool's ability to correctly compute and deduct the Premium or Special Event fare."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Action or Load Value List", "Test_Scnario": "Verify Fare Payment for Premium Service or Special Route/Location with Fare Upgrade", "Test_Sce_Description": "Test the functionality of the SA Tool when a fare upgrade is required for a Premium Service or Special Event route/location after previously riding on a regular service route. This scenario will test the tool's ability to correctly compute and deduct the Upgrade fare."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Action or Load Value List", "Test_Scnario": "Verify Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Test the functionality of the SA Tool when a fare payment is made during peak hours after previously reaching off peak daily cap. This scenario will test the tool's ability to correctly identify the cap limits and process the fare payment."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Action or Load Value List", "Test_Scnario": "Verify Load Value or Action Processing Prior to Fare Validation", "Test_Sce_Description": "Test the functionality of the SA Tool to process the Load Value or Action prior to performing the Fare Validation. This scenario will test the tool's ability to correctly process the Load or Action Transaction before continuing the validation Use Case."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Action or Load Value List", "Test_Scnario": "Verify Fare Payment with Valid Transfer Product", "Test_Sce_Description": "Test the functionality of the SA Tool when a valid transfer product is contained on the Farecard. This scenario will test the tool's ability to correctly reduce the Tap-On Fare and the Underpayment Value to account for the Transfer Discount."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Action or Load Value List", "Test_Scnario": "Verify Fare Payment with Default O/D", "Test_Sce_Description": "Test the functionality of the SA Tool when a Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station. This scenario will test the tool's ability to correctly deduct the Full Fare value for the station-to-station trip."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Action or Load Value List", "Test_Scnario": "Verify Fare Payment with Underpayment from Previous Trip", "Test_Sce_Description": "Test the functionality of the SA Tool when the Farecard has a value contained in the Underpayment Block. This scenario will test the tool's ability to correctly detect the Underpayment on the Farecard from a previously closed trip, deduct this value from the E-Purse Balance, and clear the underpayment field."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard Does Not Have a Valid Fare to Reverse", "Test_Scnario": "Transaction Reversal - Customer\u2019s Farecard Does Not Have a Valid Fare to Reverse", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to reverse a transaction with a Farecard that does not have a valid fare to reverse. The test will ensure that the SA Tool correctly identifies the invalid Farecard, displays the appropriate error message, and does not conduct the transaction."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard Does Not Have a Valid Fare to Reverse", "Test_Scnario": "Transaction Reversal - Customer\u2019s Farecard is not activated", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to reverse a transaction with a Farecard that is not activated. The test will ensure that the SA Tool correctly identifies the deactivated Farecard, displays the appropriate declined message, and does not conduct the transaction."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard Does Not Have a Valid Fare to Reverse", "Test_Scnario": "Transaction Reversal - Customer taps a non-activated Farecard", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer taps a non-activated Farecard. The test will ensure that the SA Tool correctly identifies the non-activated Farecard, displays the appropriate declined message, and does not conduct the transaction."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard Does Not Have a Valid Fare to Reverse", "Test_Scnario": "Reversing Fare Payment with Open Payments Media on Online SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to reverse a fare payment with Open Payments Media on an Online SA Tool that is connected to ATS. The test will ensure that the SA Tool correctly processes the reversal request, sends the request to Accenture Ticketing Services, and provides the appropriate feedback to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard Does Not Have a Valid Fare to Reverse", "Test_Scnario": "Reverse a Fare Payment on a SA Tool with Open Payments Media \u2013 Device is offline and not connected to Accenture Ticketing Services", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to reverse a fare payment with Open Payments Media on a SA Tool that is offline and not connected to Accenture Ticketing Services. The test will ensure that the SA Tool correctly stores the tap till the device goes back online and connects to Accenture Ticketing Services, and then rates the tap in ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard Does Not Have a Valid Fare to Reverse", "Test_Scnario": "Reverse a Fare Payment on a SA Tool with Open Payments Media \u2013 Customer requests audio messages", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer requests audio messages while reversing a fare payment with Open Payments Media on a SA Tool. The test will ensure that the SA Tool correctly identifies the media tapped is not supported, displays an error message, and does not record the fare payment reversal."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard Does Not Have a Valid Fare to Reverse", "Test_Scnario": "Virtual Card Transaction Reversal on an Online SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a SP operator manually performs a Virtual Card transaction reversal with the SA Tool. The test will ensure that the SA Tool correctly processes the reversal request, sends the transaction to ATS to be processed, and provides the appropriate feedback to the operator and customer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard Does Not Have a Valid Fare to Reverse", "Test_Scnario": "Transaction Reversal - Customer\u2019s Farecard is Unreadable", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to reverse a transaction with a Farecard that is unreadable. The test will ensure that the SA Tool correctly identifies the unreadable Farecard, displays the appropriate error message, and does not conduct the transaction."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard Does Not Have a Valid Fare to Reverse", "Test_Scnario": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to reverse a transaction with a Farecard while the SA Tool is offline and not connected to ATS. The test will ensure that the SA Tool correctly stores the request for reversal, displays the request for reversal success screen, and sends bulk upload of transactions to ATS for processing when it comes back online."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard Does Not Have a Valid Fare to Reverse", "Test_Scnario": "Transaction Reversal - Customer Requests Audio Messages", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer requests audio messages while reversing a transaction with a Farecard. The test will ensure that the SA Tool correctly enables audio mode, adjusts the volume level as per the customer\u2019s discretion, and plays the corresponding audio message to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Transaction Reversal - Customer\u2019s Farecard is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Farecard is blocked. The test will ensure that the SA Tool correctly identifies the blocked Farecard and prevents any transactions from occurring. The test will also verify that the SA Tool displays the appropriate error message to the customer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Transaction Reversal - Customer\u2019s Farecard is not activated", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Farecard is not activated. The test will ensure that the SA Tool correctly identifies the non-activated Farecard and prevents any transactions from occurring. The test will also verify that the SA Tool displays the appropriate declined message to the customer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Transaction Reversal - Customer taps a non-activated Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a non-activated Farecard. The test will ensure that the SA Tool correctly identifies the non-activated Farecard and prevents any transactions from occurring. The test will also verify that the SA Tool plays the declined audio tone."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Transaction Reversal - Customer\u2019s Farecard is Unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Farecard is unreadable. The test will ensure that the SA Tool correctly identifies the unreadable Farecard and prevents any transactions from occurring. The test will also verify that the SA Tool displays the appropriate error message to the operator."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Transaction Reversal - SA Tool is Offline", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is offline and not connected to ATS. The test will ensure that the SA Tool correctly stores the request for reversal and sends a bulk upload of transactions to ATS for processing when it comes back online."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Transaction Reversal - Customer Requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer requests audio messages for fare reversal. The test will ensure that the SA Tool correctly plays the corresponding audio message to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Performance of SA Tool during Transaction Reversal", "Test_Sce_Description": "This scenario tests the performance of the SA Tool during transaction reversal. The test will measure the response time of the SA Tool during transaction reversal and ensure it is within acceptable limits."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Security of SA Tool during Transaction Reversal", "Test_Sce_Description": "This scenario tests the security of the SA Tool during transaction reversal. The test will ensure that the SA Tool correctly encrypts all sensitive data during transaction reversal and that no sensitive data is exposed during the process."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Testing the functionality of fare reversal on SA Tool with a Virtual Card", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer requests to reverse a fare using a Virtual Card. The test will ensure that the SA Tool reads the Virtual Card information correctly, sends the transaction to ATS to be processed, and displays the successful fare reversal screen to the operator and customer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Testing the functionality of fare reversal on SA Tool with an unreadable Farecard", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's Farecard is unreadable. The test will ensure that the SA Tool NFC reader detects the Farecard but is unable to read it, and that the SA Tool application indicates to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Testing the functionality of fare reversal on SA Tool when the device is offline", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the device is offline and not connected to ATS. The test will ensure that the SA Tool stores the request for reversal and displays the request for reversal success screen, and that the SA Tool sends a bulk upload of transactions to ATS for processing when it comes back online."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Testing the functionality of fare reversal on SA Tool when the customer requests audio messages", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer requests audio messages for fare reversal. The test will ensure that the operator enables audio mode, and that the SA Tool displays the fare reversal screen to the operator and customer for the duration of the audio message."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Testing the functionality of fare reversal on SA Tool when the customer taps a card that is not a Farecard", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer taps a card that is not a Farecard. The test will ensure that the SA Tool application does not respond, but the device error message 'Card Read Error' is displayed for a short period of time."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Testing the functionality of fare reversal on SA Tool when the customer taps a non-activated Farecard", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer's Farecard is not activated. The test will ensure that the device detects that the Farecard is not activated, and that the SA Tool application displays a declined message to the customer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Testing the functionality of fare payment reversal on SA Tool with Open Payments Media", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when an Open Payments cardholder reverses a fare payment. The test will ensure that the device sends the cardholder's reversal request tap to Accenture Ticketing Services, and that the Request for Reversal Recorded screen is provided to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Testing the functionality of fare payment reversal on SA Tool with Open Payments Media when the device is offline", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the device is offline and not connected to Accenture Ticketing Services. The test will ensure that the latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services, and that the tap is then rated in ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Testing the functionality of fare payment reversal on SA Tool with Open Payments Media when the customer requests audio messages", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer requests audio messages for fare payment reversal. The test will ensure that the SA Tool displays the fare reversal screen to the operator and customer for the duration of the audio message, and that the corresponding audio message is played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Battery goes below the low battery threshold during reversal", "Test_Scnario": "Testing the functionality of the SA Tool when the battery goes below the low battery threshold during reversal", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the battery goes below the low battery threshold during reversal. The test will ensure that the application switches to 'Out of Service' mode if the low battery threshold is reached before Step 5. If the battery threshold is not reached, the test will ensure that the customer's fare payment is processed as per Step 5 and then the application switches to 'Out of Service' mode."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Battery goes below the low battery threshold during reversal", "Test_Scnario": "Testing the functionality of the SA Tool when the customer's card is not a Farecard", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer's card is not a Farecard. The test will ensure that the SA Tool application does not respond and the device error message 'Card Read Error' is displayed for a short period of time."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Battery goes below the low battery threshold during reversal", "Test_Scnario": "Testing the functionality of the SA Tool when the customer's card is within the Anti-Passback Window", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer's card is within the Anti-Passback Window. The test will ensure that the ATS detects that the Farecard fails the Anti-Passback checks and the SA Tool application displays a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Battery goes below the low battery threshold during reversal", "Test_Scnario": "Testing the functionality of the SA Tool when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring outside of the time limit of the Limited Period Pass Product", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring outside of the time limit of the Limited Period Pass Product. The test will ensure that the ATS detects that the Limited Period Pass is not valid at the current time, computes the value to be deducted from the e-Purse, and detects that farecard is in overdraft. The SA Tool application should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Battery goes below the low battery threshold during reversal", "Test_Scnario": "Testing the functionality of the SA Tool when the device is in reversal mode", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the device is in reversal mode. The test will ensure that the device determines that the media tapped is not supported and displays an error message. The fare payment reversal should not be recorded."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Battery goes below the low battery threshold during reversal", "Test_Scnario": "Testing the functionality of the SA Tool when performing a Virtual Card transaction reversal", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when performing a Virtual Card transaction reversal. The test will ensure that the SA Tool reads the Virtual Card information and sends transaction to ATS to be processed. ATS should verify that the last transaction is reversible, perform the reversal and send the result back to the SA Tool. The SA Tool should display successful fare reversal screen to the operator and customer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Battery goes below the low battery threshold during reversal", "Test_Scnario": "Testing the functionality of the SA Tool when the Farecard is unreadable", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the Farecard is unreadable. The test will ensure that the SA Tool NFC reader detects the Farecard but is unable to read it. SA Tool application should indicate to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Battery goes below the low battery threshold during reversal", "Test_Scnario": "Testing the functionality of the SA Tool when the device is offline", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the device is offline. The test will ensure that the device checks the Tap Counter to see if it is exceeded and the SA Tool stores request for reversal. Request for reversal success screen should be displayed and the SA Tool should send bulk upload of transactions to ATS for processing when it comes back online."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Battery goes below the low battery threshold during reversal", "Test_Scnario": "Testing the functionality of the SA Tool when the customer requests audio messages for fare reversal", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer requests audio messages for fare reversal. The test will ensure that the operator enables audio mode and can change the volume level using the physical device buttons at the customer\u2019s discretion. The SA Tool should display the fare reversal screen to the operator and customer for the duration of the audio message."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Verify the functionality of the SA Tool when a non-Farecard is tapped", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a non-Farecard is tapped. The expected outcome is that the SA Tool application does not respond, but the device error message \u201cCard Read Error\u201d is displayed for a short period of time."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Verify the functionality of the SA Tool when a non-activated Farecard is tapped", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a non-activated Farecard is tapped. The expected outcome is that the device detects that the Farecard is not activated and the SA Tool application will display a declined message to the customer. The transaction is not conducted."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Verify the functionality of the SA Tool when a Farecard is unreadable", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a Farecard is unreadable. The expected outcome is that the SA Tool NFC reader detects the Farecard but is unable to read it. SA Tool application will indicate to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Verify the functionality of the SA Tool when it is offline", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is offline and not connected to ATS. The expected outcome is that the device checks the Tap Counter to see if it is exceeded and the SA Tool store request for reversal."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Verify the functionality of the SA Tool when a customer requests audio messages", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer requests audio messages for fare reversal. The expected outcome is that the operator enables audio mode and the SA Tool displays the fare reversal screen to the operator and customer for the duration of the audio message."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Verify the functionality of the SA Tool when Open Payments Media is used for fare payment reversal", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when Open Payments Media is used for fare payment reversal. The expected outcome is that the Cardholder taps the Open Payments Media on the device Card Reader (CID) while the device is in reversal mode and the device sends the cardholder\u2019s reversal request tap to Accenture Ticketing Services."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Verify the functionality of the SA Tool when it is offline and Open Payments Media is used for fare payment reversal", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is offline and Open Payments Media is used for fare payment reversal. The expected outcome is that the latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a non-activated Farecard", "Test_Scnario": "Transaction Reversal with Non-Activated Farecard on SA Tool", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a non-activated Farecard when a customer attempts a transaction reversal. The tool should display a declined message and not conduct the transaction. The tool should also play a declined audio tone and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a non-activated Farecard", "Test_Scnario": "Transaction Reversal with Unreadable Farecard on SA Tool", "Test_Sce_Description": "Verify that the SA Tool correctly identifies an unreadable Farecard during a transaction reversal. The tool should indicate to the operator that the Farecard is unreadable. If the customer taps again and the tap is successful, the tool should proceed with steps 4-7. If the tap is unsuccessful, the tool should again indicate that the Farecard is unreadable."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a non-activated Farecard", "Test_Scnario": "Transaction Reversal on SA Tool while Offline", "Test_Sce_Description": "Verify that the SA Tool correctly handles a transaction reversal while offline. The tool should check the Tap Counter, store the request for reversal, display a success screen, and send a bulk upload of transactions to ATS for processing when it comes back online."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a non-activated Farecard", "Test_Scnario": "Transaction Reversal on SA Tool with Customer Request for Audio Messages", "Test_Sce_Description": "Verify that the SA Tool correctly handles a transaction reversal when the customer requests audio messages. The operator should enable audio mode and adjust the volume level as per the customer's discretion. The tool should display the fare reversal screen for the duration of the audio message and play the corresponding audio message in the default language of the Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a non-activated Farecard", "Test_Scnario": "Transaction Reversal on SA Tool with Open Payments Media while Online", "Test_Sce_Description": "Verify that the SA Tool correctly handles a transaction reversal with Open Payments Media while online. The tool should perform reader checks, send the reversal request tap to Accenture Ticketing Services, and provide a Request for Reversal Recorded screen to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a non-activated Farecard", "Test_Scnario": "Transaction Reversal on SA Tool with Open Payments Media while Offline", "Test_Sce_Description": "Verify that the SA Tool correctly handles a transaction reversal with Open Payments Media while offline. The tool should store the tap till the device goes back online and connects to Accenture Ticketing Services, at which point the tap should be rated in ATS. The tool should then provide a Request for Reversal Recorded screen to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a non-activated Farecard", "Test_Scnario": "Transaction Reversal on SA Tool with Open Payments Media and Customer Request for Audio Messages", "Test_Sce_Description": "Verify that the SA Tool correctly handles a transaction reversal with Open Payments Media when the customer requests audio messages. The tool should perform reader checks, send the reversal request tap to Accenture Ticketing Services, provide a Request for Reversal Recorded screen to the cardholder, and play the corresponding audio message in the default language of the Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Cardholder has already tapped-on", "Test_Scnario": "Cardholder taps-on again at the same SA Tool within the anti-passback window", "Test_Sce_Description": "Validate the system's response when a cardholder taps-on again at the same SA Tool within the anti-passback window. The system should accept the tap, check the latent transaction processor on the same device for a previous tap within the anti-passback window, and store the tap on the device until it is connected to ATS for reconciliation. The system should also provide the 'Declined \u2013 Already Tapped' screen to the cardholder and log an error in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Cardholder has already tapped-on", "Test_Scnario": "Error occurs on the device that does not cover the exception cases", "Test_Sce_Description": "Test the system's response when an error occurs on the device that does not cover the exception cases. The system should record the tap, provide the 'Declined \u2013 See Customer Service' screen to the cardholder, and log an error in the SOTI logs. The declined tap should also be sent to ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Cardholder has already tapped-on", "Test_Scnario": "Open Payments media not on the approved media list is tapped on the device in beta mode", "Test_Sce_Description": "Validate the system's response when an Open Payments media that is not on the approved media list is tapped on the device in beta mode. The system should check the approved media list, provide the 'Declined \u2013 Tap Farecard' screen to the cardholder if the media is not on the list, and log an error in the SOTI logs. The declined tap should also be sent to ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Cardholder has already tapped-on", "Test_Scnario": "Cardholder's Open Payments Media is on the BIN Blocking List", "Test_Sce_Description": "Test the system's response when the cardholder's Open Payments Media is on the BIN Blocking List. The system should check its local BIN Blocking list, play the decline audio tone and display the 'Declined \u2013 BIN Blocked' screen if the card's BIN is found to be on the list, and log an error in the SOTI logs. The decline should also be sent to ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Cardholder has already tapped-on", "Test_Scnario": "Interac Card is on the deny list", "Test_Sce_Description": "Validate the system's response when a customer is travelling with an Interac Card, and ATS returns a decline response due to Media In Debt. The system should send the tap to ATS, not confer the right to travel, provide the 'Declined \u2013 Interac Unpaid Fares Online' screen to the cardholder, and log an error in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Cardholder has already tapped-on", "Test_Scnario": "Interac Card is on the local deny list due to Media in Debt while the device is offline", "Test_Sce_Description": "Test the system's response when a customer is travelling with an Interac Card, the device is offline, and the Interac media is on the local deny list due to Media in Debt. The system should not confer the right to travel, provide the 'Declined \u2013 Interac Unpaid Fares Online' screen to the cardholder, and log an error in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Cardholder has already tapped-on", "Test_Scnario": "Farecard is blocked", "Test_Sce_Description": "Validate the system's response when the Farecard is blocked. The system should detect that the Farecard is blocked, not confer the right to travel, provide the appropriate feedback to the Cardholder, and log an error in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Cardholder has already tapped-on", "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration", "Test_Sce_Description": "Test the system's response when the time since tap-on exceeds the Max Travel Duration. The system should auto-settle the Underpayment, deduct the value from the Farecard E-Purse, and log an error in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Cardholder has already tapped-on", "Test_Scnario": "Multiple NFC media are presented to the device at one time", "Test_Sce_Description": "Validate the system's response when multiple NFC media are presented to the device at one time. The system should block all user functionality, present Anti-Collision HMI to customer, and log an error in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Cardholder has already tapped-on", "Test_Scnario": "Non-activated Farecard is tapped on the device", "Test_Sce_Description": "Test the system's response when a non-activated Farecard is tapped on the device. The system should detect that the Farecard is not activated, provide feedback to the Cardholder of an unsuccessful transaction, and log an error in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Cardholder has already tapped-on", "Test_Scnario": "Card reading error occurs when Farecard is tapped on an SA Tool", "Test_Sce_Description": "Validate the system's response when a Card reading error occurs (e.g. Farecard is immediately removed from the card reader). The system should log an error in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Farecard has insufficient E-Purse to cover the Tap-On Fare", "Test_Scnario": "Farecard tapped does not match", "Test_Sce_Description": "Test the scenario where the Farecard tapped during the write tap does not match the Farecard tapped during the identification tap. This can occur when the operator does not allow the Farecard to remain on the NFC Reader for the duration of the transaction or when the operator has tapped one Farecard and intends to write to it but another Farecard is presented during the write tap."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Farecard has insufficient E-Purse to cover the Tap-On Fare", "Test_Scnario": "Underpayment handling", "Test_Sce_Description": "Test the scenario where the customer\u2019s Farecard is in underpayment and the operator has to handle this situation. This can occur when the customer\u2019s Farecard is in underpayment and the TA has not enabled the underpayment fee in the EOD. The operator will have to inform the customer about the underpayment and decide whether to accept or waive the underpayment."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Farecard has insufficient E-Purse to cover the Tap-On Fare", "Test_Scnario": "Farecard is tapped-off at the same location where tap-on occurred", "Test_Sce_Description": "Test the scenario where the Farecard is tapped-off at the same location where tap-on occurred. The device should detect that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window and provide the appropriate feedback to the cardholder without updating the Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Farecard has insufficient E-Purse to cover the Tap-On Fare", "Test_Scnario": "Farecard is blocked", "Test_Sce_Description": "Test the scenario where the Farecard is blocked. In this case, the right to travel is not conferred and the device should provide the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Farecard has insufficient E-Purse to cover the Tap-On Fare", "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration", "Test_Sce_Description": "Test the scenario where the time since tap-on exceeds the Max Travel Duration. In this case, the Device will auto-settle the Underpayment and open a new trip."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Farecard has insufficient E-Purse to cover the Tap-On Fare", "Test_Scnario": "Multiple NFC media are presented to the device at one time", "Test_Sce_Description": "Test the scenario where multiple NFC media are presented to the device at one time. In this case, the device should block all fare payment functionality and present Anti-Collision HMI to customer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Farecard has insufficient E-Purse to cover the Tap-On Fare", "Test_Scnario": "Tap a non-activated Farecard on an SA Tool", "Test_Sce_Description": "Test the scenario where a non-activated Farecard is tapped on the device. In this case, the transaction should be unsuccessful."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Farecard has insufficient E-Purse to cover the Tap-On Fare", "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Sce_Description": "Test the scenario where a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader)."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Tap a non-activated Farecard on an SA Tool", "Test_Scnario": "Testing the functionality of Non-Revenue farecard in the training mode", "Test_Sce_Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode and if the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Tap a non-activated Farecard on an SA Tool", "Test_Scnario": "Testing the functionality of Farecard with Temporal Class Supplement", "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the Device should contain an HMI reflecting the Temporal Class Supplement, and process the Tap-On Transaction as a normal tap-on."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Tap a non-activated Farecard on an SA Tool", "Test_Scnario": "Testing the functionality of Farecard with Autoload Enabled", "Test_Sce_Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Tap a non-activated Farecard on an SA Tool", "Test_Scnario": "Testing the functionality of Farecard with no Default O/D", "Test_Sce_Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device should process the tap as a result tap-on."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Tap a non-activated Farecard on an SA Tool", "Test_Scnario": "Testing the functionality of Farecard with Audio Messages", "Test_Sce_Description": "Verify that when a customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Tap a non-activated Farecard on an SA Tool", "Test_Scnario": "Testing the functionality of Farecard fails validation checks at Tap-On", "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device should provide the cardholder with the appropriate feedback."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Tap a non-activated Farecard on an SA Tool", "Test_Scnario": "Testing the functionality of Blocked Farecard", "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel should not be conferred."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Tap a non-activated Farecard on an SA Tool", "Test_Scnario": "Testing the functionality of Time since Tap-On Exceeds Max Travel Duration", "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device should auto-settle the Underpayment and open a new trips."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Tap a non-activated Farecard on an SA Tool", "Test_Scnario": "Testing the functionality of Multiple NFC media", "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device should block all fare payment functionality."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Tap a non-activated Farecard on an SA Tool", "Test_Scnario": "Testing the functionality of non-activated Farecard", "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction should be unsuccessful."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Tap a non-activated Farecard on an SA Tool", "Test_Scnario": "Testing the functionality of Farecard with card reading error", "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device should provide the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media Contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Verify the functionality of overriding the default O/D on the Open Payments Media", "Test_Sce_Description": "This scenario will test if the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on. The customer should be able to request the override of a Default Trip by interacting with the Device. The Device HMI should inform the customer that the Device is prepared to override the Default Trip. The Cardholder should then be able to initiate a trip by presenting the Farecard to the Device CID."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media Contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Verify the functionality of ATS in processing Full Fare value for the station-to-station trip", "Test_Sce_Description": "This scenario will test if the ATS correctly deducts the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. The default trip should use PAR as the card identifier."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media Contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Verify the functionality of ATS in calculating the capping discount", "Test_Sce_Description": "This scenario will test if the ATS correctly calculates the capping discount and applies it to the fare calculation when the customer has met any of the capping criteria (Daily, Weekly, Monthly)."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media Contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Verify the functionality of ATS in calculating multiple capping discounts", "Test_Sce_Description": "This scenario will test if the ATS correctly calculates the capping discount and applies it to the fare calculation when the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly). ATS should take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media Contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Verify the functionality of the device when it is offline and not connected to Accenture Ticketing Services", "Test_Sce_Description": "This scenario will test if the device correctly checks the local deny list if the media is on the local deny list when it is offline. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services. The tap should then be rated in ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media Contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Verify the functionality of the device when Open Payments Media fails ODA check", "Test_Sce_Description": "This scenario will test if the device correctly returns the appropriate feedback when an Open Payments Media fails the ODA check. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media Contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Verify the functionality of the device when Open Payments Media is on the deny list", "Test_Sce_Description": "This scenario will test if the device correctly sends the tap to ATS and returns a response that the media is on the deny list when the Open Payments Media is on the deny list. The right to travel should not be conferred."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media Contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Verify the functionality of the device when multiple NFC media are presented at one time", "Test_Sce_Description": "This scenario will test if the device correctly blocks all fare payment functionality when multiple NFC media are presented to the card reader at once. The Anti-Collision Error Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media Contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Verify the functionality of the device when it is in Out-of-Service state", "Test_Sce_Description": "This scenario will test if the device correctly displays the Not in Service screen to the cardholder and does not detect the media when it is in Out-of-Service state. The device should remain in Out-of-Service State."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media Contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Verify the functionality of the device when the customer attempts to tap-on immediately after tapping-off at the same station", "Test_Sce_Description": "This scenario will test if the device correctly sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window when the customer attempts to tap-on immediately after tapping-off at the same station. The Declined \u2013 Already Tapped Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap-On an SA Tool with Open Payments Media \u2013 Customer is eligible for capping discount", "Test_Scnario": "Testing the functionality of SA Tool when the device is offline", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the device is offline and not connected to Accenture Ticketing Services. The test will verify if the device checks the local deny list if the media is on the local deny list and if the latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap-On an SA Tool with Open Payments Media \u2013 Customer is eligible for capping discount", "Test_Scnario": "Testing the audio assist mode of the SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer uses the audio jack to hear instructions. The test will verify if the device automatically switches into audio assist mode when headphones are inserted into the Audio jack and if the audio instructions detail how to adjust the volume and prompt the user to tap their media."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap-On an SA Tool with Open Payments Media \u2013 Customer is eligible for capping discount", "Test_Scnario": "Testing the override functionality of the SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer requests the override of a Default Trip. The test will verify if the Device HMI informs the customer that the Device is prepared to override the Default Trip and if the tap-off occurs while the device is in Override mode, the device processes the tap as a normal tap-off."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap-On an SA Tool with Open Payments Media \u2013 Customer is eligible for capping discount", "Test_Scnario": "Testing the capping discount eligibility of the SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer is eligible for capping discount. The test will verify if the device sends the tap to Accenture Ticketing Services for processing, if ATS checks the online deny list and completes the fare processing, and if ATS calculates the capping discount and applies it to the fare calculation."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap-On an SA Tool with Open Payments Media \u2013 Customer is eligible for capping discount", "Test_Scnario": "Testing the multiple capping discount eligibility of the SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer is eligible for multiple capping discounts. The test will verify if the device sends the tap to Accenture Ticketing Services for processing, if ATS checks the online deny list and completes the fare processing, and if ATS calculates the capping discount and applies it to the fare calculation. The test will also verify if ATS takes whatever Capping program which is of highest precedence and applies that discount to the fare."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap-On an SA Tool with Open Payments Media \u2013 Customer is eligible for capping discount", "Test_Scnario": "Testing the capping discount eligibility of the SA Tool when the device is offline", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the device is offline and the customer is eligible for capping discount. The test will verify if the device checks the local deny list if the media is on the local deny list and if the latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap-On an SA Tool with Open Payments Media \u2013 Customer is eligible for multiple capping discounts", "Test_Scnario": "Verify the functionality of Open Payments Media Tap-On on SA Tool with multiple capping discounts", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly processes the tap-on when the customer is eligible for multiple capping discounts. The tool should be able to detect the media, check its validity, and send the tap to Accenture Ticketing Services for processing. ATS should then calculate the capping discount and apply it to the fare calculation."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap-On an SA Tool with Open Payments Media \u2013 Customer is eligible for multiple capping discounts", "Test_Scnario": "Verify the performance of SA Tool during Tap-On with Open Payments Media with multiple capping discounts", "Test_Sce_Description": "This scenario is to test the performance of the SA Tool when processing a tap-on with multiple capping discounts. The tool should be able to process the tap-on quickly and efficiently, without any delays or errors."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap-On an SA Tool with Open Payments Media \u2013 Customer is eligible for multiple capping discounts", "Test_Scnario": "Verify the security of SA Tool during Tap-On with Open Payments Media with multiple capping discounts", "Test_Sce_Description": "This scenario is to test the security of the SA Tool when processing a tap-on with multiple capping discounts. The tool should securely transmit the tap data to Accenture Ticketing Services for processing, ensuring that the customer's information is protected."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap-On an SA Tool with Open Payments Media \u2013 Customer is eligible for multiple capping discounts", "Test_Scnario": "Verify the functionality of SA Tool when offline during Tap-On with Open Payments Media with multiple capping discounts", "Test_Sce_Description": "This scenario is to test if the SA Tool can correctly process the tap-on when it is offline and the customer is eligible for multiple capping discounts. The tool should be able to check the local deny list and store the tap until it goes back online and connects to Accenture Ticketing Services."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap-On an SA Tool with Open Payments Media \u2013 Customer is eligible for multiple capping discounts", "Test_Scnario": "Verify the performance of SA Tool when offline during Tap-On with Open Payments Media with multiple capping discounts", "Test_Sce_Description": "This scenario is to test the performance of the SA Tool when it is offline and processing a tap-on with multiple capping discounts. The tool should be able to process the tap-on efficiently, without any delays or errors, even when it is not connected to Accenture Ticketing Services."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap-On an SA Tool with Open Payments Media \u2013 Customer is eligible for multiple capping discounts", "Test_Scnario": "Verify the security of SA Tool when offline during Tap-On with Open Payments Media with multiple capping discounts", "Test_Sce_Description": "This scenario is to test the security of the SA Tool when it is offline and processing a tap-on with multiple capping discounts. The tool should securely store the tap data until it goes back online and connects to Accenture Ticketing Services, ensuring that the customer's information is protected."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap-On an SA Tool with Open Payments Media \u2013 Customer is eligible for Capping discount; Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Testing the functionality of SA Tool when offline and not connected to ATS", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is offline and not connected to Accenture Ticketing Services (ATS). The test will involve a customer who is eligible for a capping discount. The test will ensure that the device checks the local deny list and stores the tap until the device goes back online and connects to ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap-On an SA Tool with Open Payments Media \u2013 Customer is eligible for Capping discount; Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Testing the functionality of SA Tool when capping discount criteria is met", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer has met any capping discount criteria and capping has been configured. The test will ensure that the device sends the tap to ATS for processing, checks the online deny list, completes the fare processing, and applies the capping discount to the fare calculation."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap-On an SA Tool with Open Payments Media \u2013 Customer is eligible for Capping discount; Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Testing the functionality of SA Tool when multiple capping discount criteria are met", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer has met multiple capping discount criteria and capping has been configured. The test will ensure that the device sends the tap to ATS for processing, checks the online deny list, completes the fare processing, and applies the highest precedence capping discount to the fare calculation."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap-On an SA Tool with Open Payments Media \u2013 Customer is eligible for Capping discount; Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Testing the functionality of SA Tool when Open Payments Media fails ODA check", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when an Open Payments Media fails the ODA check. The test will ensure that the device performs the necessary validation, determines that the Open Payments Media is unable to pass the checks, provides the appropriate feedback to the cardholder, and sends the declined tap to ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap-On an SA Tool with Open Payments Media \u2013 Customer is eligible for Capping discount; Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Testing the functionality of SA Tool when Open Payments Media fails Expiry Check", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when an Open Payments Media fails the Expiry Check. The test will ensure that the device performs the necessary validation, determines that the Open Payments Media is unable to pass the expiry check, provides the appropriate feedback to the cardholder, and sends the declined tap to ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap-On an SA Tool with Open Payments Media \u2013 Customer is eligible for Capping discount; Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Testing the functionality of SA Tool when Open Payments Media has already tapped-on using an Online Device within Anti-Passback Window", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the cardholder taps-on again at the same station within the SA Tool Tap-on anti-passback Window, whereby the initial device and secondary device(s) tapped on were all online. The test will ensure that the device sends the tap to ATS, returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window, and provides the appropriate feedback to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap-On an SA Tool with Open Payments Media \u2013 Customer is eligible for Capping discount; Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Testing the functionality of SA Tool when Open Payments Media has already tapped-on using an Offline Device", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the cardholder taps-on again at the same station within the SA Tool Tap-on anti-passback Window whereby the initial device tapped, and secondary device(s) is the same device and is offline. The test will ensure that the device accepts the tap, checks the latent transaction processor on the same device for a previous tap within the anti-passback window, stores the tap on the device till it is connected to ATS where the transactions will be reconciled, and provides the appropriate feedback to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap-On an SA Tool with Open Payments Media \u2013 Customer is eligible for Capping discount; Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Testing the functionality of SA Tool when Open Payments Media is on the ATS deny list and the SA Tool is online", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the Open Payments Media is on the deny list and the SA Tool is online. The test will ensure that the device performs the necessary validation, determines that the Open Payments Media is unable to pass the checks, provides the appropriate feedback to the cardholder, and sends the declined tap to ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media fails ODA check Note: Non-ODA Interac cards are allowed to travel", "Test_Scnario": "Cardholder taps Interac media on CID", "Test_Sce_Description": "Verify that when the Cardholder taps the Interac media on the CID, the device detects the Interac media correctly."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media fails ODA check Note: Non-ODA Interac cards are allowed to travel", "Test_Scnario": "Unsupported media tapped on device", "Test_Sce_Description": "Verify that when an unsupported media is tapped on the device, the device correctly identifies it as unsupported and displays an appropriate error message."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media fails ODA check Note: Non-ODA Interac cards are allowed to travel", "Test_Scnario": "Open Payment Card tapped while Open Payments are disabled on SA Tool", "Test_Sce_Description": "Verify that when an Open Payment Card is tapped while Open Payments are disabled on SA Tool, the device correctly identifies it as unsupported and displays an appropriate error message."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media fails ODA check Note: Non-ODA Interac cards are allowed to travel", "Test_Scnario": "Open Payment Card tapped while corresponding payment method / card brand is disabled on SA Tool", "Test_Sce_Description": "Verify that when an Open Payment Card is tapped while the corresponding payment method / card brand is disabled on SA Tool, the device correctly identifies it as unsupported and displays an appropriate error message."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media fails ODA check Note: Non-ODA Interac cards are allowed to travel", "Test_Scnario": "Open Payments Media tapped within anti-passback window using an Offline SA Tool", "Test_Sce_Description": "Verify that when the Open Payments Media is tapped within the anti-passback window using an Offline SA Tool, the device correctly identifies the tap and checks the latent transaction processor on the same device for a previous tap within the anti-passback window."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media fails ODA check Note: Non-ODA Interac cards are allowed to travel", "Test_Scnario": "Cardholder Taps-On an Online SA Tool to a Fare-by-Zone TA with Open Payments Media", "Test_Sce_Description": "Verify that when an Open Payments Cardholder taps-on at a SA Tool that is online and connected to ATS for a Fare-by-Zone TA, the device correctly processes the tap and confers the right to travel."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media fails ODA check Note: Non-ODA Interac cards are allowed to travel", "Test_Scnario": "Open Payments Media is on the deny list", "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list, the device correctly identifies it and does not confer the right to travel."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media fails ODA check Note: Non-ODA Interac cards are allowed to travel", "Test_Scnario": "Open Payments Media is on the local deny list and device is offline", "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the device correctly identifies it and does not confer the right to travel."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media fails ODA check Note: Non-ODA Interac cards are allowed to travel", "Test_Scnario": "Multiple NFC media presented to the device at one time", "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device correctly blocks all fare payment functionality."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media fails ODA check Note: Non-ODA Interac cards are allowed to travel", "Test_Scnario": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Sce_Description": "Verify that when an Open Payments Media is tapped when the SA Tool is in Out-of-Service state, the device correctly remains in the Out-of-Service state and does not detect the media."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media fails ODA check Note: Non-ODA Interac cards are allowed to travel", "Test_Scnario": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)", "Test_Sce_Description": "Verify that when a customer attempts to tap-on immediately after tapping-off at the same station and the device is online, the device correctly identifies the tap as within the Tap-on anti-passback Window and provides the appropriate feedback."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media fails ODA check Note: Non-ODA Interac cards are allowed to travel", "Test_Scnario": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is offline (anti-passback)", "Test_Sce_Description": "Verify that when a customer attempts to tap-on immediately after tapping-off at the same station and the device is offline, the device correctly identifies the tap as within the Tap-on anti-passback Window and provides the appropriate feedback."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media Fails Expiry Check", "Test_Scnario": "Open Payments Media Fails Expiry Check", "Test_Sce_Description": "In this scenario, the device performs the necessary validation and determines that the Open Payments Media is unable to pass the expiry check. The Declined \u2013 Card Expired Screen is provided to the cardholder. The declined tap is sent to ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media Fails Expiry Check", "Test_Scnario": "Open Payments Media is on the ATS deny list and the SA Tool is online", "Test_Sce_Description": "In this scenario, the device sends the tap to ATS and returns a response that the media is on the deny list. Right to travel is not conferred. The Declined \u2013 Unpaid Fares (Suspended: Unpaid Fares) screen is provided to the cardholder or the Declined \u2013 Try Another Card (Suspended: Other) screen is provided to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media Fails Expiry Check", "Test_Scnario": "Open Payments Media is on the local deny list and the SA Tool is offline", "Test_Sce_Description": "In this scenario, the device checks the local deny list and returns a response that the media is denied. Right to travel is not conferred. The Declined \u2013 Unpaid Fares (Suspended: Unpaid Fares) screen is provided to the cardholder or the Declined \u2013 Try Another Card (Suspended: Other) screen is provided to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media Fails Expiry Check", "Test_Scnario": "Multiple NFC media are presented to the device at one time in Fare Payment mode", "Test_Sce_Description": "In this scenario, the customer presents multiple NFC media to the card reader at once. The device displays an error toast message."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media Fails Expiry Check", "Test_Scnario": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Sce_Description": "In this scenario, the device displays the Not in Service screen to the cardholder. Customer attempts to tap their Open Payments Media on the card reader. Device will not detect the media. Device Remains in Out-of-Service State."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media Fails Expiry Check", "Test_Scnario": "Customer attempts to tap on and an error has occurred", "Test_Sce_Description": "In this scenario, the device records the tap. The Declined \u2013 Please Contact Customer Service screen is provided to the cardholder. The declined tap is sent to ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media Fails Expiry Check", "Test_Scnario": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in Pilot mode", "Test_Sce_Description": "In this scenario, the device performs the necessary validation and determines that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen is provided to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media Fails Expiry Check", "Test_Scnario": "Open Payments Media has already tapped-on using an Online Device", "Test_Sce_Description": "In this scenario, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen is provided to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Open Payments Media Fails Expiry Check", "Test_Scnario": "Open Payments Media has already tapped-on using an Offline Device (Anti-passback)", "Test_Sce_Description": "In this scenario, the device accepts the tap and checks the latent transaction processor on the same device for a previous tap within the anti-passback window. The tap is stored on the device till it is connected to ATS where the transactions will be reconciled. The Declined \u2013 Already Tapped Screen is provided to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Scnario": "Virtual Card Default O/D Tap-On at Origin or Destination Station", "Test_Sce_Description": "This scenario will test the functionality of the Virtual Card when it contains a default trip and the customer taps on at either the origin or destination station. The test will verify if the device correctly sends the tap to ATS for processing, checks the online hotlist, completes the fare processing accounting for the virtual card\u2019s default trip, and then sends the default trip success result back to the device via API."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Scnario": "Virtual Card Default O/D Tap-On Success Screen Display", "Test_Sce_Description": "This scenario will test if the device correctly displays the default trip success screen after the ATS returns the tap results stating that the current tap is associated with the Virtual Card\u2019s default trip. The test will verify if the right to travel is conferred to the Cardholder by updating the HMI of the SA Tool and if the FPS \u2013 Default Trip Tap-On Screen is provided to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Scnario": "Virtual Card Default O/D Override Prior to Tap-On", "Test_Sce_Description": "This scenario will test the functionality of the Virtual Card when it contains a default trip and the customer overrides the default trip prior to tapping-on. The test will verify if the device correctly overrides the default O/D contained on the Virtual Card and if ATS processes the tap as a regular tap-on."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Scnario": "Virtual Card Default O/D Override Successful Screen Display", "Test_Sce_Description": "This scenario will test if the device correctly displays the Override Successful screen after the customer overrides the default trip prior to tapping-on. The test will verify if the right to travel is conferred to the Cardholder by updating the HMI of the SA Tool and if the FPS \u2013 Override Successful is provided to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Scnario": "Virtual Card without Default O/D Override Prior to Tap-On", "Test_Sce_Description": "This scenario will test the functionality of the Virtual Card when it does not contain a default trip and the customer overrides the default trip prior to tapping-on. The test will verify if the device correctly processes the tap as a result tap-on when the Virtual Card with no Default O/D is tapped on while the device is in Override mode."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Scnario": "Virtual Card without Default O/D E-Purse Tap On Screen Display", "Test_Sce_Description": "This scenario will test if the device correctly displays the E-Purse Tap On Screen after the customer overrides the default trip prior to tapping-on and the Virtual Card with no Default O/D is tapped on while the device is in Override mode. The test will verify if the right to travel is conferred to the Cardholder by updating the HMI of the SA Tool and if the FPS \u2013 E-Purse Tap On Screen is provided to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Scnario": "Virtual Card in Good Standing but Scratchpad Blocked Parameter Needs to be Updated", "Test_Sce_Description": "This scenario will test the functionality of the Virtual Card when it is in good standing according to ATS, but scratchpad blocked parameter needs to be updated. The test will verify if the device correctly provides the appropriate feedback to the Cardholder of a successful tap, checks and resets the tap counter to 0 if it isn't already at 0, and updates the Virtual Card scratchpad to remove the block parameter and prioritizes the accepted response from ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Scnario": "Virtual Card Media Fails Card Authentication Check", "Test_Sce_Description": "This scenario will test the functionality of the Virtual Card when it fails the card authentication check. The test will verify if the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard, deducts the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip, and uses PAR as the card identifier."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Verify the functionality of overriding the default O/D on Virtual Card", "Test_Sce_Description": "This scenario will test if the system correctly overrides the default O/D contained on the Virtual Card and processes the tap as a regular tap-on. The customer requests the override of a Default Trip by interacting with the Device. The Device HMI informs the customer that the Device is prepared to override the Default Trip. The Cardholder then initiates a trip by presenting the Virtual Card to the Device CID."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Verify the feedback provided to the Cardholder after overriding the default trip", "Test_Sce_Description": "This scenario will test if the right to travel is conferred to the Cardholder by updating the HMI of the SA Tool after overriding the default trip. The FPS \u2013 Override Successful should be provided to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Verify the functionality when Virtual Card does not contain a Default O/D and the Customer Overrides the Default Trip", "Test_Sce_Description": "This scenario will test if the device correctly processes the tap as a result tap-on when the Virtual Card with no Default O/D is tapped on while the device is in Override mode. The customer requests the override of a Default Trip by interacting with the Device. The Device HMI informs the customer that the Device is prepared to override the Default Trip. The Cardholder then initiates a trip by presenting the Virtual to the Device CID."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Verify the feedback provided to the Cardholder when Virtual Card does not contain a Default O/D and the Customer Overrides the Default Trip", "Test_Sce_Description": "This scenario will test if the right to travel is conferred to the Cardholder by updating the HMI of the SA Tool when the Virtual Card with no Default O/D is tapped on while the device is in Override mode. The FPS \u2013 E-Purse Tap On Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Verify the functionality when Virtual Card is in good standing according to ATS, but scratchpad blocked parameter needs to be updated", "Test_Sce_Description": "This scenario will test if the device correctly provides the appropriate feedback to the Cardholder of a successful tap when Virtual Card is in good standing according to ATS, but scratchpad blocked parameter needs to be updated. The FPS \u2013 Virtual Card E-Purse Flat Fare Accepted Screen should be provided to the cardholder. The tap counter should be checked and reset to 0 if it isn't already at 0. The Virtual Card scratchpad should be updated to remove the block parameter and prioritize the accepted response from ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Verify the functionality when Virtual Card Media fails Card Authentication check", "Test_Sce_Description": "This scenario will test if the system correctly handles the situation when Virtual Card Media fails Card Authentication check. The appropriate error message should be displayed and the error should be logged for troubleshooting."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Testing the functionality of overriding the default O/D on a Virtual Card", "Test_Sce_Description": "This scenario will test the functionality of the system when a customer requests to override the default O/D on a Virtual Card. The system should be able to handle this request and process the tap as a regular tap-on."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Testing the performance of the system when overriding the default O/D on a Virtual Card", "Test_Sce_Description": "This scenario will test the performance of the system when a customer requests to override the default O/D on a Virtual Card. The system should be able to process this request in a timely manner without any delays or performance issues."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Testing the security of the system when overriding the default O/D on a Virtual Card", "Test_Sce_Description": "This scenario will test the security of the system when a customer requests to override the default O/D on a Virtual Card. The system should be able to securely process this request without any security breaches or data leaks."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Testing the functionality of the system when a Virtual Card fails the Card Authentication check", "Test_Sce_Description": "This scenario will test the functionality of the system when a Virtual Card fails the Card Authentication check. The system should be able to handle this exception and provide the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Testing the performance of the system when a Virtual Card fails the Card Authentication check", "Test_Sce_Description": "This scenario will test the performance of the system when a Virtual Card fails the Card Authentication check. The system should be able to handle this exception in a timely manner without any delays or performance issues."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Testing the security of the system when a Virtual Card fails the Card Authentication check", "Test_Sce_Description": "This scenario will test the security of the system when a Virtual Card fails the Card Authentication check. The system should be able to handle this exception securely without any security breaches or data leaks."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap a Virtual Card on online SA Tool where card is in good standing, but scratchpad blocked parameter needs to be updated", "Test_Scnario": "Testing the successful tap of a Virtual Card on an online SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Virtual Card is tapped on it. The card is in good standing according to ATS, but the scratchpad blocked parameter needs to be updated. The device should provide appropriate feedback to the Cardholder of a successful tap and the Virtual Card scratchpad should be updated to remove the block parameter."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap a Virtual Card on online SA Tool where card is in good standing, but scratchpad blocked parameter needs to be updated", "Test_Scnario": "Testing the tap counter reset functionality", "Test_Sce_Description": "This scenario tests the functionality of the tap counter on the SA Tool. After a successful tap, the tap counter should be checked and reset to 0 if it isn't already at 0."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap a Virtual Card on online SA Tool where card is in good standing, but scratchpad blocked parameter needs to be updated", "Test_Scnario": "Testing the Card Authentication check failure", "Test_Sce_Description": "This scenario tests the exception flow when the Virtual Card Media fails the Card Authentication check. The device should return the appropriate feedback and the Declined \u2013 Failed Card Authentication Check screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap a Virtual Card on online SA Tool where card is in good standing, but scratchpad blocked parameter needs to be updated", "Test_Scnario": "Testing the tap-on anti-passback Window", "Test_Sce_Description": "This scenario tests the exception flow when the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window. The device should provide the cardholder with the appropriate feedback and the Declined \u2013 Already Tapped Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap a Virtual Card on online SA Tool where card is in good standing, but scratchpad blocked parameter needs to be updated", "Test_Scnario": "Testing the offline tap details collection", "Test_Sce_Description": "This scenario tests the exception flow when the SA Tool is not online and not connected to ATS. The device should collect offline tap details and once the device returns back online, offline taps should be sent to ATS via bulk upload."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap a Virtual Card on online SA Tool where card is in good standing, but scratchpad blocked parameter needs to be updated", "Test_Scnario": "Testing the presentation of multiple NFC media to the device at one time", "Test_Sce_Description": "This scenario tests the exception flow when multiple NFC media are presented to the device at one time. The device should block all fare payment functionality and the Anti-Collision Error Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap a Virtual Card on online SA Tool where card is in good standing, but scratchpad blocked parameter needs to be updated", "Test_Scnario": "Testing the tap of a Virtual Card Media when SA Tool is in Out-of-Service state", "Test_Sce_Description": "This scenario tests the exception flow when the Virtual Card Media is tapped on an SA Tool that is in Out-of-Service state. The device should check the local hotlist and the Virtual Card Scratchpad and determine the card blocked parameter is set to true. The Declined \u2013 Blocked Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap a Virtual Card on online SA Tool where card is in good standing, but scratchpad blocked parameter needs to be updated", "Test_Scnario": "Testing the tap-off of a Virtual Card Media when the mobile wallet blocked parameter is enabled", "Test_Sce_Description": "This scenario tests the exception flow when the Virtual Card Media is tapped off and the mobile wallet blocked parameter is enabled. The device should not know a tap is attempted and should have no action."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Tap a Virtual Card on online SA Tool where card is in good standing, but scratchpad blocked parameter needs to be updated", "Test_Scnario": "Testing the tap-off of a Virtual Card Media on an offline device when tap counter is greater than allowable offline taps", "Test_Sce_Description": "This scenario tests the exception flow when the Virtual Card Media is tapped off an offline device and the tap counter is greater than the allowable offline taps. The device should not allow the tap and should provide the appropriate feedback to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card Media fails Card Authentication check", "Test_Scnario": "Virtual Card Media fails Card Authentication check", "Test_Sce_Description": "In this scenario, the device performs the necessary validation and determines that the Virtual Card Media is unable to pass the checks. The Declined \u2013 Contact CLIENT Customer Service screen is provided to the cardholder. An error will be captured and logged in the background when this occurs to help with troubleshooting the issue. This error will also be captured in the SOTI logs. The declined tap is sent to ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card Media fails Card Authentication check", "Test_Scnario": "Multiple NFC media are presented to the device at one time", "Test_Sce_Description": "In this scenario, if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. The Anti-Collision Error Screen is provided to the cardholder. An error will be captured and logged in the background when this occurs to help with troubleshooting the issue. This error will also be captured in the SOTI logs. The declined tap is sent to ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card Media fails Card Authentication check", "Test_Scnario": "Tap-off a Virtual Card Media when SA Tool is in Out-of-Service state", "Test_Sce_Description": "In this scenario, the device is in Out-of-Service state. The device displays the Not in Service screen to the cardholder. Customer attempts to tap their Virtual Card Media on the card reader. The device will not detect the media and remains in Out-of-Service State."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card Media fails Card Authentication check", "Test_Scnario": "Tap-off and an error has occurred", "Test_Sce_Description": "In this scenario, an error has occurred on the device that does not cover the exception cases above. The device records the tap. The Declined \u2013 See Customer Service Screen is provided to the cardholder. An error will be captured and logged in the background when this occurs to help with troubleshooting the issue. This error will also be captured in the SOTI logs. The declined tap is sent to ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card Media fails Card Authentication check", "Test_Scnario": "Tap-off and Virtual Card Media is on the local hotlist and device is offline", "Test_Sce_Description": "In this scenario, if the SA Tool is not online and not connected to ATS, the device will collect offline tap details and once the device returns back online, offline taps will be sent to ATS via bulk upload. If the Virtual Card Media is on the local hotlist, the right to travel is not conferred. The device checks the local hotlist and returns a response that the media is denied. Right to travel is not conferred. The Declined \u2013 Blocked Screen is provided to the cardholder. The Device updates the blocking parameter on the Virtual Card Scratchpad to be enabled. The device removes the Virtual Card from the hotlist. An error will be captured and logged in the background when this occurs to help with troubleshooting the issue. This error will also be captured in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card Media fails Card Authentication check", "Test_Scnario": "Tap-off and Virtual Card Media\u2019s blocked parameter on the scratchpad is enabled", "Test_Sce_Description": "In this scenario, if the Virtual Card Media is blocked, the right to travel is not conferred. The device checks the local hotlist and does not find the Virtual Card. The device checks the Virtual Card Scratchpad and determines the card blocked parameter is set to true. Right to travel is not conferred. The Declined \u2013 Blocked Screen is provided to the cardholder. An error will be captured and logged in the background when this occurs to help with troubleshooting the issue. This error will also be captured in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card Media fails Card Authentication check", "Test_Scnario": "Tap-off and Virtual Card Media\u2019s blocked parameter on the mobile wallet is enabled", "Test_Sce_Description": "In this scenario, if the Virtual Card Media is blocked, the right to travel is not conferred. If the Virtual Card Media is blocked in the wallet, there will not be an interaction with the device on an attempted tap. The device will not know a tap is attempted and will have no action."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Default Trip", "Use_Case_Name": "Virtual Card Media fails Card Authentication check", "Test_Scnario": "Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps", "Test_Sce_Description": "In this scenario, if the tap counter is greater than the allowable offline taps, the device will not allow the tap and will display an error message. The device will remain in offline mode until the tap counter is reset or the device is brought back online."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Tap-off and Virtual Card Media\u2019s blocked parameter on the mobile wallet is enabled", "Test_Scnario": "Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled", "Test_Sce_Description": "Verify that when the Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled, the right to travel is not conferred. The device should check the local hotlist and not find the Virtual Card. The device should also check the Virtual Card Scratchpad and determine the card blocked parameter is set to true. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Tap-off and Virtual Card Media\u2019s blocked parameter on the mobile wallet is enabled", "Test_Scnario": "Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled", "Test_Sce_Description": "Verify that when the Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled, the right to travel is not conferred. If the Virtual Card Media is blocked in the wallet, there should not be an interaction with the device on an attempted tap. The device should not know a tap is attempted and should have no action."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Tap-off and Virtual Card Media\u2019s blocked parameter on the mobile wallet is enabled", "Test_Scnario": "Tap counter is greater than the allowable offline taps", "Test_Sce_Description": "Verify that when the tap counter is greater than the allowable offline taps, the right to travel is not conferred. The device should check the tap counter and if the tap counter limit has been reached, the offline device should reject the tap and the rider should not be permitted entry. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Tap-off and Virtual Card Media\u2019s blocked parameter on the mobile wallet is enabled", "Test_Scnario": "E-Ticket holder scans QR Code against the SA Tool reader and the SA Tool is Offline", "Test_Sce_Description": "Verify that when an E-Ticket holder scans QR Code against the SA Tool reader and the SA Tool is Offline, the device returns the appropriate feedback, and the right to travel is not conferred. As the device is offline, the call to the Bytemark backend should fail and be unable to retrieve details regarding the E-Ticket. The result should be cached in an offline database to be uploaded to Bytemark API when connection is resumed."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Tap-off and Virtual Card Media\u2019s blocked parameter on the mobile wallet is enabled", "Test_Scnario": "E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader", "Test_Sce_Description": "Verify that when an E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader, the device should perform a check to ensure that the E-Ticket meets timestamp window requirements. The device should perform a check against the local deny list and confirms that the current E-Ticket being validated is not on the deny list. The device should call the Bytemark API and receive a response that the E-Ticket is valid for travel."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps", "Test_Scnario": "Offline Tap Counter Limit Reached on BFTP Device", "Test_Sce_Description": "Verify that when the BFTP device is offline and the tap counter limit has been reached, the device correctly rejects the tap and does not permit the rider entry. This scenario will test the functionality of the tap counter limit and the device's response when this limit is reached."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps", "Test_Scnario": "Error Logging when Tap Counter Limit Reached on TTC Device", "Test_Sce_Description": "Check that when the TTC device is offline and the tap counter limit is reached, an error is correctly captured and logged in the background. This scenario will test the error logging functionality of the device when the tap counter limit is reached."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps", "Test_Scnario": "Bulk Upload of Offline Taps to ATS from Transit Agency Device", "Test_Sce_Description": "Ensure that when the Transit Agency device returns back online, all offline taps are correctly sent to ATS via bulk upload. This scenario will test the bulk upload functionality of the device when it returns back online."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps", "Test_Scnario": "Validation of Virtual Card Media on BFTP Device", "Test_Sce_Description": "Verify that the BFTP device correctly validates the Virtual Card Media when it is tapped on the device. This scenario will test the validation checks of the device for the Virtual Card Media."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps", "Test_Scnario": "Hotlist Check for Virtual Card Media on TTC Device", "Test_Sce_Description": "Check that the TTC device correctly checks the hotlist when the Virtual Card Media is tapped on the device. This scenario will test the hotlist check functionality of the device for the Virtual Card Media."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps", "Test_Scnario": "Fare Processing by ATS for Taps from Transit Agency Device", "Test_Sce_Description": "Ensure that the ATS correctly processes the fare for taps from the Transit Agency device. This scenario will test the fare processing functionality of the ATS for taps from the device."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps", "Test_Scnario": "Feedback to Cardholder on Successful Tap on BFTP Device", "Test_Sce_Description": "Verify that the BFTP device correctly provides feedback to the Cardholder on a successful tap. This scenario will test the feedback functionality of the device to the Cardholder on a successful tap."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps", "Test_Scnario": "Deny Tap Sent to ATS when Device Returns Online", "Test_Sce_Description": "Check that when the device returns back online, the deny tap is correctly sent to ATS. This scenario will test the functionality of the device to send deny taps to ATS when it returns back online."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps", "Test_Scnario": "Blocked Parameter Check for Virtual Card Media on TTC Device", "Test_Sce_Description": "Ensure that the TTC device correctly checks the blocked parameter for the Virtual Card Media when it is tapped on the device. This scenario will test the blocked parameter check functionality of the device for the Virtual Card Media."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps", "Test_Scnario": "No Interaction with Device when Virtual Card Media Blocked in Wallet", "Test_Sce_Description": "Verify that there is no interaction with the device when the Virtual Card Media is blocked in the wallet. This scenario will test the functionality of the device when the Virtual Card Media is blocked in the wallet."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Deny List", "Test_Scnario": "Testing the functionality of SA Tool when Farecard is on the Deny List", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application when the customer's Farecard is on the Deny List. The test will ensure that the application correctly identifies the Farecard as being on the Deny List and appropriately declines the transaction. The test will also verify that the application plays the declined audio tone and returns to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Deny List", "Test_Scnario": "Performance testing of SA Tool when Farecard is on the Deny List", "Test_Sce_Description": "This scenario will test the performance of the SA Tool application when the customer's Farecard is on the Deny List. The test will measure the time taken by the application to identify the Farecard as being on the Deny List, decline the transaction, play the declined audio tone, and return to the Tap Card screen. The performance of the application should be within acceptable limits."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Deny List", "Test_Scnario": "Security testing of SA Tool when Farecard is on the Deny List", "Test_Sce_Description": "This scenario will test the security of the SA Tool application when the customer's Farecard is on the Deny List. The test will ensure that the application securely handles the customer's Farecard information and does not allow any unauthorized access or manipulation of the data. The application should also securely log the declined transaction for future reference."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Deny List", "Test_Scnario": "Testing the exception flow of SA Tool when Farecard is unreadable", "Test_Sce_Description": "This scenario will test the exception flow of the SA Tool application when the Farecard is unreadable. The test will ensure that the application correctly detects the unreadable Farecard, indicates to the operator that the Farecard is unreadable, and logs the error in the background for troubleshooting. The application should also handle multiple unsuccessful taps correctly."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Deny List", "Test_Scnario": "Testing the alternate flow of SA Tool when Farecard has a non-adult, non-child, non-discreet concession", "Test_Sce_Description": "This scenario will test the alternate flow of the SA Tool application when the customer's Farecard has a valid non-adult, non-child, non-discreet concession. The test will ensure that the application correctly identifies the concession on the Farecard and processes the fare payment accordingly. The application should also update the Farecard and display the successful fare payment screen."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using ePurse Balance when battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the battery goes below the low battery threshold during a successful Farecard tap. The application should switch to 'Out of Service' mode after processing the remote lists. The test will verify if the application correctly switches to 'Out of Service' mode and if the fare payment is processed correctly before the switch."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass when the customer's card is not a Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the customer's card is not a Farecard. The application should not respond and display a 'Card Read Error' message. The test will verify if the application correctly displays the error message and does not respond to the tap."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass when the customer's Farecard is within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the customer's card is within the Anti-Passback Window. The application should display a declined message to the customer and the transaction should not be conducted. The test will verify if the application correctly displays the declined message and does not conduct the transaction."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass when the Limited Period Pass is outside of valid time and the card is in overdraft", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the farecard has a valid Limited Period Pass product on it, the time at tap is occurring outside of the time limit of the Limited Period Pass Product, and the farecard is in overdraft. The application should display a declined message to the customer and the transaction should not be conducted. The test will verify if the application correctly displays the declined message and does not conduct the transaction."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment from a Virtual Card using ePurse Balance when the customer's Virtual Card is unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the Virtual Card is unreadable. The application should indicate to the operator that the Virtual Card is unreadable. The test will verify if the application correctly indicates the unreadable card to the operator."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment from a Virtual Card using ePurse Balance when the customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The application should show the successful fare payment screen for non-adult concession. The test will verify if the application correctly shows the successful fare payment screen for non-adult concession."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment from a Virtual Card using ePurse Balance when the customer's ePurse balance is less than the fare amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the customer's ePurse balance is less than the fare amount. The application should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The test will verify if the application correctly removes the fare from the Virtual Card e-Purse and puts the card into overdraft."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment from a Virtual Card using ePurse Balance when the transaction is within Intra-SP Transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the Virtual Card contains a valid intra-agency transfer product. The application should deduct $0 from the Virtual Card E-Purse. The test will verify if the application correctly deducts $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment from a Virtual Card using ePurse Balance when the transaction is within Inter-SP Transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the Virtual Card contains a valid inter-agency transfer product. The application should deduct $0 from the Virtual Card E-Purse. The test will verify if the application correctly deducts $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Unreadable Virtual Card on SA Tool", "Test_Sce_Description": "Verify that the SA Tool application correctly detects and indicates when a customer's Virtual Card is unreadable. This scenario will test the functionality of the NFC reader and the application's ability to handle exceptions."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Fare Payment with Non-Adult, Non-Child, Non-Discreet Concessions on Virtual Card", "Test_Sce_Description": "Validate that the SA Tool correctly processes fare payments from a Virtual Card with valid non-adult, non-child, non-discreet concessions. The application should display the successful fare payment screen for non-adult concession and play the corresponding audio tone."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Fare Payment with Insufficient ePurse Balance on Virtual Card", "Test_Sce_Description": "Check that the SA Tool and ATS correctly handle fare payments when the customer's ePurse balance is less than the fare amount. The ATS should put the card into overdraft and the device should provide appropriate feedback to the Cardholder of a successful transaction."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Fare Payment within Intra-SP Transfer Window on Virtual Card", "Test_Sce_Description": "Ensure that the SA Tool and ATS correctly process fare payments within the Intra-SP Transfer window. The ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Fare Payment within Inter-SP Transfer Window on Virtual Card", "Test_Sce_Description": "Verify that the SA Tool and ATS correctly process fare payments within the Inter-SP Transfer window. The ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Fare Payment with Audio Messages Request on SA Tool", "Test_Sce_Description": "Check that the SA Tool correctly handles fare payments when the customer requests audio messages. The application should provide the appropriate audio feedback to the Cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Fare Payment during Peak Hours after Reaching Off Peak Daily Cap on SA Tool", "Test_Sce_Description": "Validate that the SA Tool and ATS correctly process fare payments during peak hours after the off peak daily cap has been reached. The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Fare Payment on Premium Service Route with Higher Premium Fare on SA Tool", "Test_Sce_Description": "Ensure that the SA Tool and ATS correctly process fare payments on a premium service route/location after previously riding on a Special Event service route. The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Fare Payment on Premium Service Route with Lower Premium Fare on SA Tool", "Test_Sce_Description": "Verify that the SA Tool and ATS correctly process fare payments on a premium service route/location after previously riding on a Special Event service route. The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Fare Payment with Valid Non-Adult Concession on Farecard", "Test_Sce_Description": "Check that the SA Tool correctly processes fare payments from a Farecard with a valid non-adult concession. The application should display the successful fare payment screen for non-adult concession and play the corresponding audio tone."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Testing the functionality of SA Tool when Virtual Card is unreadable", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the NFC reader detects the Virtual Card but is unable to read it. The SA Tool application should indicate to the operator that the Virtual Card is unreadable. The customer will tap on the NFC reader again. If the tap is successful, steps 4 \u2013 7 will be conducted. If the tap is unsuccessful, the SA Tool application will indicate to the operator that the CLIENT (Virtual) Card is unreadable."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Testing the functionality of SA Tool when customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Testing the functionality of SA Tool when customer has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the customer\u2019s ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS checks the online hotlist and completes the fare processing. ATS removes the fare from the Virtual Card e-Purse and puts the card into overdraft."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Testing the functionality of SA Tool when transaction is within Intra-SP Transfer window", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the customer\u2019s Virtual Card has a valid transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Testing the functionality of SA Tool when transaction is within Inter-SP Transfer window", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the customer\u2019s Virtual Card has a valid transfer product from other service provider. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Testing the functionality of SA Tool when customer requests Audio Messages", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the customer requests Audio Messages. The SA Tool should be able to provide audio messages to the customer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Testing the functionality of SA Tool when fare payment is being made on the SA Tool", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the fare payment is being made on the SA Tool. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Testing the functionality of SA Tool when customer has a Valid Non-Adult Concession on their Farecard", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the customer\u2019s Farecard has a Valid Non-Adult concession. The SA Tool should be able to process the fare payment correctly."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is locked", "Test_Scnario": "Farecard is locked", "Test_Sce_Description": "Verify that when the Farecard is locked, the right to travel is not conferred. The card reader should detect that the Farecard is locked and provide appropriate feedback to the Cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is locked", "Test_Scnario": "Non-Recognizable media is tapped on SA Tool", "Test_Sce_Description": "Verify that when a user taps a card that is not recognizable to the reader, the SA Tool displays the applicable \u201cTry Another Card\u201d screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is locked", "Test_Scnario": "Cardholder Taps-Off SA Tool with Farecard", "Test_Sce_Description": "Verify that the device checks that the card is valid (i.e. able to communicate, is a Farecard, not locked, and not blocked). The device should deduct the appropriate final configured fare. The device should provide the appropriate feedback to the Cardholder of a successful transaction and update the Farecard accordingly."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is locked", "Test_Scnario": "Farecard is in the Load Value List or Action List", "Test_Sce_Description": "Verify that the Device processes the Load or Action Transaction prior to continuing the validation Use Case. The device should provide the appropriate feedback to the Cardholder of a successful transaction in addition to the processing of a list item and update the Farecard accordingly."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is locked", "Test_Scnario": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Sce_Description": "Verify that when the Farecard is locked, the right to travel is not conferred. The card reader should detect that the Farecard is locked and provide appropriate feedback to the Cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is locked", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance", "Test_Sce_Description": "Verify that the SA Tool reads the Farecard information and performs all the necessary validation checks. The device should compute the value to be deducted from the e-Purse and deduct the fare accordingly. The SA Tool should update the Farecard accordingly and display the successful fare payment screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is locked", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is Unreadable", "Test_Sce_Description": "Verify that when the SA Tool NFC reader detects the Farecard but is unable to read it, the SA Tool application indicates to the operator that the Farecard is unreadable. The customer should tap on the NFC reader again. If the tap is successful, the SA Tool application should conduct the necessary steps. If the tap is unsuccessful, the SA Tool application should indicate to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is locked", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Farecard", "Test_Sce_Description": "Verify that when the customer\u2019s Farecard has a Valid Non-Adult, Non-Child, non-discreet concession, the SA Tool application conducts the necessary steps to accept the fare payment."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-Off on a SA Tool in a Fare-by-Zone TA with Farecard", "Test_Scnario": "Testing Non-Revenue farecard in the training mode on SA Tool", "Test_Sce_Description": "Validate that the SA Tool only accepts Non-Revenue farecard in the training mode. If the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-Off on a SA Tool in a Fare-by-Zone TA with Farecard", "Test_Scnario": "Testing Farecard tap during Temporal Class Supplement on SA Tool", "Test_Sce_Description": "Validate that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the Device should contain an HMI reflecting the Temporal Class Supplement, and process the Tap-On Transaction as a normal tap-on."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-Off on a SA Tool in a Fare-by-Zone TA with Farecard", "Test_Scnario": "Testing Farecard with Autoload Enabled on SA Tool", "Test_Sce_Description": "Validate that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-Off on a SA Tool in a Fare-by-Zone TA with Farecard", "Test_Scnario": "Testing Farecard without Default O/D and Customer Overrides the Default Trip on SA Tool", "Test_Sce_Description": "Validate that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device should process the tap as a result tap-on."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-Off on a SA Tool in a Fare-by-Zone TA with Farecard", "Test_Scnario": "Testing Farecard Tap-On with Audio Messages Request on SA Tool", "Test_Sce_Description": "Validate that when the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-Off on a SA Tool in a Fare-by-Zone TA with Farecard", "Test_Scnario": "Testing Farecard Validation Failure at Tap-On on SA Tool", "Test_Sce_Description": "Validate that if the Farecard fails validation checks at Tap-On, the device should provide the cardholder with the appropriate feedback without updating the Farecard."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-Off on a SA Tool in a Fare-by-Zone TA with Farecard", "Test_Scnario": "Testing Blocked Farecard on SA Tool", "Test_Sce_Description": "Validate that if the Farecard is blocked, the right to travel should not be conferred and the Device should provide the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-Off on a SA Tool in a Fare-by-Zone TA with Farecard", "Test_Scnario": "Testing Time since Tap-On Exceeds Max Travel Duration on SA Tool", "Test_Sce_Description": "Validate that if the time since tap-on exceeds the Max Travel Duration, then the Device should auto-settle the Underpayment and open a new trips."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-Off on a SA Tool in a Fare-by-Zone TA with Farecard", "Test_Scnario": "Testing Multiple NFC media presentation to the device on SA Tool", "Test_Sce_Description": "Validate that if multiple NFC media are presented to the device at one time, the device should block all fare payment functionality."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-Off on a SA Tool in a Fare-by-Zone TA with Farecard", "Test_Scnario": "Testing Non-Activated Farecard on SA Tool", "Test_Sce_Description": "Validate that if the Farecard is not activated and is tapped on the device, the transaction should be unsuccessful."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-Off on a SA Tool in a Fare-by-Zone TA with Farecard", "Test_Scnario": "Testing Farecard Tap-On with Card Reading Error on SA Tool", "Test_Sce_Description": "Validate that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device should provide the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is in the Load Value List or Action List", "Test_Scnario": "Testing Load Value or Action Transaction Processing", "Test_Sce_Description": "This scenario tests the functionality of the device in processing the Load Value or Action Transaction prior to continuing the validation Use Case. The test will involve a Farecard in the Load Value List or Action List and will check if the device correctly processes the transaction and provides the appropriate feedback to the Cardholder of a successful transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is in the Load Value List or Action List", "Test_Scnario": "Testing Fare Validation with Valid Transfer Product", "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard contains a valid transfer product. The test will check if the Tap-On Fare configured on the device as well as the Underpayment Value is correctly reduced to account for the Transfer Discount."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is in the Load Value List or Action List", "Test_Scnario": "Testing Full Fare-by-Zone Transaction Processing", "Test_Sce_Description": "This scenario tests the functionality of the device in processing a full Fare-by-Zone transaction in case of a default O/D on the Farecard. The test will check if the device correctly deducts the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is in the Load Value List or Action List", "Test_Scnario": "Testing Default Trip Override", "Test_Sce_Description": "This scenario tests the functionality of the device when a customer requests the override of a Default Trip. The test will check if the device correctly overrides the default O/D contained on the Farecard and processes the tap as a regular tap-on."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is in the Load Value List or Action List", "Test_Scnario": "Testing Underpayment Deduction", "Test_Sce_Description": "This scenario tests the functionality of the device when the Farecard has a value contained in the Underpayment Block. The test will check if the device correctly deducts the Underpayment Value from the Farecard E-Purse prior to performing the Fare Validation."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is in the Load Value List or Action List", "Test_Scnario": "Testing Non-Revenue Farecard Acceptance", "Test_Sce_Description": "This scenario tests the functionality of the device when a Non-Revenue Farecard is tapped on the Device. The test will check if the device correctly accepts the Non-Revenue farecard in the training mode and displays a declined HMI in the revenue mode."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is in the Load Value List or Action List", "Test_Scnario": "Testing Temporal Class Supplement Processing", "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement. The test will check if the device correctly processes the temporal class supplement in addition to the Base Fare."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is in the Load Value List or Action List", "Test_Scnario": "Testing Autoload Processing", "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold. The test will check if the device correctly adds the Autoload amount to the E-Purse balance when the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is in the Load Value List or Action List", "Test_Scnario": "Testing Fare Payment with Fare type Discount", "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard with Fare type (either Universal or Specific) other than Default taps-off. The test will check if the device correctly displays the \u201cFare Payment with Fare type Discount\u201d HMI and accounts for the concession discount in the Fare."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is in the Load Value List or Action List", "Test_Scnario": "Testing Default Trip Override prior to Tapping-Off", "Test_Sce_Description": "This scenario tests the functionality of the device when a customer Overrides the Default Trip prior to tapping-off. The test will check if the device correctly processes the override and updates the Farecard accordingly."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Scnario": "Farecard Taps Off at Same Location as Tap-On", "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard is tapped off at the same location where tap-on occurred. The device should detect that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The device should provide the appropriate feedback to the cardholder without updating the Farecard. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Scnario": "Blocked Farecard", "Test_Sce_Description": "This scenario tests the functionality of the device when a blocked Farecard is used. The device should detect that the Farecard is blocked and not confer the right to travel. The device should provide the appropriate feedback to the Cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Scnario": "Time Since Tap-On Exceeds Max Travel Duration", "Test_Sce_Description": "This scenario tests the functionality of the device when the time since tap-on exceeds the Max Travel Duration. The device should auto-settle the Underpayment and open a new trip. The device should determine that the Tap-On Time + Max Travel Duration < Current Time and auto-settle the Underpayment and deduct the value from the Farecard E-Purse."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Scnario": "Multiple NFC Media Presented at Once", "Test_Sce_Description": "This scenario tests the functionality of the device when multiple NFC media are presented at the same time. The device should block all fare payment functionality and present an Anti-Collision HMI to the customer. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Scnario": "Non-Activated Farecard", "Test_Sce_Description": "This scenario tests the functionality of the device when a non-activated Farecard is tapped on the device. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Scnario": "Card Reading Error", "Test_Sce_Description": "This scenario tests the functionality of the device when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs. The device should capture and log an error in the background when this occurs to help with troubleshooting the issue."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Scnario": "Temporal Class Supplement", "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement. The device should contain an HMI reflecting the Temporal Class Supplement, and process the Tap-On Transaction as a normal tap-on."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Scnario": "Autoload Enabled Farecard", "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold. The device should detect that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, which triggers the Autoload amount to be added to the Farecard."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Scnario": "Override Default Trip", "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on. The device should process the tap as a result tap-on and provide the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the Default Trip was overridden."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Scnario": "Audio Messages Request", "Test_Sce_Description": "This scenario tests the functionality of the device when a customer requests audio messages for the fare payment. The operator should enable audio mode and the device should play the corresponding audio message to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Scnario": "Farecard Fails Validation Checks at Tap-On", "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard fails validation checks at Tap-On. The device should capture and log an error in the background when this occurs to help with troubleshooting the issue."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is Unreadable", "Test_Sce_Description": "Verify that the SA Tool application correctly detects and handles a situation where the TICKET is unreadable. The application should indicate to the operator that the TICKET is unreadable and log an error in the background for troubleshooting. If the customer taps the NFC reader again and it is successful, the application should proceed with steps 4 \u2013 9. If the tap is unsuccessful, the application should again indicate to the operator that the TICKET is unreadable."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages", "Test_Sce_Description": "Verify that the SA Tool application correctly handles a situation where the customer requests audio messages for the fare payment. The operator should be able to enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion. The SA Tool should display the TICKET fare payment screen to the operator and customer for the duration of the audio message and play the corresponding audio message in the default language of their Farecard."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Sce_Description": "Verify that the SA Tool application correctly identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment when the fare payment is being made on the FLATFARE BASED SA Tool and the Ticket has a valid Period Pass."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Sce_Description": "Verify that the SA Tool application correctly identifies a Valid Child Concession on the customer\u2019s TICKET and displays the successful Child fare payment screen. The application should also play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the SA Tool application correctly handles a situation where the operator inspects a customer\u2019s TICKET and determines that they have not paid a fare. The operator should be able to select the payment function on the SA Tool inspection results screen and the application should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Sce_Description": "Verify that the SA Tool application correctly handles a situation where the customer has a period pass Ticket that is outside the validity period. The application should indicate to the operator that the TICKET Period Pass is not valid on the current date."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "Verify that the SA Tool application correctly handles a situation where the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction. The application should deduct the fare from the e-Purse."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "Verify that the SA Tool application correctly handles a situation where the customer has an expired period pass, the customer\u2019s ePurse balance is less than the fare amount, and the customer has an anonymous Virtual Card. The application should display a declined message to the customer and not conduct the transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "Verify that the SA Tool application correctly handles a situation where the customer\u2019s Farecard is blocked. The application should display a declined message to the customer and not conduct the transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "Verify that the SA Tool application correctly handles a situation where the customer\u2019s Virtual Card is on the Deny List. The application should remove the card from the Deny List, set it to blocked, display a declined message to the customer, and not conduct the transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "Verify that the SA Tool application correctly handles a situation where the battery goes below the low battery threshold during a successful Farecard tap. The application should still be able to process the remote lists."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass when battery goes below the low battery threshold during payment", "Test_Sce_Description": "In this scenario, the test will focus on the functionality of the SA Tool when the battery goes below the low battery threshold during a successful Farecard tap. The test will ensure that the application switches to 'Out of Service' mode after processing the fare payment."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass when customer's card is not a Farecard", "Test_Sce_Description": "In this scenario, the test will focus on the functionality of the SA Tool when the customer's card is not a Farecard. The test will ensure that the SA Tool application does not respond and the device error message 'Card Read Error' is displayed for a short period of time."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass when customer's Farecard is within the Anti-Passback Window", "Test_Sce_Description": "In this scenario, the test will focus on the functionality of the SA Tool when the customer's card is within the Anti-Passback Window. The test will ensure that the SA Tool application displays a declined message to the customer and the transaction is not conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass when Limited Period Pass is outside of valid time while card is in overdraft", "Test_Sce_Description": "In this scenario, the test will focus on the functionality of the SA Tool when the farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, and the farecard is in overdraft. The test will ensure that the SA Tool application displays a declined message to the customer and the transaction is not conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass when Limited Period Pass is outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "In this scenario, the test will focus on the functionality of the SA Tool when the farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction. The test will ensure that the ATS detects that the Limited Period Pass is not valid at the current time, computes the value to be deducted from the e-Purse, and deducts the fare."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass when customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "In this scenario, the test will focus on the functionality of the SA Tool when the customer has an expired period pass, ePurse balance is less than the fare amount and has an anonymous Virtual Card. The test will ensure that the SA Tool application displays a declined message to the customer and the transaction is not conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass when customer's Virtual Card is Blocked", "Test_Sce_Description": "In this scenario, the test will focus on the functionality of the SA Tool when the customer's Farecard is blocked. The test will ensure that the SA Tool application displays a declined message to the customer and the transaction is not conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass when customer's Virtual Card is on the Deny List", "Test_Sce_Description": "In this scenario, the test will focus on the functionality of the SA Tool when the customer's Virtual Card is on the Deny List. The test will ensure that the SA Tool application displays a declined message to the customer and the transaction is not conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass - Unreadable TICKET", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it detects an unreadable TICKET. The test will ensure that the SA Tool correctly identifies and logs the error, and prompts the operator to retry the tap. If the retry is unsuccessful, the SA Tool should again indicate that the TICKET is unreadable."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass - Customer requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer requests audio messages for fare payment. The test will ensure that the operator can enable audio mode, adjust the volume level, and that the corresponding audio message is played in the correct language. The test will also verify that the SA Tool returns to the Tap Card screen after the audio message ends."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass - Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a TICKET with a valid Period Pass is tapped on a route/location with a Premium or Special Event Service Class. The test will ensure that the SA Tool correctly identifies and accepts the period pass fare payment."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a Valid Child concession on their TICKET attempts to pay. The test will ensure that the SA Tool correctly identifies the concession, displays the successful Child fare payment screen, and plays the successful fare payment audio tone."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment results from a failed inspection. The test will ensure that the SA Tool correctly records both the fare payment and inspection transactions, and returns to the Tap Card screen with a toast notification of the corresponding inspection action."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to pay with a TICKET Period Pass that is not valid on the current date. The test will ensure that the SA Tool correctly identifies the invalid pass, displays a declined message, and returns to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer\u2019s Farecard is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to pay with a blocked Farecard. The test will ensure that the SA Tool correctly identifies the blocked card, displays a declined message, and returns to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer\u2019s Farecard is on the Hotlist", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to pay with a Farecard that is on the hotlist. The test will ensure that the SA Tool correctly identifies the hotlisted card, updates the card\u2019s status to blocked, displays a declined message, and returns to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a fare payment. The test will ensure that the SA Tool correctly switches to \u201cOut of Service\u201d mode if the low battery threshold is reached before the fare payment is processed."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Customer taps a card that is not a Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to pay with a card that is not a Farecard. The test will ensure that the SA Tool correctly displays the \u201cCard Read Error\u201d toast message."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to pay with a Farecard that is within the Anti-Passback Window. The test will ensure that the SA Tool correctly identifies the Anti-Passback violation, displays a declined message, and returns to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Customer taps a non-activated card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to pay with a non-activated card. The test will ensure that the SA Tool correctly identifies the non-activated card, displays a declined message, and returns to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing the Anti-Passback Window functionality for TTC TICKET", "Test_Sce_Description": "This scenario will test the functionality of the Anti-Passback Window feature. The test will involve a customer's TICKET that is within the Anti-Passback Window. The expected outcome is that the SA Tool application should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing the TICKET activation status for BFTP", "Test_Sce_Description": "This scenario will test the TICKET activation status functionality. The test will involve a customer's TICKET that is not activated. The expected outcome is that the SA Tool application should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing the TICKET expiration status for Transit Agency", "Test_Sce_Description": "This scenario will test the TICKET expiration status functionality. The test will involve a customer's TICKET that is expired. The expected outcome is that the SA Tool application should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing the Period Pass functionality for TTC TICKET", "Test_Sce_Description": "This scenario will test the Period Pass functionality. The test will involve a customer's TICKET that has a valid FLATFARE BASED period pass. The expected outcome is that the SA Tool application should accept the fare and update the TICKET accordingly."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing the Unreadable TICKET functionality for BFTP", "Test_Sce_Description": "This scenario will test the Unreadable TICKET functionality. The test will involve a customer's TICKET that the SA Tool application fails to read correctly. The expected outcome is that the SA Tool application should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing the Limited Period Pass functionality for Transit Agency", "Test_Sce_Description": "This scenario will test the Limited Period Pass functionality. The test will involve a customer's TICKET that has a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product. The expected outcome is that the SA Tool application should accept the fare and update the TICKET accordingly."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing the Expired Period Pass functionality for TTC TICKET", "Test_Sce_Description": "This scenario will test the Expired Period Pass functionality. The test will involve a customer's TICKET that has an expired period pass and the ePurse balance is less than the fare amount. The expected outcome is that the SA Tool application should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing the Blocked TICKET functionality for BFTP", "Test_Sce_Description": "This scenario will test the Blocked TICKET functionality. The test will involve a customer's TICKET that is blocked. The expected outcome is that the SA Tool application should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing the Deny List functionality for Transit Agency", "Test_Sce_Description": "This scenario will test the Deny List functionality. The test will involve a customer's TICKET that is on the Deny List. The expected outcome is that the SA Tool application should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing the Low Battery Threshold functionality for TTC TICKET", "Test_Sce_Description": "This scenario will test the Low Battery Threshold functionality. The test will involve a situation where the SA Tool battery goes below the low battery threshold during a successful Farecard tap. The expected outcome is that the SA Tool application should continue to process the transaction and not be affected by the low battery."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is Unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it fails to read a customer's TICKET correctly. The test will ensure that the SA Tool application correctly indicates to the operator that the TICKET is unreadable, and that an error is captured and logged in the background for troubleshooting purposes. The test will also verify that the customer is prompted to tap on the NFC reader again, and that the application responds appropriately to a successful or unsuccessful tap."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer requests audio messages for fare payment. The test will ensure that the operator can enable audio mode and adjust the volume level using the physical device buttons. The test will also verify that the SA Tool displays the TICKET fare payment screen and plays the corresponding audio message in the default language of the customer's Farecard."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a valid Period Pass taps on a route/location with Premium or Special Event Service Class. The test will ensure that the SA Tool correctly identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a Valid Child concession on their TICKET attempts to pay. The test will ensure that the SA Tool correctly identifies the Valid Child Concession, displays the successful Child fare payment screen, and plays the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer\u2019s TICKET fails inspection and the operator selects the payment function. The test will ensure that the SA Tool correctly records both the fare payment and inspection transactions, and returns to the Tap Card screen with a toast notification of the corresponding inspection action."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer\u2019s TICKET Period Pass is not valid on the current date. The test will ensure that the SA Tool correctly detects the invalid Period Pass, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the device battery goes below the low battery threshold during a successful TICKET tap. The test will ensure that the application correctly switches to \u201cOut of Service\u201d mode if the low battery threshold is reached before Step 5, or processes the customers fare payment as per Step 5 and then switches to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a card that is not CLIENT media. The test will ensure that the SA Tool application does not respond, but the device error message \u201cCard Read Error\u201d is displayed for a short period of time."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer\u2019s TICKET is within the Anti-Passback Window. The test will ensure that the device correctly detects that the TICKET fails the Anti-Passback checks, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a non-activated CLIENT Ticket. The test will ensure that the device correctly detects that the TICKET is not activated, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps an expired TICKET. The test will ensure that the device correctly detects that the TICKET is expired, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Customer taps an expired Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps an expired ticket. The SA Tool should detect that the ticket is expired and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Customer\u2019s Farecard is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Farecard is blocked. The SA Tool should detect that the Farecard is blocked and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer\u2019s Farecard is on the Hotlist", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Farecard is on the hotlist. The SA Tool should detect that the Farecard is on the hotlist, update the card\u2019s status to blocked and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during payment. The SA Tool should switch to \u201cOut of Service\u201d mode if the low battery threshold is reached before Step 5. If the low battery threshold is reached after Step 5, the customers fare payment should be processed and then the application should switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Customer taps a card that is not a Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a card that is not a Farecard. The SA Tool should display the \u201cCard Read Error\u201d toast message for a short period of time."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Farecard is within the Anti-Passback Window. The SA Tool should detect that the Farecard fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Customer taps a non-activated card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a non-activated card. The SA Tool should detect that the card is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it fails to read a customer's TICKET. The SA Tool should indicate to the operator that the TICKET is unreadable. The customer will tap on the NFC reader again. If the tap is successful, the fare payment process will continue. If the tap is unsuccessful, the SA Tool should again indicate to the operator that the TICKET is unreadable."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer requests audio messages for the fare payment. The operator should be able to enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion. The SA Tool should display the TICKET fare payment screen to the operator and customer for the duration of the audio message."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a valid Period Pass taps on a route/location with Premium or Special Event Service Class. The SA Tool should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a Valid Child concession taps their TICKET. The SA Tool should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer\u2019s TICKET fails inspection and they have to pay a fare. The operator should be able to select the payment function on the SA Tool inspection results screen. The SA Tool should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer has a period pass Ticket that is outside the validity period. The SA Tool should indicate to the operator that the TICKET is not valid."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer requests audio messages while paying for their trip with a TICKET. The operator should be able to enable audio mode and adjust the volume level using the physical device buttons. The SA Tool should display the fare payment screen and play the corresponding audio message in the default language of the customer's Farecard. After the audio message ends, the screen should return to the application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is Unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it detects a TICKET but fails to read it correctly. The SA Tool application should indicate to the operator that the TICKET is unreadable. If the customer taps on the NFC reader again and the tap is successful, the SA Tool should proceed with the fare payment process. If the tap is unsuccessful, the SA Tool application should again indicate to the operator that the TICKET is unreadable."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the FLATFARE BASED SA Tool when a TICKET with a valid Period Pass is tapped on a route/location with a Premium or Special Event Service Class. The SA Tool should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer\u2019s TICKET has a Valid Child concession. The SA Tool should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the operator inspects a customer\u2019s TICKET and determines that they have not paid a fare. The operator should be able to select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer has a period pass Ticket that is outside the validity period. The SA Tool should be able to detect this and handle it appropriately."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Sce_Description": "Verify that the SA Tool correctly computes the free transfer when the fare payment is made on the FLATFARE BASED SA Tool, the Service Class is Premium or Special Event, the Ticket has a valid Transfer Product, and the Tap is within Transfer Window."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Scnario": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a Valid Child Concession on the customer's TICKET and successfully processes the Child fare payment."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Scnario": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a failed inspection, allows the operator to select the payment function, and records both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Scnario": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's ride balance is empty, displays a declined message, and does not conduct the transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Scnario": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "Verify that the SA Tool correctly switches to \u201cOut of Service\u201d mode when the low battery threshold is reached during a successful TICKET tap."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Scnario": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's card is not CLIENT media and displays the \u201cCard Read Error\u201d message."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Scnario": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's TICKET is within the Anti-Passback Window, displays a declined message, and does not conduct the transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Scnario": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's TICKET is not activated."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a farecard has a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a farecard has a valid Limited Period Pass product on it, the time at tap is occurring outside of the time limit of the Limited Period Pass Product, computes the value to be deducted from the e-Purse, and deducts the fare."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's Farecard has a Valid Child concession and successfully processes the Child Transit Pass fare payment."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a failed inspection, allows the operator to select the payment function, and records both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer has an expired period pass, the ePurse Balance is less than the fare amount, the Card is Anonymous, displays a declined message, and does not conduct the transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer\u2019s Farecard is Blocked", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's Farecard is blocked."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment from a TICKET using Period Pass with Valid Child Concession", "Test_Sce_Description": "This scenario is to validate the functionality of the SA Tool when a customer with a valid child concession on their CLIENT Ticket tries to make a fare payment using a period pass. The SA Tool should correctly identify the child concession, accept the period pass fare payment, and display the successful Child Transit Pass fare payment screen. The SA Tool should also play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Performance of SA Tool during Fare Payment from a TICKET using Period Pass with Valid Child Concession", "Test_Sce_Description": "This scenario is to test the performance of the SA Tool when a customer with a valid child concession on their CLIENT Ticket tries to make a fare payment using a period pass. The SA Tool should process the transaction quickly and without any delays or performance issues."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Security of SA Tool during Fare Payment from a TICKET using Period Pass with Valid Child Concession", "Test_Sce_Description": "This scenario is to test the security of the SA Tool when a customer with a valid child concession on their CLIENT Ticket tries to make a fare payment using a period pass. The SA Tool should securely process the transaction, ensuring that the customer's ticket and personal information are protected."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Exception Flow: Fare Payment from a Farecard using Period Pass with Expired Period Pass and Insufficient ePurse Balance", "Test_Sce_Description": "This scenario is to validate the exception flow of the SA Tool when a customer with an expired period pass and an ePurse balance less than the fare amount tries to make a fare payment. The SA Tool should detect that the card is anonymous and the ePurse balance is less than the fare amount, display a declined message to the customer, and not conduct the transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Exception Flow: Fare Payment from a Blocked Farecard using Period Pass", "Test_Sce_Description": "This scenario is to validate the exception flow of the SA Tool when a customer with a blocked Farecard tries to make a fare payment using a period pass. The SA Tool should detect that the Farecard is blocked, display a declined message to the customer, and not conduct the transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Alternate Flow: Fare Payment from a TICKET using Ride Balance with Valid Non-Adult, Non-Child Concession", "Test_Sce_Description": "This scenario is to validate the alternate flow of the SA Tool when a customer with a valid non-adult, non-child concession on their TICKET tries to make a fare payment using ride balance. The SA Tool should correctly identify the non-adult, non-child concession, accept the fare payment, and play the successful fare payment audio tone for a concession other than Adult or Child."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's TICKET inspection fails and the operator has to select the payment function on the SA Tool inspection results screen. The test will verify if the SA Tool records both the fare payment and inspection transactions and returns to the Tap Card screen displaying a toast notification of the corresponding inspection action."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's TICKET Period Pass is not valid on the current date. The test will verify if the SA Tool application detects the invalidity of the TICKET Period Pass, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the device battery goes below the low battery threshold during a successful TICKET tap. The test will verify if the application switches to \u201cOut of Service\u201d mode when the low battery threshold is reached before Step 5, and if the customers fare payment is processed as per Step 5 before the application switches to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a card that is not CLIENT media. The test will verify if the SA Tool application does not respond and if the device error message \u201cCard Read Error\u201d is displayed for a short period of time."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's TICKET is within the Anti-Passback Window. The test will verify if the device detects that the TICKET fails the Anti-Passback checks, if the SA Tool application displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a non-activated CLIENT Ticket. The test will verify if the device detects that the TICKET is not activated, if the SA Tool application displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps an expired Ticket. The test will verify if the device detects that the TICKET is expired, if the SA Tool application displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's TICKET is unreadable. The test will verify if the SA Tool NFC reader detects the TICKET but is unable to read it, if the SA Tool application indicates to the operator that the TICKET is unreadable, and if the customer can tap on the NFC reader again for a successful tap."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer requests audio messages for the fare payment. The test will verify if the operator can enable audio mode, change the volume level using the physical device buttons at the customer\u2019s discretion, and if the corresponding audio message is played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Ticket has a valid Period Pass and is tapped on route/location with Premium or Special Event Service Class. The test will verify if the SA Tool identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket fails validation checks", "Test_Scnario": "E-Ticket fails validation checks in offline mode", "Test_Sce_Description": "Validate the behavior of the device when it is offline and the E-Ticket fails the necessary validation checks. The device should return the appropriate feedback, and the right to travel should not be conferred."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket fails validation checks", "Test_Scnario": "Group QR Code validation", "Test_Sce_Description": "Validate the functionality of the device when a Group QR Code is scanned. The device should check each ticket within the group against the deny list to determine if E-Ticket is valid for travel."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket fails validation checks", "Test_Scnario": "Pass holder E-Ticket validation", "Test_Sce_Description": "Validate the functionality of the device when a pass type E-ticket is scanned. The device should check that the E-Ticket pass is valid for travel and the first word of the barcode label name is used as the concession."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket fails validation checks", "Test_Scnario": "Scanner does not scan E-Ticket QR Code multiple times in a row", "Test_Sce_Description": "Validate the functionality of the device when the pass-holder does not remove the QR code from view of the scanner after the initial scan. The device should apply withdrawal logic and not respond to the scan."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket fails validation checks", "Test_Scnario": "Child E-Ticket validation", "Test_Sce_Description": "Validate the functionality of the device when a Child E-Ticket is scanned. The device should confer the right to travel to the E-Ticket holder and provide the appropriate feedback to the user of a successful Child E-Ticket transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket fails validation checks", "Test_Scnario": "E-Ticket QR Code fails timestamp validation", "Test_Sce_Description": "Validate the functionality of the device when the timestamp of the QR code does not meet the timestamp validation requirements. The device should return the appropriate feedback, and the right to travel should not be conferred."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket fails validation checks", "Test_Scnario": "E-Ticket QR Code fails deny list validation", "Test_Sce_Description": "Validate the functionality of the device when the E-Ticket ID is on the current deny list. The device should return the appropriate feedback, and the right to travel should not be conferred."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket fails validation checks", "Test_Scnario": "E-Ticket QR Code fails validation (response from API)", "Test_Sce_Description": "Validate the functionality of the device when the Bytemark API returns a response that determines that the E-Ticket is not valid for travel. The device should return the appropriate feedback, and the right to travel should not be conferred."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket fails validation checks", "Test_Scnario": "E-Ticket QR Code fails to scan", "Test_Sce_Description": "Validate the functionality of the device when it fails to decrypt a scanned E-ticket QR code. The device should display an invalid ticket screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket fails validation checks", "Test_Scnario": "Bytemark API call returns error code \u201c401 Unauthorized User\u201d or Bytemark error code 50032 (unauthorized access)", "Test_Sce_Description": "Validate the functionality of the device when the API call to Bytemark returns an error code. The device should renew authentication token and retry API call."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket fails validation checks", "Test_Scnario": "Bytemark API call returns other HTTP error code", "Test_Sce_Description": "Validate the functionality of the device when the API call to Bytemark returns other HTTP error code. The device should handle the error appropriately."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader", "Test_Scnario": "E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader", "Test_Sce_Description": "Validate the functionality of the SA Tool Barcode Reader when an E-Ticket holder scans a Group QR Code. The test should ensure that the device checks each ticket within the group against the deny list to determine if E-Ticket is valid for travel. The device should send and receive a response from Bytemark API and check that the Group QR Code is valid for travel. The right to travel should be conferred to the E-Ticket holder, and the device should provide the appropriate feedback to the user of a successful transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader", "Test_Scnario": "Pass holder E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Sce_Description": "Validate the functionality of the SA Tool Barcode Reader when a pass type E-ticket is scanned. The test should ensure that the device sends and receives a response from Bytemark API and checks that the E-Ticket pass is valid for travel. The first word of the barcode label name should be used as the concession. The right to travel should be conferred to the E-Ticket holder, and the device should provide the appropriate feedback to the user of a successful transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader", "Test_Scnario": "Scanner does not scan E-Ticket QR Code multiple times in a row", "Test_Sce_Description": "Validate the functionality of the SA Tool Barcode Reader when an E-ticket is scanned multiple times in a row. The test should ensure that if the pass-holder does not remove the QR code from view of the scanner after the initial scan, withdrawal logic will apply. This logic should be implemented for 3 seconds after the initial scan, after this period the scanner should then be able to re-scan the initial E-ticket as normal."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader", "Test_Scnario": "Child E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Sce_Description": "Validate the functionality of the SA Tool Barcode Reader when a Child E-Ticket is scanned. The test should ensure that the right to travel is conferred to the E-Ticket holder, and the device should provide the appropriate feedback to the user of a successful Child E-Ticket transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader", "Test_Scnario": "E-Ticket QR Code fails timestamp validation", "Test_Sce_Description": "Validate the functionality of the SA Tool Barcode Reader when an E-Ticket QR Code fails timestamp validation. The test should ensure that the device checks the timestamp of the QR code against the maximum allowable time window in the device config to determine if the E-Ticket is valid for travel. If the timestamp of the QR code does not meet the timestamp validation requirements, the user\u2019s E-Ticket should not be valid for travel."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader", "Test_Scnario": "E-Ticket QR Code fails deny list validation", "Test_Sce_Description": "Validate the functionality of the SA Tool Barcode Reader when an E-Ticket QR Code fails deny list validation. The test should ensure that the device performs a check against the local deny list and confirms that the E-Ticket ID is on the current deny list."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader", "Test_Scnario": "E-Ticket QR Code fails validation (response from API)", "Test_Sce_Description": "Validate the functionality of the SA Tool Barcode Reader when an E-Ticket QR Code fails validation (response from API). The test should ensure that the device calls the Bytemark API and receives a response that determines that the E-Ticket is not valid for travel."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader", "Test_Scnario": "E-Ticket QR Code fails to scan", "Test_Sce_Description": "Validate the functionality of the SA Tool Barcode Reader when an E-Ticket QR Code fails to scan. The test should ensure that the device attempts to decrypt a scanned E-ticket QR code or any QR code using the Bytemark key. In the event of a failure an invalid ticket screen should be displayed."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader", "Test_Scnario": "Bytemark API call returns error code \u201c401 Unauthorized User\u201d or Bytemark error code 50032 (unauthorized access)", "Test_Sce_Description": "Validate the functionality of the SA Tool Barcode Reader when the API call to Bytemark returns an error code. The test should ensure that if the HTTP code is \u201c401\u201d or Bytemark error code 50032\u201d the device will read/log the error code and begin error handling process. The device should renew authentication token and will retry API call."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader", "Test_Scnario": "Bytemark API call returns other HTTP error code", "Test_Sce_Description": "Validate the functionality of the SA Tool Barcode Reader when the API call to Bytemark returns other HTTP error code. The test should ensure that the device handles the error appropriately and provides the necessary feedback to the user."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Pass holder E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Scnario": "Validate Pass holder E-Ticket at the SA Tool Barcode Reader", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool Barcode Reader when a pass holder E-Ticket is scanned. The test will ensure that the device sends and receives a response from Bytemark API, checks that the E-Ticket pass is valid for travel, and confers the right to travel to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Pass holder E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Scnario": "Validate concession determination based on barcode label name", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool Barcode Reader in determining the concession based on the first word of the barcode label name. The test will ensure that the device correctly flags 'ADULT', 'Adult', or 'adult' as an adult concession and all other variations as non-adult concessions."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Pass holder E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Scnario": "Validate E-Ticket QR Code timestamp validation", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool Barcode Reader in validating the timestamp of the QR code against the maximum allowable time window in the device config. The test will ensure that the device correctly identifies E-Tickets with QR codes that do not meet the timestamp validation requirements as invalid for travel."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Pass holder E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Scnario": "Validate E-Ticket QR Code deny list validation", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool Barcode Reader in validating the E-Ticket ID against the local deny list. The test will ensure that the device correctly identifies E-Tickets with IDs on the current deny list as invalid for travel."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Pass holder E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Scnario": "Validate E-Ticket QR Code API response validation", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool Barcode Reader in validating the E-Ticket based on the response from the Bytemark API. The test will ensure that the device correctly identifies E-Tickets that receive a response from the API indicating they are not valid for travel as invalid."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Pass holder E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Scnario": "Validate handling of Bytemark API error codes", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool Barcode Reader in handling error codes returned by the Bytemark API. The test will ensure that the device correctly renews the authentication token and retries the API call when it receives a '401 Unauthorized User' or '50032 Unauthorized Access' error code."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Pass holder E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Scnario": "Validate performance of SA Tool Barcode Reader in offline mode", "Test_Sce_Description": "This scenario will test the performance of the SA Tool Barcode Reader when it is offline. The test will ensure that the device correctly caches results in an offline database to be uploaded to the Bytemark API when connection is resumed."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Pass holder E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Scnario": "Validate performance of SA Tool Barcode Reader in handling multiple E-Tickets", "Test_Sce_Description": "This scenario will test the performance of the SA Tool Barcode Reader in handling multiple E-Tickets. The test will ensure that the device correctly checks each ticket within a group against the deny list to determine if they are valid for travel."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Pass holder E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Scnario": "Validate performance of SA Tool Barcode Reader in handling repeated scans of the same E-Ticket", "Test_Sce_Description": "This scenario will test the performance of the SA Tool Barcode Reader in handling repeated scans of the same E-Ticket. The test will ensure that the device correctly applies withdrawal logic to prevent the same E-Ticket from being scanned multiple times in a row."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Pass holder E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Scnario": "Validate security of SA Tool Barcode Reader in decrypting E-Ticket QR codes", "Test_Sce_Description": "This scenario will test the security of the SA Tool Barcode Reader in decrypting E-Ticket QR codes. The test will ensure that the device correctly decrypts a scanned E-ticket QR code using the Bytemark key and displays an invalid ticket screen in the event of a failure."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Scanner does not scan E-Ticket QR Code multiple times in a row", "Test_Scnario": "E-Ticket QR Code Validation", "Test_Sce_Description": "Validate that the E-Ticket QR code is correctly validated by the SA Tool. The tool should correctly identify valid and invalid QR codes. The test will involve scanning both valid and invalid QR codes and verifying the tool's response."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Scanner does not scan E-Ticket QR Code multiple times in a row", "Test_Scnario": "Group QR Code Validation", "Test_Sce_Description": "Validate that the SA Tool correctly validates Group QR codes. The tool should correctly identify valid and invalid Group QR codes. The test will involve scanning both valid and invalid Group QR codes and verifying the tool's response."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Scanner does not scan E-Ticket QR Code multiple times in a row", "Test_Scnario": "Pass Holder E-Ticket Validation", "Test_Sce_Description": "Validate that the SA Tool correctly validates Pass Holder E-Tickets. The tool should correctly identify valid and invalid Pass Holder E-Tickets. The test will involve scanning both valid and invalid Pass Holder E-Tickets and verifying the tool's response."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Scanner does not scan E-Ticket QR Code multiple times in a row", "Test_Scnario": "Child E-Ticket Validation", "Test_Sce_Description": "Validate that the SA Tool correctly validates Child E-Tickets. The tool should correctly identify valid and invalid Child E-Tickets. The test will involve scanning both valid and invalid Child E-Tickets and verifying the tool's response."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Scanner does not scan E-Ticket QR Code multiple times in a row", "Test_Scnario": "E-Ticket QR Code Timestamp Validation", "Test_Sce_Description": "Validate that the SA Tool correctly validates the timestamp of the E-Ticket QR code. The tool should correctly identify if the timestamp of the QR code is within the maximum allowable time window. The test will involve scanning E-Tickets with QR codes with timestamps both within and outside the maximum allowable time window and verifying the tool's response."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Scanner does not scan E-Ticket QR Code multiple times in a row", "Test_Scnario": "E-Ticket QR Code Deny List Validation", "Test_Sce_Description": "Validate that the SA Tool correctly validates the E-Ticket QR code against the local deny list. The tool should correctly identify if the E-Ticket ID is on the current deny list. The test will involve scanning E-Tickets with QR codes with IDs both on and not on the deny list and verifying the tool's response."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Scanner does not scan E-Ticket QR Code multiple times in a row", "Test_Scnario": "E-Ticket QR Code API Response Validation", "Test_Sce_Description": "Validate that the SA Tool correctly validates the E-Ticket QR code based on the response from the Bytemark API. The tool should correctly identify if the E-Ticket is valid for travel based on the API response. The test will involve scanning E-Tickets and verifying the tool's response against the expected API response."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Scanner does not scan E-Ticket QR Code multiple times in a row", "Test_Scnario": "E-Ticket QR Code Scan Failure", "Test_Sce_Description": "Validate that the SA Tool correctly handles a failure to scan the E-Ticket QR code. The tool should display an invalid ticket screen in the event of a failure. The test will involve attempting to scan an E-Ticket with a QR code that cannot be decrypted and verifying the tool's response."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Scanner does not scan E-Ticket QR Code multiple times in a row", "Test_Scnario": "Bytemark API Call Error Handling", "Test_Sce_Description": "Validate that the SA Tool correctly handles error codes returned by the Bytemark API. The tool should correctly handle error codes '401 Unauthorized User' and '50032 unauthorized access'. The test will involve simulating these error codes and verifying the tool's response."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Scanner does not scan E-Ticket QR Code multiple times in a row", "Test_Scnario": "Bytemark API Call Other HTTP Error Code Handling", "Test_Sce_Description": "Validate that the SA Tool correctly handles other HTTP error codes returned by the Bytemark API. The tool should correctly handle any other HTTP error codes. The test will involve simulating these error codes and verifying the tool's response."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Child E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Scnario": "Child E-Ticket Scanning at SA Tool Barcode Reader", "Test_Sce_Description": "Verify that the SA Tool Barcode Reader correctly scans and validates a Child E-Ticket. The device should provide appropriate feedback to the user indicating a successful transaction and confer the right to travel to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Child E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Scnario": "E-Ticket QR Code Timestamp Validation", "Test_Sce_Description": "Verify that the device correctly checks the timestamp of the QR code against the maximum allowable time window in the device config to determine if the E-Ticket is valid for travel. If the timestamp does not meet the validation requirements, the device should provide appropriate decline feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Child E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Scnario": "E-Ticket QR Code Deny List Validation", "Test_Sce_Description": "Verify that the device correctly checks the E-Ticket ID against the local deny list. If the E-Ticket ID is on the deny list, the device should provide appropriate decline feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Child E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Scnario": "E-Ticket QR Code API Validation", "Test_Sce_Description": "Verify that the device correctly calls the Bytemark API and receives a response that determines the validity of the E-Ticket. If the API response indicates that the E-Ticket is not valid for travel, the device should provide appropriate decline feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Child E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Scnario": "E-Ticket QR Code Scan Failure", "Test_Sce_Description": "Verify that the device correctly handles a failure to decrypt a scanned E-ticket QR code. In the event of a failure, an invalid ticket screen should be displayed."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Child E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Scnario": "Bytemark API Error Code Handling", "Test_Sce_Description": "Verify that the device correctly handles a 401 or 50032 error code returned from the Bytemark API. The device should renew the authentication token and retry the API call. If the API call is still unsuccessful, the device should move to offline validation steps."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Child E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Scnario": "Group QR Code Scanning at SA Tool Barcode Reader", "Test_Sce_Description": "Verify that the SA Tool Barcode Reader correctly scans and validates a Group QR Code. The device should check each ticket within the group against the deny list and confirm the validity of the Group QR Code via the Bytemark API. If valid, the device should provide appropriate feedback to the user indicating a successful transaction and confer the right to travel to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Child E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Scnario": "Pass Holder E-Ticket Scanning at SA Tool Barcode Reader", "Test_Sce_Description": "Verify that the SA Tool Barcode Reader correctly scans and validates a pass type E-Ticket. The device should confirm the validity of the E-Ticket pass via the Bytemark API and provide appropriate feedback to the user indicating a successful transaction and confer the right to travel to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Child E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Scnario": "Scanner Withdrawal Logic", "Test_Sce_Description": "Verify that the scanner correctly applies withdrawal logic if the pass-holder does not remove the QR code from view of the scanner after the initial scan. The scanner should not respond to the scan if the same E-Ticket ID is scanned within 3 seconds of the initial scan."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails timestamp validation", "Test_Scnario": "E-Ticket QR Code fails timestamp validation", "Test_Sce_Description": "Validate the scenario where the E-Ticket QR code fails the timestamp validation. The device should check the timestamp of the QR code against the maximum allowable time window in the device config to determine if the E-Ticket is valid for travel. If the timestamp of the QR code does not meet the timestamp validation requirements, the user\u2019s E-Ticket will not be valid for travel and the device should provide the appropriate decline feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails timestamp validation", "Test_Scnario": "E-Ticket QR Code fails deny list validation", "Test_Sce_Description": "Validate the scenario where the E-Ticket QR code fails the deny list validation. The device should perform a check against the local deny list and confirm that the E-Ticket ID is on the current deny list. If the E-Ticket ID is on the deny list, the device should provide the appropriate decline feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails timestamp validation", "Test_Scnario": "E-Ticket QR Code fails validation (response from API)", "Test_Sce_Description": "Validate the scenario where the E-Ticket QR code fails the validation from the API response. The device should call the Bytemark API and receive a response that determines that the E-Ticket is not valid for travel. If the E-Ticket is not valid for travel, the device should provide the appropriate feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails timestamp validation", "Test_Scnario": "E-Ticket QR Code fails to scan", "Test_Sce_Description": "Validate the scenario where the E-Ticket QR code fails to scan. The device should attempt to decrypt a scanned E-ticket QR code or any QR code using the Bytemark key. In the event of a failure, an invalid ticket screen should be displayed."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails timestamp validation", "Test_Scnario": "Bytemark API call returns error code \u201c401 Unauthorized User\u201d or Bytemark error code 50032 (unauthorized access)", "Test_Sce_Description": "Validate the scenario where the API call to Bytemark returns an error code. If the HTTP code is \u201c401\u201d or Bytemark error code 50032, the device should read/log the error code and begin the error handling process. The device should renew the authentication token and retry the API call. If the API call is successful, it should follow the normal process, else it should act as if it is offline again and move to offline validation steps."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails timestamp validation", "Test_Scnario": "Bytemark API call returns other HTTP error code", "Test_Sce_Description": "Validate the scenario where the API call to Bytemark returns other HTTP error codes. The device should handle the error appropriately and provide the necessary feedback to the user."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails deny list validation", "Test_Scnario": "E-Ticket QR Code fails deny list validation", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when an E-Ticket QR code fails the deny list validation. The SA Tool should check the E-Ticket ID against the local deny list and if the ID is found on the list, the right to travel should not be conferred and the appropriate decline feedback should be provided to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails deny list validation", "Test_Scnario": "E-Ticket QR Code fails timestamp validation", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when an E-Ticket QR code fails the timestamp validation. The SA Tool should check the timestamp of the QR code against the maximum allowable time window in the device config. If the timestamp does not meet the validation requirements, the right to travel should not be conferred and the appropriate decline feedback should be provided to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails deny list validation", "Test_Scnario": "E-Ticket QR Code fails validation (response from API)", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when an E-Ticket QR code fails the validation due to a response from the Bytemark API. The SA Tool should call the Bytemark API and if the response determines that the E-Ticket is not valid for travel, the right to travel should not be conferred and the appropriate decline feedback should be provided to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails deny list validation", "Test_Scnario": "E-Ticket QR Code fails to scan", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when an E-Ticket QR code fails to scan. The SA Tool should attempt to decrypt a scanned E-ticket QR code or any QR code using the Bytemark key. If the decryption fails, an invalid ticket screen should be displayed."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails deny list validation", "Test_Scnario": "Bytemark API call returns error code \u201c401 Unauthorized User\u201d or Bytemark error code 50032 (unauthorized access)", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the Bytemark API call returns an error code. The SA Tool should renew the authentication token and retry the API call. If the API call is still unsuccessful, the device should move to offline validation steps."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails deny list validation", "Test_Scnario": "Bytemark API call returns other HTTP error code", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the Bytemark API call returns an HTTP error code other than \u201c401 Unauthorized User\u201d or Bytemark error code 50032. The SA Tool should handle the error appropriately and provide the necessary feedback to the user."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails validation (response from API)", "Test_Scnario": "Validation of E-Ticket QR Code with Bytemark API", "Test_Sce_Description": "This scenario will test the functionality of the device when it sends and receives a response from Bytemark API to check the validity of the E-Ticket QR Code. The test will ensure that the device correctly identifies whether the E-Ticket is valid for travel or not."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails validation (response from API)", "Test_Scnario": "Feedback to E-Ticket Holder on Failed Validation", "Test_Sce_Description": "This scenario will test the feedback mechanism of the device when the E-Ticket fails the necessary validation checks. The test will ensure that the device provides the appropriate feedback to the E-Ticket holder and does not confer the right to travel."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails validation (response from API)", "Test_Scnario": "Handling of Bytemark API Error Code 401 or 50032", "Test_Sce_Description": "This scenario will test how the device handles the situation when the Bytemark API returns an error code 401 or 50032. The test will ensure that the device correctly renews the authentication token, retries the API call, and moves to offline validation steps if necessary."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails validation (response from API)", "Test_Scnario": "Handling of Other Bytemark API Error Codes", "Test_Sce_Description": "This scenario will test how the device handles the situation when the Bytemark API returns other HTTP error codes. The test will ensure that the device correctly logs the error code and begins the error handling process."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails validation (response from API)", "Test_Scnario": "Validation of Timestamp on E-Ticket QR Code", "Test_Sce_Description": "This scenario will test the functionality of the device when it checks the timestamp of the QR code against the maximum allowable time window in the device config. The test will ensure that the device correctly identifies whether the E-Ticket is valid for travel or not based on the timestamp validation."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails validation (response from API)", "Test_Scnario": "Validation of E-Ticket QR Code Against Deny List", "Test_Sce_Description": "This scenario will test the functionality of the device when it checks the E-Ticket ID against the local deny list. The test will ensure that the device correctly identifies whether the E-Ticket is valid for travel or not based on the deny list validation."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails validation (response from API)", "Test_Scnario": "Handling of Unscannable E-Ticket QR Code", "Test_Sce_Description": "This scenario will test how the device handles the situation when the E-Ticket QR Code fails to scan. The test will ensure that the device correctly displays an invalid ticket screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails validation (response from API)", "Test_Scnario": "Performance of Device in Offline Mode", "Test_Sce_Description": "This scenario will test the performance of the device when it is offline and unable to retrieve details regarding the E-Ticket from the Bytemark backend. The test will ensure that the device correctly caches the result in an offline database to be uploaded to Bytemark API when connection is resumed."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails validation (response from API)", "Test_Scnario": "Security of E-Ticket QR Code", "Test_Sce_Description": "This scenario will test the security feature of the device that refreshes the QR code to prevent fraud. The test will ensure that the device correctly refreshes the QR code and invalidates any screenshots of the E-Ticket."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails validation (response from API)", "Test_Scnario": "Handling of Multiple Scans of Same E-Ticket QR Code", "Test_Sce_Description": "This scenario will test how the device handles the situation when the same E-Ticket QR Code is scanned multiple times in a row. The test will ensure that the device correctly applies the withdrawal logic and does not respond to the repeated scans."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails to scan", "Test_Scnario": "E-Ticket QR Code fails timestamp validation", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the E-Ticket QR code fails timestamp validation. The device should check the timestamp of the QR code against the maximum allowable time window in the device config to determine if the E-Ticket is valid for travel. If the timestamp of the QR code does not meet the timestamp validation requirements, the user\u2019s E-Ticket should not be valid for travel and the device should provide the appropriate decline feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails to scan", "Test_Scnario": "E-Ticket QR Code fails deny list validation", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the E-Ticket QR code fails deny list validation. The device should perform a check against the local deny list and confirm that the E-Ticket ID is on the current deny list. If the E-Ticket ID is on the deny list, the device should provide the appropriate decline feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails to scan", "Test_Scnario": "E-Ticket QR Code fails validation (response from API)", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the E-Ticket QR code fails validation as per the response from Bytemark API. The device should call the Bytemark API and receive a response that determines that the E-Ticket is not valid for travel. If the E-Ticket is not valid for travel, the device should provide the appropriate feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails to scan", "Test_Scnario": "E-Ticket QR Code fails to scan", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the E-Ticket QR code fails to scan. The device should attempt to decrypt a scanned E-ticket QR code or any QR code using the Bytemark key. In the event of a failure, an invalid ticket screen should be displayed."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails to scan", "Test_Scnario": "Bytemark API call returns error code \u201c401 Unauthorized User\u201d or Bytemark error code 50032 (unauthorized access)", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the API call to Bytemark returns an error code. If the HTTP code is \u201c401\u201d or Bytemark error code 50032, the device should read/log the error code and begin the error handling process. The device should renew the authentication token and retry the API call. If the API call is successful, it should follow the normal process, else it should act as if it is offline again and move to offline validation steps."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails to scan", "Test_Scnario": "Bytemark API call returns other HTTP error code", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the API call to Bytemark returns other HTTP error codes. The device should handle the error appropriately and provide the necessary feedback to the user."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns error code \u201c401 Unauthorized User\u201d or Bytemark error code 50032 (unauthorized access)", "Test_Scnario": "Bytemark API call returns error code \u201c401 Unauthorized User\u201d", "Test_Sce_Description": "This scenario will test the functionality of the device when the Bytemark API call returns a 401 error code. The device should log the error code and begin the error handling process. The device should then renew the authentication token and retry the API call. If the API call is successful, it should continue with the normal process, else it should act as if it is offline and move to offline validation steps."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns error code \u201c401 Unauthorized User\u201d or Bytemark error code 50032 (unauthorized access)", "Test_Scnario": "Bytemark API call returns error code 50032 (unauthorized access)", "Test_Sce_Description": "This scenario will test the functionality of the device when the Bytemark API call returns a 50032 error code. The device should log the error code and begin the error handling process. The device should then renew the authentication token and retry the API call. If the API call is successful, it should continue with the normal process, else it should act as if it is offline and move to offline validation steps."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns error code \u201c401 Unauthorized User\u201d or Bytemark error code 50032 (unauthorized access)", "Test_Scnario": "Bytemark API call returns other HTTP error code", "Test_Sce_Description": "This scenario will test the functionality of the device when the Bytemark API call returns any other HTTP error code. The device should act as if it is offline and move to offline validation steps."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns error code \u201c401 Unauthorized User\u201d or Bytemark error code 50032 (unauthorized access)", "Test_Scnario": "Bytemark API call is successful (Return Code \u201c200\u201d) but response contains internal error code", "Test_Sce_Description": "This scenario will test the functionality of the device when the Bytemark API call is successful but the response contains an internal error code. The device should act as if it is offline and move to offline validation steps."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns error code \u201c401 Unauthorized User\u201d or Bytemark error code 50032 (unauthorized access)", "Test_Scnario": "Bytemark API call is successful (Return Code \u201c200\u201d) but response contains error code (200001) for \u201cWrong Transit Agency\u201d", "Test_Sce_Description": "This scenario will test the functionality of the device when the Bytemark API call is successful but the response contains a \u201cWrong Transit Agency\u201d error code 200001. The device should treat this error code as an invalid result and the E-Ticket will be deemed invalid for travel."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns error code \u201c401 Unauthorized User\u201d or Bytemark error code 50032 (unauthorized access)", "Test_Scnario": "Bytemark API Call is unsuccessful due to Timeout", "Test_Sce_Description": "This scenario will test the functionality of the device when the Bytemark API call fails due to a response timeout. The device should act as if it is offline and move to offline validation steps."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns error code \u201c401 Unauthorized User\u201d or Bytemark error code 50032 (unauthorized access)", "Test_Scnario": "Transaction Reversal - Customer\u2019s Farecard is Unreadable", "Test_Sce_Description": "This scenario will test the functionality of the device when the Farecard is unreadable. The device should indicate to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns error code \u201c401 Unauthorized User\u201d or Bytemark error code 50032 (unauthorized access)", "Test_Scnario": "Transaction Reversal - Customer Requests Audio Messages", "Test_Sce_Description": "This scenario will test the functionality of the device when the customer requests audio messages for fare reversal. The device should play the corresponding audio message in the default language of the customer's Farecard."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns other HTTP error code", "Test_Scnario": "Bytemark API call returns HTTP error code 401 or 50032", "Test_Sce_Description": "Verify that when the Bytemark API call returns HTTP error code 401 or 50032, the device correctly logs the error code and initiates the error handling process. The device should renew the authentication token and retry the API call. If the API call is successful, the device should continue with the main use case. If the API call fails again, the device should act as if it is offline and move to offline validation steps."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns other HTTP error code", "Test_Scnario": "Bytemark API call returns other HTTP error code", "Test_Sce_Description": "Verify that when the Bytemark API call returns any other HTTP error code, the device correctly logs the error and acts as if it is offline. The device should then move to offline validation steps."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns other HTTP error code", "Test_Scnario": "Bytemark API call is successful but response contains internal error code", "Test_Sce_Description": "Verify that when the Bytemark API call is successful but the response contains an internal error code, the device correctly logs the error and acts as if it is offline. The device should then move to offline validation steps."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns other HTTP error code", "Test_Scnario": "Bytemark API call is successful but response contains error code 200001 for Wrong Transit Agency", "Test_Sce_Description": "Verify that when the Bytemark API call is successful but the response contains error code 200001 for Wrong Transit Agency, the device correctly identifies this error code as an invalid result and deems the E-Ticket as invalid for travel. The device should then provide the appropriate feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns other HTTP error code", "Test_Scnario": "Bytemark API Call is unsuccessful due to Timeout", "Test_Sce_Description": "Verify that when the Bytemark API call is unsuccessful due to a response timeout, the device correctly logs the error and acts as if it is offline. The device should then move to offline validation steps. The timeout period should be configurable to provide the best user experience and technical allowance."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns other HTTP error code", "Test_Scnario": "Transaction Reversal - Customer\u2019s Farecard is Unreadable", "Test_Sce_Description": "Verify that when the customer's Farecard is unreadable, the SA Tool application correctly detects the Farecard and fails to read it. The application should indicate to the operator that the Farecard is unreadable. If the customer taps on the NFC reader again and the tap is successful, the application should continue with the main use case. If the tap is unsuccessful, the application should indicate to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns other HTTP error code", "Test_Scnario": "Transaction Reversal - Customer Requests Audio Messages", "Test_Sce_Description": "Verify that when the customer requests audio messages for fare reversal, the operator can enable audio mode and change the volume level using the physical device buttons at the customer\u2019s discretion. The volume adjustment bar should appear and timeout automatically to indicate the volume level. The volume should return to the device default after the use case is completed. The physical buttons should only support changing the audio messaging volume when accessibility mode is enabled."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on a SA Tool with Open Payments Media \u2013 Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "SA Tool Offline and Not Connected to ATS", "Test_Sce_Description": "Verify that the SA Tool can store the tap transaction when the device is offline and not connected to Accenture Ticketing Services (ATS). Once the device goes back online and connects to ATS, the tap should be rated in ATS."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on a SA Tool with Open Payments Media \u2013 Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Fare Payment Reversal with Audio Messages", "Test_Sce_Description": "Verify that the SA Tool can handle fare payment reversal requests with audio messages. The operator should be able to enable audio mode and adjust the volume level using the physical device buttons. The language preference on the media should dictate which language the audio message will be played in."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on a SA Tool with Open Payments Media \u2013 Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Open Payments Media Fails ODA Check", "Test_Sce_Description": "Verify that the SA Tool can handle situations where an Open Payments Media fails the ODA check. The device should return the appropriate feedback and the declined tap should be sent to ATS."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on a SA Tool with Open Payments Media \u2013 Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Open Payments Media Fails Expiry Check", "Test_Sce_Description": "Verify that the SA Tool can handle situations where an Open Payments Media fails the Expiry Check. The device should return the appropriate feedback and the declined tap should be sent to ATS."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on a SA Tool with Open Payments Media \u2013 Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Multiple NFC Media Presented at Once", "Test_Sce_Description": "Verify that the SA Tool can handle situations where multiple NFC media are presented to the device at one time. The device should block all fare payment functionality and display an error toast message."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on a SA Tool with Open Payments Media \u2013 Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "SA Tool in Out-of-Service State", "Test_Sce_Description": "Verify that the SA Tool can handle situations where it is in an Out-of-Service state. The device should not detect the media and remain in the Out-of-Service state."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on a SA Tool with Open Payments Media \u2013 Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "SA Tool Configured for Farecard Reversals Only", "Test_Sce_Description": "Verify that the SA Tool can handle situations where it is configured for farecard reversals only. The device should check the local deny list if the media is on the local deny list."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on a SA Tool with Open Payments Media \u2013 Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Customer Uses Audio Jack to Hear Instructions", "Test_Sce_Description": "Verify that the SA Tool can handle situations where the customer uses the audio jack to hear instructions. The device should automatically switch into audio assist mode when headphones are inserted into the Audio jack."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on a SA Tool with Open Payments Media \u2013 Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Customer Overrides the Default Trip", "Test_Sce_Description": "Verify that the SA Tool can handle situations where the customer overrides the default trip. The device should process the tap as a normal tap-off."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on a SA Tool with Open Payments Media \u2013 Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Customer Eligible for Capping Discount", "Test_Sce_Description": "Verify that the SA Tool can handle situations where the customer is eligible for a capping discount. ATS should calculate the capping discount and apply it to the fare calculation."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on a SA Tool with Open Payments Media \u2013 Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Customer Eligible for Multiple Capping Discounts", "Test_Sce_Description": "Verify that the SA Tool can handle situations where the customer is eligible for multiple capping discounts. ATS should calculate the capping discount and apply it to the fare calculation."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on a SA Tool with Open Payments Media \u2013 Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "SA Tool Offline and Customer Eligible for Capping Discount", "Test_Sce_Description": "Verify that the SA Tool can handle situations where the device is offline and the customer is eligible for a capping discount. The device should store the tap transaction until it goes back online and connects to ATS."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on SA Tool with Open Payments Media \u2013 Customer requests audio messages", "Test_Scnario": "Testing SA Tool with Open Payments Media when device is offline", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the device is offline and not connected to Accenture Ticketing Services. The test will verify if the device checks the local deny list and if the latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on SA Tool with Open Payments Media \u2013 Customer requests audio messages", "Test_Scnario": "Testing SA Tool with Open Payments Media when customer requests audio messages", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer requests audio messages for fare payment. The test will verify if the operator can enable audio mode and change the volume level using the physical device buttons at the customer\u2019s discretion."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on SA Tool with Open Payments Media \u2013 Customer requests audio messages", "Test_Scnario": "Testing SA Tool with Open Payments Media when fare payment results from failed inspection", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the operator inspects a customer\u2019s OP card and determines that they have not paid a fare. The test will verify if the operator can select the payment function on the SA Tool inspection results screen and if the SA Tool records both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on SA Tool with Open Payments Media \u2013 Customer requests audio messages", "Test_Scnario": "Testing SA Tool with Open Payments Media when media fails ODA check", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when an Open Payments Media fails the ODA check. The test will verify if the device returns the appropriate feedback and if the Declined \u2013 Try Another Card (Failed ODA Check) screen is provided to the cardholder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on SA Tool with Open Payments Media \u2013 Customer requests audio messages", "Test_Scnario": "Testing SA Tool with Open Payments Media when media fails expiry check", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when an Open Payments Media fails the Expiry Check. The test will verify if the device returns the appropriate feedback and if the Declined \u2013 Card Expired Screen is provided to the cardholder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on SA Tool with Open Payments Media \u2013 Customer requests audio messages", "Test_Scnario": "Testing SA Tool with Open Payments Media when media is on the ATS deny list", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when Open Payments Media is on the deny list. The test will verify if the device checks the local deny list and if the latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on SA Tool with Open Payments Media \u2013 Customer requests audio messages", "Test_Scnario": "Testing SA Tool with Open Payments Media when customer uses audio jack to hear instructions", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer inserts headphones into the Audio jack which automatically switches the device into audio assist mode. The test will verify if the audio instructions detail how to adjust the volume by pressing the volume button and then prompt the user to tap their media."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on SA Tool with Open Payments Media \u2013 Customer requests audio messages", "Test_Scnario": "Testing SA Tool with Open Payments Media when media contains a Default O/D", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when Open Payments Media contains a Default O/D and the Customer Taps on at either the Origin or Destination Status. The test will verify if ATS will deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment with Open Payments Media \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Open Payments Media on Deny List - Online", "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list and the device is online, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment with Open Payments Media \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Open Payments Media on Local Deny List - Offline", "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment with Open Payments Media \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Multiple NFC Media Presented at Once", "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment with Open Payments Media \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Device in Out-of-Service State", "Test_Sce_Description": "Verify that when the device is in Out-of-Service state, the Not In Service Screen is provided to the cardholder and the device does not detect the media. The device should remain in Out-of-Service State."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment with Open Payments Media \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Error Occurred on Device", "Test_Sce_Description": "Verify that when an error has occurred on the device that does not cover the exception cases above, the device records the tap. The Declined \u2013 See Customer Service Screen should be provided to the cardholder. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment with Open Payments Media \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Open Payments Media Not on Approved Media List - Beta Mode", "Test_Sce_Description": "Verify that when a customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode, the device performs the necessary validation and determines that the Open Payments Media is unable to pass the expiry check. The Declined \u2013 Card Expired Screen should be provided to the cardholder. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment with Open Payments Media \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Open Payments Media on ATS Deny List - Online", "Test_Sce_Description": "Verify that when the Open Payments Media is on the ATS deny list and the SA Tool is online, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Unpaid Fares (Suspended: Unpaid Fares) screen or the Declined \u2013 Try Another Card (Suspended: Other) screen should be provided to the cardholder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment with Open Payments Media \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Open Payments Media on Local Deny List - Offline", "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the SA Tool is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Unpaid Fares (Suspended: Unpaid Fares) screen or the Declined \u2013 Try Another Card (Suspended: Other) screen should be provided to the cardholder. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment with Open Payments Media \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Multiple NFC Media Presented at Once in Fare Payment Mode", "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time in Fare Payment mode, the device blocks all fare payment functionality and displays an error toast message."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment with Open Payments Media \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Device in Out-of-Service State", "Test_Sce_Description": "Verify that when the device is in Out-of-Service state, the device displays the Not in Service screen to the cardholder and does not detect the media. The device should remain in Out-of-Service State."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment with Open Payments Media \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Error Occurred on Device", "Test_Sce_Description": "Verify that when an error has occurred on the device that does not cover the exception cases above, the device records the tap. The Declined \u2013 Please Contact Customer Service screen should be provided to the cardholder. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment with Open Payments Media \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Open Payments Media Not on Approved Media List - Pilot Mode", "Test_Sce_Description": "Verify that when a customer attempts to tap an Open Payments media not on the approved media list while the device is in Pilot mode, the device should block the fare payment functionality."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media fails ODA check", "Test_Scnario": "Open Payments Media fails ODA check", "Test_Sce_Description": "This scenario will test the functionality of the device when the Open Payments Media fails the ODA check. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media fails ODA check", "Test_Scnario": "Open Payments Media fails Expiry Check", "Test_Sce_Description": "This scenario will test the functionality of the device when the Open Payments Media fails the Expiry Check. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the expiry check. The Declined \u2013 Card Expired Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media fails ODA check", "Test_Scnario": "Open Payments Media has already tapped-on using an Online Device", "Test_Sce_Description": "This scenario will test the functionality of the device when the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window, whereby the initial device and secondary device tapped on were both online. The device should send the tap to ATS and return a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media fails ODA check", "Test_Scnario": "Open Payments Media has already tapped-on using an Offline Device (Anti-passback)", "Test_Sce_Description": "This scenario will test the functionality of the device when the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window whereby the initial device tapped, and secondary device(s) is the same device and is offline. The device should accept the tap and check the latent transaction processor on the same device for a previous tap within the anti-passback window. The tap should be stored on the device till it is connected to ATS where the transactions will be reconciled. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media fails ODA check", "Test_Scnario": "Open Payments Media is on the ATS deny list and the SA Tool is online", "Test_Sce_Description": "This scenario will test the functionality of the device when the Open Payments Media is on the deny list. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media fails ODA check", "Test_Scnario": "Open Payments Media is on the local deny list and device is offline", "Test_Sce_Description": "This scenario will test the functionality of the device when the Open Payments Media is on the local deny list and the device is offline. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media fails ODA check", "Test_Scnario": "Multiple NFC media are presented to the device at one time", "Test_Sce_Description": "This scenario will test the functionality of the device when multiple NFC media are presented to the device at one time. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media fails ODA check", "Test_Scnario": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Sce_Description": "This scenario will test the functionality of the device when it is in Out-of-Service state. The Not In Service Screen should be provided to the cardholder. The device should not detect the media and remain in Out-of-Service State."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media fails ODA check", "Test_Scnario": "Customer attempts to tap on and an error has occurred", "Test_Sce_Description": "This scenario will test the functionality of the device when an error has occurred on the device that does not cover the exception cases above. The device should record the tap. The Declined \u2013 See Customer Service Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media fails ODA check", "Test_Scnario": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Sce_Description": "This scenario will test the functionality of the device when the customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode. The device should not accept the tap and provide an appropriate error message to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media Fails Expiry Check during Fare Payment", "Test_Scnario": "Open Payments Media Fails Expiry Check", "Test_Sce_Description": "This scenario tests the functionality of the device when an Open Payments Media fails the expiry check. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the expiry check. The Declined \u2013 Card Expired Screen should be provided to the cardholder and the declined tap should be sent to ATS."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media Fails Expiry Check during Fare Payment", "Test_Scnario": "Open Payments Media is on the ATS deny list and the SA Tool is online", "Test_Sce_Description": "This scenario tests the functionality of the device when the Open Payments Media is on the deny list. The device should send the tap to ATS and return a response that the media is on the deny list. The right to travel should not be conferred and the Declined \u2013 Unpaid Fares (Suspended: Unpaid Fares) screen should be provided to the cardholder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media Fails Expiry Check during Fare Payment", "Test_Scnario": "Open Payments Media is on the local deny list and the SA Tool is offline", "Test_Sce_Description": "This scenario tests the functionality of the device when the Open Payments Media is on the local deny list and the SA Tool is offline. The device should check the local deny list and return a response that the media is denied. The right to travel should not be conferred and the Declined \u2013 Unpaid Fares (Suspended: Unpaid Fares) screen should be provided to the cardholder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media Fails Expiry Check during Fare Payment", "Test_Scnario": "Multiple NFC media are presented to the device at one time in Fare Payment mode", "Test_Sce_Description": "This scenario tests the functionality of the device when multiple NFC media are presented at one time. The device should block all fare payment functionality and display an error toast message."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media Fails Expiry Check during Fare Payment", "Test_Scnario": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Sce_Description": "This scenario tests the functionality of the device when it is in Out-of-Service state. The device should display the Not in Service screen to the cardholder and not detect the media."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media Fails Expiry Check during Fare Payment", "Test_Scnario": "Customer attempts to tap on and an error has occurred", "Test_Sce_Description": "This scenario tests the functionality of the device when an error has occurred that does not cover the exception cases above. The device should record the tap and provide the Declined \u2013 Please Contact Customer Service screen to the cardholder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media Fails Expiry Check during Fare Payment", "Test_Scnario": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in Pilot mode", "Test_Sce_Description": "This scenario tests the functionality of the device when an Open Payments Media fails the ODA check. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media Fails Expiry Check during Fare Payment", "Test_Scnario": "Open Payments Media has already tapped-on using an Online Device", "Test_Sce_Description": "This scenario tests the functionality of the device when the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window, whereby the initial device and secondary device tapped on were both online. The device should send the tap to ATS and return a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media Fails Expiry Check during Fare Payment", "Test_Scnario": "Open Payments Media has already tapped-on using an Offline Device (Anti-passback)", "Test_Sce_Description": "This scenario tests the functionality of the device when the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window whereby the initial device tapped, and secondary device(s) is the same device and is offline. The device should accept the tap and check the latent transaction processor on the same device for a previous tap within the anti-passback window."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media is on the ATS deny list and the SA Tool is online", "Test_Scnario": "Open Payments Media on ATS deny list and SA Tool online", "Test_Sce_Description": "Verify that when the Open Payments Media is on the ATS deny list and the SA Tool is online, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media is on the ATS deny list and the SA Tool is online", "Test_Scnario": "Open Payments Media on local deny list and device offline", "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background and in the SOTI logs. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media is on the ATS deny list and the SA Tool is online", "Test_Scnario": "Multiple NFC media presented to device at once", "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background and in the SOTI logs. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media is on the ATS deny list and the SA Tool is online", "Test_Scnario": "Tap Open Payments Media when SA Tool is in Out-of-Service state", "Test_Sce_Description": "Verify that when the SA Tool is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State. The Not In Service Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media is on the ATS deny list and the SA Tool is online", "Test_Scnario": "Error occurred on device", "Test_Sce_Description": "Verify that when an error has occurred on the device that does not cover the exception cases above, the device records the tap. The Declined \u2013 See Customer Service Screen should be provided to the cardholder. An error should be captured and logged in the background and in the SOTI logs. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media is on the ATS deny list and the SA Tool is online", "Test_Scnario": "Tap Open Payments media not on approved media list while device in beta mode", "Test_Sce_Description": "Verify that when a customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media is on the ATS deny list and the SA Tool is online", "Test_Scnario": "Tap-on immediately after tapping-off at the same station and device online (Anti-passback)", "Test_Sce_Description": "Verify that when a cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media is on the ATS deny list and the SA Tool is online", "Test_Scnario": "Tap-on immediately after tapping-off at the same station and device offline (anti-passback)", "Test_Sce_Description": "Verify that when a cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window and the device is offline, the device should not detect the tap and remain in the offline state. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Adjust Audio Tone Volume", "Test_Scnario": "Adjust Audio Tone Volume on SA Tool", "Test_Sce_Description": "Verify that the operator is able to adjust the audio tone volume of the SA Tool application. The operator should be able to adjust the volume to the desired level and the application should play the accepted tone at the newly selected volume."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Adjust Audio Tone Volume", "Test_Scnario": "Revert to Last Saved Configuration on SA Tool", "Test_Sce_Description": "Verify that if the operator presses the back button on the settings screen, the application reverts to the last saved configuration. The volume should be reset to the last saved configuration."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Adjust Audio Tone Volume", "Test_Scnario": "Save Desired Volume on SA Tool", "Test_Sce_Description": "Verify that if the operator selects done, the desired volume is saved for the shift. The volume should be reset to default volume when the operator signs out or a new operator signs in."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Adjust Audio Tone Volume", "Test_Scnario": "Configure Vibration Control on SA Tool", "Test_Sce_Description": "Verify that the operator is able to configure vibration control on the SA Tool. The operator should be able to select the desired vibration level."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Adjust Audio Tone Volume", "Test_Scnario": "Revert to Last Saved Vibration Configuration on SA Tool", "Test_Sce_Description": "Verify that if the operator presses the back button on the settings screen, the application reverts to the last saved vibration configuration. The vibration control should be reset to the last saved configuration."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Adjust Audio Tone Volume", "Test_Scnario": "Save Desired Vibration Control on SA Tool", "Test_Sce_Description": "Verify that if the operator selects Apply, the desired vibration control is saved for the shift. The default haptic feedback should be reset when the operator signs out or a new operator signs in."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Adjust Audio Tone Volume", "Test_Scnario": "Select New Route/Line on SA Tool", "Test_Sce_Description": "Verify that the operator is able to select desired route/lines for inspection purposes on the SA Tool. The operator should be able to select Rail or Bus depending on their inspection location."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Adjust Audio Tone Volume", "Test_Scnario": "Reset Trip and Stop Selections on SA Tool", "Test_Sce_Description": "Verify that if the operator selects a route/line different than the current route, the trip and stop selections are reset. The operator should be able to select the desired trip and stop."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Adjust Audio Tone Volume", "Test_Scnario": "Transaction Reversal with No Valid Fare on SA Tool", "Test_Sce_Description": "Verify that if no valid fare to be reversed is found, the application displays a declined message to the customer. The transaction should not be conducted and the SA Tool application should play a declined audio tone."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Adjust Audio Tone Volume", "Test_Scnario": "Transaction Reversal with Blocked Farecard on SA Tool", "Test_Sce_Description": "Verify that if the customer\u2019s Farecard is blocked, the device sends the request to ATS for processing and ATS detects the card is blocked. ATS should return a declined/error result back to the SA Tool and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Operator Configures Vibration Control", "Test_Scnario": "Verify the functionality of vibration control adjustment on the SA Tool", "Test_Sce_Description": "This scenario is to test if the operator is able to adjust the vibration control on the SA Tool. The operator should be able to select the desired vibration level and the application should save this configuration for the shift. The default haptic feedback should be reset when the operator signs out or a new operator signs in."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Operator Configures Vibration Control", "Test_Scnario": "Verify the performance of vibration control adjustment on the SA Tool", "Test_Sce_Description": "This scenario is to test the performance of the vibration control adjustment on the SA Tool. The application should respond quickly and smoothly when the operator adjusts the vibration level. There should be no lag or delay in the response of the application."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Operator Configures Vibration Control", "Test_Scnario": "Verify the security of vibration control adjustment on the SA Tool", "Test_Sce_Description": "This scenario is to test the security of the vibration control adjustment on the SA Tool. The application should securely save the operator's vibration control configuration and should not allow unauthorized access to this information."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Operator Configures Vibration Control", "Test_Scnario": "Verify the exception flow of vibration control adjustment on the SA Tool", "Test_Sce_Description": "This scenario is to test the exception flow of the vibration control adjustment on the SA Tool. If the operator presses the back button on the settings screen, the application should revert to the last saved configuration."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Operator Configures Vibration Control", "Test_Scnario": "Verify the alternate flow of vibration control adjustment on the SA Tool", "Test_Sce_Description": "This scenario is to test the alternate flow of the vibration control adjustment on the SA Tool. If the operator selects Apply, the desired vibration control should be saved for the shift."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Operator Configures Vibration Control", "Test_Scnario": "Verify the functionality of SA Tool when it is offline", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when it is offline. The language preference should be stored in store-and-forward memory and should be updated in the Subsystem when the network connection is re-established."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Operator Configures Vibration Control", "Test_Scnario": "Verify the performance of SA Tool when it is offline", "Test_Sce_Description": "This scenario is to test the performance of the SA Tool when it is offline. The application should function smoothly and without any lag or delay, even when it is offline."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Operator Configures Vibration Control", "Test_Scnario": "Verify the security of SA Tool when it is offline", "Test_Sce_Description": "This scenario is to test the security of the SA Tool when it is offline. The application should securely store the language preference in store-and-forward memory and should not allow unauthorized access to this information."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Operator Configures Vibration Control", "Test_Scnario": "Verify the exception flow of SA Tool when it is offline", "Test_Sce_Description": "This scenario is to test the exception flow of the SA Tool when it is offline. The application should handle any exceptions or errors gracefully and should not crash or freeze."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Operator Configures Vibration Control", "Test_Scnario": "Verify the alternate flow of SA Tool when it is offline", "Test_Sce_Description": "This scenario is to test the alternate flow of the SA Tool when it is offline. The application should function as expected and should provide the operator with the necessary functionality, even when it is offline."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Operator selects new Route/Line", "Test_Scnario": "Verify the functionality of auto-selection of the first stop/station", "Test_Sce_Description": "This scenario is to test if the application auto-selects the first stop/station as the inspection location when the operator doesn\u2019t select a stop. The operator should be a GO or DISTANCE BASED TRANSIT employee."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Operator selects new Route/Line", "Test_Scnario": "Verify the functionality of saving the inspection parameters", "Test_Sce_Description": "This scenario is to test if the 'apply' button is greyed out and the operator is unable to save the current inspection parameters when the operator proceeds to save the inspection parameters after selecting a new line."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Operator selects new Route/Line", "Test_Scnario": "Verify the functionality of Route Parameters selection for FLATFARE BASED SA Tool operator", "Test_Sce_Description": "This scenario is to test if the FLATFARE BASED SA Tool operator is able to select Route Parameters from the Additional Options menu on the SA Tool. The operator should be a FLATFARE BASED employee operating a FLATFARE BASED SA Tool."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Operator selects new Route/Line", "Test_Scnario": "Verify the functionality of enabling auto-positioning for current location", "Test_Sce_Description": "This scenario is to test if the operator is able to enable auto-location for route parameters on the SA Tool. The operator should be inspecting in Distance based Transit or DISTANCE BASED TRANSIT."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Operator selects new Route/Line", "Test_Scnario": "Verify the functionality of remotely enabling/disabling GPS functionality on the SA Tool", "Test_Sce_Description": "This scenario is to test if the SA Tool application receives remote configuration and enables/disables the auto location functionality based on the new configuration in the background."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Operator selects new Route/Line", "Test_Scnario": "Verify the functionality of disabling auto-location functionality", "Test_Sce_Description": "This scenario is to test if the operator is able to disable auto-location functionality on the SA Tool."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Operator selects new Route/Line", "Test_Scnario": "Verify the functionality of updating current location", "Test_Sce_Description": "This scenario is to test if the operator is able to update the current location in the Route Parameters on the SA Tool."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Operator selects new Route/Line", "Test_Scnario": "Verify the functionality of switching device mode between DISTANCE BASED TRANSIT and GO", "Test_Sce_Description": "This scenario is to test if the operator is able to change device mode between DISTANCE BASED TRANSIT and GO on the SA Tool. The operator should have valid credentials to switch between GO and DISTANCE BASED TRANSIT mode on the SA Tool."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Operator selects new Route/Line", "Test_Scnario": "Verify the functionality of disabling SP Switching", "Test_Sce_Description": "This scenario is to test if the operator is displayed a toast message notification notifying SP switching is disabled when the operator taps on the SP icon on the login screen to switch between SPs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out", "Test_Scnario": "Sign-In Functionality of SA Tool", "Test_Sce_Description": "Verify that the new operator is able to sign-in to the SA Tool using their own user ID and passcode. Also, check if the system displays a message indicating that the current operator is already signed in and asks the new operator if they want to sign in anyway. Upon selecting 'Yes', the current operator should be signed off from the SA Tool."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out", "Test_Scnario": "Shut-Down Functionality of SA Tool via Physical Device Button", "Test_Sce_Description": "Verify that the operator is able to manually shut down the SA Tool by pressing and holding the physical power button. The system should display a confirmation message with options like 'Power off', 'Reset', 'Airplane Mode', etc. Upon selecting 'Power off' and confirming shut-down, the device should turn off."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out", "Test_Scnario": "Reboot Functionality of SA Tool", "Test_Sce_Description": "Verify that the operator is able to manually reboot the SA Tool by pressing and holding the physical power button. The system should display a confirmation message with options like 'Power off', 'Reset', 'Airplane Mode', etc. Upon selecting the 'Restart' option, the device should restart by turning off and powering on."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out", "Test_Scnario": "Out-of-Service State of SA Tool", "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out", "Test_Scnario": "Standby State of SA Tool", "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state where the screen turns off after remaining inactive for a configurable period of time. In this state, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life. An operator should be able to bring the device back into In-Service state by pressing the physical power button and signing in to the device lock screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out", "Test_Scnario": "Revenue Mode of SA Tool", "Test_Sce_Description": "Verify that in the Revenue Mode, the SA Tool operator is able to interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out", "Test_Scnario": "Training Mode of SA Tool", "Test_Sce_Description": "Verify that in the Training Mode, the SA Tool operator is able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out", "Test_Scnario": "User Access and Functionality of SA Tool", "Test_Sce_Description": "Verify that different users like SA Tool Operators, 3rd Party Operators, Distance based Transitrvisors, Maintenance, Training have access to different functionalities of the SA Tool as per the User Management Portal group."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out", "Test_Scnario": "Device Parameter Tool Configurations of SA Tool", "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are working as expected."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline", "Test_Scnario": "Testing the functionality of SA Tool in Out-of-Service state", "Test_Sce_Description": "This scenario will test if the SA Tool is unable to accept a Farecard for any kind of functionality when it is in \u201cOut-of-Service\u201d state. It will also test if the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off when the device goes into out-of-service state."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline", "Test_Scnario": "Testing the functionality of SA Tool in Standby state", "Test_Sce_Description": "This scenario will test if the SA Tool can temporarily suspend all its functionality while in Standby state. It will also test if the SA Tool switches into a Standby state where the screen will turn off after remaining inactive for a configurable period of time. It will also test if the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life when in standby mode."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline", "Test_Scnario": "Testing the functionality of SA Tool when the application is running in the background", "Test_Sce_Description": "This scenario will test if the SA Tool device allows the operator to use authorized third-party applications as needed. It will also test if the operator can launch multiple applications on the android device and move between them. It will also test if the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life when the SA Tool PDS application is running but is not in the foreground."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline", "Test_Scnario": "Testing the functionality of SA Tool in Revenue Mode", "Test_Sce_Description": "This scenario will test if the Revenue Mode allows the SA Tool operator to interact with customers. It will also test if the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in this mode. It will also test if the SA tool will only have access to the EPT in the revenue mode and will accept the credit and debit payments."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline", "Test_Scnario": "Testing the functionality of SA Tool in Training Mode", "Test_Sce_Description": "This scenario will test if the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. It will also test if only non-revenue Farecard will be accepted in Training Mode. It will also test if all paper tickets printed from the SA Tool will indicate that they were printed while in training mode."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline", "Test_Scnario": "Testing the functionality of SA Tool when a new operator signs in", "Test_Sce_Description": "This scenario will test if the new Operator can enter own user ID and passcode and select Sign In. It will also test if a message indicates that the current Operator is currently signed in, and asks if the new Operator wants to sign in anyway. It will also test if the current Operator is signed off from the SA Tool when the new Operator selects Yes."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline", "Test_Scnario": "Testing the functionality of SA Tool when it is manually shut down", "Test_Sce_Description": "This scenario will test if the operator can manually shut down the SA Tool by pressing and holding the physical power button on the SA Tool. It will also test if the SA Tool displays a confirmation message with the following options: Power off, Other options (e.g. Reset, Airplane Mode, etc.). It will also test if the device will turn off when the operator confirms the shut-down. It will also test if the operator shift will not be closed if it is open."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline", "Test_Scnario": "Testing the functionality of SA Tool when it is manually rebooted", "Test_Sce_Description": "This scenario will test if the operator can manually reboot the SA Tool by pressing and holding the physical power button on the SA Tool. It will also test if the SA Tool displays a confirmation message with the following options: Power off, Other options (e.g. Reset, Airplane Mode, etc.). It will also test if the device will restart by turning off and powering on when the operator selects the restart option."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "New operator signs into current operator\u2019s shift", "Test_Scnario": "SA Tool Low Battery Threshold", "Test_Sce_Description": "Verify that the SA Tool shuts down when the battery level reaches 1% after the operator confirms they would like to sign out. The application should close off the current shift and generate the inspection shift statistics email that is stored on the device. The email should be sent once the SA Tool is powered on and re-establishes connection to the network."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "New operator signs into current operator\u2019s shift", "Test_Scnario": "SA Tool Offline Sign-Off", "Test_Sce_Description": "Validate that the SA Tool application can close the current shift and generate the shift statistics email even when the device is offline. The email should be stored on the device and sent once the SA Tool is powered on and re-establishes connection to the network."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "New operator signs into current operator\u2019s shift", "Test_Scnario": "New Operator Signs into Current Operator\u2019s Shift", "Test_Sce_Description": "Check that when a new operator signs in, a message indicates that the current Operator is currently signed in, and asks if the new Operator wants to sign in anyway. Upon confirmation, the current Operator should be signed off from the SA Tool."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "New operator signs into current operator\u2019s shift", "Test_Scnario": "First Time Sign-In with Temporary Passcode and No Network", "Test_Sce_Description": "Ensure that when the network is unavailable, the SA Tool application displays a message to the operator requesting them to sign in when network is available. The operator should not be signed in."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "New operator signs into current operator\u2019s shift", "Test_Scnario": "Maximum Number of Login Attempts", "Test_Sce_Description": "Confirm that the SA Tool application records a cumulative number of unsuccessful sign on attempts for a single valid operator badge ID on a SA Tool. When the number of unsuccessful sign-in attempts reaches the maximum number of sign-on attempts, the SA Tool application should deny access to that operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "New operator signs into current operator\u2019s shift", "Test_Scnario": "New Passcode is the Same as The Temporary Passcode", "Test_Sce_Description": "Verify that the SA Tool application detects that the new passcode is the same as the temporary passcode in the Subsystem and informs the user of the error and clears the new passcode fields."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "New operator signs into current operator\u2019s shift", "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria", "Test_Sce_Description": "Check that the SA Tool will not enable the submit button until the passcode entered is the correct length."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button", "Test_Scnario": "Shut-Down SA Tool via Physical Device Button", "Test_Sce_Description": "Verify that the SA Tool shuts down correctly when the physical power button is pressed and held. The tool should display a confirmation message with options such as 'Power off', 'Reset', 'Airplane Mode', etc. Upon selecting 'Power off' and confirming shut-down, the tool should turn off."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button", "Test_Scnario": "SA Tool Sign In Functionality", "Test_Sce_Description": "Verify that a new operator can sign in to the SA Tool using their user ID and passcode. The tool should display a message indicating that the current operator is signed in and ask if the new operator wants to sign in anyway. Upon selecting 'Yes', the current operator should be signed off from the tool."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button", "Test_Scnario": "SA Tool Out-of-Service State", "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any functionality and may require maintenance. If an operator is signed in and the device goes into out-of-service state, the tool should not close the operator\u2019s shift unless the operator has requested to sign off."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button", "Test_Scnario": "SA Tool Standby State", "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state after remaining inactive for a configurable period of time. In this state, the screen should turn off and the tool should disconnect from all peripherals to conserve battery life. An operator should be able to bring the device back into In-Service state by pressing the physical power button and signing in to the device lock screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button", "Test_Scnario": "SA Tool Reboot Functionality", "Test_Sce_Description": "Verify that the SA Tool can be manually rebooted at any time. The operator should be able to press and hold the physical power button to display a confirmation message with options such as 'Power off', 'Reset', 'Airplane Mode', etc. Upon selecting the restart option, the device should turn off and power on again."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button", "Test_Scnario": "SA Tool Revenue Mode", "Test_Sce_Description": "Verify that in Revenue Mode, the SA Tool operator can interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The tool should only have access to the EPT in the revenue mode and accept credit and debit payments."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button", "Test_Scnario": "SA Tool Training Mode", "Test_Sce_Description": "Verify that in Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the tool should indicate that they were printed while in training mode."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button", "Test_Scnario": "SA Tool User Access", "Test_Sce_Description": "Verify that different users have appropriate access to the SA Tool functionalities. For instance, SA Tool Operators should have access to Revenue Mode, Sales, Fare Payment, Inspection, Remote Access, Unblock Farecard, and Modify Card Concession functionalities."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button", "Test_Scnario": "SA Tool Device Parameter Tool Configurations", "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are correctly implemented and functioning as expected."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Reboot SA Tool", "Test_Scnario": "Reboot SA Tool - Successful Reboot", "Test_Sce_Description": "Verify that the SA Tool successfully reboots when the operator selects the 'Restart' option. The device should turn off and then power back on, displaying the home screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Reboot SA Tool", "Test_Scnario": "Reboot SA Tool - Unsuccessful Reboot", "Test_Sce_Description": "Verify that the SA Tool displays an appropriate error message when the reboot process fails. This could be due to a hardware issue or a software glitch."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Reboot SA Tool", "Test_Scnario": "Reboot SA Tool - Network Communications Disabled", "Test_Sce_Description": "Verify that the SA Tool disables network communications when the 'Airplane Mode' is enabled. The device should not be able to perform any inspections, counters, and queries."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Reboot SA Tool", "Test_Scnario": "Reboot SA Tool - Network Communications Enabled", "Test_Sce_Description": "Verify that the SA Tool enables network communications when the 'Airplane Mode' is disabled. The device should be able to perform inspections, counters, and queries."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Reboot SA Tool", "Test_Scnario": "Reboot SA Tool - Sound Levels Adjustment", "Test_Sce_Description": "Verify that the operator can adjust the device's sound levels using the side buttons on the SA Tool. The minimum limit for volume should be configurable."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Reboot SA Tool", "Test_Scnario": "Reboot SA Tool - Exception Flow", "Test_Sce_Description": "Verify that the SA Tool goes into an error state when it performs initial self-diagnostic checks and finds critical failures."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Reboot SA Tool", "Test_Scnario": "Reboot SA Tool - Alternate Flow", "Test_Sce_Description": "Verify that the SA Tool can operate in offline mode when the device is unable to connect to a network. Forget passcode and passcode change functionalities should be unavailable when the device is offline."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Reboot SA Tool", "Test_Scnario": "Reboot SA Tool - Performance", "Test_Sce_Description": "Verify that the SA Tool reboots within an acceptable time frame. The reboot process should not take too long as it could disrupt the operator's workflow."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Reboot SA Tool", "Test_Scnario": "Reboot SA Tool - Security", "Test_Sce_Description": "Verify that the SA Tool maintains the security of the operator's data during the reboot process. No data should be lost or compromised."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has an Anonymous Farecard with an ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the functionality of SA Tool when customer's anonymous Farecard has an ePurse balance less than the fare amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with an anonymous Farecard tries to pay the fare but the ePurse balance on the card is less than the fare amount. The SA Tool should detect this situation, display a declined message to the customer, and not conduct the transaction. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has an Anonymous Farecard with an ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the functionality of SA Tool when customer's Farecard is in overdraft", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Farecard is in overdraft. The SA Tool should detect this situation, display a declined message to the customer, and not conduct the transaction. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has an Anonymous Farecard with an ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the functionality of SA Tool when customer's Farecard is blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Farecard is blocked. The SA Tool should detect this situation, display a declined message to the customer, and not conduct the transaction. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has an Anonymous Farecard with an ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the functionality of SA Tool when customer's Farecard is on the hotlist", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Farecard is on the hotlist. The SA Tool should detect this situation, update the card\u2019s status to blocked, display a declined message to the customer, and not conduct the transaction. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has an Anonymous Farecard with an ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the functionality of SA Tool when battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a successful Farecard tap. If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode. Else, the customers fare payment should be processed as per Step 5. The application should then switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has an Anonymous Farecard with an ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the functionality of SA Tool when customer taps a card that is not a Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a card that is not a Farecard. The SA Tool should display the \u201cCard Read Error\u201d toast message for a short period of time."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has an Anonymous Farecard with an ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the functionality of SA Tool when customer's Farecard is within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Farecard is within the Anti-Passback Window. The device should detect that the Farecard fails the Anti-Passback checks, display a declined message to the customer, and not conduct the transaction. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has an Anonymous Farecard with an ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the functionality of SA Tool when customer taps a non-activated card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a non-activated card. The SA Tool should display the \u201cCard Read Error\u201d toast message for a short period of time."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has an Overdraft on their Registered Farecard", "Test_Scnario": "Overdraft Handling - Farecard in Overdraft", "Test_Sce_Description": "Verify that when a customer's Farecard is in overdraft, the SA Tool application correctly indicates that the card is in overdraft and displays the corresponding negative balance in the card query."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has an Overdraft on their Registered Farecard", "Test_Scnario": "Overdraft Handling - Sell Product", "Test_Sce_Description": "Verify that when the operator selects 'Sell' from the Main menu and chooses a product while the card is in overdraft, the SA Tool shows the Overdraft Full Screen Alert."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has an Overdraft on their Registered Farecard", "Test_Scnario": "Overdraft Handling - Dismiss Overdraft Notice", "Test_Sce_Description": "Verify that if the customer did not intend to load products and the operator 'dismisses' the overdraft notice, the SA Tool returns to the Sell screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has an Overdraft on their Registered Farecard", "Test_Scnario": "Overdraft Handling - Continue with Overdraft", "Test_Sce_Description": "Verify that if the customer is loading products and the operator selects 'continue', the SA Tool correctly adds the overdraft amount to the shopping cart as an e-purse load."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has an Overdraft on their Registered Farecard", "Test_Scnario": "Overdraft Handling - Checkout and Payment", "Test_Sce_Description": "Verify that upon successful payment and transaction, the correct amount is loaded onto the e-purse and the overdraft amount is cleared."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has an Overdraft on their Registered Farecard", "Test_Scnario": "Overdraft Handling with Fee - Farecard in Overdraft", "Test_Sce_Description": "Verify that when a customer's Farecard is in overdraft and the TA is charging a fee for overdraft, the SA Tool correctly indicates the overdraft and fee."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has an Overdraft on their Registered Farecard", "Test_Scnario": "Overdraft Handling with Fee - Waive Fee", "Test_Sce_Description": "Verify that the operator has the option to waive the fee for the overdraft and if selected, the fee is waived and the process continues as normal."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has an Overdraft on their Registered Farecard", "Test_Scnario": "Overdraft Handling with Fee - Overdraft Fee in Shopping Cart", "Test_Sce_Description": "Verify that if the operator does not waive the fee, an 'overdraft fee' line item is correctly added to the shopping cart."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has an Overdraft on their Registered Farecard", "Test_Scnario": "Overdraft Handling with Fee - Checkout and Payment", "Test_Sce_Description": "Verify that upon successful payment and transaction, the correct amount is loaded onto the e-purse, the overdraft amount and fee are cleared."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has an Overdraft on their Registered Farecard", "Test_Scnario": "Overdraft Handling with Fee - Pay Option", "Test_Sce_Description": "Verify that the operator has an option to address Overdraft with Fee without loading extra products onto the card by choosing 'PAY' option instead of 'CONTINUE'."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Testing the functionality of SA Tool when Customer\u2019s Farecard is Blocked", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when a customer's Farecard is blocked. The application should detect that the Farecard is blocked and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Performance testing of SA Tool when Customer\u2019s Farecard is Blocked", "Test_Sce_Description": "This scenario is to test the performance of the SA Tool application when a customer's Farecard is blocked. The application should quickly detect that the Farecard is blocked and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Security testing of SA Tool when Customer\u2019s Farecard is Blocked", "Test_Sce_Description": "This scenario is to test the security of the SA Tool application when a customer's Farecard is blocked. The application should securely detect that the Farecard is blocked and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Testing the functionality of SA Tool for alternate flow when Customer\u2019s Farecard is Unreadable", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application for the alternate flow when a customer's Farecard is unreadable. The application should detect the Farecard but fail to read it correctly and indicate to the operator that the Farecard is unreadable. The customer will tap on the NFC reader again. If the tap is successful, steps 4 \u2013 9 will be conducted. If the tap is unsuccessful, the SA Tool application will indicate to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Performance testing of SA Tool for alternate flow when Customer\u2019s Farecard is Unreadable", "Test_Sce_Description": "This scenario is to test the performance of the SA Tool application for the alternate flow when a customer's Farecard is unreadable. The application should quickly detect the Farecard but fail to read it correctly and indicate to the operator that the Farecard is unreadable. The customer will tap on the NFC reader again. If the tap is successful, steps 4 \u2013 9 will be conducted. If the tap is unsuccessful, the SA Tool application will indicate to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Security testing of SA Tool for alternate flow when Customer\u2019s Farecard is Unreadable", "Test_Sce_Description": "This scenario is to test the security of the SA Tool application for the alternate flow when a customer's Farecard is unreadable. The application should securely detect the Farecard but fail to read it correctly and indicate to the operator that the Farecard is unreadable. The customer will tap on the NFC reader again. If the tap is successful, steps 4 \u2013 9 will be conducted. If the tap is unsuccessful, the SA Tool application will indicate to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Testing Fare Payment on SA Tool with Regular Service Transfer Product", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made with a farecard that has a valid Regular Service Transfer Product. The service class is either Premium or Special Event and the tap is within the Transfer Window. The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse, and this should be communicated back to the SA Tool."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Testing Fare Payment during Peak hours after reaching Off Peak Daily Cap on SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made during peak hours after the farecard has reached the off peak Daily Cap Limit and is out of the transfer window. The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse, and this should be communicated back to the SA Tool."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Testing Fare Payment on Premium Service Route with Transfer on SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made on a premium service route/location after previously riding on a Special Event service route within the transfer window. The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse, and this should be communicated back to the SA Tool."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Testing Fare Payment with Valid Non-Adult Concession on SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made with a farecard that has a Valid Non-Adult concession. The SA Tool should verify that the Farecard is on the Action or Load Value List and update the Farecard accordingly."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Testing Fare Payment with Audio Messages Request on SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer requests audio messages for the fare payment. The operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Testing Fare Payment after Daily Cap Reached on SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made after the farecard has reached the Daily Cap Limit and is out of the transfer window. The SA Tool should deduct no fare since the Daily Cap is reached."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Testing Fare Payment on Premium Service or Special Route/Location on SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made on a premium service or special route/location. The SA Tool should compute and deduct the Premium or Special Event fare."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Testing Fare Payment on Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made on a premium service or special event route/location after previously riding on a regular service route within the transfer window. The SA Tool should compute and deduct the Upgrade fare."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Testing Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made during peak hours after previously reaching off peak daily cap outside the transfer window. The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse, and this should be communicated back to the SA Tool."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Testing Fare Payment with Farecard on the Hotlist on SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made with a farecard that is on the Hotlist. The SA Tool should verify that the Farecard is on the Action or Load Value List and update the Farecard accordingly."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a payment process. The test will ensure that the application switches to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when customer's card is not a Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's card is not a Farecard. The test will ensure that the SA Tool application does not respond and the device error message 'Card Read Error' is displayed for a short period of time."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when customer's Farecard is within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's card is within the Anti-Passback Window. The test will ensure that the ATS detects that the Farecard fails the Anti-Passback checks and the SA Tool application displays a declined message to the customer and the transaction is not conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, and the farecard is in overdraft", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, and the farecard is in overdraft. The test will ensure that the ATS detects that the Limited Period Pass is not valid at the current time, computes the value to be deducted from the e-Purse, and detects that farecard is in overdraft. The SA Tool application should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when customer has an expired period pass, ePurse balance is less than the fare amount and has an anonymous Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer has an expired period pass, ePurse balance is less than the fare amount and has an anonymous Farecard. The test will ensure that the SA Tool application detects the Card is Anonymous and the ePurse Balance is less than the fare amount. The SA Tool application should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when customer's Farecard is blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Farecard is blocked. The test will ensure that the SA Tool application detects that the Farecard is blocked. The SA Tool application should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when customer's Farecard is on the hotlist", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Farecard is on the hotlist. The test will ensure that the SA Tool application detects that the Farecard is on the hotlist and updates the card\u2019s status to blocked. The SA Tool application should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when customer taps a non-activated card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer taps a non-activated card. The test will ensure that the device detects that the card is not activated and is not on the action list available on the device. The SA Tool application should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Unreadable Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Farecard is unreadable. The SA Tool should detect the Farecard but fail to read it correctly, indicating to the operator that the Farecard is unreadable. If the customer taps the NFC reader again and the tap is successful, the SA Tool should proceed with the fare payment process. If the tap is unsuccessful, the SA Tool should again indicate to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Non-Adult, Non-Child, Non-Discreet Concessions", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Farecard has a valid non-adult, non-child, non-discreet concession. The SA Tool should successfully process the fare payment and display the successful fare payment screen for non-adult concession."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Insufficient ePurse Balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's ePurse balance is less than the fare amount. The SA Tool should send the tap to ATS for processing, which should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The SA Tool should then update the Virtual Card accordingly and provide the appropriate feedback to the Cardholder of a successful transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Intra-SP Transfer", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Virtual Card has a valid transfer product. The SA Tool should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. The SA Tool should then update the Virtual Card accordingly and provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Inter-SP Transfer", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Virtual Card has a valid transfer product from another service provider. The SA Tool should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. The SA Tool should then update the Virtual Card accordingly and provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Non-Recognizable Media", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a user taps a card that is not recognizable to the reader. The SA Tool should display the applicable \u201cTry Another Card\u201d screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Testing Fare Payment on SA Tool during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made during peak hours after the farecard has reached its off peak daily cap limit and is outside of the transfer window. The test will verify if the ATS correctly computes the fare and deducts the amount from the Virtual Card E-Purse, and if this information is accurately communicated back to the SA Tool."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Testing Fare Payment on SA Tool for Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made on a premium service route/location after previously riding on a Special Event service route within the transfer window. The test will verify if the ATS correctly computes the fare upgrade and deducts the amount from the Virtual Card E-Purse, and if this information is accurately communicated back to the SA Tool."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Testing Fare Payment on SA Tool for Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made on a premium service route/location after previously riding on a Special Event service route within the transfer window. The test will verify if the ATS correctly computes the free transfer and deducts no amount from the Virtual Card E-Purse, and if this information is accurately communicated back to the SA Tool."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Testing Fare Payment on SA Tool with a Valid Non-Adult Concession Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a farecard with a valid non-adult concession. The test will verify if the ATS correctly identifies the concession and applies the appropriate fare deduction from the Virtual Card E-Purse, and if this information is accurately communicated back to the SA Tool."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Testing Fare Payment on SA Tool with an Expired Period Pass and Insufficient ePurse Balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is attempted with an expired period pass and insufficient ePurse balance. The test will verify if the SA Tool correctly identifies the expired pass and insufficient balance, displays a declined message to the customer, and does not conduct the transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Testing Fare Payment on SA Tool with a Blocked Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is attempted with a blocked farecard. The test will verify if the SA Tool correctly identifies the blocked farecard, displays a declined message to the customer, and does not conduct the transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Testing Fare Payment on SA Tool with a Farecard on the Hotlist", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is attempted with a farecard that is on the hotlist. The test will verify if the SA Tool correctly identifies the hotlisted farecard, updates the card\u2019s status to blocked, displays a declined message to the customer, and does not conduct the transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Testing Fare Payment on SA Tool when Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a fare payment. The test will verify if the SA Tool correctly switches to \u201cOut of Service\u201d mode if the low battery threshold is reached before the fare payment is processed."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Testing Fare Payment on SA Tool with a Non-Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a non-farecard is tapped for fare payment. The test will verify if the SA Tool correctly identifies the non-farecard and displays the \u201cCard Read Error\u201d message."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Testing Fare Payment on SA Tool with a Farecard within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a farecard within the Anti-Passback Window is tapped for fare payment. The test will verify if the SA Tool correctly identifies the Anti-Passback violation, displays a declined message to the customer, and does not conduct the transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Testing Fare Payment on SA Tool with a Non-Activated Card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a non-activated card is tapped for fare payment. The test will verify if the SA Tool correctly identifies the non-activated card and does not conduct the transaction."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by e-Purse", "Test_Scnario": "Payment by e-Purse - Valid Farecard", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid Farecard when the customer chooses to pay by e-Purse. The Farecard should not be on the hotlist and should have a minimum balance needed for payment."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by e-Purse", "Test_Scnario": "Payment by e-Purse - Insufficient Balance", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the e-Purse balance is insufficient to cover the payment amount. The operator should be notified and given the option to cancel the transaction or choose another mode of payment."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by e-Purse", "Test_Scnario": "Payment by e-Purse - Exceeding Shopping Cart Amount", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the payment amount is more than the total shopping cart amount. The operator should be notified and given the option to try again with another payment method."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by e-Purse", "Test_Scnario": "Payment by e-Purse - Successful Transaction", "Test_Sce_Description": "Verify that the SA Tool correctly deducts the balance from the e-Purse and uses it as a payment means for the transaction. Upon successful transaction, the SA Tool should display the option to print a customer receipt or return to the main menu."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by e-Purse", "Test_Scnario": "Payment by Cheque - Full Payment Amount", "Test_Sce_Description": "Verify that the SA Tool correctly populates the full payment amount when the customer chooses to pay by cheque. The operator should have the option to edit if the customer is making a split payment."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by e-Purse", "Test_Scnario": "Payment by Cheque - Transaction Completion", "Test_Sce_Description": "Verify that the SA Tool correctly indicates the transaction is complete when the operator receives the cheque and stores it. The SA Tool should display the option to print a customer receipt or return to the main menu."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by e-Purse", "Test_Scnario": "Payment by e-Purse - Peak Hours Payment", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse during peak hours after previously reaching off peak daily cap."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by e-Purse", "Test_Scnario": "Payment by e-Purse - Premium Service Route Payment", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when the customer taps on a premium service route/location after previously riding on a Special Event service route."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by e-Purse", "Test_Scnario": "Payment by e-Purse - Non-Adult Concession", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid Non-Adult concession on the customer's Farecard when the customer chooses to pay by e-Purse."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by Cheque", "Test_Scnario": "Payment by Cheque - Operator proceeds to payment", "Test_Sce_Description": "Verify that the operator is able to proceed to payment when the customer wants to pay with a cheque. Ensure that the SA Tool application is in the 'In-Service' state and the operator is signed-in to the SA Tool application in the revenue mode."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by Cheque", "Test_Scnario": "Payment by Cheque - Full payment amount population", "Test_Sce_Description": "Verify that the SA Tool populates the full payment amount correctly when the customer wants to pay with a cheque. The operator should have the option to edit if the customer is making a split payment."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by Cheque", "Test_Scnario": "Payment by Cheque - Customer presents the payment means", "Test_Sce_Description": "Verify that the operator is able to enter the balance and confirm the final sale on the pop up when the customer presents the cheque as the payment means."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by Cheque", "Test_Scnario": "Payment by Cheque - Operator receives the cheque", "Test_Sce_Description": "Verify that the operator is able to receive the cheque and store it with them. The SA Tool application should be able to handle this process smoothly."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by Cheque", "Test_Scnario": "Payment by Cheque - Transaction completion", "Test_Sce_Description": "Verify that the operator is able to indicate the transaction is complete after receiving the cheque. The SA Tool should display the option to print a customer receipt and return to the main menu."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by Cheque", "Test_Scnario": "Split Payment - Operator proceeds to payment", "Test_Sce_Description": "Verify that the operator is able to proceed to payment when the customer wants to pay with several forms of payment. The SA Tool should be able to handle split payments correctly."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by Cheque", "Test_Scnario": "Split Payment - Full payment amount population", "Test_Sce_Description": "Verify that the SA Tool populates the full payment amount correctly when the customer wants to make a split payment. The operator should be able to edit the field to enter the amount for each payment method."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by Cheque", "Test_Scnario": "Split Payment - Successful payment", "Test_Sce_Description": "Verify that the SA Tool returns to the payment screen upon successful payment. If the method of payment was a debit or credit card, the receipt should automatically print."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by Cheque", "Test_Scnario": "Split Payment - Total payment", "Test_Sce_Description": "Verify that the operator is able to repeat the payment steps until the total has been paid. If the mean of payment limit has been reached before the total has been paid, the transaction must be reversed, and the customer must agree to distribute charges to the payment means such that the total has been paid."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by Cheque", "Test_Scnario": "Split Payment - Successful transaction", "Test_Sce_Description": "Verify that the SA Tool is able to print the customer receipt upon successful transaction. The receipt should accurately reflect the split payment."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass within valid time", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a farecard with a valid Limited Period Pass within the valid time. The SA Tool should successfully accept the fare payment and update the transaction details accordingly."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass outside valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a farecard with a valid Limited Period Pass outside the valid time but with sufficient e-Purse balance. The SA Tool should deduct the fare from the e-Purse balance and update the transaction details accordingly."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is attempted using an anonymous farecard with an expired period pass and ePurse balance less than the fare amount. The SA Tool should decline the transaction and display a declined message to the customer."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer\u2019s Farecard is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is attempted using a blocked farecard. The SA Tool should decline the transaction and display a declined message to the customer."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is attempted using a virtual card that is on the Deny List. The SA Tool should decline the transaction, remove the card from the Deny List, set it to blocked, and display a declined message to the customer."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a fare payment. The SA Tool should still be able to process the remote lists even after the battery goes below the threshold."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a farecard with a valid Child concession. The SA Tool should display the successful Child Transit Pass fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made as a result of a failed inspection. The SA Tool should record both the fare payment and inspection transactions and return to the Tap Card screen."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario tests the functionality of the Online SA Tool when a customer tries to make a fare payment using a virtual card that has a valid Limited Period Pass but the current time is outside the time limits of the product. However, the farecard has sufficient e-Purse balance to cover the transaction. The test will verify if the ATS correctly detects that the Limited Period Pass is not valid at the current time, computes the value to be deducted from the e-Purse, and deducts the fare."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Testing Exception Flow - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario tests the exception flow when a customer has an anonymous farecard with an expired period pass and ePurse balance less than the fare amount. The test will verify if the ATS correctly detects the card is Anonymous and the ePurse Balance is less than the fare amount, and returns a declined result back to the SA Tool."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Testing Exception Flow - Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "This scenario tests the exception flow when a customer's virtual card is blocked. The test will verify if the ATS correctly detects the card is blocked, and returns a declined result back to the SA Tool."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Testing Exception Flow - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario tests the exception flow when a customer's virtual card is on the Deny List. The test will verify if the ATS correctly detects the card is on the Deny List, removes the card from the Deny List and sets it to blocked, and returns a declined result back to the SA Tool."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Testing Exception Flow - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the exception flow when the battery goes below the low battery threshold during payment. The test will verify if the application correctly switches to \u201cOut of Service\u201d mode when the low battery threshold is reached."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Testing Exception Flow - Customer taps a card that is not a Farecard", "Test_Sce_Description": "This scenario tests the exception flow when a customer taps a card that is not a Farecard. The test will verify if the SA Tool correctly displays the \u201cCard Read Error\u201d toast message for a short period of time."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Testing Exception Flow - Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the exception flow when a customer's farecard is within the Anti-Passback Window. The test will verify if the device correctly detects that the Farecard fails the Anti-Passback checks, and the SA Tool application displays a declined message to the customer."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Testing Exception Flow - Customer taps a non-activated card", "Test_Sce_Description": "This scenario tests the exception flow when a customer taps a non-activated card. The test will verify if the SA Tool correctly detects that the card is not activated and is not on the action list available on the device."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a valid child concession on their farecard attempts to make a fare payment. The SA Tool should successfully accept the fare payment, display the successful Child Transit Pass fare payment screen, and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a valid Limited Period Pass attempts to make a fare payment within the time limit of the pass. The SA Tool should successfully accept the fare payment."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a valid Limited Period Pass attempts to make a fare payment outside the time limit of the pass but has sufficient e-Purse balance to cover the transaction. The SA Tool should compute the value to be deducted from the e-Purse, deduct the fare, and successfully complete the transaction."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment results from a failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen, and the SA Tool should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with an anonymous farecard, an expired period pass, and an ePurse balance less than the fare amount attempts to make a fare payment. The SA Tool should detect the card is anonymous and the ePurse balance is less than the fare amount, display a declined message to the customer, and not conduct the transaction."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer\u2019s Farecard is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a blocked farecard attempts to make a fare payment. The SA Tool should detect the card is blocked, display a declined message to the customer, and not conduct the transaction."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a blocked virtual card attempts to make a fare payment. The SA Tool should detect the card is blocked, display a declined message to the customer, and not conduct the transaction."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a virtual card on the Deny List attempts to make a fare payment. The SA Tool should detect the card is on the Deny List, remove the card from the Deny List and set it to blocked, display a declined message to the customer, and not conduct the transaction."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a fare payment. The SA Tool should be able to process the remote lists even after the battery goes below the low battery threshold during a successful farecard tap."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is attempted after a failed inspection. The operator inspects a customer\u2019s farecard and determines that they have not paid a fare. The operator then selects the payment function on the SA Tool inspection results screen. The SA Tool should record both the fare payment and inspection transactions and return to the Tap Card screen. A toast notification is displayed of the corresponding inspection action."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is attempted with an anonymous Farecard that has an expired period pass and an ePurse balance less than the fare amount. The SA Tool should detect the Card is Anonymous and the ePurse Balance is less than the fare amount, display a declined message to the customer, play the declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer\u2019s Farecard is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is attempted with a blocked Farecard. The SA Tool should detect that the Farecard is blocked, display a declined message to the customer, play the declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer\u2019s Farecard is on the Hotlist", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is attempted with a Farecard that is on the hotlist. The SA Tool should detect that the Farecard is on the hotlist, update the card\u2019s status to blocked, display a declined message to the customer, play the declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a fare payment. If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode. Else, the customers fare payment should be processed as per Step 5 and then the application should switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Customer taps a card that is not a Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is attempted with a card that is not a Farecard. The SA Tool should display the \u201cCard Read Error\u201d toast message for a short period of time."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is attempted with a Farecard that is within the Anti-Passback Window. The device should detect that the Farecard fails the Anti-Passback checks, display a declined message to the customer, play the declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Customer taps a non-activated card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is attempted with a non-activated card. The SA Tool should display the \u201cCard Read Error\u201d toast message for a short period of time."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the functionality of SA Tool when customer has an anonymous Farecard with an expired period pass and ePurse balance less than the fare amount", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application when a customer with an anonymous Farecard, an expired period pass and an ePurse balance less than the fare amount tries to make a transaction. The application should detect the card is anonymous and the ePurse balance is less than the fare amount, display a declined message to the customer, play the declined audio tone and return to the SA Tool application Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the functionality of SA Tool when customer\u2019s Farecard is blocked", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application when a customer with a blocked Farecard tries to make a transaction. The application should detect that the Farecard is blocked, display a declined message to the customer, play the declined audio tone and return to the SA Tool application Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the functionality of SA Tool when customer\u2019s Farecard is on the hotlist", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application when a customer with a Farecard on the hotlist tries to make a transaction. The application should detect that the Farecard is on the hotlist, update the card\u2019s status to blocked, display a declined message to the customer, play the declined audio tone and return to the SA Tool application Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the functionality of SA Tool when battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application when the battery goes below the low battery threshold during a successful Farecard tap. The application should switch to \u201cOut of Service\u201d mode if the low battery threshold is reached before Step 5. Else, the customers fare payment should be processed as per Step 5 and then the application should switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the functionality of SA Tool when customer taps a card that is not a Farecard", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application when a customer taps a card that is not a Farecard. The SA Tool should display the \u201cCard Read Error\u201d toast message for a short period of time."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the functionality of SA Tool when customer\u2019s Farecard is within the Anti-Passback Window", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application when a customer\u2019s Farecard is within the Anti-Passback Window. The device should detect that the Farecard fails the Anti-Passback checks, display a declined message to the customer, play the declined audio tone and return to the SA Tool application Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the functionality of SA Tool when customer taps a non-activated card", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application when a customer taps a non-activated card. The SA Tool should display the \u201cCard Read Error\u201d toast message for a short period of time."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the functionality of SA Tool when customer has an Anonymous Virtual Card with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application when a customer with an anonymous Virtual Card, an expired period pass and an ePurse balance less than the fare amount tries to make a transaction. The device should send the transaction to ATS for processing, ATS should detect the card is Anonymous and the ePurse Balance is less than the fare amount, return a declined result back to the SA Tool, display a declined message to the customer, play the declined audio tone and update the Scratchpad accordingly."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the functionality of SA Tool when customer\u2019s Virtual Card is blocked", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application when a customer with a blocked Virtual Card tries to make a transaction. The device should send the transaction to ATS for processing, ATS should detect the card is blocked, return a declined result back to the SA Tool, display a declined message to the customer, play the declined audio tone and update the Scratchpad accordingly."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the functionality of SA Tool when customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application when a customer with a Virtual Card on the Deny List tries to make a transaction. The device should send the transaction to ATS for processing, ATS should detect the card is on the Deny List, remove the card from the Deny List and set it to blocked, return a declined result back to the SA Tool, display a declined message to the customer, play the declined audio tone and update the Scratchpad accordingly."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Testing the functionality of SA Tool when Customer\u2019s Farecard is Blocked", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when a customer's Farecard is blocked. The SA Tool should be able to detect that the Farecard is blocked and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Testing the performance of SA Tool when Customer\u2019s Farecard is Blocked", "Test_Sce_Description": "This scenario is to test the performance of the SA Tool when a customer's Farecard is blocked. The SA Tool should be able to quickly detect that the Farecard is blocked and display a declined message to the customer in a timely manner. The transaction should not be conducted and the SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Testing the security of SA Tool when Customer\u2019s Farecard is Blocked", "Test_Sce_Description": "This scenario is to test the security of the SA Tool when a customer's Farecard is blocked. The SA Tool should securely handle the blocked Farecard and not allow any unauthorized transactions to be conducted. The SA Tool should also securely display a declined message to the customer and play the declined audio tone."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Testing the exception flow of SA Tool when Customer\u2019s Farecard is Blocked", "Test_Sce_Description": "This scenario is to test the exception flow of the SA Tool when a customer's Farecard is blocked. The SA Tool should be able to handle any exceptions that occur when the Farecard is blocked, such as the customer trying to conduct a transaction or the SA Tool not being able to display a declined message to the customer."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Testing the alternate flow of SA Tool when Customer\u2019s Farecard is Blocked", "Test_Sce_Description": "This scenario is to test the alternate flow of the SA Tool when a customer's Farecard is blocked. The SA Tool should be able to handle any alternate flows that occur when the Farecard is blocked, such as the customer trying to unblock the Farecard or the SA Tool not being able to play the declined audio tone."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the functionality of the SA Tool when a customer with an anonymous farecard with an expired period pass and ePurse balance less than the fare amount attempts to make a payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with an anonymous farecard with an expired period pass and ePurse balance less than the fare amount attempts to make a payment. The SA Tool should detect that the card is anonymous and that the ePurse balance is less than the fare amount, and should display a declined message to the customer. The transaction should not be conducted, and the SA Tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the performance of the SA Tool when a customer with a blocked farecard attempts to make a payment", "Test_Sce_Description": "This scenario tests the performance of the SA Tool when a customer with a blocked farecard attempts to make a payment. The SA Tool should detect that the farecard is blocked, and should display a declined message to the customer. The transaction should not be conducted, and the SA Tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the security of the SA Tool when a customer with a farecard on the hotlist attempts to make a payment", "Test_Sce_Description": "This scenario tests the security of the SA Tool when a customer with a farecard on the hotlist attempts to make a payment. The SA Tool should detect that the farecard is on the hotlist, and should update the card\u2019s status to blocked. The SA Tool should display a declined message to the customer, and the transaction should not be conducted. The SA Tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the functionality of the SA Tool when the battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during payment. If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode. Else, the customers fare payment should be processed as per Step 5. The application should then switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the performance of the SA Tool when a customer taps a card that is not a farecard", "Test_Sce_Description": "This scenario tests the performance of the SA Tool when a customer taps a card that is not a farecard. The SA Tool should display the \u201cCard Read Error\u201d toast message for a short period of time."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the security of the SA Tool when a customer\u2019s farecard is within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the security of the SA Tool when a customer\u2019s farecard is within the Anti-Passback Window. The device should detect that the Farecard fails the Anti-Passback checks, and the SA Tool should display a declined message to the customer. The transaction should not be conducted, and the SA Tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Testing the functionality of the SA Tool when a customer taps a non-activated card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a non-activated card. The customer\u2019s card should not be activated and should not be on the action list available on the device."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment using a blocked virtual card. The SA Tool should detect the blocked card, decline the transaction, and display a declined message to the customer."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment using a virtual card that is on the Deny List. The SA Tool should detect the card on the Deny List, block the card, decline the transaction, and display a declined message to the customer."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment using an anonymous farecard with an expired period pass and insufficient ePurse balance. The SA Tool should detect the expired pass and insufficient balance, decline the transaction, and display a declined message to the customer."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a fare payment. The SA Tool should switch to 'Out of Service' mode after processing the fare payment if the battery threshold is reached."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is not activated", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment using a virtual card that is not activated. The SA Tool should detect the non-activated card, decline the transaction, and display a declined message to the customer."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment using a virtual card that is within the Anti-Passback Window. The SA Tool should detect the Anti-Passback violation, decline the transaction, and display a declined message to the customer."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer taps a non-activated card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment using a non-activated card. The SA Tool should detect the non-activated card, decline the transaction, and display a declined message to the customer."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is on the Hotlist", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment using a farecard that is on the hotlist. The SA Tool should detect the hotlisted card, block the card, decline the transaction, and display a declined message to the customer."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Scnario": "Testing the functionality of the SA Tool when a customer's Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's Virtual Card is on the Deny List. The test will ensure that the ATS correctly detects the card's status, removes it from the Deny List, sets it to blocked, and returns a declined result back to the SA Tool. The SA Tool should then display a declined message to the customer, play the declined audio tone, and update the Scratchpad accordingly."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Scnario": "Testing the performance of the SA Tool when processing a transaction from a Virtual Card on the Deny List", "Test_Sce_Description": "This scenario will test the performance of the SA Tool when processing a transaction from a Virtual Card on the Deny List. The test will measure the time it takes for the ATS to process the transaction, remove the card from the Deny List, set it to blocked, and return a declined result back to the SA Tool. The performance of the SA Tool in displaying the declined message, playing the declined audio tone, and updating the Scratchpad will also be tested."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Scnario": "Testing the security of the SA Tool when dealing with a Virtual Card on the Deny List", "Test_Sce_Description": "This scenario will test the security of the SA Tool when dealing with a Virtual Card on the Deny List. The test will ensure that the ATS securely processes the transaction, removes the card from the Deny List, sets it to blocked, and returns a declined result back to the SA Tool. The security of the SA Tool in displaying the declined message, playing the declined audio tone, and updating the Scratchpad will also be tested."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Scnario": "Testing the functionality of the SA Tool when dealing with an exception flow", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when dealing with an exception flow. The test will ensure that the SA Tool correctly handles exceptions such as a customer's Virtual Card being on the Deny List, a customer's Farecard being blocked, or a customer's Farecard being on the hotlist. The SA Tool should correctly display a declined message, play the declined audio tone, and update the Scratchpad in each of these cases."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Scnario": "Testing the performance of the SA Tool when dealing with an exception flow", "Test_Sce_Description": "This scenario will test the performance of the SA Tool when dealing with an exception flow. The test will measure the time it takes for the SA Tool to handle exceptions such as a customer's Virtual Card being on the Deny List, a customer's Farecard being blocked, or a customer's Farecard being on the hotlist. The performance of the SA Tool in displaying the declined message, playing the declined audio tone, and updating the Scratchpad in each of these cases will also be tested."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Scnario": "Testing the security of the SA Tool when dealing with an exception flow", "Test_Sce_Description": "This scenario will test the security of the SA Tool when dealing with an exception flow. The test will ensure that the SA Tool securely handles exceptions such as a customer's Virtual Card being on the Deny List, a customer's Farecard being blocked, or a customer's Farecard being on the hotlist. The security of the SA Tool in displaying the declined message, playing the declined audio tone, and updating the Scratchpad in each of these cases will also be tested."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Scnario": "Testing the functionality of the SA Tool when dealing with an alternate flow", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when dealing with an alternate flow. The test will ensure that the SA Tool correctly handles alternate flows such as a customer's Virtual Card being on the Deny List but having a sufficient e-Purse balance, or a customer's Farecard being blocked but having a sufficient e-Purse balance. The SA Tool should correctly display a declined message, play the declined audio tone, and update the Scratchpad in each of these cases."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Scnario": "Testing the performance of the SA Tool when dealing with an alternate flow", "Test_Sce_Description": "This scenario will test the performance of the SA Tool when dealing with an alternate flow. The test will measure the time it takes for the SA Tool to handle alternate flows such as a customer's Virtual Card being on the Deny List but having a sufficient e-Purse balance, or a customer's Farecard being blocked but having a sufficient e-Purse balance. The performance of the SA Tool in displaying the declined message, playing the declined audio tone, and updating the Scratchpad in each of these cases will also be tested."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Scnario": "Testing the security of the SA Tool when dealing with an alternate flow", "Test_Sce_Description": "This scenario will test the security of the SA Tool when dealing with an alternate flow. The test will ensure that the SA Tool securely handles alternate flows such as a customer's Virtual Card being on the Deny List but having a sufficient e-Purse balance, or a customer's Farecard being blocked but having a sufficient e-Purse balance. The security of the SA Tool in displaying the declined message, playing the declined audio tone, and updating the Scratchpad in each of these cases will also be tested."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass when battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a successful Farecard tap. The test will verify if the application switches to 'Out of Service' mode after processing the remote lists."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass when customer's card is not a Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's card is not a Farecard. The test will verify if the device displays the error message 'Card Read Error' and does not respond to the tap."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass when customer's Farecard is within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Farecard is within the Anti-Passback Window. The test will verify if the ATS detects that the Farecard fails the Anti-Passback checks and the SA Tool application displays a declined message to the customer."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass when Limited Period Pass is outside of valid time and card is in overdraft", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the farecard has a valid Limited Period Pass product on it, the time at tap is occurring outside of the time limit of the Limited Period Pass Product and the farecard is in overdraft. The test will verify if the ATS detects that the Limited Period Pass is not valid at the current time, computes the value to be deducted from the e-Purse, and detects that farecard is in overdraft."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass when Limited Period Pass is outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring outside of the time limit of the Limited Period Pass Product but the farecard has sufficient e-Purse balance to cover the transaction. The test will verify if the ATS detects that the Limited Period Pass is not valid at the current time, computes the value to be deducted from the e-Purse, and deducts the fare."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass when customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer has an expired period pass, the ePurse balance is less than the fare amount and the customer has an anonymous Virtual Card. The test will verify if the ATS detects the card is Anonymous and the ePurse Balance is less than the fare amount and returns a declined result back to the SA Tool."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass when customer's Virtual Card is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Farecard is blocked. The test will verify if the ATS detects the card is blocked and returns a declined result back to the SA Tool."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass when customer's Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card is on the Deny List. The test will verify if the ATS detects the card is on the Deny List, removes the card from the Deny List, sets it to blocked and returns a declined result back to the SA Tool."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Time since Tap-On Exceeds Max Travel Duration", "Test_Scnario": "Verify the functionality of Tap-On Anti-Passback Window", "Test_Sce_Description": "In this scenario, the tester will tap-on and tap-off at the same station within the Tap-On Anti-Passback Window. The device should detect that the cardholder has already tapped on at the same station and is within the Tap-On Anti-Passback Window. The device should provide the appropriate feedback to the cardholder without updating the Farecard. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Time since Tap-On Exceeds Max Travel Duration", "Test_Scnario": "Verify the functionality when Farecard is blocked", "Test_Sce_Description": "In this scenario, the tester will use a blocked Farecard. The card reader should detect that the Farecard is blocked and the right to travel should not be conferred. The device should provide the appropriate feedback to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Time since Tap-On Exceeds Max Travel Duration", "Test_Scnario": "Verify the functionality when Time since Tap-On Exceeds Max Travel Duration", "Test_Sce_Description": "In this scenario, the tester will tap-on and wait for the time to exceed the Max Travel Duration. The device should determine that the Tap-On Time + Max Travel Duration < Current Time and auto-settle the Underpayment and deduct the value from the Farecard E-Purse."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Time since Tap-On Exceeds Max Travel Duration", "Test_Scnario": "Verify the functionality when multiple NFC media are presented to the device at one time", "Test_Sce_Description": "In this scenario, the tester will present multiple NFC medias to the card reader at once. The device should block all user functionality and present Anti-Collision HMI to the customer. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Time since Tap-On Exceeds Max Travel Duration", "Test_Scnario": "Verify the functionality when a non-activated Farecard is tapped on the device", "Test_Sce_Description": "In this scenario, the tester will tap a non-activated Farecard on the device. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Time since Tap-On Exceeds Max Travel Duration", "Test_Scnario": "Verify the functionality when a Farecard reading error occurs", "Test_Sce_Description": "In this scenario, the tester will tap a Farecard on the device and immediately remove it from the card reader causing a card reading error. The device should capture and log this error in the background to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Time since Tap-On Exceeds Max Travel Duration", "Test_Scnario": "Verify the functionality when Open Payments Media fails ODA check", "Test_Sce_Description": "In this scenario, the tester will use an Open Payments Media that fails the ODA check. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Time since Tap-On Exceeds Max Travel Duration", "Test_Scnario": "Verify the functionality when Open Payments Media Fails Expiry Check", "Test_Sce_Description": "In this scenario, the tester will use an Open Payments Media that fails the expiry check. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed Expiry Check screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Scnario": "Testing the functionality of SA Tool when a non-activated Farecard is tapped", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer taps a non-activated Farecard. The expected outcome is that the SA Tool application will display a declined message to the customer and the transaction will not be conducted. The SA Tool should also play a declined audio tone."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Scnario": "Testing the functionality of SA Tool when a Farecard not on the action list is tapped", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer taps a Farecard that is not on the action list available on the device. The expected outcome is that the SA Tool application will display a declined message to the customer and the transaction will not be conducted. The SA Tool should also play a declined audio tone."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Scnario": "Testing the functionality of SA Tool when a Fare Payment Reversal is performed on an Online SA Tool connected to ATS", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a Fare Payment Reversal is performed on an Online SA Tool that is connected to ATS. The expected outcome is that the device sends the cardholder\u2019s reversal request tap to Accenture Ticketing Services and the Request for Reversal Recorded screen is provided to the cardholder."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Scnario": "Testing the functionality of SA Tool when a Fare Payment Reversal is performed on a SA Tool with Open Payments Media while the device is offline", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a Fare Payment Reversal is performed on a SA Tool with Open Payments Media while the device is offline. The expected outcome is that the latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Scnario": "Testing the functionality of SA Tool when a Non-Revenue farecard is tapped in the revenue mode", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a Non-Revenue farecard is tapped in the revenue mode. The expected outcome is that the device will display a declined HMI."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Scnario": "Testing the functionality of SA Tool when a Farecard is tapped during a time period that contains an associated Temporal Class Supplement", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a Farecard is tapped during a time period that contains an associated Temporal Class Supplement. The expected outcome is that the Device will contain an HMI reflecting the Temporal Class Supplement, and will process the Tap-On Transaction as a normal tap-on."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Scnario": "Testing the functionality of SA Tool when a Farecard with Autoload Enabled is tapped and the Fare amount crosses the Auto-load threshold", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a Farecard with Autoload Enabled is tapped and the Fare amount crosses the Auto-load threshold. The expected outcome is that the Farecard will have the Autoload amount automatically added to the E-Purse balance."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Scnario": "Testing the functionality of SA Tool when a Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on. The expected outcome is that the device will process the tap as a result tap-on."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Scnario": "Testing the functionality of SA Tool when a Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard and requests Audio Messages", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard and requests Audio Messages. The expected outcome is that the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Scnario": "Testing the functionality of SA Tool when a Farecard fails validation checks at Tap-On", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a Farecard fails validation checks at Tap-On. The expected outcome is that the device will display an error message and the transaction will not be conducted."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Cancellation of Transaction with Split Payment", "Test_Scnario": "Cancellation of Transaction with Split Payment - Integrated PIN pad", "Test_Sce_Description": "Verify that the system correctly handles the cancellation of a transaction with split payment where at least one mean of payment is credit or debit and the PIN pad is integrated. The system should prompt the operator to confirm the cancellation, reverse non-credit/debit payments automatically, and require the customer to interact with the PIN pad to return the funds to their card. Upon successful processing, a receipt should print and the operator should be returned to the home screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Cancellation of Transaction with Split Payment", "Test_Scnario": "Cancellation of Transaction with Split Payment - Non-integrated PIN pad", "Test_Sce_Description": "Verify that the system correctly handles the cancellation of a transaction with split payment where at least one mean of payment is credit or debit and the PIN pad is not integrated. The system should prompt the operator to confirm the cancellation, reverse non-credit/debit payments automatically, and require the customer to advise the operator which credit/debit type they would like their funds reversed to. Upon successful processing, the operator should select the payment type on the application to complete the cancellation and be returned to the home screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Cancellation of Transaction with Split Payment", "Test_Scnario": "Cancellation of Transaction with Split Payment - No Credit or Debit Payment", "Test_Sce_Description": "Verify that the system correctly handles the cancellation of a transaction with split payment where none of the means of payment are credit or debit. The system should prompt the operator to confirm the cancellation and reverse all the payment means automatically. The operator should then return the funds to the customer and the system should return to the home screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Cancellation of Transaction with Split Payment", "Test_Scnario": "Cancellation of Refund/Reversal Transaction", "Test_Sce_Description": "Verify that the system correctly handles the cancellation of a refund/reversal transaction. The system should allow the operator to cancel the transaction at any point, ask for confirmation, and handle the cancellation appropriately based on whether the transaction has been authorized or not. The system should also handle scenarios where split payment has begun and at least one mean of payment is credit or debit."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Cancellation of Transaction with Split Payment", "Test_Scnario": "Exceeding Maximum Allowable Quantity", "Test_Sce_Description": "Verify that the system correctly handles scenarios where the quantity of product added to the cart exceeds the maximum allowable amount. The system should not allow the operator to add more than the maximum quantity to the shopping cart and require the operator to process the customer's request in multiple transactions."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Cancellation of Transaction with Split Payment", "Test_Scnario": "Handling No Eligible Products for Refund or Reversal", "Test_Sce_Description": "Verify that the system correctly handles scenarios where no products are eligible for refund or reversal. The system should display an error message and return to the main menu."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Cancellation of Transaction with Split Payment", "Test_Scnario": "Handling Eligible Products for Refund or Reversal Not Matching Customer Request", "Test_Sce_Description": "Verify that the system correctly handles scenarios where products are eligible for refund or reversal, but are not what the customer requested. The operator should inform the customer that their product is not eligible and return to the main menu."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Cancellation of Transaction with Split Payment", "Test_Scnario": "Handling Internet Connection Failure", "Test_Sce_Description": "Verify that the system correctly handles scenarios where there is a failure to connect to the internet while performing an action that requires internet connection. The system should time out, display an error message, and provide options to try again or cancel."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Quantity added to cart exceeds allowable maximum", "Test_Scnario": "ATS failure to load products", "Test_Sce_Description": "This test scenario is to validate the functionality when ATS fails to load products onto a customer\u2019s account. The operator has completed the SA Tool shopping flow and ATS is unable to load products to the customer\u2019s account. The SA Tool should inform the operator that the products purchased were not added to the user\u2019s account. The Operator may attempt the checkout again or provide the customer a refund if the customer paid with cash."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Quantity added to cart exceeds allowable maximum", "Test_Scnario": "SVC / VC Shopping Cart", "Test_Sce_Description": "This test scenario is to validate the functionality when the shopping cart includes only Virtual Card or Stored Value Card Products. The device must have either SVC or VC products in the shopping cart and cannot have both SVC and VC products in the shopping cart at the same time. If the cart has ineligible products, the Operator should receive an error providing them the option to clear the cart."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Quantity added to cart exceeds allowable maximum", "Test_Scnario": "ECP is disabled and Customer\u2019s Artemis device is locked or asleep", "Test_Sce_Description": "This test scenario is to validate the functionality when the customer\u2019s Artemis device has ECP is disabled and the device is locked or asleep. The user\u2019s device is locked or asleep and ECP is disabled for the users Virtual Card. The Virtual card media should not be detected and the screen remains the same. Artemis device should prompt the user to provide authentication."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Quantity added to cart exceeds allowable maximum", "Test_Scnario": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is disabled", "Test_Sce_Description": "This test scenario is to validate the functionality when the customer\u2019s Artemis device is in Power Reserve mode and ECP is disabled. The user\u2019s mobile device is in Power Reserve mode and ECP is disabled on the mobile device for the users Virtual Card. The Virtual card media should not be detected and the screen remains the same. Artemis device should prompt the user to charge their device."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Quantity added to cart exceeds allowable maximum", "Test_Scnario": "Required fields not filled out or not valid", "Test_Sce_Description": "This test scenario is to validate the functionality when the operator proceeds before all required fields are filled out. The operator is adding a product to the shopping cart for which fields must be filled out and attempts to proceed to payment without entering required information or information is entered but does not meet validation rules. The SA Tool should check whether all the required fields have valid information and if not, it should display screen validation rules to prompt the operator to input the correct information."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Quantity added to cart exceeds allowable maximum", "Test_Scnario": "Purchase multiple items", "Test_Sce_Description": "This test scenario is to validate the functionality when the customer indicates that they would like to conduct other purchases in the same transaction. The operator should return to the SA Tool application Sales screen and select the additional product(s) the customer would like to purchase. The SA Tool application should add the additional products to the shopping cart."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Quantity added to cart exceeds allowable maximum", "Test_Scnario": "Refund multiple items", "Test_Sce_Description": "This test scenario is to validate the functionality when the customer requests to refund multiple products where refund criteria have been met. The operator must complete one transaction before starting the next. The operator should confirm the reversal and a transaction successful screen should be displayed. If it is a Farecard product refund and the Farecard had been placed in the NFC reader in step #1, the SA Tool should detect and scan the card automatically. The SA Tool should update the Farecard balance, remove the products and update the transaction history as applicable."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "No eligible products for refund or reversal", "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit", "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where at least one mean of payment is credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The system should automatically reverse non-credit and/or non-debit means of payment, and the operator should be able to choose the mean of payment for the refund void. The system should handle both successful and unsuccessful Moneris processing."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "No eligible products for refund or reversal", "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit", "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where none of the means of payment are credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The system should automatically reverse the payment means and prompt the operator to begin a refund void."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "No eligible products for refund or reversal", "Test_Scnario": "Exceeding Maximum Quantity in Cart", "Test_Sce_Description": "Verify that the system correctly handles a situation where the quantity of a product added to the cart exceeds the maximum allowable amount. The system should not allow the operator to add more than the maximum allowable quantity to the shopping cart, and the operator should be able to process the customer\u2019s request in multiple transactions."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "No eligible products for refund or reversal", "Test_Scnario": "No Eligible Products for Refund or Reversal", "Test_Sce_Description": "Verify that the system correctly handles a situation where no products are eligible for refund or reversal. The system should display the relevant error message and the operator should acknowledge the message. The system should then return to the main menu."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "No eligible products for refund or reversal", "Test_Scnario": "Eligible Products for Refund/Reversal Not Requested by Customer", "Test_Sce_Description": "Verify that the system correctly handles a situation where products are eligible for refund or reversal, but are not what the customer requested. The operator should inform the customer their product is not eligible for reversal or refund, and then return to the main menu."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "No eligible products for refund or reversal", "Test_Scnario": "Internet Connection Failure", "Test_Sce_Description": "Verify that the system correctly handles a situation where there is a failure to connect to the internet. The system should time out and display the relevant error message with options to try again or cancel. If the connection is restored, the main use case should resume. If the action is cancelled, the system should return to the previous screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "No eligible products for refund or reversal", "Test_Scnario": "Required Fields Not Filled Out or Invalid", "Test_Sce_Description": "Verify that the system correctly handles a situation where the operator proceeds before all required fields are filled out or the information entered does not meet validation rules. The system should check whether all the required fields have valid information and display screen validation rules to prompt the operator to input the correct information."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "No eligible products for refund or reversal", "Test_Scnario": "Purchasing Multiple Items", "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer wants to purchase multiple items in the same transaction. The operator should be able to return to the Sales screen and select the additional product(s) the customer wants to purchase. The system should add the additional products to the shopping cart."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "No eligible products for refund or reversal", "Test_Scnario": "Refunding Multiple Items", "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer requests to refund multiple products. The operator should be able to complete one transaction before starting the next, and the system should update the Farecard balance, remove the products, and update the transaction history as applicable."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Products are eligible for refund or reversal, but are not what the customer requested", "Test_Scnario": "Split payment refund/reversal with credit or debit payment", "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where at least one of the payment methods is credit or debit. The system should prompt the operator to confirm the cancellation, automatically reverse non-credit/debit payments, and require the operator to choose a payment method and prompt the customer to interact with the PIN pad for a refund void. Upon successful processing, the customer should be repaid and a receipt printed. If processing is unsuccessful, the operator should have the option to prompt the customer to return the refunded payment in cash."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Products are eligible for refund or reversal, but are not what the customer requested", "Test_Scnario": "Split payment refund/reversal with non-credit or debit payment", "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where none of the payment methods are credit or debit. The system should prompt the operator to confirm the cancellation and automatically reverse the payment means. The operator should then begin a refund void, after which a customer and merchant receipt should print and the system should return to the home screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Products are eligible for refund or reversal, but are not what the customer requested", "Test_Scnario": "Exceeding maximum product quantity in cart", "Test_Sce_Description": "Verify that the system correctly handles a situation where the quantity of a product added to the cart exceeds the maximum allowable amount. The system should not allow the operator to add more than the maximum quantity to the cart and should require the operator to process the customer's request in multiple transactions."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Products are eligible for refund or reversal, but are not what the customer requested", "Test_Scnario": "No eligible products for refund or reversal", "Test_Sce_Description": "Verify that the system correctly handles a situation where no products are eligible for refund or reversal. The system should display an error message which the operator must acknowledge, and then return to the main menu."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Products are eligible for refund or reversal, but are not what the customer requested", "Test_Scnario": "Eligible products for refund/reversal not matching customer request", "Test_Sce_Description": "Verify that the system correctly handles a situation where the products eligible for refund or reversal are not what the customer requested. The operator should inform the customer that their product is not eligible, and then return to the main menu."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Products are eligible for refund or reversal, but are not what the customer requested", "Test_Scnario": "Failure to connect to internet", "Test_Sce_Description": "Verify that the system correctly handles a situation where there is no internet connection during a flow that requires it. The system should time out and display an error message with options to try again or cancel. If connection is restored, the main use case should resume. If the action is cancelled, the system should return to the previous screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Products are eligible for refund or reversal, but are not what the customer requested", "Test_Scnario": "Cancellation of refund/reversal transaction", "Test_Sce_Description": "Verify that the system correctly handles a situation where the operator wants to cancel a refund/reversal transaction. The system should ask the operator to confirm the cancellation. If confirmed, the transaction should be cancelled and the system should return to the main screen. If not confirmed, the main use case should proceed as usual."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "Failure to connect to internet during password change", "Test_Sce_Description": "Verify that the SA Tool displays the relevant error message when the internet connection is lost during a password change operation. The error message should provide options to try again or cancel."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "Failure to connect to internet during SP Remote access", "Test_Sce_Description": "Verify that the SA Tool displays the relevant error message when the internet connection is lost during SP Remote access. The error message should provide options to try again or cancel."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "PIN pad transmits DECLINED message during credit card payment", "Test_Sce_Description": "Verify that the SA Tool displays the relevant error message and returns to the payment means screen when communication with Moneris fails during a credit card payment transaction."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "PIN pad transmits DECLINED message during debit card payment", "Test_Sce_Description": "Verify that the SA Tool displays the relevant error message and returns to the payment means screen when communication with Moneris fails during a debit card payment transaction."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "Failure to load Farecard after successful payment", "Test_Sce_Description": "Verify that the SA Tool displays the relevant error message when the payment has been processed and successful, but the write to the Farecard is not successful. The operator should have options to try again or cancel and refund the payment."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "Failure to connect to receipt printer during e-Purse change transaction", "Test_Sce_Description": "Verify that the SA Tool displays the relevant error message when connection with the receipt printer fails during a transaction which changes the e-Purse. The operator should have options to proceed with the flow without printing capabilities, or exit the flow."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "Failure to connect to Pin Pad during debit card payment", "Test_Sce_Description": "Verify that the SA Tool displays the relevant error message when connection with the Pin Pad fails during a debit card payment transaction. The operator should have options to wait for the Pin Pad to connect in the background or exit the flow."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "Failure to connect to Pin Pad during credit card payment", "Test_Sce_Description": "Verify that the SA Tool displays the relevant error message when connection with the Pin Pad fails during a credit card payment transaction. The operator should have options to wait for the Pin Pad to connect in the background or exit the flow."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "Open Payments Media fails ODA check", "Test_Sce_Description": "Verify that the device returns the appropriate feedback when an Open Payments Media fails the ODA check. The Declined \u2013 Failed ODA Check Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "Open Payments Media Fails Expiry Check", "Test_Sce_Description": "Verify that the device returns the appropriate feedback when an Open Payments Media fails the Expiry Check. The Declined \u2013 Card Expired Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "Open Payments Media has already tapped-on using an Online Device within Anti-Passback Window", "Test_Sce_Description": "Verify that the device returns the appropriate feedback when the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window, whereby the initial device and secondary device(s) tapped on were all online."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "Open Payments Media has already tapped-on using an Offline Device", "Test_Sce_Description": "Verify that the device returns the appropriate feedback when the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window whereby the initial device tapped, and secondary device(s) is the same device and is offline."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "Open Payments Media is on the ATS deny list and the SA Tool is online", "Test_Sce_Description": "Verify that the device returns the appropriate feedback when an Open Payments Media is on the deny list and the SA Tool is online."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "Period pass cross selling functionality for TA", "Test_Sce_Description": "Verify that the TA has the ability to sell the period passes of other TAs and view the period passes of other TAs when the period pass cross selling function is enabled in their EOD."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "Viewing or changing concession for universal concessions", "Test_Sce_Description": "Verify that the name is displayed when universal concessions are chosen. If SP specific is chosen as a concession, verify that the universal concession is set as Adult."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "Card Query Flow with period pass cross selling", "Test_Sce_Description": "Verify that the Card Query Flow shows the period passes of other TAs in addition to their own when the period pass cross selling function is enabled and a mutual agreement to sell has been implemented."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "Load Period Pass Flow with period pass cross selling", "Test_Sce_Description": "Verify that the Load Period Pass Flow displays the current TAs period passes as well as the period passes of other TAs when the period pass cross selling function is enabled and a mutual agreement to sell has been implemented."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "New Farecard Flow with period pass cross selling", "Test_Sce_Description": "Verify that the New Farecard Flow displays the current TAs period passes as well as the period passes of other TAs when the period pass cross selling function is enabled and a mutual agreement to sell has been implemented."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "Refund Period Pass Flow with period pass cross selling", "Test_Sce_Description": "Verify that the Refund Period Pass Flow displays the current TAs period passes as well as the period passes of other TAs when the period pass cross selling function is enabled and a mutual agreement to sell has been implemented."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "Refund Maximum Amount Reached", "Test_Sce_Description": "Verify that the SA Tool application prompts the operator with an error when the amount input by the operator is greater than the maximum refund amount."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "ECP enabled and Artemis device is locked or asleep", "Test_Sce_Description": "Verify that the Main Use Case proceeds as expected when the customer\u2019s Artemis device has ECP enabled and the device is locked or asleep."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "ECP enabled and Artemis device is unlocked or awake", "Test_Sce_Description": "Verify that the Main Use Case proceeds as expected when the customer\u2019s Artemis device has ECP enabled and the device is unlocked or awake."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "Artemis device in Power Reserve mode and ECP is enabled", "Test_Sce_Description": "Verify that the Main Use Case proceeds as expected when the customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "Using an Artemis wearable device", "Test_Sce_Description": "Verify that the Main Use Case proceeds as expected when the customer is using Virtual Card on their Artemis wearable device."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "ECP is disabled and Artemis device is unlocked or awake", "Test_Sce_Description": "Verify that the Main Use Case proceeds as expected when the ECP is disabled and the user\u2019s device is unlocked or awake."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass", "Test_Sce_Description": "Verify that the steps from the Main Use Case are completed as expected when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass with insufficient e-Purse balance", "Test_Sce_Description": "Verify that the device sends the transaction to ATS for processing, ATS detects the card is Anonymous and the ePurse Balance is less than the fare amount, and ATS returns a declined result back to the SA Tool."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass when the card is blocked", "Test_Sce_Description": "Verify that the device sends the transaction to ATS for processing, ATS detects the card is blocked, and ATS returns a declined result back to the SA Tool."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass when the card is on the Deny List", "Test_Sce_Description": "Verify that the device sends the transaction to ATS for processing, ATS detects the card is on the Deny List, ATS removes the card from the Deny List and sets it to blocked, and ATS returns a declined result back to the SA Tool."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass when the battery goes below the low battery threshold during payment", "Test_Sce_Description": "Verify that the remote lists can be processed even after the SA Tool battery goes below the low battery threshold during a successful Farecard tap."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Refund Maximum Amount Reached", "Test_Scnario": "Split Refunds Functionality on SA Tool", "Test_Sce_Description": "Verify that the SA Tool allows the operator to perform a refund for a transaction via multiple forms of payment. Ensure that only one of each debit and credit card payment is allowed per transaction. Check if the operator can input multiple payment means for refund amounts and that cash payments are processed as one transaction in the backend."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Refund Maximum Amount Reached", "Test_Scnario": "Zero Dollar Transactions on SA Tool", "Test_Sce_Description": "Verify that zero dollar transactions are always paid or refunded in cash and no other payment method is available. Check if the SA Tool correctly handles this scenario and does not allow other payment methods for zero dollar transactions."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Refund Maximum Amount Reached", "Test_Scnario": "Split Refund Process on SA Tool", "Test_Sce_Description": "Verify the process of split refund on the SA Tool. Ensure that the operator can correctly input the refund amounts for different payment methods and the SA Tool correctly calculates and displays the refund amounts. Check if the receipt correctly shows the total refund amount."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Refund Maximum Amount Reached", "Test_Scnario": "Exception Flow: Operator Selects Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Sce_Description": "Verify that the SA Tool correctly handles the scenario where the operator selects a payment amount greater than the total shopping cart amount. Check if the SA Tool provides an error notification to the operator and does not allow the transaction to proceed."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Refund Maximum Amount Reached", "Test_Scnario": "Alternate Flow: Action, Load Value, or Hotlist", "Test_Sce_Description": "Verify that the SA Tool correctly handles the scenario where the customer\u2019s Farecard is on the Action, Load Value, or Hotlist. Check if the SA Tool correctly updates the Farecard and displays the Farecard Query information."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Refund Maximum Amount Reached", "Test_Scnario": "Exception Flow: Quantity added to cart exceeds allowable maximum", "Test_Sce_Description": "Verify that the SA Tool correctly handles the scenario where the quantity of product added to the cart exceeds the maximum allowable amount. Check if the SA Tool does not allow the operator to add more than the maximum allowable quantity to the shopping cart."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Refund Maximum Amount Reached", "Test_Scnario": "Exception Flow: No eligible products for refund or reversal", "Test_Sce_Description": "Verify that the SA Tool correctly handles the scenario where no eligible products for refund or reversal are detected. Check if the SA Tool displays the relevant error message and the operator must acknowledge the message."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Refund Maximum Amount Reached", "Test_Scnario": "Exception Flow: Failure to connect to internet", "Test_Sce_Description": "Verify that the SA Tool correctly handles the scenario where there is no internet connection and the operator is performing an action that requires connection to the Internet. Check if the SA Tool times out and displays the relevant error message with options to try again or cancel."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is locked or asleep", "Test_Scnario": "ECP is enabled and Artemis device is locked or asleep", "Test_Sce_Description": "Verify that the system behaves as expected when ECP is enabled and the Artemis device is locked or asleep. This includes checking that the system correctly identifies the device status and applies the appropriate security measures."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is locked or asleep", "Test_Scnario": "ECP is enabled and Artemis device is unlocked or awake", "Test_Sce_Description": "Test the system's response when ECP is enabled and the Artemis device is unlocked or awake. The system should correctly identify the device status and allow the user to proceed with the use case."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is locked or asleep", "Test_Scnario": "Artemis device is in Power Reserve mode and ECP is enabled", "Test_Sce_Description": "Validate the system's behavior when the Artemis device is in Power Reserve mode and ECP is enabled. The system should correctly identify the device status and apply the appropriate security measures."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is locked or asleep", "Test_Scnario": "Using an Artemis wearable device", "Test_Sce_Description": "Test the system's functionality when the user is using a Virtual Card on their Artemis wearable device. The system should correctly identify the device and allow the user to proceed with the use case."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is locked or asleep", "Test_Scnario": "Failure to read Farecard", "Test_Sce_Description": "Verify the system's response when it fails to read the Farecard correctly. The system should display an error message and prompt the customer to tap their Farecard again."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is locked or asleep", "Test_Scnario": "Expired Farecard", "Test_Sce_Description": "Test the system's behavior when the Farecard is expired. The system should correctly identify the expired Farecard and prevent the operator from taking any further actions on the Farecard."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is locked or asleep", "Test_Scnario": "Blocked/Hotlisted Farecard", "Test_Sce_Description": "Validate the system's response when the Farecard is blocked. The system should correctly identify the blocked Farecard and prevent the operator from taking any further actions on the Farecard."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is locked or asleep", "Test_Scnario": "Cancel a purchase transaction", "Test_Sce_Description": "Test the system's functionality when the operator wants to cancel the transaction at any point in the Main Use Case. The system should allow the operator to cancel the transaction and return to the home screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is locked or asleep", "Test_Scnario": "Period pass cross selling is enabled", "Test_Sce_Description": "Verify the system's behavior when the period pass cross selling function is enabled. The system should allow the operator to sell the period passes of other TAs and view the period passes of other TAs."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is locked or asleep", "Test_Scnario": "Refund Maximum Amount Reached", "Test_Sce_Description": "Test the system's response when the amount to be refunded to a customer exceeds the maximum refund amount. The system should prompt the operator with an error and allow them to edit the refund amount."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Scnario": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Sce_Description": "Verify that the system functions correctly when ECP is enabled and the user's Artemis device is unlocked or awake. This includes checking that the user can access all necessary features and that the system responds appropriately to user input."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Scnario": "Failure to read Farecard", "Test_Sce_Description": "Verify that the system correctly handles a failure to read the Farecard. This includes checking that the system displays an appropriate error message, prompts the user to tap their Farecard again, and allows the operator to exit the scenario or look up the Farecard number using the SP Remote Web \u2013 Farecard Lookup."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Scnario": "Expired Farecard", "Test_Sce_Description": "Verify that the system correctly handles an expired Farecard. This includes checking that the system displays the Farecard query screen indicating that the Farecard has expired, allows the operator to print the card query, and prevents the operator from taking any further actions on the Farecard."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Scnario": "Blocked/Hotlisted Farecard", "Test_Sce_Description": "Verify that the system correctly handles a blocked Farecard. This includes checking that the system displays the Farecard query screen indicating that the Farecard has been blocked, allows the operator to print the card query, and prevents the operator from taking any further actions on the Farecard."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Scnario": "Cancel a purchase transaction", "Test_Sce_Description": "Verify that the system correctly handles the cancellation of a purchase transaction. This includes checking that the system allows the operator to cancel the transaction at any point, asks the operator to confirm the cancellation, and does not record the cancellation if the operator selects yes."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Scnario": "Period pass cross selling is enabled", "Test_Sce_Description": "Verify that the system correctly handles the enabling of period pass cross selling. This includes checking that the system allows the TA to sell the period passes of other TAs and view the period passes of other TAs, and displays the period passes of other TAs in addition to their own when browsing Period Passes."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Scnario": "Refund Maximum Amount Reached", "Test_Sce_Description": "Verify that the system correctly handles a refund which has a value greater than the maximum refund amount. This includes checking that the system prompts the operator with an error, does not proceed to the payment screen, and allows the operator to edit the refund amount."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Scnario": "ECP is enabled and users Artemis device is locked or asleep", "Test_Sce_Description": "Verify that the system functions correctly when ECP is enabled and the user's Artemis device is locked or asleep. This includes checking that the user can access all necessary features and that the system responds appropriately to user input."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Scnario": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Sce_Description": "Verify that the system functions correctly when the customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled. This includes checking that the user can access all necessary features and that the system responds appropriately to user input."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Scnario": "Using an Artemis wearable device", "Test_Sce_Description": "Verify that the system functions correctly when the user is using a Virtual Card on their Artemis wearable device. This includes checking that the user can access all necessary features and that the system responds appropriately to user input."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Scnario": "Testing the functionality of Farecard reading failure", "Test_Sce_Description": "This scenario will test the functionality of the system when it fails to read the Farecard. The system should display a 'Card read error' message and prompt the customer to tap their Farecard again. If the card reading is still unsuccessful, the operator should have the option to exit the scenario or look up the Farecard number using the SP Remote Web \u2013 Farecard Lookup."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Scnario": "Testing the functionality of expired Farecard", "Test_Sce_Description": "This scenario will test the functionality of the system when the Farecard is expired. The system should display the Farecard query screen indicating that the Farecard has expired. The operator should only be able to print the card query and not be able to take any further actions on the Farecard."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Scnario": "Testing the functionality of blocked/hotlisted Farecard", "Test_Sce_Description": "This scenario will test the functionality of the system when the Farecard is blocked. The system should display the Farecard query screen indicating that the Farecard has been blocked. The operator should only be able to print the card query and not be able to take any further actions on the Farecard."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Scnario": "Testing the functionality of purchase transaction cancellation", "Test_Sce_Description": "This scenario will test the functionality of the system when the operator would like to cancel the transaction at any point in the Main Use Case. The system should ask the operator if they are certain they want to cancel the transaction. If the operator selects yes, the transaction should be cancelled and the system should return to the main screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Scnario": "Testing the functionality of period pass cross selling", "Test_Sce_Description": "This scenario will test the functionality of the system when the period pass cross selling function is enabled. The system should display the current TAs period passes as well as the period passes of other TAs. The operator should have the option to sell that Period Pass."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Scnario": "Testing the functionality of refund maximum amount reached", "Test_Sce_Description": "This scenario will test the functionality of the system when the amount to be refunded to a customer exceeds the maximum refund amount. The system should prompt the operator with an error and not proceed to the payment screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Scnario": "Testing the functionality of ECP enabled and Artemis device locked or asleep", "Test_Sce_Description": "This scenario will test the functionality of the system when the ECP is enabled and the Artemis device is locked or asleep. The system should proceed as in the Main Use Case."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Scnario": "Testing the functionality of ECP enabled and Artemis device unlocked or awake", "Test_Sce_Description": "This scenario will test the functionality of the system when the ECP is enabled and the Artemis device is unlocked or awake. The system should proceed as in the Main Use Case."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Scnario": "Testing the functionality of Artemis device in Power Reserve mode and ECP enabled", "Test_Sce_Description": "This scenario will test the functionality of the system when the Artemis device is in Power Reserve mode and ECP is enabled. The system should proceed as in the Main Use Case."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Scnario": "Testing the functionality of using an Artemis wearable device", "Test_Sce_Description": "This scenario will test the functionality of the system when the user is using a Virtual Card on their Artemis wearable device. The system should proceed as in the Main Use Case."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Using an Artemis wearable device", "Test_Scnario": "Testing the functionality of Farecard reading with Artemis device", "Test_Sce_Description": "This scenario will test the functionality of the Artemis device when reading a Farecard. The test will ensure that the device can correctly read the Farecard and display the appropriate information. The test will also cover the exception flow where the Farecard fails to read correctly and the system prompts the user to tap their Farecard again."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Using an Artemis wearable device", "Test_Scnario": "Testing the functionality of expired Farecard detection with Artemis device", "Test_Sce_Description": "This scenario will test the functionality of the Artemis device when detecting an expired Farecard. The test will ensure that the device can correctly identify an expired Farecard and display the appropriate message. The test will also cover the exception flow where the Farecard is expired and the operator can only print the card query and cannot take any further actions on the Farecard."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Using an Artemis wearable device", "Test_Scnario": "Testing the functionality of blocked Farecard detection with Artemis device", "Test_Sce_Description": "This scenario will test the functionality of the Artemis device when detecting a blocked Farecard. The test will ensure that the device can correctly identify a blocked Farecard and display the appropriate message. The test will also cover the exception flow where the Farecard is blocked and the operator can only print the card query and cannot take any further actions on the Farecard."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Using an Artemis wearable device", "Test_Scnario": "Testing the functionality of purchase transaction cancellation with Artemis device", "Test_Sce_Description": "This scenario will test the functionality of the Artemis device when cancelling a purchase transaction. The test will ensure that the device can correctly cancel the transaction and return to the home screen. The test will also cover the exception flow where the operator would like to cancel the transaction at any point in the Main Use Case."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Using an Artemis wearable device", "Test_Scnario": "Testing the performance of Artemis device with Farecard Transaction Data", "Test_Sce_Description": "This scenario will test the performance of the Artemis device when handling Farecard Transaction Data. The test will ensure that the device can correctly send all transaction-related data to the Central System via Subsystem."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Using an Artemis wearable device", "Test_Scnario": "Testing the security of Artemis device with Open Payments Transaction Data", "Test_Sce_Description": "This scenario will test the security of the Artemis device when handling Open Payments Transaction Data. The test will ensure that all data related to Open Payments is securely sent from the device to ATS."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Using an Artemis wearable device", "Test_Scnario": "Testing the user interface of Artemis device with Farecard reading", "Test_Sce_Description": "This scenario will test the user interface of the Artemis device when reading a Farecard. The test will ensure that the device can correctly display the Farecard information and provide appropriate prompts to the user."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is disabled and users Artemis device is unlocked or awake", "Test_Scnario": "ECP is disabled and users Artemis device is unlocked or awake", "Test_Sce_Description": "Verify that the application functions as expected when ECP is disabled and the user's Artemis device is unlocked or awake. The application should be able to detect the user's device and proceed with the Main Use Case."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is disabled and users Artemis device is unlocked or awake", "Test_Scnario": "Failure to read Farecard", "Test_Sce_Description": "Verify the application's behavior when it fails to read the Farecard correctly. The application should display a 'Card read error' message and prompt the user to tap their Farecard again."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is disabled and users Artemis device is unlocked or awake", "Test_Scnario": "Expired Farecard", "Test_Sce_Description": "Test the application's response when the Farecard is expired. The application should detect the expired Farecard and display the Farecard query screen indicating that the Farecard has expired."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is disabled and users Artemis device is unlocked or awake", "Test_Scnario": "Blocked/Hotlisted Farecard", "Test_Sce_Description": "Verify the application's behavior when the Farecard is blocked. The application should detect the blocked Farecard and display the Farecard query screen indicating that the Farecard has been blocked."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is disabled and users Artemis device is unlocked or awake", "Test_Scnario": "Cancel a purchase transaction", "Test_Sce_Description": "Test the application's functionality when the operator wants to cancel the transaction at any point in the Main Use Case. The application should ask the operator if they are certain they want to cancel the transaction and act accordingly."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is disabled and users Artemis device is unlocked or awake", "Test_Scnario": "ATS failure to load products", "Test_Sce_Description": "Verify the application's behavior when ATS is unable to load products to the customer\u2019s account. The application should inform the operator that the products purchased were not added to the user\u2019s account."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is disabled and users Artemis device is unlocked or awake", "Test_Scnario": "SVC / VC Shopping Cart", "Test_Sce_Description": "Test the application's functionality when the device has either SVC or VC products in the shopping cart. The application should not allow both SVC and VC products in the shopping cart at the same time."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is disabled and users Artemis device is unlocked or awake", "Test_Scnario": "ECP is disabled and Customer\u2019s Artemis device is locked or asleep", "Test_Sce_Description": "Verify the application's behavior when ECP is disabled and the user's Artemis device is locked or asleep. The application should not detect the Virtual card media and the screen should remain the same."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is disabled and users Artemis device is unlocked or awake", "Test_Scnario": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is disabled", "Test_Sce_Description": "Test the application's response when the user's mobile device is in Power Reserve mode and ECP is disabled. The application should not detect the Virtual card media and the screen should remain the same."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Reversing Fare Payment from Virtual Card on an Online SA Tool", "Test_Scnario": "Reversing Fare Payment from Virtual Card on an Online SA Tool", "Test_Sce_Description": "Verify that the SP operator is able to manually perform a Virtual Card transaction reversal with the SA Tool. The SA Tool should be powered on, reversal should be enabled in the Subsystem, the last transaction should be deemed to be reversible, the customer\u2019s Farecard\u2019s concession should be Adult or Discreet Concessions, Virtual Cards should be enabled on the SA Tool, and the SA Tool should be online and connected to ATS."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Reversing Fare Payment from Virtual Card on an Online SA Tool", "Test_Scnario": "Transaction Reversal - Customer\u2019s Farecard is Unreadable", "Test_Sce_Description": "Verify that the SA Tool NFC reader detects the Farecard but is unable to read it. The SA Tool application should indicate to the operator that the Farecard is unreadable. The customer should tap on the NFC reader again. If the tap is successful, steps 4 \u2013 7 should be conducted. If the tap is unsuccessful, the SA Tool application should indicate to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Reversing Fare Payment from Virtual Card on an Online SA Tool", "Test_Scnario": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Sce_Description": "Verify that the SA Tool is offline and not connected to ATS. The device should check the Tap Counter to see if it is exceeded. The SA Tool should store request for reversal and display request for reversal success screen. The SA Tool should send bulk upload of transactions to ATS for processing when it comes back online."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Reversing Fare Payment from Virtual Card on an Online SA Tool", "Test_Scnario": "Transaction Reversal - Customer Requests Audio Messages", "Test_Sce_Description": "Verify that the customer requests to reverse a fare and requests audio messages for fare reversal. The operator should enable audio mode. The operator should be able to change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case. The SA Tool should display the fare reversal screen to the operator and customer for the duration of the audio message. Corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Reversing Fare Payment from Virtual Card on an Online SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card Has Sufficient ePurse Balance and an Expired Period Pass", "Test_Sce_Description": "Verify that the customer\u2019s Virtual Card has an expired period pass and the customer\u2019s ePurse balance is more than the fare amount. ATS should detect that the Period Pass has expired, compute the value to be deducted from the e-Purse, and deduct the fare accordingly. If enabled, loyalty should be taken into account in the fare calculation."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Reversing Fare Payment from Virtual Card on an Online SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount and an Expired Period Pass", "Test_Sce_Description": "Verify that the customer\u2019s ePurse balance is less than the fare amount and the customer\u2019s Virtual Card has an expired period pass. ATS should detect that the Period Pass has expired, compute the value to be deducted from the e-Purse, and deduct the fare accordingly. The customer\u2019s Virtual Card should be put into overdraft (negative balance)."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Reversing Fare Payment from Virtual Card on an Online SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Farecard using Period Pass - Transaction is within Inter-SP Transfer window", "Test_Sce_Description": "Verify that the customer\u2019s Virtual Card has a valid transfer product from other service provider and a transfer agreement between the service providers has been established. ATS should read that the Virtual Card contains a valid inter-agency transfer product and has a valid period pass. The right to travel should be conferred to the Cardholder by updating the Virtual Card; the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Reversing Fare Payment from Virtual Card on an Online SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Farecard using Period Pass \u2013 Customer requests Audio Messages", "Test_Sce_Description": "Verify that the customer asks to pay for the trip with their Virtual Card and requests audio messages for fare payment. The operator should enable audio mode. The operator should be able to change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case. The SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message. Corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Verify the functionality of the SA Tool when the Farecard is unreadable", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the Farecard is unreadable. The SA Tool NFC reader should detect the Farecard but fail to read it correctly. The SA Tool application should indicate to the operator that the Farecard is unreadable. The customer should tap on the NFC reader again. If the tap is successful, steps 4 \u2013 7 should be conducted. If the tap is unsuccessful, the SA Tool application should indicate to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Verify the functionality of the SA Tool when it is offline", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is offline and not connected to ATS. The device should check the Tap Counter to see if it is exceeded. The SA Tool should store the request for reversal. The request for reversal success screen should be displayed. The SA Tool should send a bulk upload of transactions to ATS for processing when it comes back online."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Verify the functionality of the SA Tool when the customer requests audio messages", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer requests audio messages for fare reversal. The operator should enable audio mode. The operator should be able to change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case. The SA Tool should display the fare reversal screen to the operator and customer for the duration of the audio message. The corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Verify the functionality of the SA Tool when the customer taps a card that is not a Farecard", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer taps a card that is not a Farecard. The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Verify the functionality of the SA Tool when the customer taps a non-activated Farecard", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer taps a non-activated Farecard. The device should detect that the Farecard is not activated. The SA Tool application should display a declined message to the customer. The transaction should not be conducted. The SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Verify the functionality of the SA Tool when the Cardholder taps the Open Payments Media on the device Card Reader", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the Cardholder taps the Open Payments Media on the device Card Reader while the device is in reversal mode. The device should check if the media presented is a valid type supported by one of the compatible brands, if the media tapped is not expired, and if the BIN of the media presented is in the BIN Blocking list."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Verify the functionality of the SA Tool when the device is offline and not connected to Accenture Ticketing Services", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the device is offline and not connected to Accenture Ticketing Services. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services. The tap should then be rated in ATS."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Verify the functionality of the SA Tool when the customer requests audio messages with Open Payments Media", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer requests audio messages for fare reversal with Open Payments Media. The operator should enable audio mode. The operator should be able to change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case. The SA Tool should display the fare reversal screen to the operator and customer for the duration of the audio message. The corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Scnario": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Sce_Description": "Verify that the SA Tool correctly stores the tap transaction when the device is offline and not connected to Accenture Ticketing Services. Once the device goes back online and connects to ATS, the tap should be rated in ATS."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Scnario": "Reverse a Fare Payment on a SA Tool with Open Payments Media \u2013 Customer requests audio messages", "Test_Sce_Description": "Verify that the SA Tool correctly enables audio mode when a customer requests audio messages for fare payment reversal. The operator should be able to change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Scnario": "Open Payments Media fails ODA check", "Test_Sce_Description": "Verify that the SA Tool correctly returns the appropriate feedback when an Open Payments Media fails the ODA check. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Scnario": "Open Payments Media Fails Expiry Check during Fare Payment", "Test_Sce_Description": "Verify that the SA Tool correctly returns the appropriate feedback when an Open Payments Media fails the Expiry Check. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the expiry check."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Scnario": "Multiple NFC media are presented to the device at one time in Reversal mode", "Test_Sce_Description": "Verify that the SA Tool correctly blocks all fare payment functionality when multiple NFC media are presented to the device at one time. The device should display an error toast message."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Scnario": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Sce_Description": "Verify that the SA Tool correctly provides the Not In Service Screen to the cardholder when the device is in Out-of-Service state. The device should not detect the media and remain in Out-of-Service State."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Scnario": "Tap an Open Payments Media when SA Tool is configured for Farecard reversals only", "Test_Sce_Description": "Verify that the SA Tool correctly handles the situation when it is configured for only farecard reversals. The device should not accept Open Payments Media in this case."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Scnario": "SA Tool in \u201cOut-of-Service\u201d state", "Test_Sce_Description": "Verify that the SA Tool correctly goes into \u201cOut-of-Service\u201d state when it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Scnario": "SA Tool in Standby state", "Test_Sce_Description": "Verify that the SA Tool correctly goes into Standby state when it remains inactive for a configurable period of time or when the operator presses the physical power button."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Scnario": "SA Tool in Revenue Mode", "Test_Sce_Description": "Verify that the SA Tool correctly allows the operator to interact with customers in Revenue Mode. The operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Scnario": "SA Tool in Training Mode", "Test_Sce_Description": "Verify that the SA Tool correctly mimics all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in Training Mode."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer Requests Audio Messages", "Test_Scnario": "Verify the functionality of fare reversal request with audio messages", "Test_Sce_Description": "This scenario will test if the system correctly handles a fare reversal request when the customer also requests audio messages. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion. The system should display the fare reversal screen and play the corresponding audio message in the default language of the customer's Farecard."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer Requests Audio Messages", "Test_Scnario": "Verify the functionality of fare reversal when customer's Farecard does not have a valid fare to reverse", "Test_Sce_Description": "This scenario will test if the system correctly handles a fare reversal request when the customer's Farecard does not have a valid fare to reverse. The application should display a declined message to the customer and the transaction should not be conducted. The SA Tool application should play a declined audio tone."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer Requests Audio Messages", "Test_Scnario": "Verify the functionality of fare reversal when customer's Farecard is blocked", "Test_Sce_Description": "This scenario will test if the system correctly handles a fare reversal request when the customer's Farecard is blocked. The device should send the request to ATS for processing and ATS should detect the card is blocked and return a declined/error result back to the SA Tool. The SA Tool application should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer Requests Audio Messages", "Test_Scnario": "Verify the functionality of fare reversal when customer's Farecard is on the Deny List", "Test_Sce_Description": "This scenario will test if the system correctly handles a fare reversal request when the customer's Farecard is on the Deny List. ATS should detect the Virtual Card is on the Deny List, move the card to blocked and remove it from the Deny List. ATS should then return a declined/error result back to SA Tool. The SA Tool application should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer Requests Audio Messages", "Test_Scnario": "Verify the functionality of fare reversal when battery goes below the low battery threshold during reversal", "Test_Sce_Description": "This scenario will test if the system correctly handles a fare reversal request when the battery goes below the low battery threshold during reversal. If the low battery threshold is reached before Step 4, the application should switch to \u201cOut of Service\u201d mode. Else, the customer\u2019s transaction should be reversed as per Step 5 and then the application should switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer Requests Audio Messages", "Test_Scnario": "Verify the functionality of fare reversal when customer taps a card that is not a Farecard", "Test_Sce_Description": "This scenario will test if the system correctly handles a fare reversal request when the customer taps a card that is not a Farecard. The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer Requests Audio Messages", "Test_Scnario": "Verify the functionality of fare reversal on a SA Tool with Virtual Card Media when ECP is disabled and users Artemis device is locked or asleep", "Test_Sce_Description": "This scenario will test if the system correctly handles a fare reversal request on a SA Tool with Virtual Card Media when ECP is disabled and users Artemis device is locked or asleep. The device should determine that the media tapped is not supported and display an error message. The fare payment reversal should not be recorded."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer Requests Audio Messages", "Test_Scnario": "Verify the functionality of Virtual Card Transaction Reversal on an Online SA Tool", "Test_Sce_Description": "This scenario will test if the system correctly handles a Virtual Card transaction reversal with the SA Tool. The SA Tool should read the Virtual Card information and send transaction to ATS to be processed. ATS should verify that the last transaction is reversible, perform the reversal and send the result back to the SA Tool. The SA Tool should display successful fare reversal screen to the operator and customer and play the successful fare reversal audio tone."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer Requests Audio Messages", "Test_Scnario": "Verify the functionality of fare reversal when customer's Farecard is unreadable", "Test_Sce_Description": "This scenario will test if the system correctly handles a fare reversal request when the customer's Farecard is unreadable. The SA Tool NFC reader should detect the Farecard but be unable to read it. The SA Tool application should indicate to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer Requests Audio Messages", "Test_Scnario": "Verify the functionality of fare reversal when SA Tool is Offline", "Test_Sce_Description": "This scenario will test if the system correctly handles a fare reversal request when the SA Tool is offline and not connected to ATS. The device should check the Tap Counter to see if it is exceeded and the SA Tool should store request for reversal. The request for reversal success screen should be displayed and the SA Tool should send bulk upload of transactions to ATS for processing when it comes back online."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Split Refunds", "Test_Scnario": "Split Refunds Functionality on SA Tool", "Test_Sce_Description": "Verify that the SA Tool allows the operator to perform a refund for a transaction via multiple forms of payment. Ensure that only one of each debit and credit card payment is allowed per transaction. Check if the operator can input multiple payment means for refund amounts. Confirm that Cash payments are processed as one transaction in the backend."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Split Refunds", "Test_Scnario": "Zero Dollar Transactions on SA Tool", "Test_Sce_Description": "Verify that zero dollar transactions are always paid or refunded in cash on the SA Tool. Ensure that no other payment method is available for such transactions."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Split Refunds", "Test_Scnario": "Split Refunds with Different Payment Methods on SA Tool", "Test_Sce_Description": "Verify that the SA Tool allows the operator to input different forms of payment for the refund. Check if the customer can be refunded a certain amount on Payment Method A and the remaining amount on Payment Method B."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Split Refunds", "Test_Scnario": "Receipt Generation for Split Refunds on SA Tool", "Test_Sce_Description": "Verify that the SA Tool generates a receipt automatically if the method of payment was a debit or credit card. Ensure that the receipt shows the total refund amount correctly."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Split Refunds", "Test_Scnario": "Exception Flow for Split Refunds on SA Tool", "Test_Sce_Description": "Verify that the SA Tool handles exceptions correctly when the operator selects Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount. Check if the application provides an error notification to the Operator in such cases."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Split Refunds", "Test_Scnario": "Alternate Flow for Split Refunds on SA Tool", "Test_Sce_Description": "Verify that the SA Tool handles alternate flows correctly when the customer\u2019s Farecard is on the Action, Load Value, or Hotlist. Check if the device detects that the Farecard is on the Action, Load Value, or Hotlist and updates the Farecard accordingly."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Split Refunds", "Test_Scnario": "Performance of Split Refunds on SA Tool", "Test_Sce_Description": "Verify the performance of the SA Tool while processing split refunds. Check the response time of the application while performing split refunds with different payment methods."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Split Refunds", "Test_Scnario": "Security of Split Refunds on SA Tool", "Test_Sce_Description": "Verify that the SA Tool ensures the security of the transaction while processing split refunds. Check if the application encrypts the payment information and ensures that it is not accessible to unauthorized users."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Operator Selects Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Scnario": "Split Payment with Multiple Payment Methods", "Test_Sce_Description": "Verify that the SA Tool allows the customer to make a split payment using multiple payment methods. The customer should be able to pay a certain amount using Payment Method A and the remaining amount using Payment Method B. The tool should correctly calculate and display the total amount paid."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Operator Selects Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Scnario": "Split Payment with Debit or Credit Card", "Test_Sce_Description": "Verify that the SA Tool allows the customer to make a split payment using a debit or credit card. The tool should correctly process the payment and automatically print a receipt upon successful transaction."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Operator Selects Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Scnario": "Split Payment with Cash, Coupon, Warrants, or Voucher", "Test_Sce_Description": "Verify that the SA Tool allows the customer to make a split payment using Cash, Coupon, Warrants, or Voucher. The tool should correctly process the payment as one transaction in the backend and display the total amount paid on the receipt."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Operator Selects Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Scnario": "Split Payment with Zero Dollar Transactions", "Test_Sce_Description": "Verify that the SA Tool correctly handles zero dollar transactions. The tool should only allow these transactions to be paid or refunded in cash."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Operator Selects Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Scnario": "Split Payment with Payment Amount Greater than Total Shopping Cart Amount", "Test_Sce_Description": "Verify that the SA Tool correctly handles scenarios where the selected payment amount is greater than the total shopping cart amount. The tool should provide an error notification to the operator and prompt them to select a different payment mode or change the payment amount."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Operator Selects Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Scnario": "Split Payment with Payment Amount Less than Total Shopping Cart Amount", "Test_Sce_Description": "Verify that the SA Tool correctly handles scenarios where the selected payment amount is less than the total shopping cart amount. The tool should allow the operator to proceed with the transaction and correctly calculate the remaining amount to be paid."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Operator Selects Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Scnario": "Split Payment with Maximum Mean of Payment Limit Reached", "Test_Sce_Description": "Verify that the SA Tool correctly handles scenarios where the maximum mean of payment limit is reached before the total has been paid. The tool should prompt the operator to reverse the transaction and distribute charges to the payment means such that the total has been paid."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Operator Selects Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Scnario": "Split Payment with Operator Selecting Credit Voucher, Coupon, Cheque, or Warrant", "Test_Sce_Description": "Verify that the SA Tool correctly handles scenarios where the operator selects Credit Voucher, Coupon, Cheque, or Warrant as part of the split payment. The tool should not make the 'Change Due' option available as there will never be change returned to the Customer for these payment methods."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Operator Selects Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Scnario": "Split Payment with Operator Selecting Debit or Credit", "Test_Sce_Description": "Verify that the SA Tool correctly handles scenarios where the operator selects Debit or Credit as part of the split payment. The tool should provide an error notification to the operator if they select a payment amount greater than the total shopping cart amount."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Operator Selects Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Scnario": "Split Payment with Required Fields Not Filled Out or Not Valid", "Test_Sce_Description": "Verify that the SA Tool correctly handles scenarios where the operator attempts to proceed to the next screen or proceed to payment without entering required information. The tool should display screen validation rules to prompt the operator to input the correct information."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Customer\u2019s Farecard is on the Action, Load Value, or Hotlist", "Test_Scnario": "Processing Load Value or Action Prior to Fare Validation", "Test_Sce_Description": "Verify that the device correctly processes the Load Value or Action Transaction before continuing with the validation Use Case. This includes checking that the device provides the appropriate feedback to the Cardholder of a successful transaction and updates the Farecard accordingly."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Customer\u2019s Farecard is on the Action, Load Value, or Hotlist", "Test_Scnario": "Farecard with Valid Transfer Product", "Test_Sce_Description": "Ensure that the device correctly processes the Tap-On Fare when a valid transfer product is contained on the Farecard. This includes verifying that the Tap-On Fare and the Underpayment Value are reduced to account for the Transfer Discount."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Customer\u2019s Farecard is on the Action, Load Value, or Hotlist", "Test_Scnario": "Farecard with Default O/D Processing", "Test_Sce_Description": "Check that the device correctly processes a full Fare-by-Zone transaction when there is a default O/D on the Farecard. This includes ensuring that the device deducts the Full Fare value for the station-to-station trip accounting for all Fare considerations associated with the trip."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Customer\u2019s Farecard is on the Action, Load Value, or Hotlist", "Test_Scnario": "Overriding Default O/D on Farecard", "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Farecard and processes the tap as a regular tap-on. This includes checking that the device provides the appropriate feedback to the Cardholder of a successful transaction and notifies the customer that the Default Trip was Overridden."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Customer\u2019s Farecard is on the Action, Load Value, or Hotlist", "Test_Scnario": "Farecard with Underpayment from Previous Trip", "Test_Sce_Description": "Ensure that the device correctly deducts the Underpayment Value from the Farecard E-Purse prior to performing the Fare Validation. This includes verifying that the device detects Underpayment on the Farecard from a previously closed trip, reads the Underpayment value from the Farecard, deducts this value from the E-Purse Balance, and clears the underpayment field."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Customer\u2019s Farecard is on the Action, Load Value, or Hotlist", "Test_Scnario": "Non-Revenue Farecard Tapped on Device", "Test_Sce_Description": "Check that the device correctly handles a Non-Revenue farecard. This includes ensuring that the device only accepts Non-Revenue farecard in the training mode and displays a declined HMI if the Non-Revenue card is tapped in the revenue mode."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Customer\u2019s Farecard is on the Action, Load Value, or Hotlist", "Test_Scnario": "Farecard Tapped During Temporal Class Supplement Time", "Test_Sce_Description": "Verify that the device correctly processes the temporal class supplement in addition to the Base Fare when the Farecard is tapped during a time period that contains an associated Temporal Class Supplement. This includes checking that the device reads the tap-on date/time contained on the Farecard Transaction History block and passes this information to the CRE, which then deducts the associated supplemental fare in addition to the Base Fare."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Customer\u2019s Farecard is on the Action, Load Value, or Hotlist", "Test_Scnario": "Farecard with Autoload Enabled", "Test_Sce_Description": "Ensure that the device correctly handles a Farecard with Autoload Enabled. This includes verifying that the device detects that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, triggers the Autoload amount to be added to the Farecard, and deducts the appropriate configured Fare from the Farecard E-Purse balance."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Customer\u2019s Farecard is on the Action, Load Value, or Hotlist", "Test_Scnario": "Farecard with Fare Type Other Than Default", "Test_Sce_Description": "Check that the device correctly processes a Farecard with a Fare type (either Universal or Specific) other than Default. This includes ensuring that the device reads the concession value from the Farecard, passes this information to the CRE, and utilizes this concession information to determine the appropriate fare and deduct this value from the Farecard E-Purse."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Customer\u2019s Farecard is on the Action, Load Value, or Hotlist", "Test_Scnario": "Overriding Default Trip Prior to Tapping-Off", "Test_Sce_Description": "Verify that the device correctly handles a customer overriding the Default Trip prior to tapping-off. This includes checking that the device provides the appropriate feedback to the Cardholder of a successful transaction and updates the Farecard accordingly."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Farecard tapped during the write tap does not match the Farecard tapped during the identification tap", "Test_Scnario": "Farecard tapped during the write tap does not match the Farecard tapped during the identification tap", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Farecard tapped during the write tap does not match the Farecard tapped during the identification tap. The operator taps one Farecard and intends to write to it but another Farecard is presented during the write tap. The SA Tool should detect this discrepancy and display an error message, prompting the operator to tap the correct card in order to proceed."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Farecard tapped during the write tap does not match the Farecard tapped during the identification tap", "Test_Scnario": "Underpayment handling in TTC Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Farecard is in underpayment. The operator should be able to detect the underpayment amount during the identification tap and inform the customer accordingly. The operator should also be able to handle the underpayment by either accepting it and adding it to the shopping cart or waiving it and issuing a credit voucher."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Farecard tapped during the write tap does not match the Farecard tapped during the identification tap", "Test_Scnario": "Farecard Tapped is the incorrect Farecard Type for BFTP", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Farecard tapped is the incorrect type for the mode. The SA Tool should be able to identify the incorrect Farecard type and notify the operator, terminating the use case."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Farecard tapped during the write tap does not match the Farecard tapped during the identification tap", "Test_Scnario": "Non-Farecard tapped to the reader in TTC", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a non-Farecard is tapped to the reader. The SA Tool should be able to identify the card as a non-Farecard and display an error pop up message."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Farecard tapped during the write tap does not match the Farecard tapped during the identification tap", "Test_Scnario": "Failure to read Virtual Card in BFTP", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it fails to read a customer's Virtual Card. The SA Tool should indicate to the operator that the Virtual Card read has failed and allow the operator to retry the read or exit the scenario."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Farecard tapped during the write tap does not match the Farecard tapped during the identification tap", "Test_Scnario": "Blocked/Hotlisted Farecard \u2013 Virtual Card in TTC", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card is blocked. The SA Tool should be able to detect that the Farecard is blocked and display the Farecard query screen, preventing the operator from taking any further actions on the Farecard."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Farecard tapped during the write tap does not match the Farecard tapped during the identification tap", "Test_Scnario": "Virtual Card \u2013 Ineligible Products in BFTP", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the shopping cart has ineligible products. The SA Tool should be able to detect the ineligible products and display an error, prompting the operator to remove the ineligible products from the cart."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Farecard tapped during the write tap does not match the Farecard tapped during the identification tap", "Test_Scnario": "ATS failure to load products in TTC", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when ATS fails to load products to the customer's account. The SA Tool should inform the operator that the products purchased were not added to the user's account and allow the operator to retry the checkout or provide the customer a refund if the customer paid with cash."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment for the refund/reversal has already begun and the customer has been refunded with at least 1 mean of payment and that mean of payment is credit or debit", "Test_Scnario": "Split Payment Refund/Reversal with Credit or Debit Payment", "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where the customer has been refunded with at least one mean of payment that is credit or debit. The system should prompt the operator to confirm the cancellation of the transaction, reverse non-credit and/or non-debit means of payment automatically, and allow the operator to choose the mean of payment for the refund void. The system should also handle both successful and unsuccessful Moneris processing correctly."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment for the refund/reversal has already begun and the customer has been refunded with at least 1 mean of payment and that mean of payment is credit or debit", "Test_Scnario": "Split Payment Refund/Reversal with Non-Credit or Non-Debit Payment", "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where the customer has been refunded with at least one mean of payment that is not credit or debit. The system should prompt the operator to confirm the cancellation of the transaction and reverse the payment means automatically. The system should also prompt the operator to begin a refund void."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment for the refund/reversal has already begun and the customer has been refunded with at least 1 mean of payment and that mean of payment is credit or debit", "Test_Scnario": "Exceeding Maximum Allowable Quantity", "Test_Sce_Description": "Verify that the system correctly handles a scenario where the quantity of product added to the cart exceeds the maximum allowable amount. The system should not allow the operator to add more than the maximum allowable quantity to the shopping cart and should require the operator to process the customer\u2019s request in multiple transactions."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment for the refund/reversal has already begun and the customer has been refunded with at least 1 mean of payment and that mean of payment is credit or debit", "Test_Scnario": "No Eligible Products for Refund or Reversal", "Test_Sce_Description": "Verify that the system correctly handles a scenario where no eligible products for refund or reversal are detected. The system should display the relevant error message and return to the main menu."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment for the refund/reversal has already begun and the customer has been refunded with at least 1 mean of payment and that mean of payment is credit or debit", "Test_Scnario": "Eligible Products for Refund or Reversal Not Matching Customer Request", "Test_Sce_Description": "Verify that the system correctly handles a scenario where products are eligible for refund or reversal, but are not what the customer requested. The operator should inform the customer their product is not eligible for reversal or refund and return to the main menu."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment for the refund/reversal has already begun and the customer has been refunded with at least 1 mean of payment and that mean of payment is credit or debit", "Test_Scnario": "Failure to Connect to Internet", "Test_Sce_Description": "Verify that the system correctly handles a scenario where there is no internet connection and the operator is performing an action that requires connection to the Internet. The system should time out, display the relevant error message, and provide options to try again or cancel."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment for the refund/reversal has already begun and the customer has been refunded with at least 1 mean of payment and that mean of payment is credit or debit", "Test_Scnario": "Cancellation of Refund/Reversal Transaction", "Test_Sce_Description": "Verify that the system correctly handles a scenario where the operator would like to cancel the transaction at any point in the Main Use Case. The system should ask the operator if they are certain they want to cancel the transaction and handle the operator's response correctly."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment has already begun and the customer has been refunded with at least 1 mean of payment and none of them are credit or debit", "Test_Scnario": "Split payment refund with non-credit or non-debit payment", "Test_Sce_Description": "Verify that the Station Ambassador (SA) Tool correctly handles a transaction cancellation when the customer has been refunded with at least one mean of payment that is not credit or debit. The tool should inform the operator that the payment means must be reversed and prompt for confirmation. Upon confirmation, the tool should automatically reverse the payment means and prompt the operator to begin a refund void. A customer and merchant receipt should print and the tool should return to the home screen."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment has already begun and the customer has been refunded with at least 1 mean of payment and none of them are credit or debit", "Test_Scnario": "Quantity exceeds maximum", "Test_Sce_Description": "Validate that the SA Tool correctly handles a situation where the quantity of product added to the cart exceeds the maximum allowable amount. The tool should not allow the operator to add more than the maximum allowable quantity to the shopping cart. The operator should be required to process the customer\u2019s request in multiple transactions."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment has already begun and the customer has been refunded with at least 1 mean of payment and none of them are credit or debit", "Test_Scnario": "No eligible products for refund or reversal", "Test_Sce_Description": "Ensure that the SA Tool correctly identifies when no eligible products for refund or reversal are detected. The tool should display the relevant error message and require the operator to acknowledge the message before returning to the main menu."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment has already begun and the customer has been refunded with at least 1 mean of payment and none of them are credit or debit", "Test_Scnario": "Eligible products for refund or reversal not matching customer request", "Test_Sce_Description": "Check that the SA Tool correctly handles a situation where the products eligible for refund or reversal are not what the customer requested. The operator should inform the customer their product is not eligible for reversal or refund and return to the main menu."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment has already begun and the customer has been refunded with at least 1 mean of payment and none of them are credit or debit", "Test_Scnario": "Failure to connect to internet", "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where there is no internet connection and the operator is performing an action that requires connection to the Internet. The tool should time out and display the relevant error message with options to try again or cancel. If successful connection is restored, the main use case should resume. If the action is cancelled, the tool should return to the previous screen."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment has already begun and the customer has been refunded with at least 1 mean of payment and none of them are credit or debit", "Test_Scnario": "Cancellation of refund/reversal transaction", "Test_Sce_Description": "Ensure that the SA Tool correctly handles a situation where the operator would like to cancel the transaction at any point in the Main Use Case. The tool should ask the operator if they are certain they want to cancel the transaction. If the operator selects yes, the transaction should be cancelled and the tool should return to the main screen. If the operator selects no, the Main Use Case should proceed as usual."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "Quantity of product added to cart exceeds product maximum", "Test_Scnario": "ATS failure to load products", "Test_Sce_Description": "This scenario tests the exception flow when the ATS fails to load products onto a customer\u2019s account after checkout. The operator has completed the SA Tool shopping flow and the ATS is unable to load products to the customer\u2019s account. The SA Tool should inform the operator that the products purchased were not added to the user\u2019s account. The Operator may attempt the checkout again or provide the customer a refund if the customer paid with cash."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "Quantity of product added to cart exceeds product maximum", "Test_Scnario": "SVC / VC Shopping Cart", "Test_Sce_Description": "This scenario tests the exception flow when the shopping cart includes both SVC and VC products. The device must have either SVC or VC products in the shopping cart and cannot have both at the same time. If the cart has ineligible products, the Operator should receive an error providing them the option to clear the cart. If the customer tapped a VC, clearing cart will remove SVC products and vice versa."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "Quantity of product added to cart exceeds product maximum", "Test_Scnario": "ECP is disabled and Customer\u2019s Artemis device is locked or asleep", "Test_Sce_Description": "This scenario tests the exception flow when the customer\u2019s Artemis device has ECP is disabled and the device is locked or asleep. The user\u2019s device is locked or asleep and ECP is disabled for the users Virtual Card. The Virtual card media should not be detected and the screen remains the same. Artemis device should prompt user to provide authentication."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "Quantity of product added to cart exceeds product maximum", "Test_Scnario": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is disabled", "Test_Sce_Description": "This scenario tests the exception flow when the customer\u2019s Artemis device is in Power Reserve mode and ECP is disabled. The user\u2019s mobile device is in Power Reserve mode and ECP is disabled on the mobile device for the users Virtual Card. The Virtual card media should not be detected and the screen remains the same. Artemis device should prompt user to charge their device."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "Quantity of product added to cart exceeds product maximum", "Test_Scnario": "Required fields not filled out or not valid", "Test_Sce_Description": "This scenario tests the exception flow when the operator proceeds before all required fields are filled out. The operator is adding a product to the shopping cart for which fields must be filled out and attempts to proceed to payment without entering required information or information is entered but does not meet validation rules. The SA Tool should check whether all the required fields have valid information and if not, it should display screen validation rules to prompt the operator to input the correct information."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "Quantity of product added to cart exceeds product maximum", "Test_Scnario": "Purchase multiple items", "Test_Sce_Description": "This scenario tests the alternate flow when the customer indicates that they would like to conduct other purchases in the same transaction. The operator should return to the SA Tool application Sales screen and select the additional product(s) the customer would like to purchase. The SA Tool application should add the additional products to the shopping cart."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "Quantity of product added to cart exceeds product maximum", "Test_Scnario": "Refund multiple items", "Test_Sce_Description": "This scenario tests the alternate flow when the customer requests to refund multiple products where refund criteria have been met. The customer has purchased multiple products and the products are eligible for refund based on the criteria defined in the Ticketing Use Cases. The operator must complete one transaction before starting the next. The operator confirms the reversal and a transaction successful screen is displayed. If it is a Farecard product refund and the Farecard had been placed in the NFC reader in step #1, the SA Tool should detect and scan the card automatically. The SA Tool should update the Farecard balance, remove the products and update the transaction history as applicable."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)", "Test_Scnario": "Launching the SA Tool Application", "Test_Sce_Description": "Verify that an authorized operator can successfully launch the SA Tool Application from the home screen of the SA Tool device. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)", "Test_Scnario": "Power on SA Tool: continuous self-diagnostic check is unsuccessful (network connection not available)", "Test_Sce_Description": "Verify that the SA Tool performs continuous diagnostic checks and correctly identifies when the device is unable to connect to a network. This should be indicated on the SA Tool. The application should still launch and the sign-in screen should be displayed, indicating that the SA Tool can operate in offline mode."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)", "Test_Scnario": "Power on SA Tool: initial self-diagnostic check is unsuccessful", "Test_Sce_Description": "Verify that the SA Tool performs initial self-diagnostic checks and correctly identifies critical failures. The SA Tool should go to an error state if critical failures are found."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)", "Test_Scnario": "Power on SA Tool: Continuous self-diagnostic check is unsuccessful (storage, battery or secure element)", "Test_Sce_Description": "Verify that the SA Tool application performs continuous self-diagnostics for storage, battery or secure element and correctly identifies errors or failures in any of these elements. The SA Tool should go to an out-of-service state if errors or failures are found. A critical event should be sent to SOTI Mobicontrol and CSM."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)", "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications", "Test_Sce_Description": "Verify that an authorized operator can successfully switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button present on the android navigation bar."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)", "Test_Scnario": "The application is already launched and is running in the background", "Test_Sce_Description": "Verify that if the application that the operator intends to launch is already running in the device background, the operator can successfully navigate to it by tapping on the App Overview button on the bottom navigation bar and swiping to find the desired application."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)", "Test_Scnario": "Sign-In to SA Tool application (First-Time User)", "Test_Sce_Description": "Verify that a first-time user can successfully sign-in to the SA Tool application using their operator badge ID and temporary passcode. The operator should be required to change their temporary passcode upon initial log-in. The application should validate the operator badge ID and temporary passcode combination based on operator credentials stored in user management service. Upon successful sign-in, the Security Setup screen should be displayed."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)", "Test_Scnario": "Operator Enters Incorrect Username or Passcode", "Test_Sce_Description": "Verify that if the operator enters an incorrect username or passcode, the device informs the operator that the passcode is incorrect for the counted number of times, and a re-try is permitted after 30 seconds. During the 30-second countdown, the user should not be allowed to attempt sign on."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "SA Tool Application Launch", "Test_Sce_Description": "Verify that the SA Tool application launches successfully from the home screen of the Android device. The application should request the user to enter the operator Badge ID and passcode."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "First Time User Sign-In with Valid Credentials", "Test_Sce_Description": "Verify that a first-time user is able to sign-in successfully using a valid operator badge ID and temporary passcode. The application should validate the credentials and inform the operator of successful first-time sign-in."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "First Time User Sign-In with Invalid Credentials", "Test_Sce_Description": "Verify that a first-time user is unable to sign-in using an invalid operator badge ID or temporary passcode. The application should inform the operator that the entered credentials are incorrect."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "Language Preference Storage", "Test_Sce_Description": "Verify that the user's selected language preference is stored in the user management service upon successful validation of credentials."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "Security Setup Screen Display", "Test_Sce_Description": "Verify that the Security Setup screen is displayed to the operator after successful first-time sign-in. The operator should be notified to set up security questions and a new passcode."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "Passcode Setup", "Test_Sce_Description": "Verify that the operator is able to set up a new 4-digit passcode successfully. The operator should be required to enter the passcode twice to confirm."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "Security Questions Setup", "Test_Sce_Description": "Verify that the operator is able to select 2 security questions from a list of pre-defined questions and provide their answers. The answers should be limited to alphanumerical characters and up to 20 characters."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "Passcode Validation", "Test_Sce_Description": "Verify that the application validates the new passcode to ensure it meets the length criteria, does not match the temporary passcode, and that the passcodes entered twice match each other."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "Shift Parameters Selection", "Test_Sce_Description": "Verify that the operator is able to select their parameters for the shift successfully. A confirmation screen should be displayed to the operator and the operator\u2019s shift should start."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "Sign-In Attempt with No Network", "Test_Sce_Description": "Verify that the application displays a message to the operator requesting them to sign in when network is available if the network is unavailable during a first-time sign-in attempt."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "Maximum Number of Login Attempts", "Test_Sce_Description": "Verify that the application locks the operator user account and informs the operator that the user account is locked if the maximum number of sign-in attempts has been reached."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "New Passcode Same as Temporary Passcode", "Test_Sce_Description": "Verify that the application detects if the new passcode is the same as the temporary passcode and informs the user of the error."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "New Passcode Length Validation", "Test_Sce_Description": "Verify that the application does not enable the submit button until the passcode entered is the correct length."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Cardholder Taps-Off an Online SA Tool with Virtual Card Media", "Test_Scnario": "Cardholder Taps-On an Online SA Tool with Virtual Card Media", "Test_Sce_Description": "Verify that when the cardholder initiates a trip and taps the Virtual Card Media on the device Card Reader (CID), the device detects the Virtual Card media and reads the scratchpad (Card ID). The device should then check if the media presented is a valid Virtual Farecard and if the card is valid (i.e. able to communicate, is a Virtual Card, and not blocked). The device should then send the tap to ATS for processing and confer the right to travel to the Cardholder by updating the HMI of the SA Tool."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Cardholder Taps-Off an Online SA Tool with Virtual Card Media", "Test_Scnario": "Cardholder Taps-On an Offline SA Tool with Virtual Card Media", "Test_Sce_Description": "Verify that when the device is offline and not connected to ATS, the device collects offline tap details and once the device returns back online, offline taps are sent to ATS via bulk upload. The device should check if the media is contained on the local hotlist, and if the hotlist parameter on the Virtual Card Scratchpad is enabled. The tap counter should be checked and incremented and the latent transaction processor should store the tap till the device goes back online and connects to ATS."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Cardholder Taps-Off an Online SA Tool with Virtual Card Media", "Test_Scnario": "Cardholder Taps-On an SA Tool with Virtual Card Media using Audio Jack", "Test_Sce_Description": "Verify that when the customer inserts headphones into the Audio jack which automatically switches the device into audio assist mode, the device provides audio instructions detailing how to adjust the volume by pressing the volume button and then prompts the user to tap their media. The language preference on the media should dictate which language the audio message will be played in."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Cardholder Taps-Off an Online SA Tool with Virtual Card Media", "Test_Scnario": "Non-Revenue Virtual Card Media is tapped on the Device", "Test_Sce_Description": "Verify that when the Virtual Card media is a non-revenue media, the device sends the tap like any other Open Payments Media to ATS. All steps should be as stated in the Main Use Case."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Cardholder Taps-Off an Online SA Tool with Virtual Card Media", "Test_Scnario": "Virtual Card Media fails Card Authentication check", "Test_Sce_Description": "Verify that when the Virtual Card Media fails the Card Authentication check, the device returns the appropriate feedback. The device should perform the necessary validation and determine that the Virtual Card Media is unable to pass the checks. The Declined \u2013 Contact CLIENT Customer Service screen should be provided to the cardholder and an error should be captured and logged in the background."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Cardholder Taps-Off an Online SA Tool with Virtual Card Media", "Test_Scnario": "Multiple NFC media are presented to the device at one time", "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device is able to handle the situation appropriately. The device should be able to process each media individually and provide the appropriate feedback to the cardholder."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Device is offline and not connected to ATS", "Test_Scnario": "Offline Tap-Off on SA Tool with Virtual Card Media", "Test_Sce_Description": "Verify that the SA Tool correctly collects offline tap details when the device is offline and not connected to ATS. Once the device returns back online, check if the offline taps are sent to ATS via bulk upload."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Device is offline and not connected to ATS", "Test_Scnario": "Media Validation on Local Hotlist", "Test_Sce_Description": "Verify that the device checks if the media is contained on the local hotlist, and if the hotlist parameter on the Virtual Card Scratchpad is enabled when the device is offline."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Device is offline and not connected to ATS", "Test_Scnario": "Tap Counter Incrementation", "Test_Sce_Description": "Verify that the tap counter is checked and incremented correctly when the device is offline."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Device is offline and not connected to ATS", "Test_Scnario": "Latent Transaction Storage", "Test_Sce_Description": "Verify that the latent transaction processor stores the tap till the device goes back online and connects to ATS. The tap should then be rated in ATS."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Device is offline and not connected to ATS", "Test_Scnario": "Right to Travel Conferment", "Test_Sce_Description": "Verify that the right to travel is conferred to the Cardholder by updating the HMI of the SA Tool. The FPS \u2013 E-Purse Tap Off should be provided to the cardholder."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Device is offline and not connected to ATS", "Test_Scnario": "Audio Assist Mode Activation", "Test_Sce_Description": "Verify that the device automatically switches into audio assist mode when the customer inserts headphones into the Audio jack. Audio instructions should detail how to adjust the volume by pressing the volume button and then prompt the user to tap their media (in both French and English)."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Device is offline and not connected to ATS", "Test_Scnario": "Non-Revenue Virtual Card Media Processing", "Test_Sce_Description": "Verify that the device sends the tap like any other Virtual Card Media to ATS when the Virtual Card media is a non-revenue media."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Device is offline and not connected to ATS", "Test_Scnario": "Default Trip Override", "Test_Sce_Description": "Verify that if the tap-off occurs while the device is in Override mode, the device processes the tap as a normal tap-off."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Device is offline and not connected to ATS", "Test_Scnario": "Card Authentication Failure", "Test_Sce_Description": "Verify that if the Virtual Card Media fails the Card Authentication check, the device returns the appropriate feedback."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Device is offline and not connected to ATS", "Test_Scnario": "Multiple NFC Media Presentation", "Test_Sce_Description": "Verify the device's behavior when multiple NFC media are presented to the device at one time."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Device is offline and not connected to ATS", "Test_Scnario": "Offline Tap Counter Limit", "Test_Sce_Description": "Verify that if the Virtual Media has reached its offline tap counter limit, the right to travel is not conferred."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Device is offline and not connected to ATS", "Test_Scnario": "Cardholder Taps-Off an Online SA Tool with Virtual Card Media", "Test_Sce_Description": "Verify that the interactions of a Virtual Card Cardholder as they tap-off at the SA Tool are correctly processed."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass within valid time", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a Virtual Card with a valid Limited Period Pass within the valid time. The test will ensure that the SA Tool correctly identifies the validity of the pass and allows the transaction to proceed."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a Virtual Card with a valid Limited Period Pass outside the valid time but with sufficient e-Purse balance. The test will ensure that the SA Tool correctly identifies the invalidity of the pass but allows the transaction to proceed due to sufficient e-Purse balance."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using an Anonymous Virtual Card with an expired Period Pass and ePurse balance less than the fare amount. The test will ensure that the SA Tool correctly identifies the expired pass and insufficient balance, and declines the transaction."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a blocked Virtual Card. The test will ensure that the SA Tool correctly identifies the blocked card and declines the transaction."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a Virtual Card that is on the Deny List. The test will ensure that the SA Tool correctly identifies the card on the Deny List, removes it from the list, sets it to blocked, and declines the transaction."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a fare payment. The test will ensure that the SA Tool can still process the remote lists even when the battery is low."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card Has Sufficient ePurse Balance and an Expired Period Pass", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a Virtual Card with an expired Period Pass but with sufficient ePurse balance. The test will ensure that the SA Tool correctly identifies the expired pass but allows the transaction to proceed due to sufficient ePurse balance."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount and an Expired Period Pass", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a Registered Virtual Card with an expired Period Pass and ePurse balance less than the fare amount but greater than zero. The test will ensure that the SA Tool correctly identifies the expired pass and insufficient balance, and puts the card into overdraft."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Farecard using Period Pass - Transaction is within Inter-SP Transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a Virtual Card with a valid transfer product from another service provider within the Inter-SP Transfer window. The test will ensure that the SA Tool correctly identifies the valid transfer product and allows the transaction to proceed."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Farecard using Period Pass \u2013 Customer requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer requests audio messages for fare payment. The test will ensure that the SA Tool correctly plays the audio messages in the default language of the Farecard."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "SA Tool application fails to read the Virtual Card", "Test_Sce_Description": "Verify that the SA Tool application correctly indicates to the operator when it detects the Virtual Card but is unable to read it. This scenario will test the functionality of the SA Tool application when it encounters an unreadable Virtual Card."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Successful tap after initial unreadable Virtual Card", "Test_Sce_Description": "Verify that the SA Tool application allows the customer to tap the NFC reader again after an initial unsuccessful attempt. This scenario will test the functionality and performance of the SA Tool application in handling multiple tap attempts."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Expired Period Pass with sufficient ePurse balance", "Test_Sce_Description": "Verify that the ATS correctly detects an expired period pass and deducts the fare from the ePurse balance. This scenario will test the functionality of the ATS in handling fare payment with an expired period pass and sufficient ePurse balance."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Expired Period Pass with ePurse balance less than fare amount", "Test_Sce_Description": "Verify that the ATS correctly detects an expired period pass and puts the Virtual Card into overdraft when the ePurse balance is less than the fare amount. This scenario will test the functionality of the ATS in handling fare payment with an expired period pass and insufficient ePurse balance."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Inter-SP Transfer window", "Test_Sce_Description": "Verify that the ATS correctly reads a valid inter-agency transfer product and a valid period pass on the Virtual Card. This scenario will test the functionality of the ATS in handling fare payment with a valid inter-agency transfer product."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Audio Messages request", "Test_Sce_Description": "Verify that the SA Tool application correctly enables audio mode and plays the corresponding audio message when the customer requests audio messages for fare payment. This scenario will test the functionality of the SA Tool application in handling audio messages request."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Limited Period Pass outside of valid time with sufficient ePurse balance", "Test_Sce_Description": "Verify that the ATS correctly detects that the Limited Period Pass is not valid at the current time and deducts the fare from the ePurse. This scenario will test the functionality of the ATS in handling fare payment with a Limited Period Pass outside of its valid time."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Expired Period Pass and ePurse Balance Less than the Fare Amount on an Anonymous Farecard", "Test_Sce_Description": "Verify that the ATS correctly detects an expired period pass and insufficient ePurse balance on an anonymous Virtual Card and returns a declined result. This scenario will test the functionality of the ATS in handling fare payment with an expired period pass and insufficient ePurse balance on an anonymous Virtual Card."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Blocked Farecard", "Test_Sce_Description": "Verify that the ATS correctly detects a blocked Farecard and returns a declined result. This scenario will test the functionality of the ATS in handling fare payment with a blocked Farecard."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Virtual Card on the Deny List", "Test_Sce_Description": "Verify that the ATS correctly detects a Virtual Card on the Deny List, removes it from the list, sets it to blocked, and returns a declined result. This scenario will test the functionality of the ATS in handling fare payment with a Virtual Card on the Deny List."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Low battery threshold during payment", "Test_Sce_Description": "Verify that the SA Tool application correctly processes the remote lists even when the battery goes below the low battery threshold during a successful Farecard tap. This scenario will test the performance of the SA Tool application under low battery conditions."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card Has Sufficient ePurse Balance and an Expired Period Pass", "Test_Scnario": "Testing the functionality of the SA Tool when a customer's Virtual Card has sufficient ePurse balance and an expired Period Pass", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's Virtual Card has sufficient ePurse balance and an expired Period Pass. The test will ensure that the ATS correctly detects that the Period Pass has expired, computes the value to be deducted from the e-Purse, and deducts the fare accordingly. The test will also verify that the loyalty is taken into account in the fare calculation if enabled."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card Has Sufficient ePurse Balance and an Expired Period Pass", "Test_Scnario": "Testing the performance of the SA Tool when processing transactions with a Virtual Card with sufficient ePurse balance and an expired Period Pass", "Test_Sce_Description": "This scenario will test the performance of the SA Tool when processing transactions with a Virtual Card with sufficient ePurse balance and an expired Period Pass. The test will measure the time it takes for the ATS to detect the expired Period Pass, compute the fare to be deducted from the e-Purse, and deduct the fare. The test will also measure the time it takes for the SA Tool to update the Virtual Card and provide feedback to the customer."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card Has Sufficient ePurse Balance and an Expired Period Pass", "Test_Scnario": "Testing the security of the SA Tool when processing transactions with a Virtual Card with sufficient ePurse balance and an expired Period Pass", "Test_Sce_Description": "This scenario will test the security of the SA Tool when processing transactions with a Virtual Card with sufficient ePurse balance and an expired Period Pass. The test will ensure that the ATS securely communicates with the SA Tool and the Virtual Card, and that the customer's ePurse balance and fare deduction are securely processed and updated."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card Has Sufficient ePurse Balance and an Expired Period Pass", "Test_Scnario": "Testing the exception flow of the SA Tool when a customer's Virtual Card has sufficient ePurse balance and an expired Period Pass", "Test_Sce_Description": "This scenario will test the exception flow of the SA Tool when a customer's Virtual Card has sufficient ePurse balance and an expired Period Pass. The test will ensure that the SA Tool correctly handles exceptions such as communication errors with the ATS or the Virtual Card, and provides appropriate feedback to the customer."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card Has Sufficient ePurse Balance and an Expired Period Pass", "Test_Scnario": "Testing the alternate flow of the SA Tool when a customer's Virtual Card has sufficient ePurse balance and an expired Period Pass", "Test_Sce_Description": "This scenario will test the alternate flow of the SA Tool when a customer's Virtual Card has sufficient ePurse balance and an expired Period Pass. The test will ensure that the SA Tool correctly handles alternate flows such as the customer requesting audio messages for fare payment, and provides appropriate feedback to the customer."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Customer uses audio jack to hear instructions", "Test_Scnario": "Testing the functionality of SA Tool when the device is offline and not connected to ATS", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is offline and not connected to ATS. The device should be able to collect offline tap details and once the device returns back online, offline taps should be sent to ATS via bulk upload."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Customer uses audio jack to hear instructions", "Test_Scnario": "Testing the functionality of SA Tool with Virtual Card Media when the customer uses audio jack to hear instructions", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer uses the audio jack to hear instructions. The device should automatically switch into audio assist mode when headphones are inserted into the audio jack. The audio instructions should detail how to adjust the volume and prompt the user to tap their media."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Customer uses audio jack to hear instructions", "Test_Scnario": "Testing the functionality of SA Tool with Non-Revenue Virtual Card Media", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a Non-Revenue Virtual Card Media is tapped on the device. The device should send the tap like any other Virtual Card Media to ATS."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Customer uses audio jack to hear instructions", "Test_Scnario": "Testing the functionality of SA Tool when the customer overrides the Default Trip prior to tapping-off", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer requests the override of a Default Trip. The device should inform the customer that it is prepared to override the Default Trip and process the tap as a normal tap-off."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Customer uses audio jack to hear instructions", "Test_Scnario": "Testing the exception flow when Virtual Card Media fails Card Authentication check", "Test_Sce_Description": "This scenario will test the exception flow of the SA Tool when the Virtual Card Media fails the Card Authentication check. The device should return the appropriate feedback and the declined tap should be sent to ATS."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Customer uses audio jack to hear instructions", "Test_Scnario": "Testing the exception flow when multiple NFC media are presented to the device at one time", "Test_Sce_Description": "This scenario will test the exception flow of the SA Tool when multiple NFC media are presented to the device at one time. The device should be able to handle this situation appropriately."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Customer uses audio jack to hear instructions", "Test_Scnario": "Testing the performance of SA Tool when processing taps", "Test_Sce_Description": "This scenario will test the performance of the SA Tool when processing taps. The device should be able to process taps quickly and efficiently, without any delays or errors."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Customer uses audio jack to hear instructions", "Test_Scnario": "Testing the security of SA Tool when processing taps", "Test_Sce_Description": "This scenario will test the security of the SA Tool when processing taps. The device should securely process taps and ensure that all data is encrypted and protected from unauthorized access."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media - Non-Revenue Virtual Card Media is tapped on the Device", "Test_Scnario": "Offline Tap-Off on SA Tool with Virtual Card Media", "Test_Sce_Description": "Verify that the SA Tool correctly collects offline tap details when it is not online and not connected to ATS. Once the device returns back online, check if the offline taps are sent to ATS via bulk upload."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media - Non-Revenue Virtual Card Media is tapped on the Device", "Test_Scnario": "Hotlist Check for Offline Tap-Off on SA Tool with Virtual Card Media", "Test_Sce_Description": "Verify that the device checks if the media is contained on the local hotlist, and if the hotlist parameter on the Virtual Card Scratchpad is enabled during an offline tap-off."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media - Non-Revenue Virtual Card Media is tapped on the Device", "Test_Scnario": "Tap Counter Increment for Offline Tap-Off on SA Tool with Virtual Card Media", "Test_Sce_Description": "Verify that the tap counter is checked and incremented during an offline tap-off on the SA Tool with Virtual Card Media."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media - Non-Revenue Virtual Card Media is tapped on the Device", "Test_Scnario": "Right to Travel Conferment during Offline Tap-Off on SA Tool with Virtual Card Media", "Test_Sce_Description": "Verify that the right to travel is conferred to the Cardholder by updating the HMI of the SA Tool during an offline tap-off. Check if the FPS \u2013 E-Purse Tap Off is provided to the cardholder."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media - Non-Revenue Virtual Card Media is tapped on the Device", "Test_Scnario": "Audio Assist Mode Activation for Tap-Off on SA Tool with Virtual Card Media", "Test_Sce_Description": "Verify that the device automatically switches into audio assist mode when the customer inserts headphones into the Audio jack. Check if the audio instructions detail how to adjust the volume and prompt the user to tap their media."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media - Non-Revenue Virtual Card Media is tapped on the Device", "Test_Scnario": "Language Preference for Audio Assist Mode during Tap-Off on SA Tool with Virtual Card Media", "Test_Sce_Description": "Verify that the language preference on the media dictates which language the audio message will be played in during a tap-off on the SA Tool with Virtual Card Media. Check if the appropriate language (English or French) is used based on the language associated with the fare media."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media - Non-Revenue Virtual Card Media is tapped on the Device", "Test_Scnario": "Processing of Non-Revenue Virtual Card Media Tap-Off on SA Tool", "Test_Sce_Description": "Verify that the device sends the tap of a non-revenue Virtual Card Media to ATS like any other Virtual Card Media. Check if the processing of Non-Revenue media taps is as per the defined logic."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media - Non-Revenue Virtual Card Media is tapped on the Device", "Test_Scnario": "Default Trip Override during Tap-Off on SA Tool with Virtual Card Media", "Test_Sce_Description": "Verify that if the tap-off occurs while the device is in Override mode, the device processes the tap as a normal tap-off. Check if the Device HMI informs the customer that the Device is prepared to override the Default Trip."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media - Non-Revenue Virtual Card Media is tapped on the Device", "Test_Scnario": "Card Authentication Failure during Tap-Off on SA Tool with Virtual Card Media", "Test_Sce_Description": "Verify that if the Virtual Card Media fails the Card Authentication check, the device returns the appropriate feedback. Check if the Declined \u2013 Contact CLIENT Customer Service screen is provided to the cardholder and the declined tap is sent to ATS."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media - Non-Revenue Virtual Card Media is tapped on the Device", "Test_Scnario": "Multiple NFC Media Presentation during Tap-Off on SA Tool with Virtual Card Media", "Test_Sce_Description": "Verify the device's behavior when multiple NFC media are presented to the device at one time during a tap-off on the SA Tool with Virtual Card Media."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Virtual Card Media fails Card Authentication check", "Test_Scnario": "Virtual Card Media fails Card Authentication check", "Test_Sce_Description": "In this scenario, the Virtual Card Media fails the Card Authentication check. The device performs the necessary validation and determines that the Virtual Card Media is unable to pass the checks. The Declined \u2013 Contact CLIENT Customer Service screen is provided to the cardholder. An error is captured and logged in the background when this occurs to help with troubleshooting the issue. This error is also captured in the SOTI logs. The declined tap is sent to ATS."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Virtual Card Media fails Card Authentication check", "Test_Scnario": "Multiple NFC media are presented to the device at one time", "Test_Sce_Description": "In this scenario, if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. The Anti-Collision Error Screen is provided to the cardholder. An error is captured and logged in the background when this occurs to help with troubleshooting the issue. This error is also captured in the SOTI logs. The declined tap is sent to ATS."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Virtual Card Media fails Card Authentication check", "Test_Scnario": "Tap-off a Virtual Card Media when SA Tool is in Out-of-Service state", "Test_Sce_Description": "In this scenario, the device is in Out-of-Service state. The device displays the Not in Service screen to the cardholder. Customer attempts to tap their Virtual Card Media on the card reader. The device will not detect the media and remains in Out-of-Service State."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Virtual Card Media fails Card Authentication check", "Test_Scnario": "Tap-off and an error has occurred", "Test_Sce_Description": "In this scenario, an error has occurred on the device that does not cover the exception cases above. The device records the tap. The Declined \u2013 See Customer Service Screen is provided to the cardholder. An error is captured and logged in the background when this occurs to help with troubleshooting the issue. This error is also captured in the SOTI logs. The declined tap is sent to ATS."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Virtual Card Media fails Card Authentication check", "Test_Scnario": "Tap-off and Virtual Card Media is on the local hotlist and device is offline", "Test_Sce_Description": "In this scenario, the Virtual Card Media is on the local hotlist. The device checks the local hotlist and returns a response that the media is denied. Right to travel is not conferred. The Declined \u2013 Blocked Screen is provided to the cardholder. The Device updates the blocking parameter on the Virtual Card Scratchpad to be enabled. The device removes the Virtual Card from the hotlist. An error is captured and logged in the background when this occurs to help with troubleshooting the issue. This error is also captured in the SOTI logs."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Virtual Card Media fails Card Authentication check", "Test_Scnario": "Tap-off and Virtual Card Media\u2019s blocked parameter on the scratchpad is enabled", "Test_Sce_Description": "In this scenario, the Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled. The device provides the appropriate feedback to the Cardholder of a successful tap. The FPS \u2013 Virtual Card E-Purse Flat Fare Accepted Screen is provided to the cardholder. The tap counter is checked and reset to 0 if it isn't already at 0. The Virtual Card scratchpad is updated to remove the block parameter and prioritizes the accepted response from ATS."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Virtual Card Media fails Card Authentication check", "Test_Scnario": "Virtual Media has already tapped-on using an Online Device", "Test_Sce_Description": "In this scenario, the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window, whereby the initial device and secondary device tapped on were both online. The device sends the tap to ATS which returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen is provided to the cardholder. An error is captured and logged in the background when this occurs to help with troubleshooting the issue. This error is also captured in the SOTI logs."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Virtual Card Media fails Card Authentication check", "Test_Scnario": "Virtual Card Media has already tapped-on using an Offline Device (Anti-passback)", "Test_Sce_Description": "In this scenario, the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window whereby the initial device tapped, and secondary device(s) is the same device and is offline. The device checks the latent transaction processor on the same device for a previous tap within the anti-passback window. The tap is stored on the device till it is connected to ATS where the transactions will be reconciled. The Declined \u2013 Already Tapped Screen is provided to the cardholder. An error is captured and logged in the background when this occurs to help with troubleshooting the issue. This error is also captured in the SOTI logs."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Multiple NFC media are presented to the device at one time", "Test_Scnario": "Multiple NFC media presented to the device at once", "Test_Sce_Description": "This scenario tests the functionality of the device when multiple NFC media are presented at once. The device should block all fare payment functionality and present an Anti-Collision toast message to the customer. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Multiple NFC media are presented to the device at one time", "Test_Scnario": "Tap a non-activated Farecard on an SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the device when a non-activated Farecard is tapped. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction due to inactive farecard. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Multiple NFC media are presented to the device at one time", "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard is tapped and a card reading error occurs. The device should not provide any feedback and screen remains \u201cIn-Service\u201d display. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Multiple NFC media are presented to the device at one time", "Test_Scnario": "Tap a Farecard on an SA Tool and card write error occurs", "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard is tapped and a card write error occurs. The device should not provide any feedback and screen remains \u201cIn-Service\u201d display. The device should delete the transaction information. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Multiple NFC media are presented to the device at one time", "Test_Scnario": "Tap a Farecard when SA Tool is in Out-of-Service state", "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard is tapped while the SA Tool is in Out-of-Service state. The device should not detect the media and remain in Out-of-Service State."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Multiple NFC media are presented to the device at one time", "Test_Scnario": "Tap a Virtual Card Media when SA Tool is in Out-of-Service state", "Test_Sce_Description": "This scenario tests the functionality of the device when a Virtual Card Media is tapped while the SA Tool is in Out-of-Service state. The device should not detect the media and remain in Out-of-Service State."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Multiple NFC media are presented to the device at one time", "Test_Scnario": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online", "Test_Sce_Description": "This scenario tests the functionality of the device when a customer attempts to tap-on immediately after tapping-off at the same station and the device is online. The device should send the tap to ATS which returns a response that the cardholder has already tapped on at the same station and is within the Tap-off anti-passback Window."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Multiple NFC media are presented to the device at one time", "Test_Scnario": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is offline (anti-passback)", "Test_Sce_Description": "This scenario tests the functionality of the device when a customer attempts to tap-on immediately after tapping-off at the same station and the device is offline. The device should check the latent transaction processor on the same device for a previous tap within the tap-off anti-passback window. The tap should be stored on the device till it is connected to ATS where the tap will be reconciled."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Multiple NFC media are presented to the device at one time", "Test_Scnario": "Customer attempts to tap on and an error has occurred", "Test_Sce_Description": "This scenario tests the functionality of the device when a customer attempts to tap on and an error has occurred. The device should record the tap and provide the Declined \u2013 See Customer Service Screen to the cardholder. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Multiple NFC media are presented to the device at one time", "Test_Scnario": "Virtual Card has insufficient E-Purse to cover the Tap-On Fare", "Test_Sce_Description": "This scenario tests the functionality of the device when a Virtual Card has insufficient E-Purse to cover the Tap-On Fare. The device should decline the tap and provide the Declined \u2013 Insufficient Funds Screen to the cardholder. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "SA Tool auto-computes current location", "Test_Scnario": "SA Tool auto-computes current location on BFTP device", "Test_Sce_Description": "Verify that the SA Tool application on the BFTP device is able to auto-compute the current location when the auto-location functionality is enabled. The device should compute the distance from all stops on the selected route and trip at a configurable duration. Once within a stop radius, the device should use this stop as the current stop on SA Tool application."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "SA Tool auto-computes current location", "Test_Scnario": "SA Tool auto-computes current location on TTC device", "Test_Sce_Description": "Verify that the SA Tool application on the TTC device is able to auto-compute the current location when the auto-location functionality is enabled. The device should compute the distance from all stops on the selected route and trip at a configurable duration. Once within a stop radius, the device should use this stop as the current stop on SA Tool application."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "SA Tool auto-computes current location", "Test_Scnario": "SA Tool auto-computes current location on Transit Agency device", "Test_Sce_Description": "Verify that the SA Tool application on the Transit Agency device is able to auto-compute the current location when the auto-location functionality is enabled. The device should compute the distance from all stops on the selected route and trip at a configurable duration. Once within a stop radius, the device should use this stop as the current stop on SA Tool application."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "SA Tool auto-computes current location", "Test_Scnario": "GPS signal quality changes on BFTP device", "Test_Sce_Description": "Verify that when the GPS signal quality changes on the BFTP device, the GPS signal quality indicator on the home screen of the SA Tool application is changed to reflect the same."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "SA Tool auto-computes current location", "Test_Scnario": "GPS signal quality changes on TTC device", "Test_Sce_Description": "Verify that when the GPS signal quality changes on the TTC device, the GPS signal quality indicator on the home screen of the SA Tool application is changed to reflect the same."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "SA Tool auto-computes current location", "Test_Scnario": "GPS signal quality changes on Transit Agency device", "Test_Sce_Description": "Verify that when the GPS signal quality changes on the Transit Agency device, the GPS signal quality indicator on the home screen of the SA Tool application is changed to reflect the same."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "SA Tool auto-computes current location", "Test_Scnario": "CLIENT backend connectivity changes on BFTP device", "Test_Sce_Description": "Verify that when the SA Tool application on the BFTP device loses connection to the CLIENT backend, the network icon on the application updates to reflect the connectivity status with the network which reflects the status with CLIENT backend."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "SA Tool auto-computes current location", "Test_Scnario": "CLIENT backend connectivity changes on TTC device", "Test_Sce_Description": "Verify that when the SA Tool application on the TTC device loses connection to the CLIENT backend, the network icon on the application updates to reflect the connectivity status with the network which reflects the status with CLIENT backend."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "SA Tool auto-computes current location", "Test_Scnario": "CLIENT backend connectivity changes on Transit Agency device", "Test_Sce_Description": "Verify that when the SA Tool application on the Transit Agency device loses connection to the CLIENT backend, the network icon on the application updates to reflect the connectivity status with the network which reflects the status with CLIENT backend."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "SA Tool auto-computes current location", "Test_Scnario": "Operator Overrides Selects/Overrides Current Location on BFTP device", "Test_Sce_Description": "Verify that the operator on the BFTP device is able to select/override the current location for inspection / fare payment purposes on the SA Tool application. The Route Parameters should be updated to the operator selected location and should be automatically updated to the next station upon arrival at the next station."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "SA Tool auto-computes current location", "Test_Scnario": "Operator Overrides Selects/Overrides Current Location on TTC device", "Test_Sce_Description": "Verify that the operator on the TTC device is able to select/override the current location for inspection / fare payment purposes on the SA Tool application. The Route Parameters should be updated to the operator selected location and should be automatically updated to the next station upon arrival at the next station."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "SA Tool auto-computes current location", "Test_Scnario": "Operator Overrides Selects/Overrides Current Location on Transit Agency device", "Test_Sce_Description": "Verify that the operator on the Transit Agency device is able to select/override the current location for inspection / fare payment purposes on the SA Tool application. The Route Parameters should be updated to the operator selected location and should be automatically updated to the next station upon arrival at the next station."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS signal quality changes", "Test_Scnario": "GPS Signal Quality Changes on SA Tool", "Test_Sce_Description": "Verify that the GPS signal quality indicator on the SA Tool home screen accurately reflects changes in the GPS signal quality. This will involve testing under various conditions such as strong GPS signal, weak GPS signal, and no GPS signal."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS signal quality changes", "Test_Scnario": "SA Tool Auto-Computes Current Location", "Test_Sce_Description": "Verify that the SA Tool accurately auto-computes the current location based on the distance from all stops on the selected route and trip. This will involve testing with various routes and trips, and confirming that the computed location matches the actual location."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS signal quality changes", "Test_Scnario": "Operator Disables Auto-Location Functionality", "Test_Sce_Description": "Verify that the operator can successfully disable the auto-location functionality on the SA Tool. This will involve testing the functionality of the disable option, and confirming that location positioning and calculation are disabled when the option is selected."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS signal quality changes", "Test_Scnario": "CLIENT Backend Connectivity Changes", "Test_Sce_Description": "Verify that the SA Tool accurately reflects changes in the connectivity status with the CLIENT backend. This will involve testing under various network conditions, and confirming that the network icon on the SA Tool updates to reflect the current connectivity status."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS signal quality changes", "Test_Scnario": "Operator Overrides Selects/Overrides Current Location", "Test_Sce_Description": "Verify that the operator can successfully select/override the current location for inspection/fare payment purposes on the SA Tool. This will involve testing the functionality of the select/override option, and confirming that the Route Parameters are updated to the operator selected location."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS signal quality changes", "Test_Scnario": "SA Tool Receives Remote Configuration", "Test_Sce_Description": "Verify that the SA Tool successfully receives and applies remote configuration. This will involve testing with various configuration settings, and confirming that the SA Tool behaves as expected based on the new configuration."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS signal quality changes", "Test_Scnario": "SA Tool in In-Service State", "Test_Sce_Description": "Verify that the SA Tool operates correctly in the 'In-Service' state. This will involve testing various functionalities of the SA Tool while it is in this state, and confirming that they work as expected."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS signal quality changes", "Test_Scnario": "SA Tool in Out-of-Service State", "Test_Sce_Description": "Verify that the SA Tool operates correctly in the 'Out-of-Service' state. This will involve testing various functionalities of the SA Tool while it is in this state, and confirming that they are disabled as expected."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS signal quality changes", "Test_Scnario": "SA Tool in Standby State", "Test_Sce_Description": "Verify that the SA Tool operates correctly in the 'Standby' state. This will involve testing various functionalities of the SA Tool while it is in this state, and confirming that they are suspended as expected."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS signal quality changes", "Test_Scnario": "SA Tool in Real-Time Mode", "Test_Sce_Description": "Verify that the SA Tool operates correctly in the 'Real-Time' mode. This will involve testing various functionalities of the SA Tool while it is in this mode, and confirming that they provide near real-time responses as expected."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS signal quality changes", "Test_Scnario": "SA Tool in Queued Mode", "Test_Sce_Description": "Verify that the SA Tool operates correctly in the 'Queued' mode. This will involve testing various functionalities of the SA Tool while it is in this mode, and confirming that they send the taps collected to ATS as expected."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS signal quality changes", "Test_Scnario": "SA Tool in Degraded Mode", "Test_Sce_Description": "Verify that the SA Tool operates correctly in the 'Degraded' mode. This will involve testing various functionalities of the SA Tool while it is in this mode, and confirming that it can only accept Farecard taps as expected."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "CLIENT backend connectivity changes", "Test_Scnario": "Failure to connect to internet during password change", "Test_Sce_Description": "Verify the system's behavior when the internet connection is lost during a password change operation. The system should time out and display an appropriate error message. Once the internet connection is restored, the system should allow the user to resume the password change operation."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "CLIENT backend connectivity changes", "Test_Scnario": "Failure to connect to internet during SP Remote access", "Test_Sce_Description": "Check the system's response when the internet connection is lost while accessing SP Remote. The system should time out and display a relevant error message. Upon restoration of the internet connection, the system should allow the user to resume accessing SP Remote."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "CLIENT backend connectivity changes", "Test_Scnario": "Handling of DECLINED message from Moneris during credit card payment", "Test_Sce_Description": "Verify the system's behavior when a DECLINED message is received from Moneris during a credit card payment transaction. The system should display an appropriate error message and return to the payment means screen. The receipt printer should print a failure of payment means."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "CLIENT backend connectivity changes", "Test_Scnario": "Handling of DECLINED message from Moneris during debit card payment", "Test_Sce_Description": "Check the system's response when a DECLINED message is received from Moneris during a debit card payment transaction. The system should display a relevant error message and return to the payment means screen. The receipt printer should print a failure of payment means."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "CLIENT backend connectivity changes", "Test_Scnario": "Failure to load Farecard after successful payment", "Test_Sce_Description": "Verify the system's behavior when the Farecard fails to load after a successful payment. The system should display an appropriate error message and allow the operator to either try again or cancel and refund the payment."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "CLIENT backend connectivity changes", "Test_Scnario": "Failure to connect to receipt printer during e-Purse change transaction", "Test_Sce_Description": "Check the system's response when the connection to the receipt printer fails during a transaction that changes the e-Purse. The system should display a relevant error message and allow the operator to proceed with the transaction without printing capabilities or exit the flow."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "CLIENT backend connectivity changes", "Test_Scnario": "Failure to connect to Pin Pad during debit or credit payment", "Test_Sce_Description": "Verify the system's behavior when the connection to the Pin Pad fails during a transaction that requires the use of Pin Pad for debit or credit payment. The system should display an appropriate error message and allow the operator to wait for the Pin Pad to connect in the background or exit the flow."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "CLIENT backend connectivity changes", "Test_Scnario": "Failure to connect to Pin Pad during refund to debit or credit card", "Test_Sce_Description": "Check the system's response when the connection to the Pin Pad fails during a refund transaction that requires the use of Pin Pad to refund back to the customer\u2019s debit or credit card. The system should display a relevant error message and allow the operator to wait for the Pin Pad to connect in the background or exit the flow."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "CLIENT backend connectivity changes", "Test_Scnario": "Communication with Subsystem over private cellular network", "Test_Sce_Description": "Verify the system's ability to communicate with the Subsystem over a private cellular network for various operations such as sending transaction-related data, non-transactional events, device mode changes, device audit parameters, and downloading remote lists."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "CLIENT backend connectivity changes", "Test_Scnario": "Communication with Subsystem over Wi-Fi", "Test_Sce_Description": "Check the system's ability to communicate with the Subsystem over Wi-Fi for various operations such as sending transaction-related data, non-transactional events, device mode changes, device audit parameters, and downloading remote lists."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Location", "Test_Scnario": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Sce_Description": "Verify that the operator is able to select the Additional Options menu on the SA Tool, select Route Parameters, update current location, and confirm that the Route Parameters are updated to the operator selected location. Also, check that the Route Parameters are automatically updated to the next station upon arrival at the next station."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Location", "Test_Scnario": "Operator Selects/Overrides Location (Manual Mode)", "Test_Sce_Description": "Check that the operator can manually select stops within the route from the Tap Card Screen when Auto-location is disabled on the SA Tool."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Location", "Test_Scnario": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Sce_Description": "Validate that the operator can change device mode between DISTANCE BASED TRANSIT and GO by selecting SP (DISTANCE BASED TRANSIT/GO) on the Login screen, entering their login credentials and selecting \u201clogin\u201d. Confirm that the SA Tool application validates credentials and operator is successfully logged in."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Location", "Test_Scnario": "SP Switching is disabled", "Test_Sce_Description": "Verify that when SP Switching is disabled, the operator is displayed a toast message notification notifying SP switching is disabled when they tap on the SP icon on login screen to switch between SPs."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Location", "Test_Scnario": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Sce_Description": "Check that when the operator selects desired current line which is different from the current line, the application resets the trip and stop selection. Confirm that the operator won\u2019t be able to save the current inspection parameters until they select the desired trip and stop."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Location", "Test_Scnario": "FLATFARE BASED SA Tool operator selects new route parameters", "Test_Sce_Description": "Verify that the FLATFARE BASED SA Tool operator can select the Additional Options menu on the SA Tool, select Route Parameters, select Surface (Bus / Streetcar) or Subway toggle, and save the selection."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Location", "Test_Scnario": "Operator enables auto-positioning for current location", "Test_Sce_Description": "Check that the operator can enable auto-location for route parameters on the SA Tool by selecting the Additional Options menu on the SA Tool, selecting Route Parameters, turning on automatic location, selecting the desired Line and Trip, and saving the changes."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Location", "Test_Scnario": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Sce_Description": "Verify that the SA Tool application receives remote configuration, enables/disables the auto location functionality based on the new configuration in background, and shows a greyed out icon when the operator had auto location enabled, and the feature was remotely disabled."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Location", "Test_Scnario": "Operator disables auto-location functionality", "Test_Sce_Description": "Check that the operator can disable the auto-location functionality on the SA Tool."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Selects/Overrides Location (Manual Mode)", "Test_Scnario": "Verify Operator Selects/Overrides Location (Manual Mode)", "Test_Sce_Description": "Check if the operator is able to select and override the current location in manual mode. The operator should be able to select the Additional Options menu on the SA Tool, select Route Parameters, and update the current location. The Route Parameters should be updated to the operator selected location."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Selects/Overrides Location (Manual Mode)", "Test_Scnario": "Verify Route Parameters are automatically updated", "Test_Sce_Description": "Check if the Route Parameters are automatically updated to the next station upon arrival at the next station. The system should detect the arrival at the next station and automatically update the Route Parameters."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Selects/Overrides Location (Manual Mode)", "Test_Scnario": "Verify Operator can continue selecting stops within the route", "Test_Sce_Description": "Check if the operator can continue selecting stops within the route from the Tap Card Screen after completing steps 1 \u2013 4 of the Main Use Case. The system should allow the operator to continue selecting stops within the route."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Selects/Overrides Location (Manual Mode)", "Test_Scnario": "Verify Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Sce_Description": "Check if the operator is able to switch device mode between DISTANCE BASED TRANSIT and GO. The operator should be able to select SP (DISTANCE BASED TRANSIT/GO) on the Login screen, enter their login credentials and select \u201clogin\u201d. The SA Tool application should validate credentials and operator should be successfully logged in."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Selects/Overrides Location (Manual Mode)", "Test_Scnario": "Verify SP Switching is disabled", "Test_Sce_Description": "Check if the SP Switching is disabled when the pre-condition is met. The application should enable / disable the SP switching functionality only if no operator is logged in. If an operator is logged in, the application should allow them to continue inspecting at their selected SP. Once they successfully sign out, they should only be able to inspect at the SP the device was provisioned for, if the switching functionality is disabled."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Selects/Overrides Location (Manual Mode)", "Test_Scnario": "Verify Operator enables auto-positioning for current location", "Test_Sce_Description": "Check if the operator is able to enable auto-location for route parameters on the SA Tool. The operator should be able to select the Additional Options menu on the SA Tool, select Route Parameters, and turn on automatic location. The SA Tool should automatically compute the current inspection location."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Selects/Overrides Location (Manual Mode)", "Test_Scnario": "Verify GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Sce_Description": "Check if the GPS functionality is remotely enabled/disabled on the SA Tool. The SA Tool application should receive remote configuration and enable/disable the auto location functionality based on the new configuration in background."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Selects/Overrides Location (Manual Mode)", "Test_Scnario": "Verify Operator disables auto-location functionality", "Test_Sce_Description": "Check if the operator is able to disable auto-location functionality. The operator should be able to select the Additional Options menu on the SA Tool, select Route Parameters, and turn off automatic location. The SA Tool should stop computing the current inspection location."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Scnario": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Sce_Description": "Verify that when the operator selects a new line but doesn't select a trip, the application resets the trip and stop selection. The apply button should be greyed out and the operator should not be able to save the current inspection parameters."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Scnario": "Auto-selection of first stop/station as inspection location", "Test_Sce_Description": "Verify that if the operator doesn\u2019t select a stop, the application auto-selects the first stop/station as the inspection location. The inspection location should be updated to Operator\u2019s selection."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Scnario": "Operator selects the desired trip and stop", "Test_Sce_Description": "Verify that the operator can select the desired trip and stop. In case of a bus, the operator should also be able to enter the vehicle id."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Scnario": "FLATFARE BASED SA Tool operator selects new route parameters", "Test_Sce_Description": "Verify that a FLATFARE BASED SA Tool operator can select new route parameters. The operator should be able to select the Additional Options menu on the SA Tool, select Route Parameters, and select Surface (Bus / Streetcar) or Subway toggle. The operator should also be able to fill in the mandatory fields."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Scnario": "Operator enables auto-positioning for current location", "Test_Sce_Description": "Verify that the operator can enable auto-location for route parameters on the SA Tool. The SA Tool should automatically compute the current inspection location and update the Stop ID to indicate to the operator the computed location."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Scnario": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Sce_Description": "Verify that the SA Tool application can receive remote configuration and enable/disable the auto location functionality based on the new configuration in the background."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Scnario": "Operator disables auto-location functionality", "Test_Sce_Description": "Verify that the operator can disable the auto-location functionality on the SA Tool."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Scnario": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Sce_Description": "Verify that the operator can select the Additional Options menu on the SA Tool, select Route Parameters, and update the current location. The Route Parameters should be updated to the operator selected location and should be automatically updated to the next station upon arrival at the next station."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Scnario": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Sce_Description": "Verify that the operator can change device mode between DISTANCE BASED TRANSIT and GO. The SA Tool application should validate credentials and the operator should be successfully logged in."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Scnario": "SP Switching is disabled", "Test_Sce_Description": "Verify that when SP Switching is disabled, the operator is displayed a toast message notification notifying SP switching is disabled."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "[FLATFARE BASED Only] FLATFARE BASED SA Tool operator selects new route parameters", "Test_Scnario": "FLATFARE BASED SA Tool operator selects new route parameters", "Test_Sce_Description": "Verify that the FLATFARE BASED SA Tool operator is able to select new route parameters. The operator should be able to select the Additional Options menu on the SA Tool, select Route Parameters, select Surface (Bus / Streetcar) or Subway toggle. If Surface selected, the following options should be displayed: Route ID, Vehicle ID, Stop ID, Region. If Station was selected, the Station option should be displayed. The operator should be able to save the selection."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "[FLATFARE BASED Only] FLATFARE BASED SA Tool operator selects new route parameters", "Test_Scnario": "FLATFARE BASED SA Tool operator does not select a trip", "Test_Sce_Description": "Verify that if the FLATFARE BASED SA Tool operator selects a new Line but doesn\u2019t select a trip, the apply button will be greyed out and Operator won\u2019t be able to save the current inspection parameters. The operator should be able to select the desired trip and stop, enter the vehicle id if it's a bus, and save the selection."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "[FLATFARE BASED Only] FLATFARE BASED SA Tool operator selects new route parameters", "Test_Scnario": "FLATFARE BASED SA Tool operator selects new route parameters with incomplete mandatory fields", "Test_Sce_Description": "Verify that the FLATFARE BASED SA Tool operator is not able to save the selection if all of the mandatory fields are not filled in. The option to save/apply the selection should not be enabled until all of the mandatory fields are filled in."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "[FLATFARE BASED Only] FLATFARE BASED SA Tool operator selects new route parameters", "Test_Scnario": "FLATFARE BASED SA Tool operator enables auto-positioning for current location", "Test_Sce_Description": "Verify that the FLATFARE BASED SA Tool operator is able to enable auto-location for route parameters on the SA Tool. The operator should be able to select the Additional Options menu on the SA Tool, select Route Parameters, turn on automatic location, select the desired Line and Trip, and save the changes."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "[FLATFARE BASED Only] FLATFARE BASED SA Tool operator selects new route parameters", "Test_Scnario": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Sce_Description": "Verify that the SA Tool application receives remote configuration and enables/disables the auto location functionality based on the new configuration in background. If the operator had auto location enabled, and the feature was remotely disabled, a greyed out icon should be shown."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "[FLATFARE BASED Only] FLATFARE BASED SA Tool operator selects new route parameters", "Test_Scnario": "Operator disables auto-location functionality", "Test_Sce_Description": "Verify that the FLATFARE BASED SA Tool operator is able to disable auto-location functionality. The operator should be able to select the Additional Options menu on the SA Tool, select Route Parameters, and turn off automatic location."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator enables auto-positioning for current location", "Test_Scnario": "SA Tool auto-computes current location", "Test_Sce_Description": "Verify that the SA Tool application is able to auto-compute the current location when the auto-location feature is enabled. The application should compute the distance from all stops on the selected route and trip at a configurable duration. Once within a stop radius, the device should use this stop as the current stop on SA Tool application. The device should continue to use this stop as the current stop until a new stop radius is entered."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator enables auto-positioning for current location", "Test_Scnario": "GPS signal quality changes", "Test_Sce_Description": "Verify that the SA Tool application is able to detect and reflect changes in GPS signal quality. The GPS signal quality indicator on the home screen should change to reflect the current signal quality."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator enables auto-positioning for current location", "Test_Scnario": "CLIENT backend connectivity changes", "Test_Sce_Description": "Verify that the SA Tool application is able to detect and reflect changes in connectivity to the CLIENT backend. The network icon should update to reflect the current connectivity status with the network which reflects the status with CLIENT backend."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator enables auto-positioning for current location", "Test_Scnario": "Operator Overrides Selects/Overrides Current Location", "Test_Sce_Description": "Verify that the operator is able to select/override the current location for inspection / fare payment purposes on the SA Tool. The Route Parameters should be updated to the operator selected location and should be automatically updated to the next station upon arrival at the next station."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator enables auto-positioning for current location", "Test_Scnario": "Operator enables auto-positioning for current location", "Test_Sce_Description": "Verify that the operator is able to enable auto-location for route parameters on the SA Tool. The SA Tool should automatically compute the current inspection location and the auto location signal quality indicator on the home screen should start reflecting the auto location signal quality. The Stop ID should update to indicate to the operator the computed location."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator enables auto-positioning for current location", "Test_Scnario": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Sce_Description": "Verify that the SA Tool application is able to receive remote configuration and enables/disables the auto location functionality based on the new configuration in background. If the operator had auto location enabled, and the feature was remotely disabled, a greyed out icon should be shown."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator enables auto-positioning for current location", "Test_Scnario": "Operator disables auto-location functionality", "Test_Sce_Description": "Verify that the operator is able to disable the auto-location functionality on the SA Tool. The application should stop auto-computing the current location and the auto location signal quality indicator on the home screen should stop reflecting the auto location signal quality."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Scnario": "SA Tool application receives remote configuration", "Test_Sce_Description": "Verify that the SA Tool application correctly receives and applies remote configuration changes. This includes enabling or disabling the auto location functionality based on the new configuration in the background. If the operator had auto location enabled, and the feature was remotely disabled, a greyed out icon should be shown."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Scnario": "Operator disables auto-location functionality", "Test_Sce_Description": "Verify that the operator can successfully disable the auto-location functionality. After disabling, the changes should be saved and location positioning and calculation should be disabled."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Scnario": "SA Tool auto-computes current Location", "Test_Sce_Description": "Verify that the SA Tool correctly auto-computes the current location. The application should compute the distance from all stops on the selected route and trip at a configurable duration. Once within a stop radius, the device should use this stop as the current stop on SA Tool application."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Scnario": "GPS Signal quality changes", "Test_Sce_Description": "Verify that the SA Tool correctly responds to changes in GPS signal quality. The GPS signal quality indicator on the home screen should change to reflect the new signal quality."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Scnario": "CLIENT backend connectivity changes", "Test_Sce_Description": "Verify that the SA Tool correctly responds to changes in connectivity to the CLIENT backend. The network icon should update to reflect the connectivity status with the network which reflects the status with CLIENT backend."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Scnario": "Operator Overrides Selects/Overrides Current Location", "Test_Sce_Description": "Verify that the operator can successfully select or override the current location for inspection / fare payment purposes on the SA Tool. The Route Parameters should be updated to the operator selected location and should be automatically updated to the next station upon arrival at the next station."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Scnario": "SA Tool application is running in the background", "Test_Sce_Description": "Verify that the SA Tool application can successfully run in the background while the operator uses authorized third-party applications. The application should disconnect from all peripherals to conserve battery life and should resume functionality once the operator switches back to the SA Tool application."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Scnario": "SA Tool in Revenue Mode", "Test_Sce_Description": "Verify that the SA Tool correctly operates in Revenue Mode. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The tool should only have access to the EPT in the revenue mode and should accept credit and debit payments."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Scnario": "SA Tool in Training Mode", "Test_Sce_Description": "Verify that the SA Tool correctly operates in Training Mode. In this mode, the operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Scnario": "SA Tool Operators", "Test_Sce_Description": "Verify that the SA Tool correctly provides functionality to SA Tool Operators. Operators should have access to Revenue Mode, Sales, Fare Payment, Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator disables auto-location functionality", "Test_Scnario": "SA Tool auto-computes current location", "Test_Sce_Description": "Verify that the SA Tool application is able to auto-compute the current location when the auto-location functionality is enabled. The application should be able to compute the distance from all stops on the selected route and trip at a configurable duration. Once within a stop radius, the device should use this stop as the current stop on SA Tool application. The device should continue to use this stop as the current stop until a new stop radius is entered."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator disables auto-location functionality", "Test_Scnario": "GPS Signal quality changes", "Test_Sce_Description": "Verify that the SA Tool application is able to detect and reflect changes in the GPS signal quality. The GPS signal quality indicator on the home screen should change to reflect the same when the GPS signal quality changes."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator disables auto-location functionality", "Test_Scnario": "CLIENT backend connectivity changes", "Test_Sce_Description": "Verify that the SA Tool application is able to detect and reflect changes in the connectivity status with the CLIENT backend. The network icon should update to reflect the connectivity status with the network which reflects the status with CLIENT backend."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator disables auto-location functionality", "Test_Scnario": "Operator Overrides Selects/Overrides Current Location", "Test_Sce_Description": "Verify that the operator is able to select/override the current location for inspection / fare payment purposes on the SA Tool. The Route Parameters should be updated to the operator selected location and should be automatically updated to the next station upon arrival at the next station."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator disables auto-location functionality", "Test_Scnario": "Operator disables auto-location functionality", "Test_Sce_Description": "Verify that the operator is able to disable the auto-location functionality on the SA Tool. When the operator turns off auto-location and saves the changes, location positioning and calculation should be disabled."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator disables auto-location functionality", "Test_Scnario": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Sce_Description": "Verify that the SA Tool application is able to receive remote configuration and enables/disables the auto location functionality based on the new configuration in background. If the operator had auto location enabled, and the feature was remotely disabled, a greyed out icon should be shown."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator disables auto-location functionality", "Test_Scnario": "Operator enables auto-positioning for current location", "Test_Sce_Description": "Verify that the operator is able to enable auto-location for route parameters on the SA Tool. The SA Tool should automatically compute the current inspection location when the operator turns on automatic location and selects the desired Line and Trip. The auto location signal quality indicator on the home screen should start reflecting the auto location signal quality."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Scnario": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Sce_Description": "Verify that the operator is able to select the Additional Options menu on the SA Tool, select Route Parameters, update the current location, and confirm that the Route Parameters are updated to the operator selected location. Also, ensure that the Route Parameters are automatically updated to the next station upon arrival at the next station."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Scnario": "Operator Selects/Overrides Location (Manual Mode)", "Test_Sce_Description": "Verify that the operator can manually select and override the location when the auto-location is disabled on the SA Tool. The operator should be able to continue selecting stops within the route from the Tap Card Screen."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Scnario": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Sce_Description": "Verify that the operator is able to select SP (DISTANCE BASED TRANSIT/GO) on the Login screen, enter their login credentials and select \u201clogin\u201d. The SA Tool application should validate the credentials and the operator should be successfully logged in. The operator should have access to different features depending on the TA selected on the Login screen."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Scnario": "SP Switching is disabled", "Test_Sce_Description": "Verify that when SP Switching is disabled, the operator can tap on the SP icon on the login screen to switch between SPs and is displayed a toast message notification notifying SP switching is disabled."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Scnario": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Sce_Description": "Verify that when the operator selects a new line but doesn\u2019t select a trip, the application resets the trip and stop selection. The operator should be able to select the desired trip and stop, and save the selection. If the operator doesn\u2019t select a stop, the application should auto-select the first stop/station as the inspection location."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Scnario": "[FLATFARE BASED Only] FLATFARE BASED SA Tool operator selects new route parameters", "Test_Sce_Description": "Verify that the FLATFARE BASED SA Tool operator can select the Additional Options menu on the SA Tool, select Route Parameters, select Surface (Bus / Streetcar) or Subway toggle, and save the selection. The option to save/apply the selection should not be enabled until all of the mandatory fields are filled in."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Scnario": "Operator enables auto-positioning for current location", "Test_Sce_Description": "Verify that the operator can select the Additional Options menu on the SA Tool, select Route Parameters, turn on automatic location, select the desired Line and Trip, and save the changes. The SA Tool should automatically compute the current inspection location."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Scnario": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Sce_Description": "Verify that the SA Tool application can receive remote configuration and enable/disable the auto location functionality based on the new configuration in the background. If the operator had auto location enabled, and the feature was remotely disabled, a greyed out icon should be shown."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Scnario": "Operator disables auto-location functionality", "Test_Sce_Description": "Verify that the operator can disable the auto-location functionality on the SA Tool."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Scnario": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Sce_Description": "Verify that the operator is able to switch the device mode between DISTANCE BASED TRANSIT and GO. The operator should be able to select the desired mode on the login screen, enter their valid credentials, and successfully log in. The application should validate the credentials and allow the operator to access the features depending on the selected mode."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Scnario": "Operator Access to Features Based on Selected Mode", "Test_Sce_Description": "Verify that the operator has access to the correct features based on the mode they selected during login. If the operator signs in as GO, they should have access to GO Route Parameters, GO Fare Payments & Inspections, and GO & DISTANCE BASED TRANSIT Sales. If the operator signs in as DISTANCE BASED TRANSIT, they should have access to DISTANCE BASED TRANSIT Route Parameters, DISTANCE BASED TRANSIT Fare Payments & Inspections, and GO & DISTANCE BASED TRANSIT Sales."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Scnario": "SP Switching is Disabled", "Test_Sce_Description": "Verify that the application correctly handles the scenario when SP switching is disabled. The operator should be able to tap on the SP icon on the login screen, but a toast message notification should be displayed notifying that SP switching is disabled."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Scnario": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Sce_Description": "Verify that the operator is able to select the Additional Options menu on the SA Tool, select Route Parameters, and update the current location. The Route Parameters should be updated to the operator selected location and should be automatically updated to the next station upon arrival at the next station."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Scnario": "Operator Selects/Overrides Location in Manual Mode", "Test_Sce_Description": "Verify that the operator is able to select stops within the route from the Tap Card Screen when auto-location is disabled on the SA Tool."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Scnario": "Operator Access to Revenue Mode", "Test_Sce_Description": "Verify that the operator is able to select Revenue Mode during login and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA tool should only have access to the EPT in the revenue mode and should accept credit and debit payments."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Scnario": "Operator Access to Training Mode", "Test_Sce_Description": "Verify that the operator is able to select Training Mode during login and mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Scnario": "SA Tool Remote Access", "Test_Sce_Description": "Verify that the SA Tool operator is able to remotely access the tool and perform necessary operations."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Scnario": "Unblock Farecard", "Test_Sce_Description": "Verify that the SA Tool operator is able to unblock a blocked Farecard."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Scnario": "Modify Card Concession", "Test_Sce_Description": "Verify that the SA Tool operator is able to modify the concession on a card."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "SP Switching is disabled", "Test_Sce_Description": "Verify that when SP Switching is disabled, the operator is unable to switch between SPs. A toast message notification should be displayed notifying that SP switching is disabled. This should occur regardless of whether an operator is logged in or not."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "Adding Media to the Pilot List", "Test_Sce_Description": "Verify that an operator can add media to the Pilot list. The operator should be able to select the 'add' option and any media tapped on top should be added to the pilot list. A confirmation dialogue should be presented to the user stating 'Contactless Successfully Added' along with the DPAN."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "Removing Media from the Pilot List", "Test_Sce_Description": "Verify that an operator can remove media from the Pilot list. The operator should be able to select the 'remove' option and any media tapped on top should be removed from the pilot list. A confirmation dialogue should be presented to the user stating 'Contactless Successfully Removed' along with the DPAN."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "Media is already on the pilot list", "Test_Sce_Description": "Verify that when an operator attempts to add a media that is already on the pilot list, a confirmation dialogue is presented to the user stating 'Notice' and 'This card is already on the pilot list'."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "Media is not on the Pilot list and user is attempting to remove media", "Test_Sce_Description": "Verify that when an operator attempts to remove a media that is not on the pilot list, a confirmation dialogue is presented to the user stating 'Contactless Successfully Removed' along with the DPAN. ATS should always provide a successful message even if a media that has already been removed is attempted to be removed again."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "Media that has failed ODA check is attempted to be added/removed from the Pilot", "Test_Sce_Description": "Verify that when an operator attempts to add or remove a media that has failed ODA check, the device rejects the tap and a confirmation dialogue is presented to the user stating 'Unsuccessful' and 'This card is not compatible'."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "Media that is expired is attempted to be added/removed from the Pilot", "Test_Sce_Description": "Verify that when an operator attempts to add or remove an expired media, the device rejects the tap and a confirmation dialogue is presented to the user stating 'Unsuccessful' and 'This card is expired'."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "Device is Offline and user attempts to add or remove media from pilot", "Test_Sce_Description": "Verify that when the device is offline and the user attempts to add or remove media from the pilot list, the appropriate error message is displayed and the operation is not successful."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "SA Tool in Out-of-Service State", "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "SA Tool in Standby State", "Test_Sce_Description": "Verify that when the SA Tool is in Standby state (screen turned off), an operator must press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "SA Tool application is running in the background", "Test_Sce_Description": "Verify that when the SA Tool application is running in the background, the application will be in Standby State. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "SA Tool in Revenue Mode", "Test_Sce_Description": "Verify that when the operator logs on and selects the Revenue Mode, they should be able to interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "SA Tool in Training Mode", "Test_Sce_Description": "Verify that when the operator logs on and selects the Training Mode, they should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "SA Tool Operators", "Test_Sce_Description": "Verify that SA Tool Operators have access to Revenue Mode and can perform core functionality such as Sales, Fare Payment, Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Out-of-Service State", "Test_Scnario": "Testing the Out-of-Service State of the SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in the 'Out-of-Service' state. The test will ensure that the tool is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. It will also verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application will not close the operator\u2019s shift unless the operator has requested to sign-off."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Out-of-Service State", "Test_Scnario": "Testing the Standby State of the SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in the 'Standby' state. The test will ensure that the screen is turned off and the SA Tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life. It will also verify that an operator must press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Out-of-Service State", "Test_Scnario": "Testing the SA Tool application running in the background", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the application is running in the background. The test will ensure that the SA Tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life. It will also verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Out-of-Service State", "Test_Scnario": "Testing the Revenue Mode of the SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in the 'Revenue' mode. The test will ensure that the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. It will also verify that SA tool will only have access to the EPT in the revenue mode and will accept the credit and debit payments."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Out-of-Service State", "Test_Scnario": "Testing the Training Mode of the SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in the 'Training' mode. The test will ensure that the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. It will also verify that only non-revenue Farecard will be accepted in Training Mode."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Out-of-Service State", "Test_Scnario": "Testing the Configurable Functionality of the SA Tool", "Test_Sce_Description": "This scenario will test the configurable functionality of the SA Tool. The test will ensure that the SA Tool Operators, SA Tool Operators - 3rd Party, SDistance based Transitrvisors, Maintenance, Training have the correct access and functionality as per the requirements."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Out-of-Service State", "Test_Scnario": "Testing the Device Parameter Tool Configurations of the SA Tool", "Test_Sce_Description": "This scenario will test the Device Parameter Tool Configurations of the SA Tool. The test will ensure that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are working as expected."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Out-of-Service State", "Test_Scnario": "Testing the Out-of-Service State with Modified Pre-Conditions", "Test_Sce_Description": "This scenario will test the Out-of-Service State of the SA Tool with Modified Pre-Conditions. The test will ensure that the device will not detect the media and remains in Out-of-Service State when a customer attempts to tap their Open Payments Media on the card reader."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Out-of-Service State", "Test_Scnario": "Testing the SA Tool when configured for Farecard reversals only", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is configured for only farecard reversals. The test will ensure that the 'Only Available for Farecards' error message is provided to the cardholder when a customer attempts to tap their Open Payments Media on the card reader."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Out-of-Service State", "Test_Scnario": "Testing the SA Tool when an Open Payments media not on the approved media list is tapped on the device", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when an Open Payments media that is not on the approved media list is tapped on the device. The test will ensure that the 'Declined \u2013 Not Accepted, Tap Farecard' screen is provided to the cardholder."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Standby State", "Test_Scnario": "Switching SA Tool from Standby to In-Service State", "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device. The SA Tool should switch on the screen and display the device lock screen. The operator should be able to sign-in to the SA Tool application as an existing user. Upon a successful sign-in, the SA Tool should enter the in-service state and display the shift preferences screen."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Standby State", "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login", "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state before the configurable threshold value that requires logging in. The SA Tool should display the home screen without requiring the operator to sign-in and navigate to the home screen."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Standby State", "Test_Scnario": "Switching SA Tool from In-Service to Standby State", "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once. The SA Tool should turn off the screen and go into standby state."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Standby State", "Test_Scnario": "Switching SA Tool from In-Service to Standby State when navigating away from the SA Tool Application", "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator navigates away from the SA Tool Application. The SA Tool application should run in the background and go into standby state."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Standby State", "Test_Scnario": "Change SP after switching device from standby to in-service state", "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Standby State", "Test_Scnario": "SA Tool in Out-of-Service State", "Test_Sce_Description": "Verify that the SA Tool is unable to accept a Farecard for any kind of functionality when it is in \u201cOut-of-Service\u201d state. The SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off when the device goes into out-of-service state."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Standby State", "Test_Scnario": "SA Tool in Standby State", "Test_Sce_Description": "Verify that the SA Tool successfully switches into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time. The SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Standby State", "Test_Scnario": "SA Tool in Standby State when running in the background", "Test_Sce_Description": "Verify that the SA Tool goes into Standby State when the SA Tool PDS application is running but is not in the foreground. The SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Standby State", "Test_Scnario": "SA Tool in Revenue Mode", "Test_Sce_Description": "Verify that the SA Tool operator can interact with customers in the Revenue Mode. The operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Standby State", "Test_Scnario": "SA Tool in Training Mode", "Test_Sce_Description": "Verify that the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in the Training Mode. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "SA Tool application is running in the background", "Test_Scnario": "Launching the SA Tool Application", "Test_Sce_Description": "Verify that an authorized operator can successfully launch the SA Tool application from the home screen of the SA Tool device. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "SA Tool application is running in the background", "Test_Scnario": "Power on SA Tool: continuous self-diagnostic check is unsuccessful (network connection not available)", "Test_Sce_Description": "Verify that the SA Tool performs continuous diagnostic checks and correctly identifies when the device is unable to connect to a network. This should be indicated on the SA Tool. The application should still launch and the sign-in screen should be displayed, indicating that the SA Tool can operate in offline mode."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "SA Tool application is running in the background", "Test_Scnario": "Power on SA Tool: initial self-diagnostic check is unsuccessful", "Test_Sce_Description": "Verify that the SA Tool performs initial self-diagnostic checks and correctly identifies critical failures. The SA Tool should go to error state when critical failures are found."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "SA Tool application is running in the background", "Test_Scnario": "Power on SA Tool: Continuous self-diagnostic check is unsuccessful (storage, battery or secure element)", "Test_Sce_Description": "Verify that the SA Tool application performs the continuous self-diagnostics for storage, battery or secure element and correctly identifies errors or failures in any of these elements. The SA Tool should go to out-of-service state and a critical event should be sent to SOTI Mobicontrol and CSM."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "SA Tool application is running in the background", "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications", "Test_Sce_Description": "Verify that an authorized operator can successfully switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button present on the android navigation bar."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "SA Tool application is running in the background", "Test_Scnario": "The application is already launched and is running in the background", "Test_Sce_Description": "Verify that if the application that the operator intends to launch is already running in the device background, the operator can tap on the App Overview button on the bottom navigation bar, navigate through the list of open applications until they find the desired application, and press on the desired application to launch it."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "SA Tool application is running in the background", "Test_Scnario": "SA Tool application is running in the background", "Test_Sce_Description": "Verify that if the SA Tool PDS application is running but is not in the foreground (i.e., the operator is using another application), the application will be in Standby State. The SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life. The operator should be able to resume the functionality of the SA Tool application by switching back to the SA Tool application."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "SA Tool application is running in the background", "Test_Scnario": "Revenue Mode and Training Mode", "Test_Sce_Description": "Verify that upon logon, operators with access to both modes can select which Mode they would like to operate their shift in. 'Training' users, as defined in the User Management Portal group, should only have access to Training mode. In Revenue Mode, the operator should be able to interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. In Training Mode, the operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Revenue Mode", "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit", "Test_Sce_Description": "Verify that the SA Tool correctly handles a split payment refund/reversal where at least one mean of payment is credit or debit. The tool should prompt the operator to confirm cancellation, reverse non-credit/debit payments automatically, and require operator intervention for credit/debit refunds. Upon successful processing, the customer should be repaid and a receipt printed. If processing is unsuccessful, the operator should have the option to request a cash return from the customer."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Revenue Mode", "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit", "Test_Sce_Description": "Verify that the SA Tool correctly handles a split payment refund/reversal where none of the means of payment are credit or debit. The tool should prompt the operator to confirm cancellation and automatically reverse the payment means. A customer and merchant receipt should be printed and the tool should return to the home screen."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Revenue Mode", "Test_Scnario": "Exceeding Maximum Product Quantity", "Test_Sce_Description": "Verify that the SA Tool prevents the operator from adding more than the maximum allowable quantity of a product to the shopping cart. The operator should be informed that they must process the customer's request in multiple transactions."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Revenue Mode", "Test_Scnario": "No Eligible Products for Refund or Reversal", "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where no products are eligible for refund or reversal. The tool should display an error message which the operator must acknowledge, and then return to the main menu."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Revenue Mode", "Test_Scnario": "Eligible Products for Refund/Reversal Not Matching Customer Request", "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the products eligible for refund or reversal are not what the customer requested. The operator should inform the customer that their product is not eligible and return to the main menu."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Revenue Mode", "Test_Scnario": "Internet Connection Failure", "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the internet connection is lost during a flow that requires internet. The tool should time out and display an error message with options to try again or cancel."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Revenue Mode", "Test_Scnario": "Out-of-Service State", "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the device goes into an out-of-service state. The application should not close the operator's shift unless the operator has requested to sign-off."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Revenue Mode", "Test_Scnario": "Standby State", "Test_Sce_Description": "Verify that the SA Tool correctly enters and exits a standby state, during which the screen is turned off and the tool disconnects from all peripherals. The operator should be able to press the power button and sign-in to return the device to an in-service state."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Revenue Mode", "Test_Scnario": "SA Tool Running in Background", "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the application is running but not in the foreground. The tool should enter a standby state and disconnect from all peripherals. The operator should be able to switch back to the SA Tool application to resume functionality."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Revenue Mode", "Test_Scnario": "Revenue Mode Functionality", "Test_Sce_Description": "Verify that the SA Tool correctly operates in Revenue Mode, allowing the operator to interact with customers, perform inspections, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The tool should only have access to the EPT in this mode and accept credit and debit payments."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Revenue Mode", "Test_Scnario": "Training Mode Functionality", "Test_Sce_Description": "Verify that the SA Tool correctly operates in Training Mode, allowing the operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. The tool should not accept credit/debit payments in this mode and all printed tickets should indicate they were printed in training mode."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Training Mode", "Test_Scnario": "Verify the functionality of SA Tool in Out-of-Service state", "Test_Sce_Description": "Check if the SA Tool is unable to accept a Farecard for any kind of functionality when it is in \u201cOut-of-Service\u201d state. Also, verify if the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off when the device goes into out-of-service state."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Training Mode", "Test_Scnario": "Verify the functionality of SA Tool in Standby state", "Test_Sce_Description": "Check if the SA Tool suspends all functionality and disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life when it is in Standby state. Also, verify if the operator can press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Training Mode", "Test_Scnario": "Verify the functionality of SA Tool when the application is running in the background", "Test_Sce_Description": "Check if the SA Tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life when the application is running in the background. Also, verify if the operator can resume the functionality of the SA Tool application by switching back to the SA Tool application."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Training Mode", "Test_Scnario": "Verify the functionality of SA Tool in Revenue Mode", "Test_Sce_Description": "Check if the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in the Revenue Mode. Also, verify if the SA tool only has access to the EPT in the revenue mode and accepts the credit and debit payments."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Training Mode", "Test_Scnario": "Verify the functionality of SA Tool in Training Mode", "Test_Sce_Description": "Check if the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in the Training Mode. Also, verify if only non-revenue Farecard is accepted in Training Mode and payment by credit /debit is not enabled."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Training Mode", "Test_Scnario": "Verify the functionality of Operator Overrides Selects/Overrides Current Route Parameters", "Test_Sce_Description": "Check if the operator can select the Additional Options menu on the SA Tool, select Route Parameters, update current location, and the Route Parameters are updated to the operator selected location. Also, verify if the Route Parameters are automatically updated to the next station upon arrival at the next station."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Training Mode", "Test_Scnario": "Verify the functionality of Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Sce_Description": "Check if the operator can select SP (DISTANCE BASED TRANSIT/GO) on the Login screen, enter their login credentials and select \u201clogin\u201d, and the SA Tool application validates credentials and operator is successfully logged in. Also, verify if the features the operator will have access to only depend on the TA selected on the Login screen."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on / off / reboot SA Tool", "Use_Case_Name": "Training Mode", "Test_Scnario": "Verify the functionality of SP Switching is disabled", "Test_Sce_Description": "Check if the operator is displayed a toast message notification notifying SP switching is disabled when the operator taps on the SP icon on login screen to switch between SPs."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "Power On SA Tool", "Test_Sce_Description": "Verify that the SA Tool powers on successfully when the power button is pressed and held. The device should boot up, perform an initial self-diagnostic check without finding errors or failures, and require the operator to enter the OS Lock screen passcode. After a valid passcode is entered, the device should launch the Android home screen of the SA Tool device."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "SA Tool Memory Threshold", "Test_Sce_Description": "Verify that the SA Tool does not power on if the memory available is below the low memory threshold. An appropriate error message should be displayed."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "SA Tool Battery Threshold", "Test_Sce_Description": "Verify that the SA Tool does not power on if the battery level is below the low battery threshold. An appropriate error message should be displayed."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "SA Tool Lock Screen Passcode", "Test_Sce_Description": "Verify that the SA Tool does not proceed to the Android home screen if an invalid passcode is entered at the lock screen. An appropriate error message should be displayed."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "SA Tool Application Launch", "Test_Sce_Description": "Verify that the operator can successfully launch the SA Tool application from the Android home screen of the SA Tool device."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "SA Tool 3rd Party Application Launch", "Test_Sce_Description": "Verify that the operator can successfully launch any of the authorized third-party applications from the Android home screen of the SA Tool device."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "SA Tool Farecard Acceptance", "Test_Sce_Description": "Verify that the SA Tool accepts both V1 and V2 Farecards."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "SA Tool Non-revenue Farecard Acceptance", "Test_Sce_Description": "Verify that the SA Tool accepts non-revenue fare cards only in Training mode."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "SA Tool Account Status Update", "Test_Sce_Description": "Verify that when the device connects to the User Management service, it updates the account status with the latest information related to the account."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "SA Tool Language Selection", "Test_Sce_Description": "Verify that the language of text displayed on the screen of the SA Tool depends only upon the current language selection of the application."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "SA Tool Fare Payment", "Test_Sce_Description": "Verify that when making a fare payment as a result of a failed inspection on the SA Tool, a customer can pay fare with any media type."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "SA Tool Tap Performance", "Test_Sce_Description": "Verify that the tap performance (throughput rate) of the SA Tool meets current performance for existing PDS devices."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "SA Tool Latency Times", "Test_Sce_Description": "Verify that the latency times for Open Payments, Mobile Wallet, SVC, Bytemark, TICKET when used for inspection, forepayment and sales flow are similar to existing PDS devices."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "SA Tool Connection to Ingenico EX8000 PIN Pad", "Test_Sce_Description": "Verify that the SA Tool connects to the Ingenico EX8000 PIN Pad in an integrated mode only."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "SA Tool Inspection Fare & Penalty Fare Functionality", "Test_Sce_Description": "Verify that the SA Tool does not support Inspection Fare & Penalty Fare functionality from the Panasonic MK2 Inspection Device as the MerchantID associated to the integrated card reader (PD20) must be registered for Fare Payment functionality."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Device Parameter Tool Configurations", "Test_Scnario": "Power On SA Tool", "Test_Sce_Description": "Verify that the SA Tool powers on correctly when the power button is pressed and held. The device should boot up, perform an initial self-diagnostic without finding errors or failures, and require the operator to enter the OS Lock screen passcode. After a valid passcode is entered, the device should launch the Android home screen of the SA Tool device."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Device Parameter Tool Configurations", "Test_Scnario": "Out-of-Service State", "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Device Parameter Tool Configurations", "Test_Scnario": "Standby State", "Test_Sce_Description": "Verify that the SA Tool can enter a Standby state where the screen turns off after remaining inactive for a configurable period of time or when the physical power button is pressed. In this state, the SA Tool should disconnect from all peripherals to conserve battery life. An operator should be able to bring the device back into In-Service state by pressing the physical power button and signing in to the device lock screen."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Device Parameter Tool Configurations", "Test_Scnario": "SA Tool application running in the background", "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground, the application should be in Standby State and disconnect from all peripherals to conserve battery life."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Device Parameter Tool Configurations", "Test_Scnario": "Revenue Mode", "Test_Sce_Description": "Verify that upon logon, the operator can select the Revenue Mode to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA Tool should only have access to the EPT in the revenue mode and accept credit and debit payments."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Device Parameter Tool Configurations", "Test_Scnario": "Training Mode", "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Device Parameter Tool Configurations", "Test_Scnario": "Device Parameter Tool Configurations", "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are correctly implemented and function as expected."}]