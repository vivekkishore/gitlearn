[{"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product with Lower Premium Fare", "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Performance Test for Fare Payment", "Test_Sce_Description": "Verify that the system is able to handle multiple fare payments simultaneously without any performance degradation."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Security Test for Fare Payment", "Test_Sce_Description": "Verify that the system securely processes fare payments and does not expose any sensitive customer information during the transaction."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the special event fare."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product with Lower Premium Fare", "Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the special event fare."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, "Test Scenario 7": {"Test scenarios": "Performance Test for Fare Payment", "Description": "Verify that the system is able to handle multiple fare payments simultaneously without any performance degradation."}, "Test Scenario 8": {"Test scenarios": "Security Test for Fare Payment", "Description": "Verify that the system securely processes fare payments and does not expose any sensitive customer information during the transaction."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment on SA Tool with Premium Service Class and Valid Regular Service Transfer Product", "Test_Sce_Description": "Verify that the fare payment is successfully made on the SA Tool when the Service Class is Premium or Special Event, Farecard has a valid Regular Service Transfer Product and the tap is within Transfer Window. The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse and this should be communicated back to the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Test_Sce_Description": "Verify that the fare payment is successfully made on the SA Tool when the Farecard has reached off peak Daily Cap Limit, Farecard has not reached Peak Daily Cap limit and Farecard is out of transfer window. The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse and this should be communicated back to the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Test_Sce_Description": "Verify that a fare upgrade occurs when a tap on a premium service route/location is made after previously riding on a Special Event service route within the transfer window. The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse and this should be communicated back to the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Test_Sce_Description": "Verify that a free transfer occurs when a tap on a premium service route/location is made after previously riding on a Special Event service route within the transfer window. The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse and this should be communicated back to the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Valid Non-Adult Concession", "Test_Sce_Description": "Verify that the fare payment is successfully made on the SA Tool when the customer\u2019s Farecard has a Valid Non-Adult concession. The SA Tool should compute and deduct the Upgrade fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Valid Child Concession", "Test_Sce_Description": "Verify that the fare payment is successfully made on the SA Tool when the customer\u2019s Farecard has a Valid Child concession. The SA Tool should deduct the correct Child Concession fare and display the successful Child fare payment screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the fare payment is successfully made on the SA Tool when the operator inspects a customer\u2019s farecard and determines that they have not paid a fare. The operator should be able to select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment on SA Tool with Premium Service Class and Valid Regular Service Transfer Product", "Description": "Verify that the fare payment is successfully made on the SA Tool when the Service Class is Premium or Special Event, Farecard has a valid Regular Service Transfer Product and the tap is within Transfer Window. The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse and this should be communicated back to the SA Tool."}, "Test Scenario 2": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Description": "Verify that the fare payment is successfully made on the SA Tool when the Farecard has reached off peak Daily Cap Limit, Farecard has not reached Peak Daily Cap limit and Farecard is out of transfer window. The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse and this should be communicated back to the SA Tool."}, "Test Scenario 3": {"Test scenarios": "Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Description": "Verify that a fare upgrade occurs when a tap on a premium service route/location is made after previously riding on a Special Event service route within the transfer window. The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse and this should be communicated back to the SA Tool."}, "Test Scenario 4": {"Test scenarios": "Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Description": "Verify that a free transfer occurs when a tap on a premium service route/location is made after previously riding on a Special Event service route within the transfer window. The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse and this should be communicated back to the SA Tool."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Valid Non-Adult Concession", "Description": "Verify that the fare payment is successfully made on the SA Tool when the customer\u2019s Farecard has a Valid Non-Adult concession. The SA Tool should compute and deduct the Upgrade fare."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Valid Child Concession", "Description": "Verify that the fare payment is successfully made on the SA Tool when the customer\u2019s Farecard has a Valid Child concession. The SA Tool should deduct the correct Child Concession fare and display the successful Child fare payment screen."}, "Test Scenario 7": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the fare payment is successfully made on the SA Tool when the operator inspects a customer\u2019s farecard and determines that they have not paid a fare. The operator should be able to select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after previously reaching off peak daily cap (outside the transfer window). The system should also ensure that the farecard has not reached the Peak Daily Cap limit."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The system should also ensure that the farecard has a valid Special Event Transfer Product."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s Farecard has a Valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the correct Child Concession fare from the ePurse balance when a fare payment is made and the customer\u2019s Farecard has a Valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should also record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Performance of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame, ensuring that the system performance is not compromised during peak hours or high transaction volumes."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Security of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is secure, ensuring that customer\u2019s ePurse balance and concession information are not compromised during the transaction. The system should also ensure that the fare payment information is securely stored and cannot be accessed by unauthorized users."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after previously reaching off peak daily cap (outside the transfer window). The system should also ensure that the farecard has not reached the Peak Daily Cap limit."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The system should also ensure that the farecard has a valid Special Event Transfer Product."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s Farecard has a Valid Non-Adult concession."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the correct Child Concession fare from the ePurse balance when a fare payment is made and the customer\u2019s Farecard has a Valid Child concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should also record both the fare payment and inspection transactions."}, "Test Scenario 6": {"Test scenarios": "Performance of Fare Payment Process", "Description": "Verify that the fare payment process is completed within the acceptable time frame, ensuring that the system performance is not compromised during peak hours or high transaction volumes."}, "Test Scenario 7": {"Test scenarios": "Security of Fare Payment Process", "Description": "Verify that the fare payment process is secure, ensuring that customer\u2019s ePurse balance and concession information are not compromised during the transaction. The system should also ensure that the fare payment information is securely stored and cannot be accessed by unauthorized users."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession", "Test_Sce_Description": "This scenario will validate if the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling ePurse balance less than fare amount", "Test_Sce_Description": "This scenario will test how the SA Tool handles situations where the customer's ePurse balance is less than the fare amount. The tool should put the Farecard into overdraft (negative balance)."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing valid transfer product within Intra-agency Transfer window", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing valid transfer product within Inter-agency Transfer window", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product from other transit agency and computes the fare based on the transfer product and the transfer agreement between the transit agencies."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling Autoload Threshold", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing Farecard on the Action or Load Value List", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Test_Sce_Description": "This scenario will test how the SA Tool handles fare payment during Peak hours after the Farecard has reached off peak Daily Cap Limit and is out of transfer window. The tool should compute the fare and deduct the amount from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) and results in a fare upgrade."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) and results in a free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult Concession on Farecard", "Test_Sce_Description": "This scenario will validate if the SA Tool correctly identifies and processes a Farecard with a Valid Non-Adult concession."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child, Non-discreet concession", "Description": "This scenario will validate if the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, "Test Scenario 2": {"Test scenarios": "Handling ePurse balance less than fare amount", "Description": "This scenario will test how the SA Tool handles situations where the customer's ePurse balance is less than the fare amount. The tool should put the Farecard into overdraft (negative balance)."}, "Test Scenario 3": {"Test scenarios": "Processing valid transfer product within Intra-agency Transfer window", "Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."}, "Test Scenario 4": {"Test scenarios": "Processing valid transfer product within Inter-agency Transfer window", "Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product from other transit agency and computes the fare based on the transfer product and the transfer agreement between the transit agencies."}, "Test Scenario 5": {"Test scenarios": "Handling Autoload Threshold", "Description": "This scenario will test if the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, "Test Scenario 6": {"Test scenarios": "Processing Farecard on the Action or Load Value List", "Description": "This scenario will test if the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, "Test Scenario 7": {"Test scenarios": "Handling fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Description": "This scenario will test how the SA Tool handles fare payment during Peak hours after the Farecard has reached off peak Daily Cap Limit and is out of transfer window. The tool should compute the fare and deduct the amount from the Virtual Card E-Purse."}, "Test Scenario 8": {"Test scenarios": "Processing Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Description": "This scenario will test if the SA Tool correctly identifies a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) and results in a fare upgrade."}, "Test Scenario 9": {"Test scenarios": "Processing Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Description": "This scenario will test if the SA Tool correctly identifies a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) and results in a free transfer."}, "Test Scenario 10": {"Test scenarios": "Validating Non-Adult Concession on Farecard", "Description": "This scenario will validate if the SA Tool correctly identifies and processes a Farecard with a Valid Non-Adult concession."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Temporal Class Supplement Tap-On Transaction", "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the device displays an HMI reflecting the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Autoload Enabled Farecard Transaction", "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance and the Fare is deducted from the Farecard E-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Default Trip Override", "Test_Sce_Description": "Verify that when a Farecard without a Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on and provides appropriate feedback to the Cardholder of a successful transaction and that the Default Trip was overridden."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Audio Messages Request", "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Farecard Validation Failure", "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device provides the cardholder with the appropriate feedback without updating the Farecard and logs the error in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Blocked Farecard", "Test_Sce_Description": "Verify that when a blocked Farecard is tapped on a device, the right to travel is not conferred, the device provides the appropriate feedback to the Cardholder and logs the error in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Max Travel Duration Exceeded", "Test_Sce_Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment, deducts the value from the Farecard E-Purse and opens a new trip."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Multiple NFC Media Presentation", "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality, presents Anti-Collision HMI to customer and logs the error in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Non-Activated Farecard", "Test_Sce_Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful, the device provides feedback to the Cardholder of an unsuccessful transaction and logs the error in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Card Reading Error", "Test_Sce_Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides feedback to the Cardholder of an unsuccessful transaction and logs the error in the background."}, {"Test Scenario 1": {"Test scenarios": "Temporal Class Supplement Tap-On Transaction", "Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the device displays an HMI reflecting the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on."}, "Test Scenario 2": {"Test scenarios": "Autoload Enabled Farecard Transaction", "Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance and the Fare is deducted from the Farecard E-Purse balance."}, "Test Scenario 3": {"Test scenarios": "Default Trip Override", "Description": "Verify that when a Farecard without a Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on and provides appropriate feedback to the Cardholder of a successful transaction and that the Default Trip was overridden."}, "Test Scenario 4": {"Test scenarios": "Audio Messages Request", "Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, "Test Scenario 5": {"Test scenarios": "Farecard Validation Failure", "Description": "Verify that when a Farecard fails validation checks at Tap-On, the device provides the cardholder with the appropriate feedback without updating the Farecard and logs the error in the background."}, "Test Scenario 6": {"Test scenarios": "Blocked Farecard", "Description": "Verify that when a blocked Farecard is tapped on a device, the right to travel is not conferred, the device provides the appropriate feedback to the Cardholder and logs the error in the background."}, "Test Scenario 7": {"Test scenarios": "Max Travel Duration Exceeded", "Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment, deducts the value from the Farecard E-Purse and opens a new trip."}, "Test Scenario 8": {"Test scenarios": "Multiple NFC Media Presentation", "Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality, presents Anti-Collision HMI to customer and logs the error in the background."}, "Test Scenario 9": {"Test scenarios": "Non-Activated Farecard", "Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful, the device provides feedback to the Cardholder of an unsuccessful transaction and logs the error in the background."}, "Test Scenario 10": {"Test scenarios": "Card Reading Error", "Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides feedback to the Cardholder of an unsuccessful transaction and logs the error in the background."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Farecard Autoload Threshold Crossing", "Test_Sce_Description": "Test the functionality of the system when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold. The system should detect that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, which triggers the Autoload amount to be added to the Farecard. The Device should deduct the Fare from the Farecard E-Purse balance and provide appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the autoload was successful."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Farecard Autoload Threshold Not Crossing", "Test_Sce_Description": "Test the functionality of the system when a Farecard with Autoload Enabled is tapped on a device and the Fare amount does not cross the Auto-load threshold. The system should not trigger the Autoload amount to be added to the Farecard. The Device should deduct the Fare from the Farecard E-Purse balance and provide appropriate feedback to the Cardholder of a successful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Farecard Autoload Threshold Crossing Performance", "Test_Sce_Description": "Test the performance of the system when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold. The system should process the transaction and update the Farecard balance within the acceptable time frame."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Farecard Autoload Threshold Crossing Security", "Test_Sce_Description": "Test the security of the system when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold. The system should securely process the transaction and update the Farecard balance without exposing sensitive cardholder information."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Farecard Validation Failure at Tap-On", "Test_Sce_Description": "Test the functionality of the system when a Farecard fails validation checks at Tap-On. The system should provide appropriate feedback to the Cardholder and prevent the transaction from proceeding."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Farecard Validation Failure at Tap-On Performance", "Test_Sce_Description": "Test the performance of the system when a Farecard fails validation checks at Tap-On. The system should process the validation checks and provide feedback to the Cardholder within the acceptable time frame."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Farecard Validation Failure at Tap-On Security", "Test_Sce_Description": "Test the security of the system when a Farecard fails validation checks at Tap-On. The system should securely process the validation checks and provide feedback to the Cardholder without exposing sensitive cardholder information."}, {"Test Scenario 1": {"Test scenarios": "Farecard Autoload Threshold Crossing", "Description": "Test the functionality of the system when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold. The system should detect that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, which triggers the Autoload amount to be added to the Farecard. The Device should deduct the Fare from the Farecard E-Purse balance and provide appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the autoload was successful."}, "Test Scenario 2": {"Test scenarios": "Farecard Autoload Threshold Not Crossing", "Description": "Test the functionality of the system when a Farecard with Autoload Enabled is tapped on a device and the Fare amount does not cross the Auto-load threshold. The system should not trigger the Autoload amount to be added to the Farecard. The Device should deduct the Fare from the Farecard E-Purse balance and provide appropriate feedback to the Cardholder of a successful transaction."}, "Test Scenario 3": {"Test scenarios": "Farecard Autoload Threshold Crossing Performance", "Description": "Test the performance of the system when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold. The system should process the transaction and update the Farecard balance within the acceptable time frame."}, "Test Scenario 4": {"Test scenarios": "Farecard Autoload Threshold Crossing Security", "Description": "Test the security of the system when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold. The system should securely process the transaction and update the Farecard balance without exposing sensitive cardholder information."}, "Test Scenario 5": {"Test scenarios": "Farecard Validation Failure at Tap-On", "Description": "Test the functionality of the system when a Farecard fails validation checks at Tap-On. The system should provide appropriate feedback to the Cardholder and prevent the transaction from proceeding."}, "Test Scenario 6": {"Test scenarios": "Farecard Validation Failure at Tap-On Performance", "Description": "Test the performance of the system when a Farecard fails validation checks at Tap-On. The system should process the validation checks and provide feedback to the Cardholder within the acceptable time frame."}, "Test Scenario 7": {"Test scenarios": "Farecard Validation Failure at Tap-On Security", "Description": "Test the security of the system when a Farecard fails validation checks at Tap-On. The system should securely process the validation checks and provide feedback to the Cardholder without exposing sensitive cardholder information."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Full Fare-by-Zone transaction processing", "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Override Default O/D", "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on. The customer should be able to request the override of a Default Trip by interacting with the Device."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Eligibility for capping discount", "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list and complete the fare processing. ATS should calculate the capping discount and apply to the fare calculation."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Eligibility for multiple capping discounts", "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS should take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Device offline and customer eligible for capping discount", "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services. The tap should then be rated in ATS. Capping rules should follow use-case logic outlined in ticketing use cases."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Open Payments Media fails ODA check", "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Farecard is blocked", "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. The Device should provide the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration", "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. The Device should determine that the Tap-On Time + Max Travel Duration < Current Time and Auto-settle the Underpayment and deduct the value from the Farecard E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Multiple NFC media are presented to the device at one time", "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. The Device should block all user functionality, presents Anti-Collision HMI to customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Tap a non-activated Farecard on an SA Tool", "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device should provide the appropriate feedback to the Cardholder."}, {"Test Scenario 1": {"Test scenarios": "Full Fare-by-Zone transaction processing", "Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."}, "Test Scenario 2": {"Test scenarios": "Override Default O/D", "Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on. The customer should be able to request the override of a Default Trip by interacting with the Device."}, "Test Scenario 3": {"Test scenarios": "Eligibility for capping discount", "Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list and complete the fare processing. ATS should calculate the capping discount and apply to the fare calculation."}, "Test Scenario 4": {"Test scenarios": "Eligibility for multiple capping discounts", "Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS should take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."}, "Test Scenario 5": {"Test scenarios": "Device offline and customer eligible for capping discount", "Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services. The tap should then be rated in ATS. Capping rules should follow use-case logic outlined in ticketing use cases."}, "Test Scenario 6": {"Test scenarios": "Open Payments Media fails ODA check", "Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder."}, "Test Scenario 7": {"Test scenarios": "Farecard is blocked", "Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. The Device should provide the appropriate feedback to the Cardholder."}, "Test Scenario 8": {"Test scenarios": "Time since Tap-On Exceeds Max Travel Duration", "Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. The Device should determine that the Tap-On Time + Max Travel Duration < Current Time and Auto-settle the Underpayment and deduct the value from the Farecard E-Purse."}, "Test Scenario 9": {"Test scenarios": "Multiple NFC media are presented to the device at one time", "Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. The Device should block all user functionality, presents Anti-Collision HMI to customer."}, "Test Scenario 10": {"Test scenarios": "Tap a non-activated Farecard on an SA Tool", "Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."}, "Test Scenario 11": {"Test scenarios": "Tap a Farecard on an SA Tool and card reading error occurs", "Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device should provide the appropriate feedback to the Cardholder."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Non-Revenue farecard in training mode", "Test_Sce_Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode and displays a declined HMI when the Non-Revenue card is tapped in the revenue mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard tap during Temporal Class Supplement", "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the device displays an HMI reflecting the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard with Autoload Enabled", "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Farecard has the Autoload amount automatically added to the E-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard without Default O/D", "Test_Sce_Description": "Verify that when a Farecard without a Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Audio Messages Request", "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard Validation Failure", "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the system handles the exception appropriately."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Period Pass with Higher Fare Value", "Test_Sce_Description": "Verify that when a Farecard with a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value is used, the ATS computes and deducts the Upgrade fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Period Pass with Lower Fare Value", "Test_Sce_Description": "Verify that when a Farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used, the ATS identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Limited Period Pass", "Test_Sce_Description": "Verify that when a Farecard with a valid Limited Period Pass and the current time is within the limits of the product is used, the system accepts the fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "Verify that when a Farecard with a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the system accepts the fare payment."}, {"Test Scenario 1": {"Test scenarios": "Testing Non-Revenue farecard in training mode", "Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode and displays a declined HMI when the Non-Revenue card is tapped in the revenue mode."}, "Test Scenario 2": {"Test scenarios": "Testing Farecard tap during Temporal Class Supplement", "Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the device displays an HMI reflecting the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on."}, "Test Scenario 3": {"Test scenarios": "Testing Farecard with Autoload Enabled", "Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Farecard has the Autoload amount automatically added to the E-Purse balance."}, "Test Scenario 4": {"Test scenarios": "Testing Farecard without Default O/D", "Description": "Verify that when a Farecard without a Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on."}, "Test Scenario 5": {"Test scenarios": "Testing Audio Messages Request", "Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, "Test Scenario 6": {"Test scenarios": "Testing Farecard Validation Failure", "Description": "Verify that when a Farecard fails validation checks at Tap-On, the system handles the exception appropriately."}, "Test Scenario 7": {"Test scenarios": "Testing Period Pass with Higher Fare Value", "Description": "Verify that when a Farecard with a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value is used, the ATS computes and deducts the Upgrade fare."}, "Test Scenario 8": {"Test scenarios": "Testing Period Pass with Lower Fare Value", "Description": "Verify that when a Farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used, the ATS identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment."}, "Test Scenario 9": {"Test scenarios": "Testing Limited Period Pass", "Description": "Verify that when a Farecard with a valid Limited Period Pass and the current time is within the limits of the product is used, the system accepts the fare payment."}, "Test Scenario 10": {"Test scenarios": "Testing Limited Period Pass outside of valid time with sufficient e-Purse balance", "Description": "Verify that when a Farecard with a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the system accepts the fare payment."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after reaching the off peak daily cap limit and outside of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window and the premium fare is higher than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product with Lower Premium Fare", "Test_Sce_Description": "Verify that the system correctly computes and allows a free transfer when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window and the premium fare is lower than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid non-adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Performance of Fare Payment Processing", "Test_Sce_Description": "Verify that the system processes the fare payment within the acceptable time limit and does not cause any delay or lag in the system."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Security of Fare Payment Processing", "Test_Sce_Description": "Verify that the system securely processes the fare payment and does not expose any sensitive customer information during the process."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after reaching the off peak daily cap limit and outside of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window and the premium fare is higher than the special event fare."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product with Lower Premium Fare", "Description": "Verify that the system correctly computes and allows a free transfer when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window and the premium fare is lower than the special event fare."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid non-adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, "Test Scenario 7": {"Test scenarios": "Performance of Fare Payment Processing", "Description": "Verify that the system processes the fare payment within the acceptable time limit and does not cause any delay or lag in the system."}, "Test Scenario 8": {"Test scenarios": "Security of Fare Payment Processing", "Description": "Verify that the system securely processes the fare payment and does not expose any sensitive customer information during the process."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Premium Service Route with Higher Fare than Special Event", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare difference when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The system should recognize the higher fare of the premium service and charge the customer accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Deduction Communication", "Test_Sce_Description": "Verify that the fare deduction made by the ATS is correctly communicated back to the SA Tool. The SA Tool should accurately display the deducted amount."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Transfer Print Status Display", "Test_Sce_Description": "Verify that the SA Tool correctly sets the POP Print Flag to 0 and accurately displays the transfer print status when the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Peak Hour Fare Payment after Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare when a customer taps during peak hours after previously reaching the off peak daily cap, outside of the transfer window. The system should recognize that the farecard has not reached the Peak Daily Cap limit and charge the customer accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Premium Service Route with Lower Fare than Special Event", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The system should recognize the lower fare of the premium service and not charge the customer for the transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Valid Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare when a customer with a valid Non-Adult concession taps on the SA Tool. The system should recognize the concession and charge the customer the reduced fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Valid Child Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare when a customer with a valid Child concession taps on the SA Tool. The system should recognize the concession and charge the customer the reduced fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare when a customer\u2019s farecard fails inspection and the operator selects the payment function on the SA Tool inspection results screen. The system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Performance Test", "Test_Sce_Description": "Verify that the system can handle a high volume of fare payments and transfers without slowing down or crashing. This can be done by simulating a large number of customers tapping their farecards on the SA Tool within a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Security Test", "Test_Sce_Description": "Verify that the system securely processes fare payments and protects customer information. This can be done by checking that all transactions are encrypted and that customer data is not stored in a readable format."}, {"Test Scenario 1": {"Test scenarios": "Premium Service Route with Higher Fare than Special Event", "Description": "Verify that the system correctly calculates and deducts the fare difference when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The system should recognize the higher fare of the premium service and charge the customer accordingly."}, "Test Scenario 2": {"Test scenarios": "Fare Deduction Communication", "Description": "Verify that the fare deduction made by the ATS is correctly communicated back to the SA Tool. The SA Tool should accurately display the deducted amount."}, "Test Scenario 3": {"Test scenarios": "Transfer Print Status Display", "Description": "Verify that the SA Tool correctly sets the POP Print Flag to 0 and accurately displays the transfer print status when the farecard is queried."}, "Test Scenario 4": {"Test scenarios": "Peak Hour Fare Payment after Off Peak Daily Cap", "Description": "Verify that the system correctly calculates and deducts the fare when a customer taps during peak hours after previously reaching the off peak daily cap, outside of the transfer window. The system should recognize that the farecard has not reached the Peak Daily Cap limit and charge the customer accordingly."}, "Test Scenario 5": {"Test scenarios": "Premium Service Route with Lower Fare than Special Event", "Description": "Verify that the system correctly calculates and deducts the fare when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The system should recognize the lower fare of the premium service and not charge the customer for the transfer."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Valid Non-Adult Concession", "Description": "Verify that the system correctly calculates and deducts the fare when a customer with a valid Non-Adult concession taps on the SA Tool. The system should recognize the concession and charge the customer the reduced fare."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Valid Child Concession", "Description": "Verify that the system correctly calculates and deducts the fare when a customer with a valid Child concession taps on the SA Tool. The system should recognize the concession and charge the customer the reduced fare."}, "Test Scenario 8": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly calculates and deducts the fare when a customer\u2019s farecard fails inspection and the operator selects the payment function on the SA Tool inspection results screen. The system should record both the fare payment and inspection transactions."}, "Test Scenario 9": {"Test scenarios": "Performance Test", "Description": "Verify that the system can handle a high volume of fare payments and transfers without slowing down or crashing. This can be done by simulating a large number of customers tapping their farecards on the SA Tool within a short period of time."}, "Test Scenario 10": {"Test scenarios": "Security Test", "Description": "Verify that the system securely processes fare payments and protects customer information. This can be done by checking that all transactions are encrypted and that customer data is not stored in a readable format."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid non-adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Performance of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak load conditions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Security of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is secure and that all sensitive data is encrypted during transmission and storage."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid non-adult concession."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid child concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."}, "Test Scenario 6": {"Test scenarios": "Performance of Fare Payment Process", "Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak load conditions."}, "Test Scenario 7": {"Test scenarios": "Security of Fare Payment Process", "Description": "Verify that the fare payment process is secure and that all sensitive data is encrypted during transmission and storage."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Valid Non-Adult, Non-Child, Non-discreet concession", "Test_Sce_Description": "Verify that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's ePurse balance is less than the fare amount and puts the Farecard into overdraft."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Transaction within Intra-agency Transfer window", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Transaction within Inter-agency Transfer window", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product from another transit agency on the customer's Farecard and computes the fare based on the transfer agreement between the transit agencies."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Autoload Threshold is met", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's Farecard meets or drops below the Autoload Threshold and adds the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Customer\u2019s Farecard is on the Action or Load Value List", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a fare payment is made during peak hours after the off peak daily cap has been reached and the Farecard is out of the transfer window, and deducts the correct fare amount."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer taps on a premium service route/location after previously riding on a Special Event service route within the transfer window, and computes the fare upgrade."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer taps on a premium service route/location after previously riding on a Special Event service route within the transfer window, and computes the free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Customer has a Valid Non-Adult Concession on their Farecard", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's Farecard has a Valid Non-Adult concession and deducts the correct concession fare."}, {"Test Scenario 1": {"Test scenarios": "Valid Non-Adult, Non-Child, Non-discreet concession", "Description": "Verify that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, "Test Scenario 2": {"Test scenarios": "Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Description": "Verify that the SA Tool correctly identifies when a customer's ePurse balance is less than the fare amount and puts the Farecard into overdraft."}, "Test Scenario 3": {"Test scenarios": "Transaction within Intra-agency Transfer window", "Description": "Verify that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."}, "Test Scenario 4": {"Test scenarios": "Transaction within Inter-agency Transfer window", "Description": "Verify that the SA Tool correctly identifies a valid transfer product from another transit agency on the customer's Farecard and computes the fare based on the transfer agreement between the transit agencies."}, "Test Scenario 5": {"Test scenarios": "Autoload Threshold is met", "Description": "Verify that the SA Tool correctly identifies when a customer's Farecard meets or drops below the Autoload Threshold and adds the Autoload amount to the ePurse balance."}, "Test Scenario 6": {"Test scenarios": "Customer\u2019s Farecard is on the Action or Load Value List", "Description": "Verify that the SA Tool correctly identifies when a customer's Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, "Test Scenario 7": {"Test scenarios": "Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Description": "Verify that the SA Tool correctly identifies when a fare payment is made during peak hours after the off peak daily cap has been reached and the Farecard is out of the transfer window, and deducts the correct fare amount."}, "Test Scenario 8": {"Test scenarios": "Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Description": "Verify that the SA Tool correctly identifies when a customer taps on a premium service route/location after previously riding on a Special Event service route within the transfer window, and computes the fare upgrade."}, "Test Scenario 9": {"Test scenarios": "Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Description": "Verify that the SA Tool correctly identifies when a customer taps on a premium service route/location after previously riding on a Special Event service route within the transfer window, and computes the free transfer."}, "Test Scenario 10": {"Test scenarios": "Customer has a Valid Non-Adult Concession on their Farecard", "Description": "Verify that the SA Tool correctly identifies when a customer's Farecard has a Valid Non-Adult concession and deducts the correct concession fare."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Temporal Class Supplement Tap-On Transaction", "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the device displays an HMI reflecting the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Autoload Enabled Farecard Tap-On Transaction", "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Farecard has the Autoload amount automatically added to the E-Purse balance and the device deducts the Fare from the Farecard E-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Override Default Trip Tap-On Transaction", "Test_Sce_Description": "Verify that when a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on and the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the Default Trip was overridden."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Audio Messages Request during Fare-by-Zone TA", "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the SA Tool displays the fare payment screen to the operator and customer for the duration of the audio message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Farecard Validation Failure at Tap-On", "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device provides the cardholder with the appropriate feedback without updating the Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Blocked Farecard Tap-On Transaction", "Test_Sce_Description": "Verify that when a blocked Farecard is tapped on a device, the right to travel is not conferred and the device provides the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Exceeding Max Travel Duration Tap-On Transaction", "Test_Sce_Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment and opens a new trip."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Multiple NFC Media Presentation", "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Non-Activated Farecard Tap-On Transaction", "Test_Sce_Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful and the device provides feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Card Reading Error during Tap-On Transaction", "Test_Sce_Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides the appropriate feedback to the Cardholder."}, {"Test Scenario 1": {"Test scenarios": "Temporal Class Supplement Tap-On Transaction", "Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the device displays an HMI reflecting the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on."}, "Test Scenario 2": {"Test scenarios": "Autoload Enabled Farecard Tap-On Transaction", "Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Farecard has the Autoload amount automatically added to the E-Purse balance and the device deducts the Fare from the Farecard E-Purse balance."}, "Test Scenario 3": {"Test scenarios": "Override Default Trip Tap-On Transaction", "Description": "Verify that when a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on and the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the Default Trip was overridden."}, "Test Scenario 4": {"Test scenarios": "Audio Messages Request during Fare-by-Zone TA", "Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the SA Tool displays the fare payment screen to the operator and customer for the duration of the audio message."}, "Test Scenario 5": {"Test scenarios": "Farecard Validation Failure at Tap-On", "Description": "Verify that when a Farecard fails validation checks at Tap-On, the device provides the cardholder with the appropriate feedback without updating the Farecard."}, "Test Scenario 6": {"Test scenarios": "Blocked Farecard Tap-On Transaction", "Description": "Verify that when a blocked Farecard is tapped on a device, the right to travel is not conferred and the device provides the appropriate feedback to the Cardholder."}, "Test Scenario 7": {"Test scenarios": "Exceeding Max Travel Duration Tap-On Transaction", "Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment and opens a new trip."}, "Test Scenario 8": {"Test scenarios": "Multiple NFC Media Presentation", "Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality."}, "Test Scenario 9": {"Test scenarios": "Non-Activated Farecard Tap-On Transaction", "Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful and the device provides feedback to the Cardholder of an unsuccessful transaction."}, "Test Scenario 10": {"Test scenarios": "Card Reading Error during Tap-On Transaction", "Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides the appropriate feedback to the Cardholder."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Autoload Threshold Crossing", "Test_Sce_Description": "Verify that when the Farecard E-Purse Balance crosses the Auto-load threshold due to the Fare, the Autoload amount is automatically added to the E-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Autoload Deduction", "Test_Sce_Description": "Verify that the Device correctly deducts the Fare from the Farecard E-Purse balance after the Autoload amount has been added."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Successful Transaction Feedback", "Test_Sce_Description": "Verify that the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to an Autoload transaction and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Autoload Threshold Not Crossed", "Test_Sce_Description": "Verify that if the Fare does not cause the Farecard E-Purse Balance to cross the Auto-load threshold, the Autoload amount is not added to the E-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Autoload Threshold Crossing Performance", "Test_Sce_Description": "Verify the performance of the system when the Autoload threshold is crossed. The system should be able to handle the transaction and update the E-Purse balance in a timely manner."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Security of Autoload Transactions", "Test_Sce_Description": "Verify that the Autoload transactions are secure and that the Farecard E-Purse balance is updated correctly and securely."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Exception Flow - Farecard Validation Failure", "Test_Sce_Description": "Verify the system's behavior when the Farecard fails validation checks at Tap-On. The system should handle this exception correctly and provide appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Alternate Flow - Default Trip Override", "Test_Sce_Description": "Verify the system's behavior when the Customer Overrides the Default Trip prior to tapping-off. The system should process the tap as a result tap-on and provide appropriate feedback to the Cardholder."}, {"Test Scenario 1": {"Test scenarios": "Autoload Threshold Crossing", "Description": "Verify that when the Farecard E-Purse Balance crosses the Auto-load threshold due to the Fare, the Autoload amount is automatically added to the E-Purse balance."}, "Test Scenario 2": {"Test scenarios": "Autoload Deduction", "Description": "Verify that the Device correctly deducts the Fare from the Farecard E-Purse balance after the Autoload amount has been added."}, "Test Scenario 3": {"Test scenarios": "Successful Transaction Feedback", "Description": "Verify that the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to an Autoload transaction and updates the Farecard accordingly."}, "Test Scenario 4": {"Test scenarios": "Autoload Threshold Not Crossed", "Description": "Verify that if the Fare does not cause the Farecard E-Purse Balance to cross the Auto-load threshold, the Autoload amount is not added to the E-Purse balance."}, "Test Scenario 5": {"Test scenarios": "Autoload Threshold Crossing Performance", "Description": "Verify the performance of the system when the Autoload threshold is crossed. The system should be able to handle the transaction and update the E-Purse balance in a timely manner."}, "Test Scenario 6": {"Test scenarios": "Security of Autoload Transactions", "Description": "Verify that the Autoload transactions are secure and that the Farecard E-Purse balance is updated correctly and securely."}, "Test Scenario 7": {"Test scenarios": "Exception Flow - Farecard Validation Failure", "Description": "Verify the system's behavior when the Farecard fails validation checks at Tap-On. The system should handle this exception correctly and provide appropriate feedback to the Cardholder."}, "Test Scenario 8": {"Test scenarios": "Alternate Flow - Default Trip Override", "Description": "Verify the system's behavior when the Customer Overrides the Default Trip prior to tapping-off. The system should process the tap as a result tap-on and provide appropriate feedback to the Cardholder."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Full Fare-by-Zone transaction processing", "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Override default O/D on Open Payments Media", "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on when the customer requests the override of a Default Trip by interacting with the Device."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Capping discount eligibility", "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Multiple capping discounts eligibility", "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS will take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Offline device capping discount eligibility", "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules will follow use-case logic outlined in ticketing use cases."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Open Payments Media fails ODA check", "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device performs the necessary validation and determines that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen is provided to the cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Open Payments Media Fails Expiry Check", "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Farecard is blocked", "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. Card reader detects Farecard is blocked. Right to travel is not conferred. The Device provides the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration", "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. Device determines that the Tap-On Time + Max Travel Duration < Current Time. Device Auto-settles the Underpayment and deducts the value from the Farecard E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Multiple NFC media are presented to the device at one time", "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. Customer presents multiple NFC medias to the card reader at once. Device blocks all user functionality, presents Anti-Collision HMI to customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Tap a non-activated Farecard on an SA Tool", "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. Device detects that the Farecard is not activated. The device provides feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader)."}, {"Test Scenario 1": {"Test scenarios": "Full Fare-by-Zone transaction processing", "Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."}, "Test Scenario 2": {"Test scenarios": "Override default O/D on Open Payments Media", "Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on when the customer requests the override of a Default Trip by interacting with the Device."}, "Test Scenario 3": {"Test scenarios": "Capping discount eligibility", "Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation."}, "Test Scenario 4": {"Test scenarios": "Multiple capping discounts eligibility", "Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS will take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."}, "Test Scenario 5": {"Test scenarios": "Offline device capping discount eligibility", "Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules will follow use-case logic outlined in ticketing use cases."}, "Test Scenario 6": {"Test scenarios": "Open Payments Media fails ODA check", "Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device performs the necessary validation and determines that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen is provided to the cardholder."}, "Test Scenario 7": {"Test scenarios": "Open Payments Media Fails Expiry Check", "Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."}, "Test Scenario 8": {"Test scenarios": "Farecard is blocked", "Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. Card reader detects Farecard is blocked. Right to travel is not conferred. The Device provides the appropriate feedback to the Cardholder."}, "Test Scenario 9": {"Test scenarios": "Time since Tap-On Exceeds Max Travel Duration", "Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. Device determines that the Tap-On Time + Max Travel Duration < Current Time. Device Auto-settles the Underpayment and deducts the value from the Farecard E-Purse."}, "Test Scenario 10": {"Test scenarios": "Multiple NFC media are presented to the device at one time", "Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. Customer presents multiple NFC medias to the card reader at once. Device blocks all user functionality, presents Anti-Collision HMI to customer."}, "Test Scenario 11": {"Test scenarios": "Tap a non-activated Farecard on an SA Tool", "Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. Device detects that the Farecard is not activated. The device provides feedback to the Cardholder of an unsuccessful transaction."}, "Test Scenario 12": {"Test scenarios": "Tap a Farecard on an SA Tool and card reading error occurs", "Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader)."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Non-Revenue farecard in training mode", "Test_Sce_Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode and if the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard with Temporal Class Supplement", "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the Device should contain an HMI reflecting the Temporal Class Supplement, and should process the Tap-On Transaction as a normal tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard with Autoload Enabled", "Test_Sce_Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard without Default O/D", "Test_Sce_Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device should process the tap as a result tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Audio Messages Request", "Test_Sce_Description": "Verify that when a customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard Validation Checks", "Test_Sce_Description": "Verify that if a Farecard fails validation checks at Tap-On, the device should display an error message and should not process the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Fare Payment with Period Pass", "Test_Sce_Description": "Verify that if a Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value, the ATS should compute and deduct the Upgrade fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Fare Payment with Limited Period Pass", "Test_Sce_Description": "Verify that if a Farecard has a valid Limited Period Pass and the current time is within the limits of the product, the device should accept the fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Fare Payment with Limited Period Pass outside of valid time", "Test_Sce_Description": "Verify that if a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the device should accept the fare payment."}, {"Test Scenario 1": {"Test scenarios": "Testing Non-Revenue farecard in training mode", "Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode and if the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI."}, "Test Scenario 2": {"Test scenarios": "Testing Farecard with Temporal Class Supplement", "Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the Device should contain an HMI reflecting the Temporal Class Supplement, and should process the Tap-On Transaction as a normal tap-on."}, "Test Scenario 3": {"Test scenarios": "Testing Farecard with Autoload Enabled", "Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance."}, "Test Scenario 4": {"Test scenarios": "Testing Farecard without Default O/D", "Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device should process the tap as a result tap-on."}, "Test Scenario 5": {"Test scenarios": "Testing Audio Messages Request", "Description": "Verify that when a customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."}, "Test Scenario 6": {"Test scenarios": "Testing Farecard Validation Checks", "Description": "Verify that if a Farecard fails validation checks at Tap-On, the device should display an error message and should not process the transaction."}, "Test Scenario 7": {"Test scenarios": "Testing Fare Payment with Period Pass", "Description": "Verify that if a Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value, the ATS should compute and deduct the Upgrade fare."}, "Test Scenario 8": {"Test scenarios": "Testing Fare Payment with Limited Period Pass", "Description": "Verify that if a Farecard has a valid Limited Period Pass and the current time is within the limits of the product, the device should accept the fare payment."}, "Test Scenario 9": {"Test scenarios": "Testing Fare Payment with Limited Period Pass outside of valid time", "Description": "Verify that if a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the device should accept the fare payment."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse Balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse Balance when a fare payment is made with a premium service class farecard that has a valid Special Event Transfer Product and the tap is within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse Balance when a fare payment is made with a farecard that has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse Balance when a fare payment is made with a farecard that has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse Balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse Balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the tap is within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Lower Fare", "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made with a premium service class farecard that has a valid Special Event Transfer Product, the tap is within the transfer window, and the premium fare is lower than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Higher Fare", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare upgrade from the ePurse Balance when a fare payment is made with a premium service class farecard that has a valid Special Event Transfer Product, the tap is within the transfer window, and the premium fare is higher than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Performance of the SA Tool", "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay when computing and deducting fares from the ePurse Balance under various conditions and scenarios."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Security of the SA Tool", "Test_Sce_Description": "Verify that the SA Tool securely handles and processes fare payment transactions, ensuring that customer data is protected and that transactions are accurately recorded and reported."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse Balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse Balance when a fare payment is made with a premium service class farecard that has a valid Special Event Transfer Product and the tap is within the transfer window."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse Balance when a fare payment is made with a farecard that has a valid Non-Adult concession."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse Balance when a fare payment is made with a farecard that has a valid Child concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse Balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse Balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the tap is within the transfer window."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Premium Service Class and Lower Fare", "Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made with a premium service class farecard that has a valid Special Event Transfer Product, the tap is within the transfer window, and the premium fare is lower than the special event fare."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Premium Service Class and Higher Fare", "Description": "Verify that the system correctly computes and deducts the fare upgrade from the ePurse Balance when a fare payment is made with a premium service class farecard that has a valid Special Event Transfer Product, the tap is within the transfer window, and the premium fare is higher than the special event fare."}, "Test Scenario 9": {"Test scenarios": "Performance of the SA Tool", "Description": "Verify that the SA Tool performs efficiently and without delay when computing and deducting fares from the ePurse Balance under various conditions and scenarios."}, "Test Scenario 10": {"Test scenarios": "Security of the SA Tool", "Description": "Verify that the SA Tool securely handles and processes fare payment transactions, ensuring that customer data is protected and that transactions are accurately recorded and reported."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the farecard has reached the off peak daily cap limit and is outside the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the Special Event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare", "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the Special Event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the Child Concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Performance of the SA Tool", "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay when computing and deducting fares from the ePurse balance under various conditions such as peak hours, off peak hours, within transfer window, outside transfer window, with different service classes and transfer products."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Security of the SA Tool", "Test_Sce_Description": "Verify that the SA Tool securely handles the customer's farecard information and ePurse balance during fare payment computations and deductions. The system should prevent unauthorized access and manipulation of the farecard data and ePurse balance."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the farecard has reached the off peak daily cap limit and is outside the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the Special Event fare."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Premium Service Class and Lower Special Event Fare", "Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the Special Event fare."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the Child Concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."}, "Test Scenario 7": {"Test scenarios": "Performance of the SA Tool", "Description": "Verify that the SA Tool performs efficiently and without delay when computing and deducting fares from the ePurse balance under various conditions such as peak hours, off peak hours, within transfer window, outside transfer window, with different service classes and transfer products."}, "Test Scenario 8": {"Test scenarios": "Security of the SA Tool", "Description": "Verify that the SA Tool securely handles the customer's farecard information and ePurse balance during fare payment computations and deductions. The system should prevent unauthorized access and manipulation of the farecard data and ePurse balance."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Valid Regular Service Transfer Product", "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a service class of Premium and the farecard has a valid Regular Service Transfer Product within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Valid Special Event Transfer Product", "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a service class of Premium and the farecard has a valid Special Event Transfer Product within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Performance of SA Tool during Fare Payment", "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay during the fare payment process, ensuring a smooth user experience."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Security of SA Tool during Fare Payment", "Test_Sce_Description": "Verify that the SA Tool securely processes fare payments, ensuring that customer data is protected and that the payment process is secure from potential threats."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the SA Tool correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Valid Regular Service Transfer Product", "Description": "Verify that the SA Tool correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a service class of Premium and the farecard has a valid Regular Service Transfer Product within the transfer window."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Premium Service Class and Valid Special Event Transfer Product", "Description": "Verify that the SA Tool correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a service class of Premium and the farecard has a valid Special Event Transfer Product within the transfer window."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the SA Tool correctly computes and deducts the fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the SA Tool correctly computes and deducts the fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the SA Tool correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, "Test Scenario 7": {"Test scenarios": "Performance of SA Tool during Fare Payment", "Description": "Verify that the SA Tool performs efficiently and without delay during the fare payment process, ensuring a smooth user experience."}, "Test Scenario 8": {"Test scenarios": "Security of SA Tool during Fare Payment", "Description": "Verify that the SA Tool securely processes fare payments, ensuring that customer data is protected and that the payment process is secure from potential threats."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession", "Test_Sce_Description": "Verify that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of insufficient ePurse balance", "Test_Sce_Description": "Verify that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of valid transfer product", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Inter-agency transfer processing", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Autoload threshold processing", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Action or Load Value list processing", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of fare payment during peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of fare payment on Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of fare payment on Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of fare payment with a Valid Non-Adult Concession", "Test_Sce_Description": "Verify that the SA Tool correctly identifies and processes the fare payment when the customer's Farecard has a Valid Non-Adult concession."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child, Non-discreet concession", "Description": "Verify that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, "Test Scenario 2": {"Test scenarios": "Handling of insufficient ePurse balance", "Description": "Verify that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, "Test Scenario 3": {"Test scenarios": "Processing of valid transfer product", "Description": "Verify that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."}, "Test Scenario 4": {"Test scenarios": "Inter-agency transfer processing", "Description": "Verify that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."}, "Test Scenario 5": {"Test scenarios": "Autoload threshold processing", "Description": "Verify that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, "Test Scenario 6": {"Test scenarios": "Action or Load Value list processing", "Description": "Verify that the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, "Test Scenario 7": {"Test scenarios": "Processing of fare payment during peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap."}, "Test Scenario 8": {"Test scenarios": "Processing of fare payment on Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."}, "Test Scenario 9": {"Test scenarios": "Processing of fare payment on Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."}, "Test Scenario 10": {"Test scenarios": "Processing of fare payment with a Valid Non-Adult Concession", "Description": "Verify that the SA Tool correctly identifies and processes the fare payment when the customer's Farecard has a Valid Non-Adult concession."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Transfer Product", "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid transfer product on the customer's TICKET. The system should compute the free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Audio Messages Request", "Test_Sce_Description": "Verify that the system correctly processes the customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool", "Test_Sce_Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location. The system should result in a regular ride balance fare payment and Transfer Product creation."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool", "Test_Sce_Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route. The system should result in a free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Valid Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and processes a Valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly processes fare payment resulting from failed inspection. The system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly identifies and processes a TICKET with no Ride Balance remaining. The system should display a declined message to the customer and play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Low Battery Threshold", "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Non-CLIENT Media", "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer taps a card that is not CLIENT media. The system should display the device error message \u201cCard Read Error\u201d."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly identifies and processes a TICKET within the Anti-Passback Window. The system should display a declined message to the customer and play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly identifies and processes a non-activated TICKET. The system should display a declined message to the customer and play the declined audio tone."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."}, "Test Scenario 2": {"Test scenarios": "Validating Transfer Product", "Description": "Verify that the system correctly identifies and processes a valid transfer product on the customer's TICKET. The system should compute the free transfer."}, "Test Scenario 3": {"Test scenarios": "Audio Messages Request", "Description": "Verify that the system correctly processes the customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion."}, "Test Scenario 4": {"Test scenarios": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool", "Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location. The system should result in a regular ride balance fare payment and Transfer Product creation."}, "Test Scenario 5": {"Test scenarios": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool", "Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route. The system should result in a free transfer."}, "Test Scenario 6": {"Test scenarios": "Valid Child Concession", "Description": "Verify that the system correctly identifies and processes a Valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, "Test Scenario 7": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly processes fare payment resulting from failed inspection. The system should record both the fare payment and inspection transactions."}, "Test Scenario 8": {"Test scenarios": "Empty Ride Balance", "Description": "Verify that the system correctly identifies and processes a TICKET with no Ride Balance remaining. The system should display a declined message to the customer and play the declined audio tone."}, "Test Scenario 9": {"Test scenarios": "Low Battery Threshold", "Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should switch to \u201cOut of Service\u201d mode."}, "Test Scenario 10": {"Test scenarios": "Non-CLIENT Media", "Description": "Verify that the system correctly handles a situation where the customer taps a card that is not CLIENT media. The system should display the device error message \u201cCard Read Error\u201d."}, "Test Scenario 11": {"Test scenarios": "Anti-Passback Window", "Description": "Verify that the system correctly identifies and processes a TICKET within the Anti-Passback Window. The system should display a declined message to the customer and play the declined audio tone."}, "Test Scenario 12": {"Test scenarios": "Non-Activated Ticket", "Description": "Verify that the system correctly identifies and processes a non-activated TICKET. The system should display a declined message to the customer and play the declined audio tone."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Failed Inspection", "Test_Sce_Description": "Verify that the system correctly handles fare payment when the ticket inspection fails. The operator should be able to select the payment function on the SA Tool inspection results screen, and the system should record both the fare payment and inspection transactions. The application should then return to the Tap Card screen with a notification of the corresponding inspection action."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly handles fare payment when the customer's ride balance is empty. The SA Tool should detect the empty Ride Balance, display a declined message to the customer, and not conduct the transaction. The SA Tool should then play the declined audio tone and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "Verify that the system correctly handles fare payment when the device's battery goes below the low battery threshold during payment. If the low battery threshold is reached before the fare payment is processed, the application should switch to 'Out of Service' mode. If the fare payment is processed before the low battery threshold is reached, the application should then switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "Verify that the system correctly handles fare payment when the customer taps a card that is not CLIENT media. The SA Tool application should not respond, but the device should display the error message 'Card Read Error' for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly handles fare payment when the customer's ticket is within the Anti-Passback Window. The device should detect that the ticket fails the Anti-Passback checks, display a declined message to the customer, and not conduct the transaction. The SA Tool should then play the declined audio tone and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly handles fare payment when the customer taps a non-activated ticket. The device should detect that the ticket is not activated, display a declined message to the customer, and not conduct the transaction. The SA Tool should then play the declined audio tone and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Expired Ticket", "Test_Sce_Description": "Verify that the system correctly handles fare payment when the customer taps an expired ticket. The device should detect that the ticket is expired, display a declined message to the customer, and not conduct the transaction. The SA Tool should then play the declined audio tone and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Period Pass", "Test_Sce_Description": "Verify that the system correctly handles fare payment when the customer's ticket has a valid period pass. The device should compute that the ticket has a valid period pass, accept the fare, and update the ticket accordingly. The SA Tool should then display the successful fare payment screen, play the successful fare payment audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Unreadable Ticket", "Test_Sce_Description": "Verify that the system correctly handles fare payment when the SA Tool application detects the ticket but fails to read it correctly. The application should handle this exception appropriately and not crash or hang."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Failed Inspection", "Description": "Verify that the system correctly handles fare payment when the ticket inspection fails. The operator should be able to select the payment function on the SA Tool inspection results screen, and the system should record both the fare payment and inspection transactions. The application should then return to the Tap Card screen with a notification of the corresponding inspection action."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the system correctly handles fare payment when the customer's ride balance is empty. The SA Tool should detect the empty Ride Balance, display a declined message to the customer, and not conduct the transaction. The SA Tool should then play the declined audio tone and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Low Battery", "Description": "Verify that the system correctly handles fare payment when the device's battery goes below the low battery threshold during payment. If the low battery threshold is reached before the fare payment is processed, the application should switch to 'Out of Service' mode. If the fare payment is processed before the low battery threshold is reached, the application should then switch to 'Out of Service' mode."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "Verify that the system correctly handles fare payment when the customer taps a card that is not CLIENT media. The SA Tool application should not respond, but the device should display the error message 'Card Read Error' for a short period of time."}, "Test Scenario 5": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Verify that the system correctly handles fare payment when the customer's ticket is within the Anti-Passback Window. The device should detect that the ticket fails the Anti-Passback checks, display a declined message to the customer, and not conduct the transaction. The SA Tool should then play the declined audio tone and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that the system correctly handles fare payment when the customer taps a non-activated ticket. The device should detect that the ticket is not activated, display a declined message to the customer, and not conduct the transaction. The SA Tool should then play the declined audio tone and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Expired Ticket", "Description": "Verify that the system correctly handles fare payment when the customer taps an expired ticket. The device should detect that the ticket is expired, display a declined message to the customer, and not conduct the transaction. The SA Tool should then play the declined audio tone and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Period Pass", "Description": "Verify that the system correctly handles fare payment when the customer's ticket has a valid period pass. The device should compute that the ticket has a valid period pass, accept the fare, and update the ticket accordingly. The SA Tool should then display the successful fare payment screen, play the successful fare payment audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 9": {"Test scenarios": "Fare Payment with Unreadable Ticket", "Description": "Verify that the system correctly handles fare payment when the SA Tool application detects the ticket but fails to read it correctly. The application should handle this exception appropriately and not crash or hang."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer tries to make a fare payment with a TICKET that has no ride balance remaining. The SA Tool should detect the empty ride balance, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "This scenario will test the performance of the SA Tool when the device battery goes below the low battery threshold during a fare payment. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5 of the Main Use Case. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer tries to make a fare payment with a card that is not CLIENT media. The SA Tool application should not respond, but the device should display a 'Card Read Error' message for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer tries to make a fare payment with a non-activated TICKET. The SA Tool should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, detect that the farecard is in overdraft, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a farecard is locked. The SA Tool should read the Farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Unreadable TICKET", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's TICKET is unreadable. The SA Tool NFC reader should detect the TICKET but be unable to read it, indicating to the operator that the TICKET is unreadable. If the customer taps the NFC reader again and the tap is successful, steps 4 \u2013 9 of the Main Use Case should be conducted. If the tap is unsuccessful, the SA Tool application should indicate to the operator that the TICKET is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's TICKET has a valid Non-Adult, Non-Child concession. The SA Tool should process the fare payment according to the concession rules."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "This scenario will test the functionality of the SA Tool when a customer tries to make a fare payment with a TICKET that has no ride balance remaining. The SA Tool should detect the empty ride balance, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Low Battery", "Description": "This scenario will test the performance of the SA Tool when the device battery goes below the low battery threshold during a fare payment. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5 of the Main Use Case. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "This scenario will test the functionality of the SA Tool when a customer tries to make a fare payment with a card that is not CLIENT media. The SA Tool application should not respond, but the device should display a 'Card Read Error' message for a short period of time."}, "Test Scenario 4": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "This scenario will test the functionality of the SA Tool when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "This scenario will test the functionality of the SA Tool when a customer tries to make a fare payment with a non-activated TICKET. The SA Tool should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, detect that the farecard is in overdraft, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "This scenario will test the functionality of the SA Tool when a farecard is locked. The SA Tool should read the Farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Unreadable TICKET", "Description": "This scenario will test the functionality of the SA Tool when a customer's TICKET is unreadable. The SA Tool NFC reader should detect the TICKET but be unable to read it, indicating to the operator that the TICKET is unreadable. If the customer taps the NFC reader again and the tap is successful, steps 4 \u2013 9 of the Main Use Case should be conducted. If the tap is unsuccessful, the SA Tool application should indicate to the operator that the TICKET is unreadable."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Description": "This scenario will test the functionality of the SA Tool when a customer's TICKET has a valid Non-Adult, Non-Child concession. The SA Tool should process the fare payment according to the concession rules."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Low Battery Threshold Test", "Test_Sce_Description": "This scenario tests the functionality of the application when the battery goes below the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Fare Payment Processing Test", "Test_Sce_Description": "This scenario tests the fare payment processing functionality of the application. The application should be able to process the customer's fare payment as per Step 5 if the low battery threshold is not reached before Step 5."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Out of Service Mode Test", "Test_Sce_Description": "This scenario tests the 'Out of Service' mode functionality of the application. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5 or after processing the customer's fare payment as per Step 5."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Card Read Error Test", "Test_Sce_Description": "This scenario tests the error handling functionality of the application when a card that is not CLIENT media is tapped. The application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Anti-Passback Checks Test", "Test_Sce_Description": "This scenario tests the Anti-Passback checks functionality of the application. The device should detect that the TICKET fails the Anti-Passback checks and the application should display a declined message to the customer. The transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Declined Message Display Test", "Test_Sce_Description": "This scenario tests the declined message display functionality of the application. The application should display a declined message to the customer if the TICKET fails the Anti-Passback checks. The SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Ride Balance Empty Test", "Test_Sce_Description": "This scenario tests the functionality of the application when the customer's ride balance is empty. The SA Tool should detect that the Ride Balance is empty and display a declined message to the customer. The transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Ticket Activation Test", "Test_Sce_Description": "This scenario tests the functionality of the application when the customer's Ticket is not activated. The application should be able to detect that the Ticket is not activated and handle the situation appropriately."}, {"Test Scenario 1": {"Test scenarios": "Low Battery Threshold Test", "Description": "This scenario tests the functionality of the application when the battery goes below the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, "Test Scenario 2": {"Test scenarios": "Fare Payment Processing Test", "Description": "This scenario tests the fare payment processing functionality of the application. The application should be able to process the customer's fare payment as per Step 5 if the low battery threshold is not reached before Step 5."}, "Test Scenario 3": {"Test scenarios": "Out of Service Mode Test", "Description": "This scenario tests the 'Out of Service' mode functionality of the application. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5 or after processing the customer's fare payment as per Step 5."}, "Test Scenario 4": {"Test scenarios": "Card Read Error Test", "Description": "This scenario tests the error handling functionality of the application when a card that is not CLIENT media is tapped. The application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, "Test Scenario 5": {"Test scenarios": "Anti-Passback Checks Test", "Description": "This scenario tests the Anti-Passback checks functionality of the application. The device should detect that the TICKET fails the Anti-Passback checks and the application should display a declined message to the customer. The transaction should not be conducted."}, "Test Scenario 6": {"Test scenarios": "Declined Message Display Test", "Description": "This scenario tests the declined message display functionality of the application. The application should display a declined message to the customer if the TICKET fails the Anti-Passback checks. The SA Tool should play the declined audio tone."}, "Test Scenario 7": {"Test scenarios": "Ride Balance Empty Test", "Description": "This scenario tests the functionality of the application when the customer's ride balance is empty. The SA Tool should detect that the Ride Balance is empty and display a declined message to the customer. The transaction should not be conducted."}, "Test Scenario 8": {"Test scenarios": "Ticket Activation Test", "Description": "This scenario tests the functionality of the application when the customer's Ticket is not activated. The application should be able to detect that the Ticket is not activated and handle the situation appropriately."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should display a declined message and the transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Low Battery Threshold", "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the low battery threshold is reached during a fare payment process. If the threshold is reached before Step 5, the application should switch to 'Out of Service' mode. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should display a declined message and the transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a non-activated ticket. The system should display a declined message and the transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a locked farecard. The system should display a declined screen and the inspection should not proceed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Unreadable TICKET", "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with an unreadable TICKET. The system should indicate to the operator that the TICKET is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a TICKET that has a valid Non-Adult, Non-Child concession."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should display a declined message and the transaction should not be conducted."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Low Battery Threshold", "Description": "Verify that the system correctly switches to 'Out of Service' mode when the low battery threshold is reached during a fare payment process. If the threshold is reached before Step 5, the application should switch to 'Out of Service' mode. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Anti-Passback Window", "Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should display a declined message and the transaction should not be conducted."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a non-activated ticket. The system should display a declined message and the transaction should not be conducted."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a locked farecard. The system should display a declined screen and the inspection should not proceed."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Unreadable TICKET", "Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with an unreadable TICKET. The system should indicate to the operator that the TICKET is unreadable."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a TICKET that has a valid Non-Adult, Non-Child concession."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Validating Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Timeout Functionality", "Test_Sce_Description": "Verify that the application returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the ticket being within the Anti-Passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Validating Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly identifies a non-activated ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Performance of SA Tool", "Test_Sce_Description": "Verify that the SA Tool application performs efficiently when handling multiple transactions simultaneously. The application should not crash or slow down significantly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Security of SA Tool", "Test_Sce_Description": "Verify that the SA Tool application securely handles customer data during transactions. No customer data should be leaked or accessible to unauthorized users."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Handling of Expired Tickets", "Test_Sce_Description": "Verify that the system correctly identifies an expired ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Handling of Unreadable Tickets", "Test_Sce_Description": "Verify that the system correctly identifies an unreadable ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Handling of Tickets with No Ride Balance", "Test_Sce_Description": "Verify that the system correctly identifies a ticket with no ride balance and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Handling of Low Battery Threshold", "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the battery goes below the low battery threshold during a successful ticket tap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Handling of Non-CLIENT Media", "Test_Sce_Description": "Verify that the system correctly identifies a card that is not CLIENT media and does not respond. The device error message 'Card Read Error' should be displayed for a short period of time."}, {"Test Scenario 1": {"Test scenarios": "Validating Anti-Passback Window", "Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, "Test Scenario 2": {"Test scenarios": "Timeout Functionality", "Description": "Verify that the application returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the ticket being within the Anti-Passback Window."}, "Test Scenario 3": {"Test scenarios": "Validating Non-Activated Ticket", "Description": "Verify that the system correctly identifies a non-activated ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, "Test Scenario 4": {"Test scenarios": "Performance of SA Tool", "Description": "Verify that the SA Tool application performs efficiently when handling multiple transactions simultaneously. The application should not crash or slow down significantly."}, "Test Scenario 5": {"Test scenarios": "Security of SA Tool", "Description": "Verify that the SA Tool application securely handles customer data during transactions. No customer data should be leaked or accessible to unauthorized users."}, "Test Scenario 6": {"Test scenarios": "Handling of Expired Tickets", "Description": "Verify that the system correctly identifies an expired ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, "Test Scenario 7": {"Test scenarios": "Handling of Unreadable Tickets", "Description": "Verify that the system correctly identifies an unreadable ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, "Test Scenario 8": {"Test scenarios": "Handling of Tickets with No Ride Balance", "Description": "Verify that the system correctly identifies a ticket with no ride balance and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, "Test Scenario 9": {"Test scenarios": "Handling of Low Battery Threshold", "Description": "Verify that the system correctly switches to 'Out of Service' mode when the battery goes below the low battery threshold during a successful ticket tap."}, "Test Scenario 10": {"Test scenarios": "Handling of Non-CLIENT Media", "Description": "Verify that the system correctly identifies a card that is not CLIENT media and does not respond. The device error message 'Card Read Error' should be displayed for a short period of time."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment using a non-activated ticket. The tool should detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment using a ticket with an empty ride balance. The tool should detect that the ride balance is empty and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Low Battery Threshold", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode. Else, the customers fare payment should be processed as per Step 5. The application should then switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-CLIENT Media Card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment using a non-CLIENT media card. The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The device should detect that the ticket fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment using a locked farecard. The SA Tool should read the farecard, determine that it is locked, display a declined screen to the operator and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Unreadable Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment using an unreadable ticket. The SA Tool NFC reader should detect the ticket but be unable to read it. The SA Tool application should indicate to the operator that the ticket is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment using a ticket with a valid non-adult, non-child concession."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment using a non-activated ticket. The tool should detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment using a ticket with an empty ride balance. The tool should detect that the ride balance is empty and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Low Battery Threshold", "Description": "This scenario tests the functionality of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode. Else, the customers fare payment should be processed as per Step 5. The application should then switch to \u201cOut of Service\u201d mode."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-CLIENT Media Card", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment using a non-CLIENT media card. The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, "Test Scenario 5": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The device should detect that the ticket fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment using a locked farecard. The SA Tool should read the farecard, determine that it is locked, display a declined screen to the operator and not proceed with the inspection."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Unreadable Ticket", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment using an unreadable ticket. The SA Tool NFC reader should detect the ticket but be unable to read it. The SA Tool application should indicate to the operator that the ticket is unreadable."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment using a ticket with a valid non-adult, non-child concession."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a premium service class farecard that has a valid special event transfer product and the tap is within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the upgrade fare from the ePurse balance when a fare payment is made with a farecard that has a valid non-adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the child concession fare from the ePurse balance when a fare payment is made with a farecard that has a valid child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Performance Test for Fare Payment", "Test_Sce_Description": "Verify that the system can handle a high volume of fare payments simultaneously without any performance degradation."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Security Test for Fare Payment", "Test_Sce_Description": "Verify that the system securely processes fare payments and does not expose any sensitive customer information during the transaction."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a premium service class farecard that has a valid special event transfer product and the tap is within the transfer window."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly calculates and deducts the upgrade fare from the ePurse balance when a fare payment is made with a farecard that has a valid non-adult concession."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly calculates and deducts the child concession fare from the ePurse balance when a fare payment is made with a farecard that has a valid child concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, "Test Scenario 6": {"Test scenarios": "Performance Test for Fare Payment", "Description": "Verify that the system can handle a high volume of fare payments simultaneously without any performance degradation."}, "Test Scenario 7": {"Test scenarios": "Security Test for Fare Payment", "Description": "Verify that the system securely processes fare payments and does not expose any sensitive customer information during the transaction."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Valid Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid non-adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare", "Test_Sce_Description": "Verify that the system correctly computes and allows a free transfer when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window, and the premium fare is lower than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Higher Special Event Fare", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window, and the premium fare is higher than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Performance Test", "Test_Sce_Description": "Verify that the system can handle a high volume of fare payments simultaneously without any degradation in performance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Security Test", "Test_Sce_Description": "Verify that the system securely processes fare payments, ensuring that customer data is protected and that transactions are processed securely."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Valid Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid non-adult concession."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid child concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Premium Service Class and Lower Special Event Fare", "Description": "Verify that the system correctly computes and allows a free transfer when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window, and the premium fare is lower than the special event fare."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Premium Service Class and Higher Special Event Fare", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window, and the premium fare is higher than the special event fare."}, "Test Scenario 8": {"Test scenarios": "Performance Test", "Description": "Verify that the system can handle a high volume of fare payments simultaneously without any degradation in performance."}, "Test Scenario 9": {"Test scenarios": "Security Test", "Description": "Verify that the system securely processes fare payments, ensuring that customer data is protected and that transactions are processed securely."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Premium Service Route with Lower Fare than Special Event", "Test_Sce_Description": "Verify that when a customer taps on a premium service route after previously riding on a Special Event service route (within the transfer window), the system correctly identifies this as a free transfer and does not deduct any fare from the ePurse Balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Deduction from ePurse Balance", "Test_Sce_Description": "Verify that the ATS correctly computes the fare and deducts the amount from the Virtual Card E-Purse. The balance in the ePurse should be updated correctly after the fare deduction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Communication with SA Tool", "Test_Sce_Description": "Verify that the fare deduction and updated balance are correctly communicated back to the SA Tool and displayed to the operator."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Transfer Print Status Display", "Test_Sce_Description": "Verify that the SA Tool sets the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Valid Non-Adult Concession Fare Deduction", "Test_Sce_Description": "Verify that when a customer with a valid Non-Adult concession taps on the SA Tool, the system correctly identifies the concession and deducts the corresponding fare from the ePurse Balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Peak Hour Fare Payment after Reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that when a customer taps on peak hours after previously reaching off peak daily cap (outside the transfer window), the system correctly identifies this as a fare payment and deducts the corresponding fare from the ePurse Balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Premium Service Route with Higher Fare than Special Event", "Test_Sce_Description": "Verify that when a customer taps on a premium service route after previously riding on a Special Event service route (within the transfer window), the system correctly identifies this as a fare upgrade and deducts the corresponding fare from the ePurse Balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Valid Child Concession Fare Deduction", "Test_Sce_Description": "Verify that when a customer with a valid Child concession taps on the SA Tool, the system correctly identifies the concession and deducts the corresponding fare from the ePurse Balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that when an operator inspects a customer\u2019s farecard and determines that they have not paid a fare, the operator can select the payment function on the SA Tool inspection results screen and the system correctly deducts the fare from the ePurse Balance."}, {"Test Scenario 1": {"Test scenarios": "Premium Service Route with Lower Fare than Special Event", "Description": "Verify that when a customer taps on a premium service route after previously riding on a Special Event service route (within the transfer window), the system correctly identifies this as a free transfer and does not deduct any fare from the ePurse Balance."}, "Test Scenario 2": {"Test scenarios": "Fare Deduction from ePurse Balance", "Description": "Verify that the ATS correctly computes the fare and deducts the amount from the Virtual Card E-Purse. The balance in the ePurse should be updated correctly after the fare deduction."}, "Test Scenario 3": {"Test scenarios": "Communication with SA Tool", "Description": "Verify that the fare deduction and updated balance are correctly communicated back to the SA Tool and displayed to the operator."}, "Test Scenario 4": {"Test scenarios": "Transfer Print Status Display", "Description": "Verify that the SA Tool sets the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."}, "Test Scenario 5": {"Test scenarios": "Valid Non-Adult Concession Fare Deduction", "Description": "Verify that when a customer with a valid Non-Adult concession taps on the SA Tool, the system correctly identifies the concession and deducts the corresponding fare from the ePurse Balance."}, "Test Scenario 6": {"Test scenarios": "Peak Hour Fare Payment after Reaching Off Peak Daily Cap", "Description": "Verify that when a customer taps on peak hours after previously reaching off peak daily cap (outside the transfer window), the system correctly identifies this as a fare payment and deducts the corresponding fare from the ePurse Balance."}, "Test Scenario 7": {"Test scenarios": "Premium Service Route with Higher Fare than Special Event", "Description": "Verify that when a customer taps on a premium service route after previously riding on a Special Event service route (within the transfer window), the system correctly identifies this as a fare upgrade and deducts the corresponding fare from the ePurse Balance."}, "Test Scenario 8": {"Test scenarios": "Valid Child Concession Fare Deduction", "Description": "Verify that when a customer with a valid Child concession taps on the SA Tool, the system correctly identifies the concession and deducts the corresponding fare from the ePurse Balance."}, "Test Scenario 9": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that when an operator inspects a customer\u2019s farecard and determines that they have not paid a fare, the operator can select the payment function on the SA Tool inspection results screen and the system correctly deducts the fare from the ePurse Balance."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling ePurse balance less than fare amount", "Test_Sce_Description": "This scenario will test if the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing valid transfer product within Intra-agency Transfer window", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing valid transfer product within Inter-agency Transfer window", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product from other transit agency and computes the fare based on the transfer agreement between the transit agencies within the Inter-agency Transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling Autoload Threshold", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing Farecard on the Action or Load Value List", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling fare payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap (outside the transfer window)."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route (within the transfer window)."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route (within the transfer window) and the Premium fare is lower than the Special Event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling Valid Non-Adult Concession on Farecard", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child, Non-discreet concession", "Description": "This scenario will test if the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, "Test Scenario 2": {"Test scenarios": "Handling ePurse balance less than fare amount", "Description": "This scenario will test if the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, "Test Scenario 3": {"Test scenarios": "Processing valid transfer product within Intra-agency Transfer window", "Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."}, "Test Scenario 4": {"Test scenarios": "Processing valid transfer product within Inter-agency Transfer window", "Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product from other transit agency and computes the fare based on the transfer agreement between the transit agencies within the Inter-agency Transfer window."}, "Test Scenario 5": {"Test scenarios": "Handling Autoload Threshold", "Description": "This scenario will test if the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, "Test Scenario 6": {"Test scenarios": "Processing Farecard on the Action or Load Value List", "Description": "This scenario will test if the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, "Test Scenario 7": {"Test scenarios": "Handling fare payment during Peak hours after reaching Off Peak Daily Cap", "Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap (outside the transfer window)."}, "Test Scenario 8": {"Test scenarios": "Processing Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route (within the transfer window)."}, "Test Scenario 9": {"Test scenarios": "Processing Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route (within the transfer window) and the Premium fare is lower than the Special Event fare."}, "Test Scenario 10": {"Test scenarios": "Handling Valid Non-Adult Concession on Farecard", "Description": "This scenario will test if the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Temporal Class Supplement Tap-On Transaction", "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the device displays an HMI reflecting the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Autoload Enabled Farecard Transaction", "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Farecard has the Autoload amount automatically added to the E-Purse balance and the device deducts the Fare from the Farecard E-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Override Default Trip Transaction", "Test_Sce_Description": "Verify that when a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on and the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the Default Trip was overridden."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Audio Messages Request", "Test_Sce_Description": "Verify that when a customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Farecard Validation Failure", "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window and provides the appropriate feedback to the cardholder without updating the Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Blocked Farecard Transaction", "Test_Sce_Description": "Verify that when a Farecard is blocked, the right to travel is not conferred and the Device provides the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Max Travel Duration Exceeded", "Test_Sce_Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Multiple NFC Media Presentation", "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality and presents Anti-Collision HMI to customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Non-Activated Farecard Transaction", "Test_Sce_Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful and the device provides feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Card Reading Error", "Test_Sce_Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides feedback to the Cardholder of an unsuccessful transaction."}, {"Test Scenario 1": {"Test scenarios": "Temporal Class Supplement Tap-On Transaction", "Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the device displays an HMI reflecting the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on."}, "Test Scenario 2": {"Test scenarios": "Autoload Enabled Farecard Transaction", "Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Farecard has the Autoload amount automatically added to the E-Purse balance and the device deducts the Fare from the Farecard E-Purse balance."}, "Test Scenario 3": {"Test scenarios": "Override Default Trip Transaction", "Description": "Verify that when a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on and the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the Default Trip was overridden."}, "Test Scenario 4": {"Test scenarios": "Audio Messages Request", "Description": "Verify that when a customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, "Test Scenario 5": {"Test scenarios": "Farecard Validation Failure", "Description": "Verify that when a Farecard fails validation checks at Tap-On, the device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window and provides the appropriate feedback to the cardholder without updating the Farecard."}, "Test Scenario 6": {"Test scenarios": "Blocked Farecard Transaction", "Description": "Verify that when a Farecard is blocked, the right to travel is not conferred and the Device provides the appropriate feedback to the Cardholder."}, "Test Scenario 7": {"Test scenarios": "Max Travel Duration Exceeded", "Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips."}, "Test Scenario 8": {"Test scenarios": "Multiple NFC Media Presentation", "Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality and presents Anti-Collision HMI to customer."}, "Test Scenario 9": {"Test scenarios": "Non-Activated Farecard Transaction", "Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful and the device provides feedback to the Cardholder of an unsuccessful transaction."}, "Test Scenario 10": {"Test scenarios": "Card Reading Error", "Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides feedback to the Cardholder of an unsuccessful transaction."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Autoload Threshold Crossing", "Test_Sce_Description": "Verify that when the Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Autoload Threshold Not Crossing", "Test_Sce_Description": "Verify that when the Farecard with Autoload Enabled is tapped on a device and the Fare amount does not cross the Auto-load threshold, the Autoload amount is not added to the E-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Fare Deduction After Autoload", "Test_Sce_Description": "Verify that after the Autoload amount is added to the E-Purse balance, the Fare is deducted from the updated E-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Feedback to Cardholder After Autoload", "Test_Sce_Description": "Verify that the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to an Autoload transaction and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Performance of Autoload Process", "Test_Sce_Description": "Verify the performance of the Autoload process by checking the time taken to add the Autoload amount to the E-Purse balance and deduct the Fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Security of Autoload Process", "Test_Sce_Description": "Verify the security of the Autoload process by ensuring that the Autoload amount is securely added to the E-Purse balance and the Fare is securely deducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Exception Flow - Farecard Validation Failure", "Test_Sce_Description": "Verify that when the Farecard fails validation checks at Tap-On, the device does not proceed with the Autoload process."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Alternate Flow - Farecard with No Default O/D", "Test_Sce_Description": "Verify that when the Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on."}, {"Test Scenario 1": {"Test scenarios": "Autoload Threshold Crossing", "Description": "Verify that when the Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance."}, "Test Scenario 2": {"Test scenarios": "Autoload Threshold Not Crossing", "Description": "Verify that when the Farecard with Autoload Enabled is tapped on a device and the Fare amount does not cross the Auto-load threshold, the Autoload amount is not added to the E-Purse balance."}, "Test Scenario 3": {"Test scenarios": "Fare Deduction After Autoload", "Description": "Verify that after the Autoload amount is added to the E-Purse balance, the Fare is deducted from the updated E-Purse balance."}, "Test Scenario 4": {"Test scenarios": "Feedback to Cardholder After Autoload", "Description": "Verify that the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to an Autoload transaction and updates the Farecard accordingly."}, "Test Scenario 5": {"Test scenarios": "Performance of Autoload Process", "Description": "Verify the performance of the Autoload process by checking the time taken to add the Autoload amount to the E-Purse balance and deduct the Fare."}, "Test Scenario 6": {"Test scenarios": "Security of Autoload Process", "Description": "Verify the security of the Autoload process by ensuring that the Autoload amount is securely added to the E-Purse balance and the Fare is securely deducted."}, "Test Scenario 7": {"Test scenarios": "Exception Flow - Farecard Validation Failure", "Description": "Verify that when the Farecard fails validation checks at Tap-On, the device does not proceed with the Autoload process."}, "Test Scenario 8": {"Test scenarios": "Alternate Flow - Farecard with No Default O/D", "Description": "Verify that when the Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Full Fare-by-Zone transaction processing", "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Override Default O/D", "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on. The customer should be able to request the override of a Default Trip by interacting with the Device."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Capping discount eligibility", "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list and complete the fare processing. ATS should calculate the capping discount and apply to the fare calculation."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Multiple capping discounts eligibility", "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS should take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Offline device capping discount", "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules should follow use-case logic outlined in ticketing use cases."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Open Payments Media fails ODA check", "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Open Payments Media Fails Expiry Check", "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device should detect that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Blocked Farecard", "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. The Card reader should detect that Farecard is blocked and the Device should provide the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Max Travel Duration Exceeded", "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. The Device should determine that the Tap-On Time + Max Travel Duration < Current Time and Auto-settle the Underpayment and deduct the value from the Farecard E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Multiple NFC media presented", "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. The Device should block all user functionality, and present Anti-Collision HMI to customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Non-activated Farecard", "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. The Device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Card reading error", "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device should provide the appropriate feedback to the Cardholder."}, {"Test Scenario 1": {"Test scenarios": "Full Fare-by-Zone transaction processing", "Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."}, "Test Scenario 2": {"Test scenarios": "Override Default O/D", "Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on. The customer should be able to request the override of a Default Trip by interacting with the Device."}, "Test Scenario 3": {"Test scenarios": "Capping discount eligibility", "Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list and complete the fare processing. ATS should calculate the capping discount and apply to the fare calculation."}, "Test Scenario 4": {"Test scenarios": "Multiple capping discounts eligibility", "Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS should take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."}, "Test Scenario 5": {"Test scenarios": "Offline device capping discount", "Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules should follow use-case logic outlined in ticketing use cases."}, "Test Scenario 6": {"Test scenarios": "Open Payments Media fails ODA check", "Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder."}, "Test Scenario 7": {"Test scenarios": "Open Payments Media Fails Expiry Check", "Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device should detect that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."}, "Test Scenario 8": {"Test scenarios": "Blocked Farecard", "Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. The Card reader should detect that Farecard is blocked and the Device should provide the appropriate feedback to the Cardholder."}, "Test Scenario 9": {"Test scenarios": "Max Travel Duration Exceeded", "Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. The Device should determine that the Tap-On Time + Max Travel Duration < Current Time and Auto-settle the Underpayment and deduct the value from the Farecard E-Purse."}, "Test Scenario 10": {"Test scenarios": "Multiple NFC media presented", "Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. The Device should block all user functionality, and present Anti-Collision HMI to customer."}, "Test Scenario 11": {"Test scenarios": "Non-activated Farecard", "Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. The Device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."}, "Test Scenario 12": {"Test scenarios": "Card reading error", "Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device should provide the appropriate feedback to the Cardholder."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Non-Revenue farecard in training mode", "Test_Sce_Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode and displays a declined HMI when the Non-Revenue card is tapped in the revenue mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard tap during Temporal Class Supplement", "Test_Sce_Description": "Verify that the device reflects the Temporal Class Supplement on its HMI and processes the Tap-On Transaction as a normal tap-on when a Farecard is tapped during a time period that contains an associated Temporal Class Supplement."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Autoload Enabled Farecard", "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Farecard has the Autoload amount automatically added to the E-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard without Default O/D", "Test_Sce_Description": "Verify that if a Farecard without a Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Audio Messages Request", "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard Validation Failure", "Test_Sce_Description": "Verify that the system handles the scenario where a Farecard fails validation checks at Tap-On appropriately."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Period Pass with Higher Fare Value", "Test_Sce_Description": "Verify that when a Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value, the ATS computes and deducts the Upgrade fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Period Pass with Lower Fare Value", "Test_Sce_Description": "Verify that when a Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value, the ATS identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Limited Period Pass", "Test_Sce_Description": "Verify that when a Farecard has a valid Limited Period Pass and the current time is within the limits of the product, the system accepts the fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "Verify that when a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the system accepts the fare payment."}, {"Test Scenario 1": {"Test scenarios": "Testing Non-Revenue farecard in training mode", "Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode and displays a declined HMI when the Non-Revenue card is tapped in the revenue mode."}, "Test Scenario 2": {"Test scenarios": "Testing Farecard tap during Temporal Class Supplement", "Description": "Verify that the device reflects the Temporal Class Supplement on its HMI and processes the Tap-On Transaction as a normal tap-on when a Farecard is tapped during a time period that contains an associated Temporal Class Supplement."}, "Test Scenario 3": {"Test scenarios": "Testing Autoload Enabled Farecard", "Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Farecard has the Autoload amount automatically added to the E-Purse balance."}, "Test Scenario 4": {"Test scenarios": "Testing Farecard without Default O/D", "Description": "Verify that if a Farecard without a Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on."}, "Test Scenario 5": {"Test scenarios": "Testing Audio Messages Request", "Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, "Test Scenario 6": {"Test scenarios": "Testing Farecard Validation Failure", "Description": "Verify that the system handles the scenario where a Farecard fails validation checks at Tap-On appropriately."}, "Test Scenario 7": {"Test scenarios": "Testing Period Pass with Higher Fare Value", "Description": "Verify that when a Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value, the ATS computes and deducts the Upgrade fare."}, "Test Scenario 8": {"Test scenarios": "Testing Period Pass with Lower Fare Value", "Description": "Verify that when a Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value, the ATS identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment."}, "Test Scenario 9": {"Test scenarios": "Testing Limited Period Pass", "Description": "Verify that when a Farecard has a valid Limited Period Pass and the current time is within the limits of the product, the system accepts the fare payment."}, "Test Scenario 10": {"Test scenarios": "Testing Limited Period Pass outside of valid time with sufficient e-Purse balance", "Description": "Verify that when a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the system accepts the fare payment."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a premium service class and the farecard has a valid Special Event Transfer Product and the tap is within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the tap is within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Performance Test", "Test_Sce_Description": "Verify that the system is able to handle a high volume of fare payments simultaneously without any degradation in performance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Security Test", "Test_Sce_Description": "Verify that the system securely processes fare payments and that sensitive customer information such as ePurse balance is not exposed during the transaction."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a premium service class and the farecard has a valid Special Event Transfer Product and the tap is within the transfer window."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the tap is within the transfer window."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, "Test Scenario 7": {"Test scenarios": "Performance Test", "Description": "Verify that the system is able to handle a high volume of fare payments simultaneously without any degradation in performance."}, "Test Scenario 8": {"Test scenarios": "Security Test", "Description": "Verify that the system securely processes fare payments and that sensitive customer information such as ePurse balance is not exposed during the transaction."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Performance Test for Fare Payment", "Test_Sce_Description": "Verify that the system performs efficiently when processing fare payments, ensuring that the fare is calculated and deducted from the ePurse balance within the expected time frame."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Security Test for Fare Payment", "Test_Sce_Description": "Verify that the system securely processes fare payments, ensuring that sensitive customer information such as ePurse balance and farecard details are protected."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the special event fare."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Premium Service Class and Lower Special Event Fare", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the special event fare."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, "Test Scenario 7": {"Test scenarios": "Performance Test for Fare Payment", "Description": "Verify that the system performs efficiently when processing fare payments, ensuring that the fare is calculated and deducted from the ePurse balance within the expected time frame."}, "Test Scenario 8": {"Test scenarios": "Security Test for Fare Payment", "Description": "Verify that the system securely processes fare payments, ensuring that sensitive customer information such as ePurse balance and farecard details are protected."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment on Premium Service Route with Higher Premium Fare", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare upgrade from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment on Premium Service Route with Lower Premium Fare", "Test_Sce_Description": "Verify that the system correctly computes and allows a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Valid Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Valid Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the correct Child Concession fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Performance of the SA Tool", "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay when computing and deducting fares from the ePurse balance, especially during peak hours."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Security of the SA Tool", "Test_Sce_Description": "Verify that the SA Tool securely processes fare payments, ensuring that customer data is protected and that the ePurse balance is accurately updated."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment on Premium Service Route with Higher Premium Fare", "Description": "Verify that the system correctly computes and deducts the fare upgrade from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window."}, "Test Scenario 3": {"Test scenarios": "Fare Payment on Premium Service Route with Lower Premium Fare", "Description": "Verify that the system correctly computes and allows a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Valid Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Valid Child Concession", "Description": "Verify that the system correctly computes and deducts the correct Child Concession fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."}, "Test Scenario 7": {"Test scenarios": "Performance of the SA Tool", "Description": "Verify that the SA Tool performs efficiently and without delay when computing and deducting fares from the ePurse balance, especially during peak hours."}, "Test Scenario 8": {"Test scenarios": "Security of the SA Tool", "Description": "Verify that the SA Tool securely processes fare payments, ensuring that customer data is protected and that the ePurse balance is accurately updated."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession", "Test_Sce_Description": "Verify that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of insufficient ePurse balance", "Test_Sce_Description": "Verify that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of valid transfer product", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Inter-agency transfer processing", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of Autoload threshold", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of Action or Load Value list", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of peak hours payment after reaching off peak daily cap", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap (outside the transfer window)."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of premium service route with transfer where the premium fare is higher than the special event fare", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route (within the transfer window)."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of premium service route with transfer where the premium fare is lower than the special event fare", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route (within the transfer window)."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult concession", "Test_Sce_Description": "Verify that the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child, Non-discreet concession", "Description": "Verify that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, "Test Scenario 2": {"Test scenarios": "Handling of insufficient ePurse balance", "Description": "Verify that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, "Test Scenario 3": {"Test scenarios": "Processing of valid transfer product", "Description": "Verify that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."}, "Test Scenario 4": {"Test scenarios": "Inter-agency transfer processing", "Description": "Verify that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."}, "Test Scenario 5": {"Test scenarios": "Handling of Autoload threshold", "Description": "Verify that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, "Test Scenario 6": {"Test scenarios": "Processing of Action or Load Value list", "Description": "Verify that the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, "Test Scenario 7": {"Test scenarios": "Handling of peak hours payment after reaching off peak daily cap", "Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap (outside the transfer window)."}, "Test Scenario 8": {"Test scenarios": "Processing of premium service route with transfer where the premium fare is higher than the special event fare", "Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route (within the transfer window)."}, "Test Scenario 9": {"Test scenarios": "Processing of premium service route with transfer where the premium fare is lower than the special event fare", "Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route (within the transfer window)."}, "Test Scenario 10": {"Test scenarios": "Validating Non-Adult concession", "Description": "Verify that the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Transfer Product", "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid transfer product on the customer's TICKET. The system should compute the free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Audio Messages Request", "Test_Sce_Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool", "Test_Sce_Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location, resulting in a regular ride balance fare payment and Transfer Product creation."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool", "Test_Sce_Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route, resulting in a free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Valid Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and processes a Valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly processes fare payment resulting from a failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen and the system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly identifies and processes a TICKET with no Ride Balance remaining. The system should display a declined message to the customer and play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Low Battery Threshold", "Test_Sce_Description": "Verify that the system correctly switches to \u201cOut of Service\u201d mode when the low battery threshold is reached during a successful TICKET tap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Non-CLIENT Media", "Test_Sce_Description": "Verify that the system correctly identifies and processes a card that is not CLIENT media. The system should display the device error message \u201cCard Read Error\u201d for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly identifies and processes a TICKET within the Anti-Passback Window. The system should display a declined message to the customer and play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly identifies and processes a non-activated TICKET. The system should display a declined message to the customer and play the declined audio tone."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."}, "Test Scenario 2": {"Test scenarios": "Validating Transfer Product", "Description": "Verify that the system correctly identifies and processes a valid transfer product on the customer's TICKET. The system should compute the free transfer."}, "Test Scenario 3": {"Test scenarios": "Audio Messages Request", "Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion."}, "Test Scenario 4": {"Test scenarios": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool", "Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location, resulting in a regular ride balance fare payment and Transfer Product creation."}, "Test Scenario 5": {"Test scenarios": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool", "Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route, resulting in a free transfer."}, "Test Scenario 6": {"Test scenarios": "Valid Child Concession", "Description": "Verify that the system correctly identifies and processes a Valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, "Test Scenario 7": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly processes fare payment resulting from a failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen and the system should record both the fare payment and inspection transactions."}, "Test Scenario 8": {"Test scenarios": "Empty Ride Balance", "Description": "Verify that the system correctly identifies and processes a TICKET with no Ride Balance remaining. The system should display a declined message to the customer and play the declined audio tone."}, "Test Scenario 9": {"Test scenarios": "Low Battery Threshold", "Description": "Verify that the system correctly switches to \u201cOut of Service\u201d mode when the low battery threshold is reached during a successful TICKET tap."}, "Test Scenario 10": {"Test scenarios": "Non-CLIENT Media", "Description": "Verify that the system correctly identifies and processes a card that is not CLIENT media. The system should display the device error message \u201cCard Read Error\u201d for a short period of time."}, "Test Scenario 11": {"Test scenarios": "Anti-Passback Window", "Description": "Verify that the system correctly identifies and processes a TICKET within the Anti-Passback Window. The system should display a declined message to the customer and play the declined audio tone."}, "Test Scenario 12": {"Test scenarios": "Non-Activated Ticket", "Description": "Verify that the system correctly identifies and processes a non-activated TICKET. The system should display a declined message to the customer and play the declined audio tone."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Valid Transfer Product", "Test_Sce_Description": "Verify that the SA Tool correctly computes the free transfer when the ticket has a valid Transfer Product and the tap is within the Transfer Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a Valid Child Concession on the customer's ticket and displays the successful Child fare payment screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the SA Tool correctly records both the fare payment and inspection transactions when the operator determines that the customer has not paid a fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ride balance is empty and displays a declined message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "Verify that the SA Tool correctly switches to 'Out of Service' mode when the battery goes below the low battery threshold during payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "Verify that the SA Tool correctly does not respond when the customer taps a card that is not CLIENT media."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ticket is within the Anti-Passback Window and displays a declined message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ticket is not activated and displays a declined message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Expired Ticket", "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ticket is expired and displays a declined message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Period Pass", "Test_Sce_Description": "Verify that the SA Tool correctly computes that the ticket has a valid period pass and accepts the fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Unreadable Ticket", "Test_Sce_Description": "Verify that the SA Tool correctly detects when the ticket is unreadable and fails to read it correctly."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Valid Transfer Product", "Description": "Verify that the SA Tool correctly computes the free transfer when the ticket has a valid Transfer Product and the tap is within the Transfer Window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the SA Tool correctly identifies a Valid Child Concession on the customer's ticket and displays the successful Child fare payment screen."}, "Test Scenario 3": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the SA Tool correctly records both the fare payment and inspection transactions when the operator determines that the customer has not paid a fare."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the SA Tool correctly detects when the customer's ride balance is empty and displays a declined message."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Low Battery", "Description": "Verify that the SA Tool correctly switches to 'Out of Service' mode when the battery goes below the low battery threshold during payment."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "Verify that the SA Tool correctly does not respond when the customer taps a card that is not CLIENT media."}, "Test Scenario 7": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Verify that the SA Tool correctly detects when the customer's ticket is within the Anti-Passback Window and displays a declined message."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that the SA Tool correctly detects when the customer's ticket is not activated and displays a declined message."}, "Test Scenario 9": {"Test scenarios": "Fare Payment with Expired Ticket", "Description": "Verify that the SA Tool correctly detects when the customer's ticket is expired and displays a declined message."}, "Test Scenario 10": {"Test scenarios": "Fare Payment with Period Pass", "Description": "Verify that the SA Tool correctly computes that the ticket has a valid period pass and accepts the fare."}, "Test Scenario 11": {"Test scenarios": "Fare Payment with Unreadable Ticket", "Description": "Verify that the SA Tool correctly detects when the ticket is unreadable and fails to read it correctly."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to pay for a fare using a TICKET with no remaining ride balance. The system should detect the empty balance, decline the transaction, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed. If the threshold is reached after the fare payment is processed, the system should complete the transaction and then switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to pay for a fare using a card that is not CLIENT media. The system should not respond to the tap, and a 'Card Read Error' message should be displayed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to pay for a fare using a TICKET that is within the Anti-Passback Window. The system should detect the Anti-Passback violation, decline the transaction, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to pay for a fare using a non-activated TICKET. The system should detect the invalid TICKET, decline the transaction, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to pay for a fare using a locked Farecard. The system should detect the locked Farecard, decline the transaction, and display a declined message to the operator."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Unreadable TICKET", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to pay for a fare using an unreadable TICKET. The system should detect the unreadable TICKET, display an error message to the operator, and prompt the customer to tap the TICKET again. If the second tap is unsuccessful, the system should display an error message to the operator."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to pay for a fare using a TICKET with a valid concession that is neither Adult nor Child. The system should detect the valid concession and process the fare payment accordingly."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the system correctly handles a situation where a customer attempts to pay for a fare using a TICKET with no remaining ride balance. The system should detect the empty balance, decline the transaction, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Low Battery", "Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed. If the threshold is reached after the fare payment is processed, the system should complete the transaction and then switch to 'Out of Service' mode."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "Verify that the system correctly handles a situation where a customer attempts to pay for a fare using a card that is not CLIENT media. The system should not respond to the tap, and a 'Card Read Error' message should be displayed."}, "Test Scenario 4": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Verify that the system correctly handles a situation where a customer attempts to pay for a fare using a TICKET that is within the Anti-Passback Window. The system should detect the Anti-Passback violation, decline the transaction, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that the system correctly handles a situation where a customer attempts to pay for a fare using a non-activated TICKET. The system should detect the invalid TICKET, decline the transaction, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "Verify that the system correctly handles a situation where a customer attempts to pay for a fare using a locked Farecard. The system should detect the locked Farecard, decline the transaction, and display a declined message to the operator."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Unreadable TICKET", "Description": "Verify that the system correctly handles a situation where a customer attempts to pay for a fare using an unreadable TICKET. The system should detect the unreadable TICKET, display an error message to the operator, and prompt the customer to tap the TICKET again. If the second tap is unsuccessful, the system should display an error message to the operator."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly handles a situation where a customer attempts to pay for a fare using a TICKET with a valid concession that is neither Adult nor Child. The system should detect the valid concession and process the fare payment accordingly."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Low Battery Threshold Test", "Test_Sce_Description": "This scenario tests the functionality of the application when the battery level reaches the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Card Read Error Test", "Test_Sce_Description": "This scenario tests the application's response when a customer taps a card that is not CLIENT media. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Anti-Passback Window Test", "Test_Sce_Description": "This scenario tests the application's response when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Non-Activated Ticket Test", "Test_Sce_Description": "This scenario tests the application's response when a customer taps a non-activated TICKET. The application should detect that the TICKET is not activated and display an appropriate error message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Empty Ride Balance Test", "Test_Sce_Description": "This scenario tests the application's response when a customer's ride balance is empty. The SA Tool should detect that the Ride Balance is empty and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Valid Child Concession Test", "Test_Sce_Description": "This scenario tests the application's response when a customer's TICKET has a Valid Child concession. The application should detect the Valid Child Concession and display the successful Child fare payment screen. The SA Tool should play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Failed Inspection Test", "Test_Sce_Description": "This scenario tests the application's response when the operator inspects a customer's TICKET and determines that they have not paid a fare. The operator should select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Fare Payment with Free Transfer Test", "Test_Sce_Description": "This scenario tests the application's response when the fare payment is being made on the FLATFARE BASED SA Tool with a valid Transfer Product within the Transfer Window. The SA Tool should compute the free transfer."}, {"Test Scenario 1": {"Test scenarios": "Low Battery Threshold Test", "Description": "This scenario tests the functionality of the application when the battery level reaches the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, "Test Scenario 2": {"Test scenarios": "Card Read Error Test", "Description": "This scenario tests the application's response when a customer taps a card that is not CLIENT media. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, "Test Scenario 3": {"Test scenarios": "Anti-Passback Window Test", "Description": "This scenario tests the application's response when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, "Test Scenario 4": {"Test scenarios": "Non-Activated Ticket Test", "Description": "This scenario tests the application's response when a customer taps a non-activated TICKET. The application should detect that the TICKET is not activated and display an appropriate error message."}, "Test Scenario 5": {"Test scenarios": "Empty Ride Balance Test", "Description": "This scenario tests the application's response when a customer's ride balance is empty. The SA Tool should detect that the Ride Balance is empty and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, "Test Scenario 6": {"Test scenarios": "Valid Child Concession Test", "Description": "This scenario tests the application's response when a customer's TICKET has a Valid Child concession. The application should detect the Valid Child Concession and display the successful Child fare payment screen. The SA Tool should play the successful fare payment audio tone for Child concession."}, "Test Scenario 7": {"Test scenarios": "Failed Inspection Test", "Description": "This scenario tests the application's response when the operator inspects a customer's TICKET and determines that they have not paid a fare. The operator should select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Free Transfer Test", "Description": "This scenario tests the application's response when the fare payment is being made on the FLATFARE BASED SA Tool with a valid Transfer Product within the Transfer Window. The SA Tool should compute the free transfer."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Non-CLIENT Media Card", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Empty Ride Balance", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that has no ride balance remaining. The system should detect the empty ride balance, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Low Battery Threshold", "Test_Sce_Description": "This scenario is to validate the system's response when the device battery goes below the low battery threshold during a successful ticket tap. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment processing step."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Ticket in Anti-Passback Window", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that is within the Anti-Passback Window. The system should detect the Anti-Passback check failure, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a non-activated ticket. The system should detect the invalidity of the ticket, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Locked Farecard", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a locked farecard. The system should detect the locked status of the farecard, display a declined screen, and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Unreadable Ticket", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with an unreadable ticket. The system should detect the unreadability of the ticket and indicate to the operator that the ticket is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Non-Adult, Non-Child Concession", "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a valid non-adult, non-child concession tries to make a fare payment. The system should process the fare payment accordingly."}, {"Test Scenario 1": {"Test scenarios": "Validating Fare Payment with Non-CLIENT Media Card", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, "Test Scenario 2": {"Test scenarios": "Validating Fare Payment with Empty Ride Balance", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that has no ride balance remaining. The system should detect the empty ride balance, display a declined message, and not conduct the transaction."}, "Test Scenario 3": {"Test scenarios": "Validating Fare Payment with Low Battery Threshold", "Description": "This scenario is to validate the system's response when the device battery goes below the low battery threshold during a successful ticket tap. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment processing step."}, "Test Scenario 4": {"Test scenarios": "Validating Fare Payment with Ticket in Anti-Passback Window", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that is within the Anti-Passback Window. The system should detect the Anti-Passback check failure, display a declined message, and not conduct the transaction."}, "Test Scenario 5": {"Test scenarios": "Validating Fare Payment with Non-Activated Ticket", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a non-activated ticket. The system should detect the invalidity of the ticket, display a declined message, and not conduct the transaction."}, "Test Scenario 6": {"Test scenarios": "Validating Fare Payment with Locked Farecard", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a locked farecard. The system should detect the locked status of the farecard, display a declined screen, and not proceed with the inspection."}, "Test Scenario 7": {"Test scenarios": "Validating Fare Payment with Unreadable Ticket", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with an unreadable ticket. The system should detect the unreadability of the ticket and indicate to the operator that the ticket is unreadable."}, "Test Scenario 8": {"Test scenarios": "Validating Fare Payment with Non-Adult, Non-Child Concession", "Description": "This scenario is to validate the system's response when a customer with a valid non-adult, non-child concession tries to make a fare payment. The system should process the fare payment accordingly."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Anti-Passback Window Check", "Test_Sce_Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Declined Message Display", "Test_Sce_Description": "Ensure that the SA Tool application correctly displays a declined message to the customer when the transaction is not conducted due to the ticket being within the Anti-Passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Declined Audio Tone", "Test_Sce_Description": "Check that the SA Tool plays the declined audio tone when the transaction is not conducted due to the ticket being within the Anti-Passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Timeout Functionality", "Test_Sce_Description": "Verify that the app returns to the SA Tool application Tap Card screen after a configurable timeout when the transaction is not conducted due to the ticket being within the Anti-Passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Ticket Activation Check", "Test_Sce_Description": "Ensure that the system correctly identifies a non-activated ticket and declines the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Low Battery Threshold", "Test_Sce_Description": "Verify that the application switches to 'Out of Service' mode when the low battery threshold is reached during a successful ticket tap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Non-CLIENT Media Card Check", "Test_Sce_Description": "Check that the SA Tool application does not respond and displays the 'Card Read Error' message when a customer taps a card that is not CLIENT media."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Empty Ride Balance Check", "Test_Sce_Description": "Ensure that the system correctly identifies a ticket with an empty ride balance and declines the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Failed Inspection Check", "Test_Sce_Description": "Verify that the operator can select the payment function on the SA Tool inspection results screen when a customer's ticket inspection fails."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Child Concession Check", "Test_Sce_Description": "Check that the system correctly identifies a ticket with a valid child concession and displays the successful child fare payment screen."}, {"Test Scenario 1": {"Test scenarios": "Anti-Passback Window Check", "Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction."}, "Test Scenario 2": {"Test scenarios": "Declined Message Display", "Description": "Ensure that the SA Tool application correctly displays a declined message to the customer when the transaction is not conducted due to the ticket being within the Anti-Passback Window."}, "Test Scenario 3": {"Test scenarios": "Declined Audio Tone", "Description": "Check that the SA Tool plays the declined audio tone when the transaction is not conducted due to the ticket being within the Anti-Passback Window."}, "Test Scenario 4": {"Test scenarios": "Timeout Functionality", "Description": "Verify that the app returns to the SA Tool application Tap Card screen after a configurable timeout when the transaction is not conducted due to the ticket being within the Anti-Passback Window."}, "Test Scenario 5": {"Test scenarios": "Ticket Activation Check", "Description": "Ensure that the system correctly identifies a non-activated ticket and declines the transaction."}, "Test Scenario 6": {"Test scenarios": "Low Battery Threshold", "Description": "Verify that the application switches to 'Out of Service' mode when the low battery threshold is reached during a successful ticket tap."}, "Test Scenario 7": {"Test scenarios": "Non-CLIENT Media Card Check", "Description": "Check that the SA Tool application does not respond and displays the 'Card Read Error' message when a customer taps a card that is not CLIENT media."}, "Test Scenario 8": {"Test scenarios": "Empty Ride Balance Check", "Description": "Ensure that the system correctly identifies a ticket with an empty ride balance and declines the transaction."}, "Test Scenario 9": {"Test scenarios": "Failed Inspection Check", "Description": "Verify that the operator can select the payment function on the SA Tool inspection results screen when a customer's ticket inspection fails."}, "Test Scenario 10": {"Test scenarios": "Child Concession Check", "Description": "Check that the system correctly identifies a ticket with a valid child concession and displays the successful child fare payment screen."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Validate the system's response when a customer attempts to make a fare payment using a non-activated ticket. The system should detect the invalidity of the ticket, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Test the system's behavior when a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should detect the empty balance, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "Verify the system's functionality when the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-Client Media", "Test_Sce_Description": "Test the system's response when a customer attempts to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Validate the system's behavior when a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should detect the violation, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "Test the system's response when a fare payment is attempted with a locked farecard. The system should detect the locked status, display a declined screen to the operator, and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Unreadable Ticket", "Test_Sce_Description": "Verify the system's behavior when a customer attempts to make a fare payment with an unreadable ticket. The system should detect the unreadable ticket, indicate to the operator that the ticket is unreadable, and log the error for troubleshooting."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession", "Test_Sce_Description": "Test the system's response when a customer attempts to make a fare payment with a ticket that has a valid non-adult, non-child concession. The system should process the fare payment accordingly."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Validate the system's response when a customer attempts to make a fare payment using a non-activated ticket. The system should detect the invalidity of the ticket, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Test the system's behavior when a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should detect the empty balance, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Low Battery", "Description": "Verify the system's functionality when the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Client Media", "Description": "Test the system's response when a customer attempts to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, "Test Scenario 5": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Validate the system's behavior when a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should detect the violation, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "Test the system's response when a fare payment is attempted with a locked farecard. The system should detect the locked status, display a declined screen to the operator, and not proceed with the inspection."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Unreadable Ticket", "Description": "Verify the system's behavior when a customer attempts to make a fare payment with an unreadable ticket. The system should detect the unreadable ticket, indicate to the operator that the ticket is unreadable, and log the error for troubleshooting."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Non-Adult, Non-Child Concession", "Description": "Test the system's response when a customer attempts to make a fare payment with a ticket that has a valid non-adult, non-child concession. The system should process the fare payment accordingly."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service class route and the farecard has a valid special event transfer product."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service class route and the farecard has a valid special event transfer product."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made and the farecard has a valid non-adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made and the farecard has a valid child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Performance Test", "Test_Sce_Description": "Verify that the system performs efficiently when multiple fare payments are being processed simultaneously."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Security Test", "Test_Sce_Description": "Verify that the system securely processes fare payments and protects customer data."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service class route and the farecard has a valid special event transfer product."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Special Event Transfer Product", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service class route and the farecard has a valid special event transfer product."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made and the farecard has a valid non-adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made and the farecard has a valid child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, "Test Scenario 7": {"Test scenarios": "Performance Test", "Description": "Verify that the system performs efficiently when multiple fare payments are being processed simultaneously."}, "Test Scenario 8": {"Test scenarios": "Security Test", "Description": "Verify that the system securely processes fare payments and protects customer data."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment on SA Tool with Premium Service Class", "Test_Sce_Description": "Verify that the fare payment is successfully made on the SA Tool when the Service Class is Premium, the Farecard has a valid Special Event Transfer Product and the Tap is within the Transfer Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Deduction from Virtual Card E-Purse", "Test_Sce_Description": "Verify that the ATS computes the fare correctly and deducts the appropriate amount from the Virtual Card E-Purse when a fare payment is made."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Communication of Fare Deduction to SA Tool", "Test_Sce_Description": "Verify that the fare deduction from the Virtual Card E-Purse is correctly communicated back to the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "POP Print Flag Functionality", "Test_Sce_Description": "Verify that the SA Tool sets the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Off Peak Daily Cap Limit Reached", "Test_Sce_Description": "Verify that the fare payment is successfully made on the SA Tool when the Farecard has reached the off peak Daily Cap Limit, has not reached the Peak Daily Cap limit and is out of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Valid Non-Adult Concession", "Test_Sce_Description": "Verify that the fare payment is successfully made on the SA Tool when the customer\u2019s Farecard has a Valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Valid Child Concession", "Test_Sce_Description": "Verify that the fare payment is successfully made on the SA Tool when the customer\u2019s Farecard has a Valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the fare payment is successfully made on the SA Tool when the operator inspects a customer\u2019s farecard and determines that they have not paid a fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Performance of SA Tool during Peak Hours", "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without any lags or crashes during peak hours when the load is high."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Security of Farecard Information", "Test_Sce_Description": "Verify that the farecard information is securely stored and transmitted during the fare payment process to prevent any data breaches or unauthorized access."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment on SA Tool with Premium Service Class", "Description": "Verify that the fare payment is successfully made on the SA Tool when the Service Class is Premium, the Farecard has a valid Special Event Transfer Product and the Tap is within the Transfer Window."}, "Test Scenario 2": {"Test scenarios": "Fare Deduction from Virtual Card E-Purse", "Description": "Verify that the ATS computes the fare correctly and deducts the appropriate amount from the Virtual Card E-Purse when a fare payment is made."}, "Test Scenario 3": {"Test scenarios": "Communication of Fare Deduction to SA Tool", "Description": "Verify that the fare deduction from the Virtual Card E-Purse is correctly communicated back to the SA Tool."}, "Test Scenario 4": {"Test scenarios": "POP Print Flag Functionality", "Description": "Verify that the SA Tool sets the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Off Peak Daily Cap Limit Reached", "Description": "Verify that the fare payment is successfully made on the SA Tool when the Farecard has reached the off peak Daily Cap Limit, has not reached the Peak Daily Cap limit and is out of the transfer window."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Valid Non-Adult Concession", "Description": "Verify that the fare payment is successfully made on the SA Tool when the customer\u2019s Farecard has a Valid Non-Adult concession."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Valid Child Concession", "Description": "Verify that the fare payment is successfully made on the SA Tool when the customer\u2019s Farecard has a Valid Child concession."}, "Test Scenario 8": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the fare payment is successfully made on the SA Tool when the operator inspects a customer\u2019s farecard and determines that they have not paid a fare."}, "Test Scenario 9": {"Test scenarios": "Performance of SA Tool during Peak Hours", "Description": "Verify that the SA Tool performs efficiently and without any lags or crashes during peak hours when the load is high."}, "Test Scenario 10": {"Test scenarios": "Security of Farecard Information", "Description": "Verify that the farecard information is securely stored and transmitted during the fare payment process to prevent any data breaches or unauthorized access."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Premium Service Route with Lower Fare than Special Event", "Test_Sce_Description": "Verify that the system correctly computes the fare when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The system should recognize that the premium fare is lower than the special event fare and allow a free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Deduction from ePurse Balance", "Test_Sce_Description": "Verify that the system correctly deducts the fare from the customer's ePurse balance. After the fare computation, the system should deduct the amount from the virtual card ePurse and communicate this back to the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Transfer Window Validation", "Test_Sce_Description": "Verify that the system correctly validates the transfer window. If the customer taps within the transfer window after riding on a Special Event service route, the system should allow a free transfer if the premium fare is lower."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Service Class Validation", "Test_Sce_Description": "Verify that the system correctly identifies the service class as Premium. The system should recognize the service class from the farecard and compute the fare accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Special Event Transfer Product Validation", "Test_Sce_Description": "Verify that the system correctly validates the Special Event Transfer Product on the farecard. The system should recognize the valid Special Event Transfer Product and allow a free transfer if the premium fare is lower."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "POP Print Flag Functionality", "Test_Sce_Description": "Verify that the SA Tool correctly sets the POP Print Flag to 0. This is to ensure that the device accurately displays the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Performance during Peak Hours", "Test_Sce_Description": "Verify that the system performs efficiently during peak hours. The system should be able to handle high traffic and compute fares quickly and accurately."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Security of ePurse Balance Deduction", "Test_Sce_Description": "Verify that the system securely deducts the fare from the customer's ePurse balance. The system should ensure that the deduction process is secure and the customer's ePurse balance information is not compromised."}, {"Test Scenario 1": {"Test scenarios": "Premium Service Route with Lower Fare than Special Event", "Description": "Verify that the system correctly computes the fare when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The system should recognize that the premium fare is lower than the special event fare and allow a free transfer."}, "Test Scenario 2": {"Test scenarios": "Fare Deduction from ePurse Balance", "Description": "Verify that the system correctly deducts the fare from the customer's ePurse balance. After the fare computation, the system should deduct the amount from the virtual card ePurse and communicate this back to the SA Tool."}, "Test Scenario 3": {"Test scenarios": "Transfer Window Validation", "Description": "Verify that the system correctly validates the transfer window. If the customer taps within the transfer window after riding on a Special Event service route, the system should allow a free transfer if the premium fare is lower."}, "Test Scenario 4": {"Test scenarios": "Service Class Validation", "Description": "Verify that the system correctly identifies the service class as Premium. The system should recognize the service class from the farecard and compute the fare accordingly."}, "Test Scenario 5": {"Test scenarios": "Special Event Transfer Product Validation", "Description": "Verify that the system correctly validates the Special Event Transfer Product on the farecard. The system should recognize the valid Special Event Transfer Product and allow a free transfer if the premium fare is lower."}, "Test Scenario 6": {"Test scenarios": "POP Print Flag Functionality", "Description": "Verify that the SA Tool correctly sets the POP Print Flag to 0. This is to ensure that the device accurately displays the transfer print status if the farecard is queried."}, "Test Scenario 7": {"Test scenarios": "Performance during Peak Hours", "Description": "Verify that the system performs efficiently during peak hours. The system should be able to handle high traffic and compute fares quickly and accurately."}, "Test Scenario 8": {"Test scenarios": "Security of ePurse Balance Deduction", "Description": "Verify that the system securely deducts the fare from the customer's ePurse balance. The system should ensure that the deduction process is secure and the customer's ePurse balance information is not compromised."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Testing ePurse balance less than fare amount", "Test_Sce_Description": "This scenario will test if the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating transfer product within Intra-agency Transfer window", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating transfer product within Inter-agency Transfer window", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product from another transit agency and computes the fare based on the transfer product and the transfer agreement between the transit agencies."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Testing Autoload Threshold", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Farecard on the Action or Load Value List", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Testing fare payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a fare payment is made during peak hours after previously reaching off peak daily cap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route and the Premium fare is lower than the Special Event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult Concession on Farecard", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies and processes a Farecard with a Valid Non-Adult concession."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child, Non-discreet concession", "Description": "This scenario will test if the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, "Test Scenario 2": {"Test scenarios": "Testing ePurse balance less than fare amount", "Description": "This scenario will test if the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, "Test Scenario 3": {"Test scenarios": "Validating transfer product within Intra-agency Transfer window", "Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."}, "Test Scenario 4": {"Test scenarios": "Validating transfer product within Inter-agency Transfer window", "Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product from another transit agency and computes the fare based on the transfer product and the transfer agreement between the transit agencies."}, "Test Scenario 5": {"Test scenarios": "Testing Autoload Threshold", "Description": "This scenario will test if the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, "Test Scenario 6": {"Test scenarios": "Validating Farecard on the Action or Load Value List", "Description": "This scenario will test if the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, "Test Scenario 7": {"Test scenarios": "Testing fare payment during Peak hours after reaching Off Peak Daily Cap", "Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a fare payment is made during peak hours after previously reaching off peak daily cap."}, "Test Scenario 8": {"Test scenarios": "Validating Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."}, "Test Scenario 9": {"Test scenarios": "Validating Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route and the Premium fare is lower than the Special Event fare."}, "Test Scenario 10": {"Test scenarios": "Validating Non-Adult Concession on Farecard", "Description": "This scenario will test if the SA Tool correctly identifies and processes a Farecard with a Valid Non-Adult concession."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Transfer Product", "Test_Sce_Description": "Verify that the system correctly identifies a valid transfer product on the customer's TICKET and computes the free transfer. The system should follow the Transfer Product Processing rules as per [R6]."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Audio Messages Request", "Test_Sce_Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level. The system should play the audio message in the default language of the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool", "Test_Sce_Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location. The system should result in a regular ride balance fare payment and Transfer Product creation."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool", "Test_Sce_Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route. The system should result in a free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Valid Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and processes a Valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly processes a fare payment resulting from a failed TICKET inspection. The system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly identifies when a customer's ride balance is empty and displays a declined message to the customer. The system should not conduct the transaction and should play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Low Battery Threshold", "Test_Sce_Description": "Verify that the system correctly switches to \u201cOut of Service\u201d mode when the low battery threshold is reached during a successful TICKET tap. If the threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode without processing the fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Non-CLIENT Media Card", "Test_Sce_Description": "Verify that the system correctly identifies when a customer's card is not CLIENT media. The system should not respond and should display the device error message \u201cCard Read Error\u201d for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly identifies when a customer's Ticket is within the Anti-Passback Window and displays a declined message to the customer. The system should not conduct the transaction and should play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly identifies when a customer's Ticket is not activated. The system should not respond and should display the device error message \u201cCard Read Error\u201d for a short period of time."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."}, "Test Scenario 2": {"Test scenarios": "Validating Transfer Product", "Description": "Verify that the system correctly identifies a valid transfer product on the customer's TICKET and computes the free transfer. The system should follow the Transfer Product Processing rules as per [R6]."}, "Test Scenario 3": {"Test scenarios": "Audio Messages Request", "Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level. The system should play the audio message in the default language of the customer's Farecard."}, "Test Scenario 4": {"Test scenarios": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool", "Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location. The system should result in a regular ride balance fare payment and Transfer Product creation."}, "Test Scenario 5": {"Test scenarios": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool", "Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route. The system should result in a free transfer."}, "Test Scenario 6": {"Test scenarios": "Valid Child Concession", "Description": "Verify that the system correctly identifies and processes a Valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, "Test Scenario 7": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly processes a fare payment resulting from a failed TICKET inspection. The system should record both the fare payment and inspection transactions."}, "Test Scenario 8": {"Test scenarios": "Empty Ride Balance", "Description": "Verify that the system correctly identifies when a customer's ride balance is empty and displays a declined message to the customer. The system should not conduct the transaction and should play the declined audio tone."}, "Test Scenario 9": {"Test scenarios": "Low Battery Threshold", "Description": "Verify that the system correctly switches to \u201cOut of Service\u201d mode when the low battery threshold is reached during a successful TICKET tap. If the threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode without processing the fare payment."}, "Test Scenario 10": {"Test scenarios": "Non-CLIENT Media Card", "Description": "Verify that the system correctly identifies when a customer's card is not CLIENT media. The system should not respond and should display the device error message \u201cCard Read Error\u201d for a short period of time."}, "Test Scenario 11": {"Test scenarios": "Anti-Passback Window", "Description": "Verify that the system correctly identifies when a customer's Ticket is within the Anti-Passback Window and displays a declined message to the customer. The system should not conduct the transaction and should play the declined audio tone."}, "Test Scenario 12": {"Test scenarios": "Non-Activated Ticket", "Description": "Verify that the system correctly identifies when a customer's Ticket is not activated. The system should not respond and should display the device error message \u201cCard Read Error\u201d for a short period of time."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Failed Inspection", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt from a customer whose ticket has failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen, and the system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt from a customer whose ride balance is empty. The SA Tool should detect the empty ride balance, display a declined message to the customer, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the device's battery is low. If the low battery threshold is reached before the fare payment is processed, the application should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt from a customer who taps a card that is not CLIENT media. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt from a customer whose ticket is within the Anti-Passback Window. The device should detect that the ticket fails the Anti-Passback checks, display a declined message to the customer, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt from a customer who taps a non-activated ticket. The device should detect that the ticket is not activated, display a declined message to the customer, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Expired Ticket", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt from a customer who taps an expired ticket. The device should detect that the ticket is expired, display a declined message to the customer, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Period Pass", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt from a customer using a ticket with a valid period pass. The device should compute that the ticket has a valid period pass, accept the fare, and update the ticket accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Unreadable Ticket", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt from a customer whose ticket is unreadable. The SA Tool application should detect the ticket and fail to read it correctly."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Failed Inspection", "Description": "Verify that the system correctly handles a fare payment attempt from a customer whose ticket has failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen, and the system should record both the fare payment and inspection transactions."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the system correctly handles a fare payment attempt from a customer whose ride balance is empty. The SA Tool should detect the empty ride balance, display a declined message to the customer, and not conduct the transaction."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Low Battery", "Description": "Verify that the system correctly handles a fare payment attempt when the device's battery is low. If the low battery threshold is reached before the fare payment is processed, the application should switch to 'Out of Service' mode."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "Verify that the system correctly handles a fare payment attempt from a customer who taps a card that is not CLIENT media. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, "Test Scenario 5": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Verify that the system correctly handles a fare payment attempt from a customer whose ticket is within the Anti-Passback Window. The device should detect that the ticket fails the Anti-Passback checks, display a declined message to the customer, and not conduct the transaction."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that the system correctly handles a fare payment attempt from a customer who taps a non-activated ticket. The device should detect that the ticket is not activated, display a declined message to the customer, and not conduct the transaction."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Expired Ticket", "Description": "Verify that the system correctly handles a fare payment attempt from a customer who taps an expired ticket. The device should detect that the ticket is expired, display a declined message to the customer, and not conduct the transaction."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Period Pass", "Description": "Verify that the system correctly handles a fare payment attempt from a customer using a ticket with a valid period pass. The device should compute that the ticket has a valid period pass, accept the fare, and update the ticket accordingly."}, "Test Scenario 9": {"Test scenarios": "Fare Payment with Unreadable Ticket", "Description": "Verify that the system correctly handles a fare payment attempt from a customer whose ticket is unreadable. The SA Tool application should detect the ticket and fail to read it correctly."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a TICKET that has no ride balance remaining. The SA Tool should detect the empty ride balance, display a declined message to the customer, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "This scenario tests the performance of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a card that is not CLIENT media. The SA Tool application should not respond and a 'Card Read Error' message should be displayed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a TICKET that is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks, display a declined message to the customer, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a non-activated TICKET. The SA Tool should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, detect that the farecard is in overdraft, display a declined message to the customer, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a locked farecard. The SA Tool should read the Farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Unreadable TICKET", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with an unreadable TICKET. The SA Tool NFC reader should detect the TICKET but be unable to read it, and the SA Tool application should indicate to the operator that the TICKET is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a TICKET that has a valid Non-Adult, Non-Child concession. The SA Tool should process the fare payment accordingly."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a TICKET that has no ride balance remaining. The SA Tool should detect the empty ride balance, display a declined message to the customer, and not conduct the transaction."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Low Battery", "Description": "This scenario tests the performance of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a card that is not CLIENT media. The SA Tool application should not respond and a 'Card Read Error' message should be displayed."}, "Test Scenario 4": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a TICKET that is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks, display a declined message to the customer, and not conduct the transaction."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a non-activated TICKET. The SA Tool should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, detect that the farecard is in overdraft, display a declined message to the customer, and not conduct the transaction."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a locked farecard. The SA Tool should read the Farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Unreadable TICKET", "Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with an unreadable TICKET. The SA Tool NFC reader should detect the TICKET but be unable to read it, and the SA Tool application should indicate to the operator that the TICKET is unreadable."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Non-Adult, Non-Child Concession", "Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a TICKET that has a valid Non-Adult, Non-Child concession. The SA Tool should process the fare payment accordingly."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Low Battery Threshold Test", "Test_Sce_Description": "This scenario tests the functionality of the application when the battery level reaches the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Card Read Error Test", "Test_Sce_Description": "This scenario tests the application's response when a card that is not CLIENT media is tapped. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Anti-Passback Window Test", "Test_Sce_Description": "This scenario tests the application's response when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Non-Activated Ticket Test", "Test_Sce_Description": "This scenario tests the application's response when a customer taps a non-activated TICKET. The application should detect that the TICKET is not activated and display an appropriate error message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Empty Ride Balance Test", "Test_Sce_Description": "This scenario tests the application's response when a customer's ride balance is empty. The SA Tool should detect that the Ride Balance is empty and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Fare Payment and Inspection Transaction Test", "Test_Sce_Description": "This scenario tests the application's ability to record both the fare payment and inspection transactions when a fare payment results from a failed inspection. The SA Tool should record both transactions and return to the Tap Card screen, displaying a toast notification of the corresponding inspection action."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Child Concession Test", "Test_Sce_Description": "This scenario tests the application's response when a customer's TICKET has a Valid Child concession. The SA Tool should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Performance Test", "Test_Sce_Description": "This scenario tests the performance of the application under different conditions such as low battery, high user load, etc. The application should perform efficiently and without any crashes or slowdowns."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Security Test", "Test_Sce_Description": "This scenario tests the security features of the application. The application should securely handle user data and transactions, and prevent unauthorized access."}, {"Test Scenario 1": {"Test scenarios": "Low Battery Threshold Test", "Description": "This scenario tests the functionality of the application when the battery level reaches the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, "Test Scenario 2": {"Test scenarios": "Card Read Error Test", "Description": "This scenario tests the application's response when a card that is not CLIENT media is tapped. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, "Test Scenario 3": {"Test scenarios": "Anti-Passback Window Test", "Description": "This scenario tests the application's response when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, "Test Scenario 4": {"Test scenarios": "Non-Activated Ticket Test", "Description": "This scenario tests the application's response when a customer taps a non-activated TICKET. The application should detect that the TICKET is not activated and display an appropriate error message."}, "Test Scenario 5": {"Test scenarios": "Empty Ride Balance Test", "Description": "This scenario tests the application's response when a customer's ride balance is empty. The SA Tool should detect that the Ride Balance is empty and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, "Test Scenario 6": {"Test scenarios": "Fare Payment and Inspection Transaction Test", "Description": "This scenario tests the application's ability to record both the fare payment and inspection transactions when a fare payment results from a failed inspection. The SA Tool should record both transactions and return to the Tap Card screen, displaying a toast notification of the corresponding inspection action."}, "Test Scenario 7": {"Test scenarios": "Child Concession Test", "Description": "This scenario tests the application's response when a customer's TICKET has a Valid Child concession. The SA Tool should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, "Test Scenario 8": {"Test scenarios": "Performance Test", "Description": "This scenario tests the performance of the application under different conditions such as low battery, high user load, etc. The application should perform efficiently and without any crashes or slowdowns."}, "Test Scenario 9": {"Test scenarios": "Security Test", "Description": "This scenario tests the security features of the application. The application should securely handle user data and transactions, and prevent unauthorized access."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Non-CLIENT Media Card", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Empty Ride Balance", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that has no ride balance. The system should detect the empty ride balance, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Low Battery Threshold", "Test_Sce_Description": "This scenario is to validate the system's response when the device battery goes below the low battery threshold during a successful ticket tap. The system should switch to 'Out of Service' mode after processing the fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Unreadable TICKET", "Test_Sce_Description": "This scenario is to validate the system's response when the TICKET is unreadable. The system should detect the TICKET but fail to read it, and indicate to the operator that the TICKET is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Non-Adult, Non-Child Concession", "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a valid non-adult, non-child concession tries to make a fare payment. The system should process the fare payment accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Locked Farecard", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a locked farecard. The system should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Anti-Passback Window", "Test_Sce_Description": "This scenario is to validate the system's response when a customer's ticket is within the Anti-Passback Window. The system should detect that the ticket fails the Anti-Passback checks, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a non-activated ticket. The system should detect that the ticket is not valid at the current time, compute the value to be deducted from the e-Purse, detect that the farecard is in overdraft, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Failed Inspection", "Test_Sce_Description": "This scenario is to validate the system's response when a customer's ticket fails the inspection. The operator should select the payment function on the SA Tool inspection results screen, and the system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Valid Child Concession", "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a valid child concession tries to make a fare payment. The system should find the valid child concession, display the successful child fare payment screen, and play the successful fare payment audio tone for child concession."}, {"Test Scenario 1": {"Test scenarios": "Validating Fare Payment with Non-CLIENT Media Card", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, "Test Scenario 2": {"Test scenarios": "Validating Fare Payment with Empty Ride Balance", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that has no ride balance. The system should detect the empty ride balance, display a declined message, and not conduct the transaction."}, "Test Scenario 3": {"Test scenarios": "Validating Fare Payment with Low Battery Threshold", "Description": "This scenario is to validate the system's response when the device battery goes below the low battery threshold during a successful ticket tap. The system should switch to 'Out of Service' mode after processing the fare payment."}, "Test Scenario 4": {"Test scenarios": "Validating Fare Payment with Unreadable TICKET", "Description": "This scenario is to validate the system's response when the TICKET is unreadable. The system should detect the TICKET but fail to read it, and indicate to the operator that the TICKET is unreadable."}, "Test Scenario 5": {"Test scenarios": "Validating Fare Payment with Non-Adult, Non-Child Concession", "Description": "This scenario is to validate the system's response when a customer with a valid non-adult, non-child concession tries to make a fare payment. The system should process the fare payment accordingly."}, "Test Scenario 6": {"Test scenarios": "Validating Fare Payment with Locked Farecard", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a locked farecard. The system should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, "Test Scenario 7": {"Test scenarios": "Validating Fare Payment with Anti-Passback Window", "Description": "This scenario is to validate the system's response when a customer's ticket is within the Anti-Passback Window. The system should detect that the ticket fails the Anti-Passback checks, display a declined message, and not conduct the transaction."}, "Test Scenario 8": {"Test scenarios": "Validating Fare Payment with Non-Activated Ticket", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a non-activated ticket. The system should detect that the ticket is not valid at the current time, compute the value to be deducted from the e-Purse, detect that the farecard is in overdraft, display a declined message, and not conduct the transaction."}, "Test Scenario 9": {"Test scenarios": "Validating Fare Payment with Failed Inspection", "Description": "This scenario is to validate the system's response when a customer's ticket fails the inspection. The operator should select the payment function on the SA Tool inspection results screen, and the system should record both the fare payment and inspection transactions."}, "Test Scenario 10": {"Test scenarios": "Validating Fare Payment with Valid Child Concession", "Description": "This scenario is to validate the system's response when a customer with a valid child concession tries to make a fare payment. The system should find the valid child concession, display the successful child fare payment screen, and play the successful fare payment audio tone for child concession."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Anti-Passback Window Check", "Test_Sce_Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Timeout Functionality", "Test_Sce_Description": "Verify that the system correctly returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the ticket being within the Anti-Passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Ticket Validation", "Test_Sce_Description": "Verify that the system correctly validates the ticket and identifies that it is within the Anti-Passback Window. The validation process should follow the order of steps as mentioned in the reference [R6]."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Performance under Load", "Test_Sce_Description": "Verify the system's performance when multiple tickets within the Anti-Passback Window are tapped in quick succession. The system should be able to handle the load and correctly decline all such transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Security Check", "Test_Sce_Description": "Verify that the system securely handles the data during the transaction process. No customer data should be at risk during the transaction process."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Exception Handling", "Test_Sce_Description": "Verify that the system correctly handles exceptions such as when the ticket is unreadable or when the battery goes below the low battery threshold during payment. The system should switch to 'Out of Service' mode in such cases."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Alternate Flow", "Test_Sce_Description": "Verify that the system correctly handles alternate flows such as when the customer's ticket is not activated. The system should decline the transaction and display a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Non-CLIENT Media Handling", "Test_Sce_Description": "Verify that the system correctly identifies when a customer taps a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, {"Test Scenario 1": {"Test scenarios": "Anti-Passback Window Check", "Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, "Test Scenario 2": {"Test scenarios": "Timeout Functionality", "Description": "Verify that the system correctly returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the ticket being within the Anti-Passback Window."}, "Test Scenario 3": {"Test scenarios": "Ticket Validation", "Description": "Verify that the system correctly validates the ticket and identifies that it is within the Anti-Passback Window. The validation process should follow the order of steps as mentioned in the reference [R6]."}, "Test Scenario 4": {"Test scenarios": "Performance under Load", "Description": "Verify the system's performance when multiple tickets within the Anti-Passback Window are tapped in quick succession. The system should be able to handle the load and correctly decline all such transactions."}, "Test Scenario 5": {"Test scenarios": "Security Check", "Description": "Verify that the system securely handles the data during the transaction process. No customer data should be at risk during the transaction process."}, "Test Scenario 6": {"Test scenarios": "Exception Handling", "Description": "Verify that the system correctly handles exceptions such as when the ticket is unreadable or when the battery goes below the low battery threshold during payment. The system should switch to 'Out of Service' mode in such cases."}, "Test Scenario 7": {"Test scenarios": "Alternate Flow", "Description": "Verify that the system correctly handles alternate flows such as when the customer's ticket is not activated. The system should decline the transaction and display a declined message to the customer."}, "Test Scenario 8": {"Test scenarios": "Non-CLIENT Media Handling", "Description": "Verify that the system correctly identifies when a customer taps a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly identifies and handles a non-activated ticket. The system should display a declined message to the customer and the transaction should not be conducted. The system should also play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly identifies and handles a ticket with an empty ride balance. The system should display a declined message to the customer and the transaction should not be conducted. The system should also play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Low Battery Threshold", "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-Client Media", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where the customer taps a card that is not CLIENT media. The system should not respond and a 'Card Read Error' message should be displayed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where the customer's ticket is within the Anti-Passback Window. The system should display a declined message to the customer and the transaction should not be conducted. The system should also play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where the farecard is locked. The system should display a declined screen to the operator and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Unreadable Ticket", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where the ticket is unreadable. The system should indicate to the operator that the ticket is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where the customer's ticket has a valid non-adult, non-child concession."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that the system correctly identifies and handles a non-activated ticket. The system should display a declined message to the customer and the transaction should not be conducted. The system should also play a declined audio tone."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the system correctly identifies and handles a ticket with an empty ride balance. The system should display a declined message to the customer and the transaction should not be conducted. The system should also play a declined audio tone."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Low Battery Threshold", "Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should switch to 'Out of Service' mode."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Client Media", "Description": "Verify that the system correctly identifies and handles a situation where the customer taps a card that is not CLIENT media. The system should not respond and a 'Card Read Error' message should be displayed."}, "Test Scenario 5": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Verify that the system correctly identifies and handles a situation where the customer's ticket is within the Anti-Passback Window. The system should display a declined message to the customer and the transaction should not be conducted. The system should also play a declined audio tone."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "Verify that the system correctly identifies and handles a situation where the farecard is locked. The system should display a declined screen to the operator and not proceed with the inspection."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Unreadable Ticket", "Description": "Verify that the system correctly identifies and handles a situation where the ticket is unreadable. The system should indicate to the operator that the ticket is unreadable."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly identifies and handles a situation where the customer's ticket has a valid non-adult, non-child concession."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Communication of Fare Deduction to SA Tool", "Test_Sce_Description": "Verify that the system correctly communicates back to the SA Tool after the fare has been computed and deducted from the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly deducts the correct Child Concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Performance of SA Tool during Peak Hours", "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay during peak hours when processing fare payments."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Security of Fare Payment Transactions", "Test_Sce_Description": "Verify that the fare payment transactions are secure and that customer's ePurse balance and personal information are not compromised during the transaction."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Communication of Fare Deduction to SA Tool", "Description": "Verify that the system correctly communicates back to the SA Tool after the fare has been computed and deducted from the ePurse balance."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly deducts the correct Child Concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."}, "Test Scenario 7": {"Test scenarios": "Performance of SA Tool during Peak Hours", "Description": "Verify that the SA Tool performs efficiently and without delay during peak hours when processing fare payments."}, "Test Scenario 8": {"Test scenarios": "Security of Fare Payment Transactions", "Description": "Verify that the fare payment transactions are secure and that customer's ePurse balance and personal information are not compromised during the transaction."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a tap is made during peak hours after previously reaching off peak daily cap (outside the transfer window). The system should correctly identify that the farecard has reached off peak Daily Cap Limit, has not reached Peak Daily Cap limit and is out of transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a tap is made on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The system should correctly identify that the Service Class is Premium, the Farecard has a valid Special Event Transfer Product and the tap is within Transfer Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the Upgrade fare from the ePurse balance when the customer\u2019s Farecard has a Valid Non-Adult concession. The system should correctly identify the concession and apply the appropriate fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the Child Concession fare from the ePurse balance when the customer\u2019s Farecard has a Valid Child concession. The system should correctly identify the concession and apply the appropriate fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when the operator inspects a customer\u2019s farecard and determines that they have not paid a fare. The system should correctly record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Performance Test", "Test_Sce_Description": "Verify that the system can handle a high volume of fare payments simultaneously without any degradation in performance or functionality. This will ensure that the system can handle peak usage times."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Security Test", "Test_Sce_Description": "Verify that the system securely processes fare payments, ensuring that customer data is protected and that the transaction is secure. This will involve testing the encryption of data and the secure transmission of data."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a tap is made during peak hours after previously reaching off peak daily cap (outside the transfer window). The system should correctly identify that the farecard has reached off peak Daily Cap Limit, has not reached Peak Daily Cap limit and is out of transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a tap is made on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The system should correctly identify that the Service Class is Premium, the Farecard has a valid Special Event Transfer Product and the tap is within Transfer Window."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the Upgrade fare from the ePurse balance when the customer\u2019s Farecard has a Valid Non-Adult concession. The system should correctly identify the concession and apply the appropriate fare."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the Child Concession fare from the ePurse balance when the customer\u2019s Farecard has a Valid Child concession. The system should correctly identify the concession and apply the appropriate fare."}, "Test Scenario 5": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when the operator inspects a customer\u2019s farecard and determines that they have not paid a fare. The system should correctly record both the fare payment and inspection transactions."}, "Test Scenario 6": {"Test scenarios": "Performance Test", "Description": "Verify that the system can handle a high volume of fare payments simultaneously without any degradation in performance or functionality. This will ensure that the system can handle peak usage times."}, "Test Scenario 7": {"Test scenarios": "Security Test", "Description": "Verify that the system securely processes fare payments, ensuring that customer data is protected and that the transaction is secure. This will involve testing the encryption of data and the secure transmission of data."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the service class is Premium."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product, the service class is Premium, and the Premium fare is lower than the Special Event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Higher Special Event Fare", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product, the service class is Premium, and the Premium fare is higher than the Special Event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Performance of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame and does not cause any performance issues in the system."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Security of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is secure and does not expose any sensitive customer information or system data."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the service class is Premium."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Premium Service Class and Lower Special Event Fare", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product, the service class is Premium, and the Premium fare is lower than the Special Event fare."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Premium Service Class and Higher Special Event Fare", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product, the service class is Premium, and the Premium fare is higher than the Special Event fare."}, "Test Scenario 8": {"Test scenarios": "Performance of Fare Payment Process", "Description": "Verify that the fare payment process is completed within the acceptable time frame and does not cause any performance issues in the system."}, "Test Scenario 9": {"Test scenarios": "Security of Fare Payment Process", "Description": "Verify that the fare payment process is secure and does not expose any sensitive customer information or system data."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling ePurse balance less than fare amount", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing valid transfer product within Intra-agency Transfer window", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing valid transfer product within Inter-agency Transfer window", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product from other transit agency and computes the fare based on the transfer product and the transfer agreement between the transit agencies within the Inter-agency Transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling Autoload Threshold", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing Farecard on the Action or Load Value List", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours after previously reaching off peak daily cap (outside the transfer window) results in a fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a fare upgrade."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult Concession on Farecard", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child, Non-discreet concession", "Description": "This scenario is to validate that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, "Test Scenario 2": {"Test scenarios": "Handling ePurse balance less than fare amount", "Description": "This scenario is to validate that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, "Test Scenario 3": {"Test scenarios": "Processing valid transfer product within Intra-agency Transfer window", "Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."}, "Test Scenario 4": {"Test scenarios": "Processing valid transfer product within Inter-agency Transfer window", "Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product from other transit agency and computes the fare based on the transfer product and the transfer agreement between the transit agencies within the Inter-agency Transfer window."}, "Test Scenario 5": {"Test scenarios": "Handling Autoload Threshold", "Description": "This scenario is to validate that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, "Test Scenario 6": {"Test scenarios": "Processing Farecard on the Action or Load Value List", "Description": "This scenario is to validate that the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, "Test Scenario 7": {"Test scenarios": "Handling fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours after previously reaching off peak daily cap (outside the transfer window) results in a fare payment."}, "Test Scenario 8": {"Test scenarios": "Processing Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a fare upgrade."}, "Test Scenario 9": {"Test scenarios": "Processing Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a free transfer."}, "Test Scenario 10": {"Test scenarios": "Validating Non-Adult Concession on Farecard", "Description": "This scenario is to validate that the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Temporal Class Supplement Tap-On Transaction", "Test_Sce_Description": "Verify that the device correctly processes a Tap-On Transaction when a Farecard is tapped during a time period that contains an associated Temporal Class Supplement. The device should display an HMI reflecting the Temporal Class Supplement and process the transaction as a normal tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Autoload Enabled Farecard Crossing Threshold", "Test_Sce_Description": "Verify that when a Farecard with Autoload enabled is tapped and the Fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance. The device should detect this and deduct the Fare from the Farecard E-Purse balance, then provide appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Override Default Trip with No Default O/D", "Test_Sce_Description": "Verify that when a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on. The device should provide appropriate feedback to the Cardholder of a successful transaction and notify the customer that the Default Trip was overridden."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Audio Messages Request", "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Farecard Validation Failure at Tap-On", "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The device should provide appropriate feedback to the cardholder without updating the Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Blocked Farecard", "Test_Sce_Description": "Verify that when a blocked Farecard is tapped, the right to travel is not conferred. The device should detect that the Farecard is blocked and provide appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Exceeding Max Travel Duration", "Test_Sce_Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment and opens a new trip. The device should determine that the Tap-On Time + Max Travel Duration < Current Time and deduct the value from the Farecard E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Multiple NFC Media Presentation", "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality and presents Anti-Collision HMI to customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Non-Activated Farecard Tap-On", "Test_Sce_Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Card Reading Error", "Test_Sce_Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides appropriate feedback to the Cardholder."}, {"Test Scenario 1": {"Test scenarios": "Temporal Class Supplement Tap-On Transaction", "Description": "Verify that the device correctly processes a Tap-On Transaction when a Farecard is tapped during a time period that contains an associated Temporal Class Supplement. The device should display an HMI reflecting the Temporal Class Supplement and process the transaction as a normal tap-on."}, "Test Scenario 2": {"Test scenarios": "Autoload Enabled Farecard Crossing Threshold", "Description": "Verify that when a Farecard with Autoload enabled is tapped and the Fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance. The device should detect this and deduct the Fare from the Farecard E-Purse balance, then provide appropriate feedback to the Cardholder."}, "Test Scenario 3": {"Test scenarios": "Override Default Trip with No Default O/D", "Description": "Verify that when a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on. The device should provide appropriate feedback to the Cardholder of a successful transaction and notify the customer that the Default Trip was overridden."}, "Test Scenario 4": {"Test scenarios": "Audio Messages Request", "Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, "Test Scenario 5": {"Test scenarios": "Farecard Validation Failure at Tap-On", "Description": "Verify that when a Farecard fails validation checks at Tap-On, the device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The device should provide appropriate feedback to the cardholder without updating the Farecard."}, "Test Scenario 6": {"Test scenarios": "Blocked Farecard", "Description": "Verify that when a blocked Farecard is tapped, the right to travel is not conferred. The device should detect that the Farecard is blocked and provide appropriate feedback to the Cardholder."}, "Test Scenario 7": {"Test scenarios": "Exceeding Max Travel Duration", "Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment and opens a new trip. The device should determine that the Tap-On Time + Max Travel Duration < Current Time and deduct the value from the Farecard E-Purse."}, "Test Scenario 8": {"Test scenarios": "Multiple NFC Media Presentation", "Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality and presents Anti-Collision HMI to customer."}, "Test Scenario 9": {"Test scenarios": "Non-Activated Farecard Tap-On", "Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."}, "Test Scenario 10": {"Test scenarios": "Card Reading Error", "Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides appropriate feedback to the Cardholder."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold", "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance. The Device should detect that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, which triggers the Autoload amount to be added to the Farecard. The Device should deduct the Fare from the Farecard E-Purse balance. The right to travel is conferred to the Cardholder by updating the Farecard; accordingly, the device should provide the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the autoload was successful."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Farecard with Autoload Enabled is tapped on a device and the Fare amount does not cross the Auto-load threshold", "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount does not cross the Auto-load threshold, the Autoload amount should not be added to the E-Purse balance. The Device should not trigger the Autoload amount to be added to the Farecard. The Device should deduct the Fare from the Farecard E-Purse balance. The right to travel is conferred to the Cardholder by updating the Farecard; accordingly, the device should provide the appropriate feedback to the Cardholder of a successful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Farecard with Autoload Disabled is tapped on a device and the Fare amount crosses the Auto-load threshold", "Test_Sce_Description": "Verify that when a Farecard with Autoload Disabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Autoload amount should not be added to the E-Purse balance. The Device should not trigger the Autoload amount to be added to the Farecard. The Device should deduct the Fare from the Farecard E-Purse balance. The right to travel is conferred to the Cardholder by updating the Farecard; accordingly, the device should provide the appropriate feedback to the Cardholder of a successful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Farecard fails validation checks at Tap-On", "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device should not allow the transaction to proceed. The device should provide appropriate feedback to the Cardholder of a failed transaction. The right to travel should not be conferred to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Farecard passes validation checks at Tap-On", "Test_Sce_Description": "Verify that when a Farecard passes validation checks at Tap-On, the device should allow the transaction to proceed. The device should provide appropriate feedback to the Cardholder of a successful transaction. The right to travel should be conferred to the Cardholder by updating the Farecard."}, {"Test Scenario 1": {"Test scenarios": "Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold", "Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance. The Device should detect that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, which triggers the Autoload amount to be added to the Farecard. The Device should deduct the Fare from the Farecard E-Purse balance. The right to travel is conferred to the Cardholder by updating the Farecard; accordingly, the device should provide the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the autoload was successful."}, "Test Scenario 2": {"Test scenarios": "Farecard with Autoload Enabled is tapped on a device and the Fare amount does not cross the Auto-load threshold", "Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount does not cross the Auto-load threshold, the Autoload amount should not be added to the E-Purse balance. The Device should not trigger the Autoload amount to be added to the Farecard. The Device should deduct the Fare from the Farecard E-Purse balance. The right to travel is conferred to the Cardholder by updating the Farecard; accordingly, the device should provide the appropriate feedback to the Cardholder of a successful transaction."}, "Test Scenario 3": {"Test scenarios": "Farecard with Autoload Disabled is tapped on a device and the Fare amount crosses the Auto-load threshold", "Description": "Verify that when a Farecard with Autoload Disabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Autoload amount should not be added to the E-Purse balance. The Device should not trigger the Autoload amount to be added to the Farecard. The Device should deduct the Fare from the Farecard E-Purse balance. The right to travel is conferred to the Cardholder by updating the Farecard; accordingly, the device should provide the appropriate feedback to the Cardholder of a successful transaction."}, "Test Scenario 4": {"Test scenarios": "Farecard fails validation checks at Tap-On", "Description": "Verify that when a Farecard fails validation checks at Tap-On, the device should not allow the transaction to proceed. The device should provide appropriate feedback to the Cardholder of a failed transaction. The right to travel should not be conferred to the Cardholder."}, "Test Scenario 5": {"Test scenarios": "Farecard passes validation checks at Tap-On", "Description": "Verify that when a Farecard passes validation checks at Tap-On, the device should allow the transaction to proceed. The device should provide appropriate feedback to the Cardholder of a successful transaction. The right to travel should be conferred to the Cardholder by updating the Farecard."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Full Fare-by-Zone transaction processing", "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction in case of a default O/D on the Farecard. This includes both tap-on and tap-off transactions. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. The default trip should use PAR as the card identifier."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Override Default O/D", "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on. This includes the customer requesting the override of a Default Trip by interacting with the Device and the Device HMI informing the customer that the Device is prepared to override the Default Trip."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Capping discount eligibility", "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Multiple capping discounts eligibility", "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS will take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Offline device capping discount eligibility", "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules will follow use-case logic outlined in ticketing use cases."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Open Payments Media fails ODA check", "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device performs the necessary validation and determines that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen is provided to the cardholder. An error will be captured and logged in the background when this occurs to help with troubleshooting the issue. This error will also be captured in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Open Payments Media Fails Expiry Check", "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The device provides the appropriate feedback to the cardholder without updating the Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Farecard is blocked", "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. The Card reader detects Farecard is blocked. Right to travel is not conferred. The Device provides the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration", "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. The Device determines that the Tap-On Time + Max Travel Duration < Current Time. The Device Auto-settles the Underpayment and deducts the value from the Farecard E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Multiple NFC media are presented to the device at one time", "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. The customer presents multiple NFC medias to the card reader at once. The Device blocks all user functionality, presents Anti-Collision HMI to customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Tap a non-activated Farecard on an SA Tool", "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. The Device detects that the Farecard is not activated. The device provides feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides the appropriate feedback to the cardholder."}, {"Test Scenario 1": {"Test scenarios": "Full Fare-by-Zone transaction processing", "Description": "Verify that the device correctly processes a full Fare-by-Zone transaction in case of a default O/D on the Farecard. This includes both tap-on and tap-off transactions. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. The default trip should use PAR as the card identifier."}, "Test Scenario 2": {"Test scenarios": "Override Default O/D", "Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on. This includes the customer requesting the override of a Default Trip by interacting with the Device and the Device HMI informing the customer that the Device is prepared to override the Default Trip."}, "Test Scenario 3": {"Test scenarios": "Capping discount eligibility", "Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation."}, "Test Scenario 4": {"Test scenarios": "Multiple capping discounts eligibility", "Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS will take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."}, "Test Scenario 5": {"Test scenarios": "Offline device capping discount eligibility", "Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules will follow use-case logic outlined in ticketing use cases."}, "Test Scenario 6": {"Test scenarios": "Open Payments Media fails ODA check", "Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device performs the necessary validation and determines that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen is provided to the cardholder. An error will be captured and logged in the background when this occurs to help with troubleshooting the issue. This error will also be captured in the SOTI logs."}, "Test Scenario 7": {"Test scenarios": "Open Payments Media Fails Expiry Check", "Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The device provides the appropriate feedback to the cardholder without updating the Farecard."}, "Test Scenario 8": {"Test scenarios": "Farecard is blocked", "Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. The Card reader detects Farecard is blocked. Right to travel is not conferred. The Device provides the appropriate feedback to the Cardholder."}, "Test Scenario 9": {"Test scenarios": "Time since Tap-On Exceeds Max Travel Duration", "Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. The Device determines that the Tap-On Time + Max Travel Duration < Current Time. The Device Auto-settles the Underpayment and deducts the value from the Farecard E-Purse."}, "Test Scenario 10": {"Test scenarios": "Multiple NFC media are presented to the device at one time", "Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. The customer presents multiple NFC medias to the card reader at once. The Device blocks all user functionality, presents Anti-Collision HMI to customer."}, "Test Scenario 11": {"Test scenarios": "Tap a non-activated Farecard on an SA Tool", "Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. The Device detects that the Farecard is not activated. The device provides feedback to the Cardholder of an unsuccessful transaction."}, "Test Scenario 12": {"Test scenarios": "Tap a Farecard on an SA Tool and card reading error occurs", "Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides the appropriate feedback to the cardholder."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Non-Revenue farecard in training mode", "Test_Sce_Description": "Verify that the SA tool accepts Non-Revenue farecard in the training mode. If the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard with Temporal Class Supplement", "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the Device should contain an HMI reflecting the Temporal Class Supplement, and process the Tap-On Transaction as a normal tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard with Autoload Enabled", "Test_Sce_Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard without Default O/D", "Test_Sce_Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device should process the tap as a result tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Audio Messages Request", "Test_Sce_Description": "Verify that when the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard Validation Checks", "Test_Sce_Description": "Verify that if the Farecard fails validation checks at Tap-On, the device should display an error message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Fare Payment with Period Pass", "Test_Sce_Description": "Verify that if the Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value, ATS should compute and deduct the Upgrade fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Fare Payment with Lower Fare Value Period Pass", "Test_Sce_Description": "Verify that if the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value, ATS should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Fare Payment with Limited Period Pass", "Test_Sce_Description": "Verify that if the Farecard has a valid Limited Period Pass and the current time is within the limits of the product, the device should accept the fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Fare Payment with Limited Period Pass outside of valid time", "Test_Sce_Description": "Verify that if the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the device should accept the fare payment."}, {"Test Scenario 1": {"Test scenarios": "Testing Non-Revenue farecard in training mode", "Description": "Verify that the SA tool accepts Non-Revenue farecard in the training mode. If the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI."}, "Test Scenario 2": {"Test scenarios": "Testing Farecard with Temporal Class Supplement", "Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the Device should contain an HMI reflecting the Temporal Class Supplement, and process the Tap-On Transaction as a normal tap-on."}, "Test Scenario 3": {"Test scenarios": "Testing Farecard with Autoload Enabled", "Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance."}, "Test Scenario 4": {"Test scenarios": "Testing Farecard without Default O/D", "Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device should process the tap as a result tap-on."}, "Test Scenario 5": {"Test scenarios": "Testing Audio Messages Request", "Description": "Verify that when the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."}, "Test Scenario 6": {"Test scenarios": "Testing Farecard Validation Checks", "Description": "Verify that if the Farecard fails validation checks at Tap-On, the device should display an error message."}, "Test Scenario 7": {"Test scenarios": "Testing Fare Payment with Period Pass", "Description": "Verify that if the Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value, ATS should compute and deduct the Upgrade fare."}, "Test Scenario 8": {"Test scenarios": "Testing Fare Payment with Lower Fare Value Period Pass", "Description": "Verify that if the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value, ATS should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."}, "Test Scenario 9": {"Test scenarios": "Testing Fare Payment with Limited Period Pass", "Description": "Verify that if the Farecard has a valid Limited Period Pass and the current time is within the limits of the product, the device should accept the fare payment."}, "Test Scenario 10": {"Test scenarios": "Testing Fare Payment with Limited Period Pass outside of valid time", "Description": "Verify that if the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the device should accept the fare payment."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a premium service class farecard that has a valid Special Event Transfer Product and the tap is within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the upgrade fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the child concession fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Performance Test", "Test_Sce_Description": "Verify that the system can handle a high volume of fare payments simultaneously without any degradation in performance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Security Test", "Test_Sce_Description": "Verify that the system securely processes fare payments and protects customer data, including ePurse balance and farecard information."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a premium service class farecard that has a valid Special Event Transfer Product and the tap is within the transfer window."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly calculates and deducts the upgrade fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly calculates and deducts the child concession fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, "Test Scenario 6": {"Test scenarios": "Performance Test", "Description": "Verify that the system can handle a high volume of fare payments simultaneously without any degradation in performance."}, "Test Scenario 7": {"Test scenarios": "Security Test", "Description": "Verify that the system securely processes fare payments and protects customer data, including ePurse balance and farecard information."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after previously reaching the off-peak daily cap limit, and the farecard is out of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route, and the tap is within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event fare", "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route/location after previously riding on a Special Event service route, and the tap is within the transfer window, and the premium fare is lower than the Special Event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the correct Child Concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection, and the system records both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Performance of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time limit, ensuring the system's performance is up to the mark."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Security of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is secure, and no unauthorized access or manipulation of fare payment data is possible."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after previously reaching the off-peak daily cap limit, and the farecard is out of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route, and the tap is within the transfer window."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Premium Service Class and Lower Special Event fare", "Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route/location after previously riding on a Special Event service route, and the tap is within the transfer window, and the premium fare is lower than the Special Event fare."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid Non-Adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the correct Child Concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid Child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection, and the system records both the fare payment and inspection transactions."}, "Test Scenario 7": {"Test scenarios": "Performance of Fare Payment Process", "Description": "Verify that the fare payment process is completed within the acceptable time limit, ensuring the system's performance is up to the mark."}, "Test Scenario 8": {"Test scenarios": "Security of Fare Payment Process", "Description": "Verify that the fare payment process is secure, and no unauthorized access or manipulation of fare payment data is possible."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window and the premium fare is higher than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product with Lower Premium Fare", "Test_Sce_Description": "Verify that the system correctly computes and allows a free transfer when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window and the premium fare is lower than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid non-adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Performance of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak load conditions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Security of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is secure and that sensitive customer data such as ePurse balance and farecard details are not exposed during the transaction."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window and the premium fare is higher than the special event fare."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product with Lower Premium Fare", "Description": "Verify that the system correctly computes and allows a free transfer when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window and the premium fare is lower than the special event fare."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid non-adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."}, "Test Scenario 7": {"Test scenarios": "Performance of Fare Payment Process", "Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak load conditions."}, "Test Scenario 8": {"Test scenarios": "Security of Fare Payment Process", "Description": "Verify that the fare payment process is secure and that sensitive customer data such as ePurse balance and farecard details are not exposed during the transaction."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Valid Non-Adult, Non-Child, Non-discreet concession", "Test_Sce_Description": "Verify that the SA Tool correctly deducts the Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard and plays the successful fare payment audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Test_Sce_Description": "Verify that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Transaction within Intra-agency Transfer window", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product and computes the free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Transaction within Inter-agency Transfer window", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product from another transit agency and computes the fare based on the transfer product and the transfer agreement between the transit agencies."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Autoload Threshold is met", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Customer\u2019s Farecard is on the Action or Load Value List", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours after previously reaching off peak daily cap (outside the transfer window) results in a fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a fare upgrade."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Customer has a Valid Non-Adult Concession on their Farecard", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the customer's Farecard has a Valid Non-Adult concession."}, {"Test Scenario 1": {"Test scenarios": "Valid Non-Adult, Non-Child, Non-discreet concession", "Description": "Verify that the SA Tool correctly deducts the Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard and plays the successful fare payment audio tone."}, "Test Scenario 2": {"Test scenarios": "Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Description": "Verify that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, "Test Scenario 3": {"Test scenarios": "Transaction within Intra-agency Transfer window", "Description": "Verify that the SA Tool correctly identifies a valid transfer product and computes the free transfer."}, "Test Scenario 4": {"Test scenarios": "Transaction within Inter-agency Transfer window", "Description": "Verify that the SA Tool correctly identifies a valid transfer product from another transit agency and computes the fare based on the transfer product and the transfer agreement between the transit agencies."}, "Test Scenario 5": {"Test scenarios": "Autoload Threshold is met", "Description": "Verify that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, "Test Scenario 6": {"Test scenarios": "Customer\u2019s Farecard is on the Action or Load Value List", "Description": "Verify that the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, "Test Scenario 7": {"Test scenarios": "Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours after previously reaching off peak daily cap (outside the transfer window) results in a fare payment."}, "Test Scenario 8": {"Test scenarios": "Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a fare upgrade."}, "Test Scenario 9": {"Test scenarios": "Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a free transfer."}, "Test Scenario 10": {"Test scenarios": "Customer has a Valid Non-Adult Concession on their Farecard", "Description": "Verify that the SA Tool correctly identifies when the customer's Farecard has a Valid Non-Adult concession."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Non-Adult, Non-Child Concession Fare Payment", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a fare payment from a customer's TICKET that has a valid Non-Adult, Non-Child concession. The tool should play the successful fare payment audio tone for a concession other than Adult or Child."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Transfer Product Fare Payment", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a fare payment from a customer's TICKET that has a valid transfer product. The tool should compute the free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Audio Messages Request during Fare Payment", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a fare payment from a customer's TICKET when the customer requests audio messages for the fare payment. The operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment for Premium Service or Special Route/Location", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a fare payment from a customer's TICKET for a premium service or special route/location on FLATFARE BASED SA Tool. A Fixed Ride Ticket tap on a premium service or special route/location should result in a regular ride balance fare payment and Transfer Product creation."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment with Fare Upgrade for Premium Service or Special Route/Location", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a fare payment from a customer's TICKET for a premium service or special event route/location after previously riding on a regular, premium, or special event route. This should result in a free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Child Concession Fare Payment", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a fare payment from a customer's TICKET that has a valid Child concession. The tool should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a fare payment from a customer's TICKET when the operator inspects a customer\u2019s TICKET and determines that they have not paid a fare. The operator should select the payment function on the SA Tool inspection results screen and the tool should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment with Empty Ride Balance", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly handles a fare payment from a customer's TICKET when the ride balance is empty. The tool should detect the Ride Balance is empty and display a declined message to the customer. The transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment during Low Battery", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly handles a fare payment from a customer's TICKET when the device battery goes below the low battery threshold during a successful TICKET tap. If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly handles a fare payment from a customer's TICKET when the customer\u2019s card is not CLIENT media. The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment within Anti-Passback Window", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly handles a fare payment from a customer's TICKET when the Ticket is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and display a declined message the customer. The transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly handles a fare payment from a customer's TICKET when the Ticket is not activated. The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child Concession Fare Payment", "Description": "This scenario is to validate that the SA Tool correctly processes a fare payment from a customer's TICKET that has a valid Non-Adult, Non-Child concession. The tool should play the successful fare payment audio tone for a concession other than Adult or Child."}, "Test Scenario 2": {"Test scenarios": "Validating Transfer Product Fare Payment", "Description": "This scenario is to validate that the SA Tool correctly processes a fare payment from a customer's TICKET that has a valid transfer product. The tool should compute the free transfer."}, "Test Scenario 3": {"Test scenarios": "Validating Audio Messages Request during Fare Payment", "Description": "This scenario is to validate that the SA Tool correctly processes a fare payment from a customer's TICKET when the customer requests audio messages for the fare payment. The operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."}, "Test Scenario 4": {"Test scenarios": "Validating Fare Payment for Premium Service or Special Route/Location", "Description": "This scenario is to validate that the SA Tool correctly processes a fare payment from a customer's TICKET for a premium service or special route/location on FLATFARE BASED SA Tool. A Fixed Ride Ticket tap on a premium service or special route/location should result in a regular ride balance fare payment and Transfer Product creation."}, "Test Scenario 5": {"Test scenarios": "Validating Fare Payment with Fare Upgrade for Premium Service or Special Route/Location", "Description": "This scenario is to validate that the SA Tool correctly processes a fare payment from a customer's TICKET for a premium service or special event route/location after previously riding on a regular, premium, or special event route. This should result in a free transfer."}, "Test Scenario 6": {"Test scenarios": "Validating Child Concession Fare Payment", "Description": "This scenario is to validate that the SA Tool correctly processes a fare payment from a customer's TICKET that has a valid Child concession. The tool should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, "Test Scenario 7": {"Test scenarios": "Validating Fare Payment Resulting from Failed Inspection", "Description": "This scenario is to validate that the SA Tool correctly processes a fare payment from a customer's TICKET when the operator inspects a customer\u2019s TICKET and determines that they have not paid a fare. The operator should select the payment function on the SA Tool inspection results screen and the tool should record both the fare payment and inspection transactions."}, "Test Scenario 8": {"Test scenarios": "Validating Fare Payment with Empty Ride Balance", "Description": "This scenario is to validate that the SA Tool correctly handles a fare payment from a customer's TICKET when the ride balance is empty. The tool should detect the Ride Balance is empty and display a declined message to the customer. The transaction should not be conducted."}, "Test Scenario 9": {"Test scenarios": "Validating Fare Payment during Low Battery", "Description": "This scenario is to validate that the SA Tool correctly handles a fare payment from a customer's TICKET when the device battery goes below the low battery threshold during a successful TICKET tap. If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode."}, "Test Scenario 10": {"Test scenarios": "Validating Fare Payment with Non-CLIENT Media", "Description": "This scenario is to validate that the SA Tool correctly handles a fare payment from a customer's TICKET when the customer\u2019s card is not CLIENT media. The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, "Test Scenario 11": {"Test scenarios": "Validating Fare Payment within Anti-Passback Window", "Description": "This scenario is to validate that the SA Tool correctly handles a fare payment from a customer's TICKET when the Ticket is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and display a declined message the customer. The transaction should not be conducted."}, "Test Scenario 12": {"Test scenarios": "Validating Fare Payment with Non-Activated Ticket", "Description": "This scenario is to validate that the SA Tool correctly handles a fare payment from a customer's TICKET when the Ticket is not activated. The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Failed Inspection", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET that has not paid a fare during inspection. The operator should be able to select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET with an empty ride balance. The SA Tool should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "Verify that the SA Tool correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful TICKET tap. If the low battery threshold is reached before Step 5, the application should switch to 'Out of Service' mode. If not, the customers fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's card that is not CLIENT media. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET that is within the Anti-Passback Window. The SA Tool should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET that is not activated. The SA Tool should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Expired Ticket", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET that is expired. The SA Tool should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Period Pass", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET with a valid period pass and accepts the fare. The SA Tool should update the TICKET accordingly, display the successful fare payment screen, play the successful fare payment audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Unreadable Ticket", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET that is unreadable. The SA Tool should fail to read the TICKET correctly."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Failed Inspection", "Description": "Verify that the SA Tool correctly identifies a customer's TICKET that has not paid a fare during inspection. The operator should be able to select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the SA Tool correctly identifies a customer's TICKET with an empty ride balance. The SA Tool should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Low Battery", "Description": "Verify that the SA Tool correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful TICKET tap. If the low battery threshold is reached before Step 5, the application should switch to 'Out of Service' mode. If not, the customers fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "Verify that the SA Tool correctly identifies a customer's card that is not CLIENT media. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, "Test Scenario 5": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Verify that the SA Tool correctly identifies a customer's TICKET that is within the Anti-Passback Window. The SA Tool should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that the SA Tool correctly identifies a customer's TICKET that is not activated. The SA Tool should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Expired Ticket", "Description": "Verify that the SA Tool correctly identifies a customer's TICKET that is expired. The SA Tool should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Period Pass", "Description": "Verify that the SA Tool correctly identifies a customer's TICKET with a valid period pass and accepts the fare. The SA Tool should update the TICKET accordingly, display the successful fare payment screen, play the successful fare payment audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 9": {"Test scenarios": "Fare Payment with Unreadable Ticket", "Description": "Verify that the SA Tool correctly identifies a customer's TICKET that is unreadable. The SA Tool should fail to read the TICKET correctly."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a TICKET that has no ride balance remaining. The system should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Audio Tone for Declined Transaction", "Test_Sce_Description": "Verify that the system plays the correct audio tone when a transaction is declined due to insufficient ride balance. The system should play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Return to Tap Card Screen", "Test_Sce_Description": "Verify that the system correctly returns to the Tap Card screen after a configurable timeout when a transaction is declined due to insufficient ride balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a card that is not CLIENT media. The system should not respond and a 'Card Read Error' message should be displayed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a TICKET that is within the Anti-Passback Window. The system should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a TICKET that is not activated. The system should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a locked farecard. The system should display a declined screen to the operator and the inspection should not proceed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a fare payment. The application should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a TICKET that has a valid non-adult, non-child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Unreadable TICKET", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with an unreadable TICKET. The system should indicate to the operator that the TICKET is unreadable."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a TICKET that has no ride balance remaining. The system should display a declined message to the customer and the transaction should not be conducted."}, "Test Scenario 2": {"Test scenarios": "Audio Tone for Declined Transaction", "Description": "Verify that the system plays the correct audio tone when a transaction is declined due to insufficient ride balance. The system should play the declined audio tone."}, "Test Scenario 3": {"Test scenarios": "Return to Tap Card Screen", "Description": "Verify that the system correctly returns to the Tap Card screen after a configurable timeout when a transaction is declined due to insufficient ride balance."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a card that is not CLIENT media. The system should not respond and a 'Card Read Error' message should be displayed."}, "Test Scenario 5": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a TICKET that is within the Anti-Passback Window. The system should display a declined message to the customer and the transaction should not be conducted."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a TICKET that is not activated. The system should display a declined message to the customer and the transaction should not be conducted."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a locked farecard. The system should display a declined screen to the operator and the inspection should not proceed."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Low Battery", "Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a fare payment. The application should switch to 'Out of Service' mode."}, "Test Scenario 9": {"Test scenarios": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a TICKET that has a valid non-adult, non-child concession."}, "Test Scenario 10": {"Test scenarios": "Fare Payment with Unreadable TICKET", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with an unreadable TICKET. The system should indicate to the operator that the TICKET is unreadable."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Low Battery Threshold Test", "Test_Sce_Description": "This scenario tests the functionality of the application when the battery level reaches the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Card Read Error Test", "Test_Sce_Description": "This scenario tests the application's response when a card that is not CLIENT media is tapped. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Anti-Passback Window Test", "Test_Sce_Description": "This scenario tests the application's response when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Non-Activated Ticket Test", "Test_Sce_Description": "This scenario tests the application's response when a customer taps a non-activated TICKET. The application should detect that the TICKET is not activated and display an appropriate error message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Performance Test", "Test_Sce_Description": "This scenario tests the performance of the application under different conditions such as low battery, high network traffic, etc. The application should perform efficiently and without any crashes or slowdowns under these conditions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Security Test", "Test_Sce_Description": "This scenario tests the security features of the application. The application should securely handle sensitive data such as customer's TICKET information and should not allow any unauthorized access."}, {"Test Scenario 1": {"Test scenarios": "Low Battery Threshold Test", "Description": "This scenario tests the functionality of the application when the battery level reaches the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, "Test Scenario 2": {"Test scenarios": "Card Read Error Test", "Description": "This scenario tests the application's response when a card that is not CLIENT media is tapped. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, "Test Scenario 3": {"Test scenarios": "Anti-Passback Window Test", "Description": "This scenario tests the application's response when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, "Test Scenario 4": {"Test scenarios": "Non-Activated Ticket Test", "Description": "This scenario tests the application's response when a customer taps a non-activated TICKET. The application should detect that the TICKET is not activated and display an appropriate error message to the customer."}, "Test Scenario 5": {"Test scenarios": "Performance Test", "Description": "This scenario tests the performance of the application under different conditions such as low battery, high network traffic, etc. The application should perform efficiently and without any crashes or slowdowns under these conditions."}, "Test Scenario 6": {"Test scenarios": "Security Test", "Description": "This scenario tests the security features of the application. The application should securely handle sensitive data such as customer's TICKET information and should not allow any unauthorized access."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "Verify that the system does not respond and displays a 'Card Read Error' message when a customer taps a card that is not CLIENT media."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the system detects an empty Ride Balance, displays a declined message to the customer, and does not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Low Battery Threshold", "Test_Sce_Description": "Verify that the application switches to 'Out of Service' mode when the low battery threshold is reached during a successful TICKET tap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that the system detects a non-activated ticket, displays a declined message to the customer, and does not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "Verify that the system reads the Farecard, determines that it is locked, displays a declined screen to the operator, and does not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Valid Child Concession", "Test_Sce_Description": "Verify that the system detects a Valid Child Concession, displays the successful Child fare payment screen, and plays the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system allows the operator to select the payment function on the SA Tool inspection results screen when a customer\u2019s TICKET has not paid a fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Verify that the system detects that the TICKET fails the Anti-Passback checks, displays a declined message to the customer, and does not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Unreadable TICKET", "Test_Sce_Description": "Verify that the system detects an unreadable TICKET, indicates to the operator that the TICKET is unreadable, and allows the customer to tap on the NFC reader again."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system detects a Valid Non-Adult, Non-Child concession on the customer\u2019s TICKET."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "Verify that the system does not respond and displays a 'Card Read Error' message when a customer taps a card that is not CLIENT media."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the system detects an empty Ride Balance, displays a declined message to the customer, and does not conduct the transaction."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Low Battery Threshold", "Description": "Verify that the application switches to 'Out of Service' mode when the low battery threshold is reached during a successful TICKET tap."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that the system detects a non-activated ticket, displays a declined message to the customer, and does not conduct the transaction."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "Verify that the system reads the Farecard, determines that it is locked, displays a declined screen to the operator, and does not proceed with the inspection."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Valid Child Concession", "Description": "Verify that the system detects a Valid Child Concession, displays the successful Child fare payment screen, and plays the successful fare payment audio tone for Child concession."}, "Test Scenario 7": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system allows the operator to select the payment function on the SA Tool inspection results screen when a customer\u2019s TICKET has not paid a fare."}, "Test Scenario 8": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Verify that the system detects that the TICKET fails the Anti-Passback checks, displays a declined message to the customer, and does not conduct the transaction."}, "Test Scenario 9": {"Test scenarios": "Fare Payment with Unreadable TICKET", "Description": "Verify that the system detects an unreadable TICKET, indicates to the operator that the TICKET is unreadable, and allows the customer to tap on the NFC reader again."}, "Test Scenario 10": {"Test scenarios": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Description": "Verify that the system detects a Valid Non-Adult, Non-Child concession on the customer\u2019s TICKET."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing Anti-Passback Window functionality", "Test_Sce_Description": "This scenario will test if the system correctly identifies a TICKET that is within the Anti-Passback Window. The system should detect that the TICKET fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing TICKET activation status", "Test_Sce_Description": "This scenario will test if the system correctly identifies a non-activated TICKET. The system should detect that the TICKET is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing TICKET expiration status", "Test_Sce_Description": "This scenario will test if the system correctly identifies an expired TICKET. The system should detect that the TICKET is expired and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing TICKET with no Ride Balance", "Test_Sce_Description": "This scenario will test if the system correctly identifies a TICKET with no Ride Balance. The system should detect that the Ride Balance is empty and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing TICKET with Valid Child concession", "Test_Sce_Description": "This scenario will test if the system correctly identifies a TICKET with a Valid Child concession. The system should detect that a Valid Child Concession is found and display the successful Child fare payment screen. The SA Tool should play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing TICKET with non-CLIENT media", "Test_Sce_Description": "This scenario will test if the system correctly identifies a TICKET that is not CLIENT media. The system should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing TICKET with low battery threshold", "Test_Sce_Description": "This scenario will test if the system correctly handles a situation where the battery goes below the low battery threshold during payment. If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode. Else, the customers fare payment should be processed as per Step 5. The application should then switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing TICKET with valid Transfer Product", "Test_Sce_Description": "This scenario will test if the system correctly identifies a TICKET with a valid Transfer Product. The system should compute the free transfer and display the successful fare payment screen. The SA Tool should play the successful fare payment audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing TICKET with failed inspection", "Test_Sce_Description": "This scenario will test if the system correctly handles a situation where the operator inspects a customer\u2019s TICKET and determines that they have not paid a fare. The operator should select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Testing TICKET with valid Period Pass", "Test_Sce_Description": "This scenario will test if the system correctly identifies a TICKET with a valid Period Pass. The system should compute that the TICKET has a valid period pass and accepts the fare. The SA Tool should update the TICKET accordingly and display the successful fare payment screen. The SA Tool should play the successful fare payment audio tone."}, {"Test Scenario 1": {"Test scenarios": "Testing Anti-Passback Window functionality", "Description": "This scenario will test if the system correctly identifies a TICKET that is within the Anti-Passback Window. The system should detect that the TICKET fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, "Test Scenario 2": {"Test scenarios": "Testing TICKET activation status", "Description": "This scenario will test if the system correctly identifies a non-activated TICKET. The system should detect that the TICKET is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, "Test Scenario 3": {"Test scenarios": "Testing TICKET expiration status", "Description": "This scenario will test if the system correctly identifies an expired TICKET. The system should detect that the TICKET is expired and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, "Test Scenario 4": {"Test scenarios": "Testing TICKET with no Ride Balance", "Description": "This scenario will test if the system correctly identifies a TICKET with no Ride Balance. The system should detect that the Ride Balance is empty and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, "Test Scenario 5": {"Test scenarios": "Testing TICKET with Valid Child concession", "Description": "This scenario will test if the system correctly identifies a TICKET with a Valid Child concession. The system should detect that a Valid Child Concession is found and display the successful Child fare payment screen. The SA Tool should play the successful fare payment audio tone for Child concession."}, "Test Scenario 6": {"Test scenarios": "Testing TICKET with non-CLIENT media", "Description": "This scenario will test if the system correctly identifies a TICKET that is not CLIENT media. The system should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, "Test Scenario 7": {"Test scenarios": "Testing TICKET with low battery threshold", "Description": "This scenario will test if the system correctly handles a situation where the battery goes below the low battery threshold during payment. If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode. Else, the customers fare payment should be processed as per Step 5. The application should then switch to \u201cOut of Service\u201d mode."}, "Test Scenario 8": {"Test scenarios": "Testing TICKET with valid Transfer Product", "Description": "This scenario will test if the system correctly identifies a TICKET with a valid Transfer Product. The system should compute the free transfer and display the successful fare payment screen. The SA Tool should play the successful fare payment audio tone."}, "Test Scenario 9": {"Test scenarios": "Testing TICKET with failed inspection", "Description": "This scenario will test if the system correctly handles a situation where the operator inspects a customer\u2019s TICKET and determines that they have not paid a fare. The operator should select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."}, "Test Scenario 10": {"Test scenarios": "Testing TICKET with valid Period Pass", "Description": "This scenario will test if the system correctly identifies a TICKET with a valid Period Pass. The system should compute that the TICKET has a valid period pass and accepts the fare. The SA Tool should update the TICKET accordingly and display the successful fare payment screen. The SA Tool should play the successful fare payment audio tone."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly identifies a non-activated ticket when a customer attempts to make a fare payment. The system should display a declined message and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly identifies when a customer's ride balance is empty. The system should display a declined message and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Valid Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies a valid child concession on a customer's ticket. The system should display the successful fare payment screen and play the successful fare payment audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly processes a fare payment resulting from a failed inspection. The system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Low Battery Threshold", "Test_Sce_Description": "Verify that the system correctly handles a low battery threshold during a fare payment. If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "Verify that the system correctly identifies when a customer taps a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly identifies when a customer's ticket is within the Anti-Passback Window. The system should display a declined message and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "Verify that the system correctly identifies when a farecard is locked. The system should display a declined screen to the operator and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Unreadable TICKET", "Test_Sce_Description": "Verify that the system correctly identifies when a TICKET is unreadable. The system should indicate to the operator that the TICKET is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies when a customer's TICKET has a valid non-adult, non-child concession. The system should process the fare payment accordingly."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that the system correctly identifies a non-activated ticket when a customer attempts to make a fare payment. The system should display a declined message and not conduct the transaction."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the system correctly identifies when a customer's ride balance is empty. The system should display a declined message and not conduct the transaction."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Valid Child Concession", "Description": "Verify that the system correctly identifies a valid child concession on a customer's ticket. The system should display the successful fare payment screen and play the successful fare payment audio tone."}, "Test Scenario 4": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly processes a fare payment resulting from a failed inspection. The system should record both the fare payment and inspection transactions."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Low Battery Threshold", "Description": "Verify that the system correctly handles a low battery threshold during a fare payment. If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "Verify that the system correctly identifies when a customer taps a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, "Test Scenario 7": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Verify that the system correctly identifies when a customer's ticket is within the Anti-Passback Window. The system should display a declined message and not conduct the transaction."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "Verify that the system correctly identifies when a farecard is locked. The system should display a declined screen to the operator and not proceed with the inspection."}, "Test Scenario 9": {"Test scenarios": "Fare Payment with Unreadable TICKET", "Description": "Verify that the system correctly identifies when a TICKET is unreadable. The system should indicate to the operator that the TICKET is unreadable."}, "Test Scenario 10": {"Test scenarios": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly identifies when a customer's TICKET has a valid non-adult, non-child concession. The system should process the fare payment accordingly."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the service class is Premium."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Performance of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is completed within the expected time frame and does not cause any performance issues in the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Security of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is secure and does not expose any sensitive customer information or allow for any unauthorized access to the system."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Accuracy of Fare Calculation", "Test_Sce_Description": "Verify that the fare calculation is accurate and consistent across different fare payment scenarios."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Consistency of Fare Deduction", "Test_Sce_Description": "Verify that the fare deduction from the ePurse balance is consistent and accurate across different fare payment scenarios."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Handling of Insufficient ePurse Balance", "Test_Sce_Description": "Verify that the system correctly handles scenarios where the ePurse balance is insufficient for the fare payment."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the service class is Premium."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, "Test Scenario 6": {"Test scenarios": "Performance of Fare Payment Process", "Description": "Verify that the fare payment process is completed within the expected time frame and does not cause any performance issues in the SA Tool."}, "Test Scenario 7": {"Test scenarios": "Security of Fare Payment Process", "Description": "Verify that the fare payment process is secure and does not expose any sensitive customer information or allow for any unauthorized access to the system."}, "Test Scenario 8": {"Test scenarios": "Accuracy of Fare Calculation", "Description": "Verify that the fare calculation is accurate and consistent across different fare payment scenarios."}, "Test Scenario 9": {"Test scenarios": "Consistency of Fare Deduction", "Description": "Verify that the fare deduction from the ePurse balance is consistent and accurate across different fare payment scenarios."}, "Test Scenario 10": {"Test scenarios": "Handling of Insufficient ePurse Balance", "Description": "Verify that the system correctly handles scenarios where the ePurse balance is insufficient for the fare payment."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the Special Event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare", "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the Special Event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the Child Concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Performance of the SA Tool", "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay when computing and deducting fares from the ePurse balance, providing free transfers, and recording transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Security of the SA Tool", "Test_Sce_Description": "Verify that the SA Tool securely processes fare payments, protects customer information, and prevents unauthorized access."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the Special Event fare."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Premium Service Class and Lower Special Event Fare", "Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the Special Event fare."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the Child Concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."}, "Test Scenario 7": {"Test scenarios": "Performance of the SA Tool", "Description": "Verify that the SA Tool performs efficiently and without delay when computing and deducting fares from the ePurse balance, providing free transfers, and recording transactions."}, "Test Scenario 8": {"Test scenarios": "Security of the SA Tool", "Description": "Verify that the SA Tool securely processes fare payments, protects customer information, and prevents unauthorized access."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route and the farecard is within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made and the farecard has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made and the farecard has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Performance of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame and does not cause any performance issues in the system."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Security of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is secure and does not expose any sensitive customer data or system information."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Accuracy of Fare Calculation", "Test_Sce_Description": "Verify that the system accurately calculates the fare based on the service class, transfer product, and concession on the farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Correct Deduction of Fare from ePurse Balance", "Test_Sce_Description": "Verify that the system correctly deducts the calculated fare from the ePurse balance on the farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Correct Display of Fare Payment Result", "Test_Sce_Description": "Verify that the system correctly displays the result of the fare payment on the SA Tool."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route and the farecard is within the transfer window."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made and the farecard has a valid Non-Adult concession."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made and the farecard has a valid Child concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, "Test Scenario 6": {"Test scenarios": "Performance of Fare Payment Process", "Description": "Verify that the fare payment process is completed within the acceptable time frame and does not cause any performance issues in the system."}, "Test Scenario 7": {"Test scenarios": "Security of Fare Payment Process", "Description": "Verify that the fare payment process is secure and does not expose any sensitive customer data or system information."}, "Test Scenario 8": {"Test scenarios": "Accuracy of Fare Calculation", "Description": "Verify that the system accurately calculates the fare based on the service class, transfer product, and concession on the farecard."}, "Test Scenario 9": {"Test scenarios": "Correct Deduction of Fare from ePurse Balance", "Description": "Verify that the system correctly deducts the calculated fare from the ePurse balance on the farecard."}, "Test Scenario 10": {"Test scenarios": "Correct Display of Fare Payment Result", "Description": "Verify that the system correctly displays the result of the fare payment on the SA Tool."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of insufficient ePurse balance", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of valid transfer product", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Inter-agency transfer processing", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Autoload threshold processing", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly checks that the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of Action or Load Value list", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly verifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Peak hours fare payment after reaching Off Peak Daily Cap", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Premium Service Route fare payment with Transfer where the Premium fare is higher than the Special Event fare", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Premium Service Route fare payment with Transfer where the Premium fare is lower than the Special Event fare", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult Concession", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child, Non-discreet concession", "Description": "This scenario is to validate that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, "Test Scenario 2": {"Test scenarios": "Handling of insufficient ePurse balance", "Description": "This scenario is to validate that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, "Test Scenario 3": {"Test scenarios": "Processing of valid transfer product", "Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."}, "Test Scenario 4": {"Test scenarios": "Inter-agency transfer processing", "Description": "This scenario is to validate that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."}, "Test Scenario 5": {"Test scenarios": "Autoload threshold processing", "Description": "This scenario is to validate that the SA Tool correctly checks that the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, "Test Scenario 6": {"Test scenarios": "Processing of Action or Load Value list", "Description": "This scenario is to validate that the SA Tool correctly verifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, "Test Scenario 7": {"Test scenarios": "Peak hours fare payment after reaching Off Peak Daily Cap", "Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap."}, "Test Scenario 8": {"Test scenarios": "Premium Service Route fare payment with Transfer where the Premium fare is higher than the Special Event fare", "Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."}, "Test Scenario 9": {"Test scenarios": "Premium Service Route fare payment with Transfer where the Premium fare is lower than the Special Event fare", "Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."}, "Test Scenario 10": {"Test scenarios": "Validating Non-Adult Concession", "Description": "This scenario is to validate that the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Transfer Product", "Test_Sce_Description": "Verify that the system correctly identifies a valid transfer product on the customer's TICKET. The system should compute the free transfer and process the fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Audio Messages Request", "Test_Sce_Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool", "Test_Sce_Description": "Verify that the system correctly processes a fare payment on the FLATFARE BASED SA Tool for a premium service or special route/location. The system should not differentiate between service class for CLIENT Ticket."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool", "Test_Sce_Description": "Verify that the system correctly processes a fare payment on the FLATFARE BASED SA Tool for a premium service or special event route/location after previously riding on a regular, premium, or special event route. The system should compute a free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Valid Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly processes a fare payment resulting from a failed TICKET inspection. The system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly identifies when a customer's ride balance is empty and declines the transaction. The system should display a declined message to the customer and play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Low Battery Threshold", "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful TICKET tap. The system should still process the fare payment if the threshold is reached before Step 5."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Non-CLIENT Media", "Test_Sce_Description": "Verify that the system correctly identifies when a customer's card is not CLIENT media and does not respond. The device should display the error message 'Card Read Error'."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly identifies when a customer's TICKET is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly identifies when a customer's TICKET is not activated and declines the transaction. The system should display a declined message to the customer and play the declined audio tone."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."}, "Test Scenario 2": {"Test scenarios": "Validating Transfer Product", "Description": "Verify that the system correctly identifies a valid transfer product on the customer's TICKET. The system should compute the free transfer and process the fare payment."}, "Test Scenario 3": {"Test scenarios": "Audio Messages Request", "Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion."}, "Test Scenario 4": {"Test scenarios": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool", "Description": "Verify that the system correctly processes a fare payment on the FLATFARE BASED SA Tool for a premium service or special route/location. The system should not differentiate between service class for CLIENT Ticket."}, "Test Scenario 5": {"Test scenarios": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool", "Description": "Verify that the system correctly processes a fare payment on the FLATFARE BASED SA Tool for a premium service or special event route/location after previously riding on a regular, premium, or special event route. The system should compute a free transfer."}, "Test Scenario 6": {"Test scenarios": "Valid Child Concession", "Description": "Verify that the system correctly identifies and processes a valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, "Test Scenario 7": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly processes a fare payment resulting from a failed TICKET inspection. The system should record both the fare payment and inspection transactions."}, "Test Scenario 8": {"Test scenarios": "Empty Ride Balance", "Description": "Verify that the system correctly identifies when a customer's ride balance is empty and declines the transaction. The system should display a declined message to the customer and play the declined audio tone."}, "Test Scenario 9": {"Test scenarios": "Low Battery Threshold", "Description": "Verify that the system correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful TICKET tap. The system should still process the fare payment if the threshold is reached before Step 5."}, "Test Scenario 10": {"Test scenarios": "Non-CLIENT Media", "Description": "Verify that the system correctly identifies when a customer's card is not CLIENT media and does not respond. The device should display the error message 'Card Read Error'."}, "Test Scenario 11": {"Test scenarios": "Anti-Passback Window", "Description": "Verify that the system correctly identifies when a customer's TICKET is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play the declined audio tone."}, "Test Scenario 12": {"Test scenarios": "Non-Activated Ticket", "Description": "Verify that the system correctly identifies when a customer's TICKET is not activated and declines the transaction. The system should display a declined message to the customer and play the declined audio tone."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Failed Inspection", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET that has not paid a fare during inspection and allows the operator to select the payment function on the SA Tool inspection results screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Recording of Fare Payment and Inspection Transactions", "Test_Sce_Description": "Verify that the SA Tool accurately records both the fare payment and inspection transactions when a fare payment is made after a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Notification Display after Fare Payment and Inspection", "Test_Sce_Description": "Verify that the SA Tool application returns to the Tap Card screen and displays a toast notification of the corresponding inspection action after a fare payment is made following a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's ride balance is empty and displays a declined message to the customer, not conducting the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Low Battery Threshold during Payment", "Test_Sce_Description": "Verify that the SA Tool correctly switches to 'Out of Service' mode if the low battery threshold is reached before Step 5 of the Main Use Case. If the threshold is reached after Step 5, verify that the customer's fare payment is processed before the application switches to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "Verify that the SA Tool application does not respond when a customer taps a card that is not CLIENT media, and that the device error message 'Card Read Error' is displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's TICKET is within the Anti-Passback Window and displays a declined message to the customer, not conducting the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's TICKET is not activated and displays a declined message to the customer, not conducting the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Expired Ticket", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's TICKET is expired and displays a declined message to the customer, not conducting the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Period Pass", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's TICKET has a valid period pass and accepts the fare, updating the TICKET accordingly and displaying the successful fare payment screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Unreadable TICKET", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a TICKET is unreadable and fails to read it correctly."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Failed Inspection", "Description": "Verify that the SA Tool correctly identifies a customer's TICKET that has not paid a fare during inspection and allows the operator to select the payment function on the SA Tool inspection results screen."}, "Test Scenario 2": {"Test scenarios": "Recording of Fare Payment and Inspection Transactions", "Description": "Verify that the SA Tool accurately records both the fare payment and inspection transactions when a fare payment is made after a failed inspection."}, "Test Scenario 3": {"Test scenarios": "Notification Display after Fare Payment and Inspection", "Description": "Verify that the SA Tool application returns to the Tap Card screen and displays a toast notification of the corresponding inspection action after a fare payment is made following a failed inspection."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the SA Tool correctly identifies when a customer's ride balance is empty and displays a declined message to the customer, not conducting the transaction."}, "Test Scenario 5": {"Test scenarios": "Low Battery Threshold during Payment", "Description": "Verify that the SA Tool correctly switches to 'Out of Service' mode if the low battery threshold is reached before Step 5 of the Main Use Case. If the threshold is reached after Step 5, verify that the customer's fare payment is processed before the application switches to 'Out of Service' mode."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "Verify that the SA Tool application does not respond when a customer taps a card that is not CLIENT media, and that the device error message 'Card Read Error' is displayed for a short period of time."}, "Test Scenario 7": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Verify that the SA Tool correctly identifies when a customer's TICKET is within the Anti-Passback Window and displays a declined message to the customer, not conducting the transaction."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that the SA Tool correctly identifies when a customer's TICKET is not activated and displays a declined message to the customer, not conducting the transaction."}, "Test Scenario 9": {"Test scenarios": "Fare Payment with Expired Ticket", "Description": "Verify that the SA Tool correctly identifies when a customer's TICKET is expired and displays a declined message to the customer, not conducting the transaction."}, "Test Scenario 10": {"Test scenarios": "Fare Payment with Period Pass", "Description": "Verify that the SA Tool correctly identifies when a customer's TICKET has a valid period pass and accepts the fare, updating the TICKET accordingly and displaying the successful fare payment screen."}, "Test Scenario 11": {"Test scenarios": "Fare Payment with Unreadable TICKET", "Description": "Verify that the SA Tool correctly identifies when a TICKET is unreadable and fails to read it correctly."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's ride balance is empty. The system should detect the empty balance, display a declined message, not conduct the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the device's battery goes below the low battery threshold during the payment process. The system should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5, or process the fare payment and then switch to 'Out of Service' mode if the threshold is reached after Step 5."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's card is not CLIENT media. The system should not respond, but display a 'Card Read Error' message for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's ticket is within the Anti-Passback Window. The system should detect the Anti-Passback check failure, display a declined message, not conduct the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's ticket is not activated. The system should detect the invalidity of the Limited Period Pass, compute the value to be deducted from the e-Purse, detect the farecard overdraft, display a declined message, not conduct the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the farecard is locked. The system should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Unreadable TICKET", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the TICKET is unreadable. The system should detect the TICKET, fail to read it, indicate to the operator that the TICKET is unreadable, and log the error in the background for troubleshooting."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's TICKET has a valid concession other than Adult or Child. The system should detect the concession, compute the value to be deducted from the ride balance, deduct the ride accordingly, update the TICKET, display the successful fare payment screen, play the successful fare payment audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the system correctly handles a fare payment attempt when the customer's ride balance is empty. The system should detect the empty balance, display a declined message, not conduct the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Low Battery", "Description": "Verify that the system correctly handles a fare payment attempt when the device's battery goes below the low battery threshold during the payment process. The system should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5, or process the fare payment and then switch to 'Out of Service' mode if the threshold is reached after Step 5."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "Verify that the system correctly handles a fare payment attempt when the customer's card is not CLIENT media. The system should not respond, but display a 'Card Read Error' message for a short period of time."}, "Test Scenario 4": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Verify that the system correctly handles a fare payment attempt when the customer's ticket is within the Anti-Passback Window. The system should detect the Anti-Passback check failure, display a declined message, not conduct the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that the system correctly handles a fare payment attempt when the customer's ticket is not activated. The system should detect the invalidity of the Limited Period Pass, compute the value to be deducted from the e-Purse, detect the farecard overdraft, display a declined message, not conduct the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "Verify that the system correctly handles a fare payment attempt when the farecard is locked. The system should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Unreadable TICKET", "Description": "Verify that the system correctly handles a fare payment attempt when the TICKET is unreadable. The system should detect the TICKET, fail to read it, indicate to the operator that the TICKET is unreadable, and log the error in the background for troubleshooting."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly handles a fare payment attempt when the customer's TICKET has a valid concession other than Adult or Child. The system should detect the concession, compute the value to be deducted from the ride balance, deduct the ride accordingly, update the TICKET, display the successful fare payment screen, play the successful fare payment audio tone, and return to the Tap Card screen after a configurable timeout."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Low Battery Threshold Test", "Test_Sce_Description": "This scenario tests the functionality of the application when the battery level goes below the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Fare Payment Processing Test", "Test_Sce_Description": "This scenario tests the fare payment processing functionality of the application. The application should be able to process the customer's fare payment as per Step 5 if the low battery threshold is not reached before Step 5."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Out of Service Mode Test", "Test_Sce_Description": "This scenario tests the 'Out of Service' mode functionality of the application. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5 or after processing the customer's fare payment as per Step 5."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Card Read Error Test", "Test_Sce_Description": "This scenario tests the error handling functionality of the application when a card that is not CLIENT media is tapped. The application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Anti-Passback Window Test", "Test_Sce_Description": "This scenario tests the Anti-Passback Window functionality of the application. The application should detect that the TICKET fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Declined Message Display Test", "Test_Sce_Description": "This scenario tests the declined message display functionality of the application. The application should display a declined message to the customer if the TICKET fails the Anti-Passback checks. The SA Tool should also play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Non-Activated Ticket Test", "Test_Sce_Description": "This scenario tests the functionality of the application when a non-activated TICKET is tapped. The application should detect that the TICKET is not activated and display a declined message to the customer. The transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Return to Tap Card Screen Test", "Test_Sce_Description": "This scenario tests the functionality of the application to return to the Tap Card screen after a configurable timeout. The application should return to the Tap Card screen after displaying a declined message to the customer and playing the declined audio tone."}, {"Test Scenario 1": {"Test scenarios": "Low Battery Threshold Test", "Description": "This scenario tests the functionality of the application when the battery level goes below the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, "Test Scenario 2": {"Test scenarios": "Fare Payment Processing Test", "Description": "This scenario tests the fare payment processing functionality of the application. The application should be able to process the customer's fare payment as per Step 5 if the low battery threshold is not reached before Step 5."}, "Test Scenario 3": {"Test scenarios": "Out of Service Mode Test", "Description": "This scenario tests the 'Out of Service' mode functionality of the application. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5 or after processing the customer's fare payment as per Step 5."}, "Test Scenario 4": {"Test scenarios": "Card Read Error Test", "Description": "This scenario tests the error handling functionality of the application when a card that is not CLIENT media is tapped. The application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, "Test Scenario 5": {"Test scenarios": "Anti-Passback Window Test", "Description": "This scenario tests the Anti-Passback Window functionality of the application. The application should detect that the TICKET fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted."}, "Test Scenario 6": {"Test scenarios": "Declined Message Display Test", "Description": "This scenario tests the declined message display functionality of the application. The application should display a declined message to the customer if the TICKET fails the Anti-Passback checks. The SA Tool should also play the declined audio tone."}, "Test Scenario 7": {"Test scenarios": "Non-Activated Ticket Test", "Description": "This scenario tests the functionality of the application when a non-activated TICKET is tapped. The application should detect that the TICKET is not activated and display a declined message to the customer. The transaction should not be conducted."}, "Test Scenario 8": {"Test scenarios": "Return to Tap Card Screen Test", "Description": "This scenario tests the functionality of the application to return to the Tap Card screen after a configurable timeout. The application should return to the Tap Card screen after displaying a declined message to the customer and playing the declined audio tone."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Non-CLIENT Media Card", "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment using a card that is not CLIENT media. The system should display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should display a declined message and the transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Low Battery Threshold", "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the low battery threshold is reached during a fare payment process. If the threshold is reached before Step 5, the application should switch to 'Out of Service' mode. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a non-activated ticket. The system should display a declined message and the transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a locked farecard. The system should display a declined screen and the inspection should not proceed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer with a valid non-adult, non-child concession attempts to make a fare payment. The system should process the fare payment accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Unreadable TICKET", "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with an unreadable TICKET. The system should indicate to the operator that the TICKET is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly processes a fare payment resulting from a failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen and the system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Valid Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer with a valid child concession attempts to make a fare payment. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment within the Anti-Passback Window. The system should display a declined message and the transaction should not be conducted."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Non-CLIENT Media Card", "Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment using a card that is not CLIENT media. The system should display a 'Card Read Error' message."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should display a declined message and the transaction should not be conducted."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Low Battery Threshold", "Description": "Verify that the system correctly switches to 'Out of Service' mode when the low battery threshold is reached during a fare payment process. If the threshold is reached before Step 5, the application should switch to 'Out of Service' mode. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a non-activated ticket. The system should display a declined message and the transaction should not be conducted."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a locked farecard. The system should display a declined screen and the inspection should not proceed."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly identifies and responds when a customer with a valid non-adult, non-child concession attempts to make a fare payment. The system should process the fare payment accordingly."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Unreadable TICKET", "Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with an unreadable TICKET. The system should indicate to the operator that the TICKET is unreadable."}, "Test Scenario 8": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly processes a fare payment resulting from a failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen and the system should record both the fare payment and inspection transactions."}, "Test Scenario 9": {"Test scenarios": "Fare Payment with Valid Child Concession", "Description": "Verify that the system correctly identifies and responds when a customer with a valid child concession attempts to make a fare payment. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, "Test Scenario 10": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment within the Anti-Passback Window. The system should display a declined message and the transaction should not be conducted."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Anti-Passback Window Check", "Test_Sce_Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Timeout Functionality", "Test_Sce_Description": "Verify that the system correctly returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the ticket being within the Anti-Passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Validation Steps Order", "Test_Sce_Description": "Verify that the system follows the correct order of validation steps as per [R6] when checking the Anti-Passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Non-Activated Ticket Check", "Test_Sce_Description": "Verify that the system correctly identifies a non-activated ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Expired Ticket Check", "Test_Sce_Description": "Verify that the system correctly identifies an expired ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Performance Under Low Battery", "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the battery goes below the low battery threshold during a successful ticket tap. The system should still be able to process the remote lists."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Non-CLIENT Media Card Check", "Test_Sce_Description": "Verify that the system correctly identifies a card that is not CLIENT media and does not respond. The device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Successful Fare Payment", "Test_Sce_Description": "Verify that the system correctly processes a fare payment from a ticket with a valid period pass. The system should update the ticket accordingly, display the successful fare payment screen, and play the successful fare payment audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Unreadable Ticket Check", "Test_Sce_Description": "Verify that the system correctly identifies an unreadable ticket and fails to read it correctly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Security of Fare Payment", "Test_Sce_Description": "Verify that the system securely processes fare payments and updates the ticket accordingly. No unauthorized access or manipulation of ticket data should be possible."}, {"Test Scenario 1": {"Test scenarios": "Anti-Passback Window Check", "Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, "Test Scenario 2": {"Test scenarios": "Timeout Functionality", "Description": "Verify that the system correctly returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the ticket being within the Anti-Passback Window."}, "Test Scenario 3": {"Test scenarios": "Validation Steps Order", "Description": "Verify that the system follows the correct order of validation steps as per [R6] when checking the Anti-Passback Window."}, "Test Scenario 4": {"Test scenarios": "Non-Activated Ticket Check", "Description": "Verify that the system correctly identifies a non-activated ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, "Test Scenario 5": {"Test scenarios": "Expired Ticket Check", "Description": "Verify that the system correctly identifies an expired ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, "Test Scenario 6": {"Test scenarios": "Performance Under Low Battery", "Description": "Verify that the system correctly switches to 'Out of Service' mode when the battery goes below the low battery threshold during a successful ticket tap. The system should still be able to process the remote lists."}, "Test Scenario 7": {"Test scenarios": "Non-CLIENT Media Card Check", "Description": "Verify that the system correctly identifies a card that is not CLIENT media and does not respond. The device error message 'Card Read Error' should be displayed for a short period of time."}, "Test Scenario 8": {"Test scenarios": "Successful Fare Payment", "Description": "Verify that the system correctly processes a fare payment from a ticket with a valid period pass. The system should update the ticket accordingly, display the successful fare payment screen, and play the successful fare payment audio tone."}, "Test Scenario 9": {"Test scenarios": "Unreadable Ticket Check", "Description": "Verify that the system correctly identifies an unreadable ticket and fails to read it correctly."}, "Test Scenario 10": {"Test scenarios": "Security of Fare Payment", "Description": "Verify that the system securely processes fare payments and updates the ticket accordingly. No unauthorized access or manipulation of ticket data should be possible."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Test the functionality of the SA Tool when a customer attempts to make a fare payment using a non-activated ticket. The tool should detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Test the functionality of the SA Tool when a customer attempts to make a fare payment using a ticket with an empty ride balance. The tool should detect that the ride balance is empty and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Low Battery Threshold", "Test_Sce_Description": "Test the functionality of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. The tool should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-Client Media", "Test_Sce_Description": "Test the functionality of the SA Tool when a customer attempts to make a fare payment using a card that is not CLIENT media. The tool should not respond and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Test the functionality of the SA Tool when a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The tool should detect that the ticket fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "Test the functionality of the SA Tool when a customer attempts to make a fare payment using a locked farecard. The tool should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Unreadable Ticket", "Test_Sce_Description": "Test the functionality of the SA Tool when a customer attempts to make a fare payment using an unreadable ticket. The tool should detect the ticket but fail to read it, indicating to the operator that the ticket is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession", "Test_Sce_Description": "Test the functionality of the SA Tool when a customer attempts to make a fare payment using a ticket with a valid non-adult, non-child concession. The tool should process the fare payment accordingly."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Test the functionality of the SA Tool when a customer attempts to make a fare payment using a non-activated ticket. The tool should detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Test the functionality of the SA Tool when a customer attempts to make a fare payment using a ticket with an empty ride balance. The tool should detect that the ride balance is empty and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Low Battery Threshold", "Description": "Test the functionality of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. The tool should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Client Media", "Description": "Test the functionality of the SA Tool when a customer attempts to make a fare payment using a card that is not CLIENT media. The tool should not respond and display a 'Card Read Error' message."}, "Test Scenario 5": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Test the functionality of the SA Tool when a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The tool should detect that the ticket fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "Test the functionality of the SA Tool when a customer attempts to make a fare payment using a locked farecard. The tool should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Unreadable Ticket", "Description": "Test the functionality of the SA Tool when a customer attempts to make a fare payment using an unreadable ticket. The tool should detect the ticket but fail to read it, indicating to the operator that the ticket is unreadable."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Non-Adult, Non-Child Concession", "Description": "Test the functionality of the SA Tool when a customer attempts to make a fare payment using a ticket with a valid non-adult, non-child concession. The tool should process the fare payment accordingly."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Virtual Card Unreadable", "Test_Sce_Description": "Verify that the SA Tool application correctly detects when a Virtual Card is unreadable. The application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is successful, the application should proceed with steps 4 \u2013 7. If the tap is unsuccessful, the application should again indicate to the operator that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Fare Payment with Non-Adult, Non-Child, Non-Discreet Concessions", "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment from a Virtual Card with a valid non-adult, non-child, non-discreet concession. The application should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Fare Payment with Insufficient ePurse Balance", "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment when the customer\u2019s ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS should check the online hotlist, complete the fare processing, remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly. The device should provide the appropriate feedback to the Cardholder of a successful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Fare Payment within Intra-SP Transfer Window", "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment when the transaction is within the Intra-SP Transfer window. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card, and the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Fare Payment within Inter-SP Transfer Window", "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment when the transaction is within the Inter-SP Transfer window. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card, and the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Fare Payment with Audio Messages", "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment when the customer requests audio messages. The operator should enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion. The SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message. The corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Test Scenario 1": {"Test scenarios": "Virtual Card Unreadable", "Description": "Verify that the SA Tool application correctly detects when a Virtual Card is unreadable. The application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is successful, the application should proceed with steps 4 \u2013 7. If the tap is unsuccessful, the application should again indicate to the operator that the Virtual Card is unreadable."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Non-Adult, Non-Child, Non-Discreet Concessions", "Description": "Verify that the SA Tool correctly processes fare payment from a Virtual Card with a valid non-adult, non-child, non-discreet concession. The application should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Insufficient ePurse Balance", "Description": "Verify that the SA Tool correctly processes fare payment when the customer\u2019s ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS should check the online hotlist, complete the fare processing, remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly. The device should provide the appropriate feedback to the Cardholder of a successful transaction."}, "Test Scenario 4": {"Test scenarios": "Fare Payment within Intra-SP Transfer Window", "Description": "Verify that the SA Tool correctly processes fare payment when the transaction is within the Intra-SP Transfer window. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card, and the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, "Test Scenario 5": {"Test scenarios": "Fare Payment within Inter-SP Transfer Window", "Description": "Verify that the SA Tool correctly processes fare payment when the transaction is within the Inter-SP Transfer window. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card, and the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Audio Messages", "Description": "Verify that the SA Tool correctly processes fare payment when the customer requests audio messages. The operator should enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion. The SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message. The corresponding audio message should be played to the customer in the default language of their Farecard."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Testing the functionality of the SA Tool when the Virtual Card is unreadable", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it detects the Virtual Card but is unable to read it. The tool should indicate to the operator that the Virtual Card is unreadable. The customer will tap on the NFC reader again and if the tap is unsuccessful, the tool should again indicate that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Testing the functionality of the SA Tool when the customer has a non-adult, non-child, non-discreet concession on their Virtual Card", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer's Virtual Card has a valid non-adult, non-child, non-discreet concession. The tool should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Testing the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount. The tool should send the tap to ATS for processing, which checks the online hotlist and completes the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Testing the functionality of the SA Tool when the transaction is within the Intra-SP Transfer window", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product and the transaction is within the Intra-SP Transfer window. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Testing the functionality of the SA Tool when the transaction is within the Inter-SP Transfer window", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product from other service provider and the transaction is within the Inter-SP Transfer window. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Testing the performance of the SA Tool when processing fare payments", "Test_Sce_Description": "This scenario will test the performance of the SA Tool when processing fare payments. The tool should be able to handle multiple fare payments simultaneously without any performance degradation."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Testing the security of the SA Tool when processing fare payments", "Test_Sce_Description": "This scenario will test the security of the SA Tool when processing fare payments. The tool should securely process the fare payments without any data breaches or leaks."}, {"Test Scenario 1": {"Test scenarios": "Testing the functionality of the SA Tool when the Virtual Card is unreadable", "Description": "This scenario will test the functionality of the SA Tool when it detects the Virtual Card but is unable to read it. The tool should indicate to the operator that the Virtual Card is unreadable. The customer will tap on the NFC reader again and if the tap is unsuccessful, the tool should again indicate that the Virtual Card is unreadable."}, "Test Scenario 2": {"Test scenarios": "Testing the functionality of the SA Tool when the customer has a non-adult, non-child, non-discreet concession on their Virtual Card", "Description": "This scenario will test the functionality of the SA Tool when the customer's Virtual Card has a valid non-adult, non-child, non-discreet concession. The tool should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, "Test Scenario 3": {"Test scenarios": "Testing the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount", "Description": "This scenario will test the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount. The tool should send the tap to ATS for processing, which checks the online hotlist and completes the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft."}, "Test Scenario 4": {"Test scenarios": "Testing the functionality of the SA Tool when the transaction is within the Intra-SP Transfer window", "Description": "This scenario will test the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product and the transaction is within the Intra-SP Transfer window. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, "Test Scenario 5": {"Test scenarios": "Testing the functionality of the SA Tool when the transaction is within the Inter-SP Transfer window", "Description": "This scenario will test the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product from other service provider and the transaction is within the Inter-SP Transfer window. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, "Test Scenario 6": {"Test scenarios": "Testing the performance of the SA Tool when processing fare payments", "Description": "This scenario will test the performance of the SA Tool when processing fare payments. The tool should be able to handle multiple fare payments simultaneously without any performance degradation."}, "Test Scenario 7": {"Test scenarios": "Testing the security of the SA Tool when processing fare payments", "Description": "This scenario will test the security of the SA Tool when processing fare payments. The tool should securely process the fare payments without any data breaches or leaks."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Virtual Card Detection", "Test_Sce_Description": "Verify that the SA Tool application is able to detect the Virtual Card when it is tapped on the NFC reader. The application should indicate if the card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Fare Payment with Insufficient ePurse Balance", "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer's ePurse balance is less than the fare amount. The system should send the tap to ATS for processing, check the online hotlist, complete the fare processing, and put the card into overdraft."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Successful Transaction Feedback", "Test_Sce_Description": "Verify that the device provides the appropriate feedback to the Cardholder of a successful transaction. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Fare Payment with Non-Adult, Non-Child, Non-Discreet Concessions", "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Fare Payment within Intra-SP Transfer Window", "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer's Virtual Card has a valid transfer product and the transaction is within the Intra-SP Transfer window. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Fare Payment within Inter-SP Transfer Window", "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer's Virtual Card has a valid transfer product from other service provider and the transaction is within the Inter-SP Transfer window. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Performance of SA Tool Application", "Test_Sce_Description": "Verify that the SA Tool application performs well under load. The application should be able to handle multiple transactions simultaneously without any degradation in performance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Security of SA Tool Application", "Test_Sce_Description": "Verify that the SA Tool application is secure. The application should encrypt all sensitive data, such as card information and transaction details, to protect against unauthorized access."}, {"Test Scenario 1": {"Test scenarios": "Virtual Card Detection", "Description": "Verify that the SA Tool application is able to detect the Virtual Card when it is tapped on the NFC reader. The application should indicate if the card is unreadable."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Insufficient ePurse Balance", "Description": "Verify that the system correctly handles a situation where the customer's ePurse balance is less than the fare amount. The system should send the tap to ATS for processing, check the online hotlist, complete the fare processing, and put the card into overdraft."}, "Test Scenario 3": {"Test scenarios": "Successful Transaction Feedback", "Description": "Verify that the device provides the appropriate feedback to the Cardholder of a successful transaction. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult, Non-Child, Non-Discreet Concessions", "Description": "Verify that the system correctly handles a situation where the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, "Test Scenario 5": {"Test scenarios": "Fare Payment within Intra-SP Transfer Window", "Description": "Verify that the system correctly handles a situation where the customer's Virtual Card has a valid transfer product and the transaction is within the Intra-SP Transfer window. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, "Test Scenario 6": {"Test scenarios": "Fare Payment within Inter-SP Transfer Window", "Description": "Verify that the system correctly handles a situation where the customer's Virtual Card has a valid transfer product from other service provider and the transaction is within the Inter-SP Transfer window. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, "Test Scenario 7": {"Test scenarios": "Performance of SA Tool Application", "Description": "Verify that the SA Tool application performs well under load. The application should be able to handle multiple transactions simultaneously without any degradation in performance."}, "Test Scenario 8": {"Test scenarios": "Security of SA Tool Application", "Description": "Verify that the SA Tool application is secure. The application should encrypt all sensitive data, such as card information and transaction details, to protect against unauthorized access."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Virtual Card Unreadable", "Test_Sce_Description": "Test the scenario where the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer will tap on the NFC reader again. If the tap is successful, steps 4 \u2013 7 will be conducted. If the tap is unsuccessful, the SA Tool application will indicate to the operator that the CLIENT (Virtual) Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions", "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "ePurse balance less than fare amount", "Test_Sce_Description": "Test the scenario where the customer\u2019s ePurse balance is less than the fare amount. The device sends the tap to ATS for processing. ATS checks the online hotlist and completes the fare processing. ATS removes the fare from the Virtual Card e-Purse and puts the card into overdraft."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Transaction within Intra-SP Transfer window", "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product. ATS will read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This will be communicated back to the device."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Transaction within Inter-SP Transfer window", "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product from other service provider. A transfer agreement between the service providers has been established. ATS will read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This will be communicated back to the device."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Customer requests Audio Messages", "Test_Sce_Description": "Test the scenario where the customer asks to pay for the trip with their Virtual Card and requests audio messages for fare payment. Operator enables audio mode. The operator can change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Daily Cap Reached outside of Transfer window", "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, Farecard has reached Daily Cap Limit and Farecard is out of transfer window. ATS deducts no fare since the Daily Cap is reached."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Premium Service or Special Route/Location", "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool and Service Class is Premium or Special Event. ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade", "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, Service Class is Premium or Special Event, Farecard has a valid Regular Service Transfer Product and Tap is within Transfer Window. ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool."}, {"Test Scenario 1": {"Test scenarios": "Virtual Card Unreadable", "Description": "Test the scenario where the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer will tap on the NFC reader again. If the tap is successful, steps 4 \u2013 7 will be conducted. If the tap is unsuccessful, the SA Tool application will indicate to the operator that the CLIENT (Virtual) Card is unreadable."}, "Test Scenario 2": {"Test scenarios": "Non-Adult, Non-Child, non-discreet concessions", "Description": "Test the scenario where the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, "Test Scenario 3": {"Test scenarios": "ePurse balance less than fare amount", "Description": "Test the scenario where the customer\u2019s ePurse balance is less than the fare amount. The device sends the tap to ATS for processing. ATS checks the online hotlist and completes the fare processing. ATS removes the fare from the Virtual Card e-Purse and puts the card into overdraft."}, "Test Scenario 4": {"Test scenarios": "Transaction within Intra-SP Transfer window", "Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product. ATS will read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This will be communicated back to the device."}, "Test Scenario 5": {"Test scenarios": "Transaction within Inter-SP Transfer window", "Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product from other service provider. A transfer agreement between the service providers has been established. ATS will read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This will be communicated back to the device."}, "Test Scenario 6": {"Test scenarios": "Customer requests Audio Messages", "Description": "Test the scenario where the customer asks to pay for the trip with their Virtual Card and requests audio messages for fare payment. Operator enables audio mode. The operator can change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case."}, "Test Scenario 7": {"Test scenarios": "Daily Cap Reached outside of Transfer window", "Description": "Test the scenario where the fare payment is being made on the SA Tool, Farecard has reached Daily Cap Limit and Farecard is out of transfer window. ATS deducts no fare since the Daily Cap is reached."}, "Test Scenario 8": {"Test scenarios": "Premium Service or Special Route/Location", "Description": "Test the scenario where the fare payment is being made on the SA Tool and Service Class is Premium or Special Event. ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool."}, "Test Scenario 9": {"Test scenarios": "Premium Service or Special Route/Location with Fare Upgrade", "Description": "Test the scenario where the fare payment is being made on the SA Tool, Service Class is Premium or Special Event, Farecard has a valid Regular Service Transfer Product and Tap is within Transfer Window. ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing the functionality of the Virtual Card being unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when it detects the Virtual Card but fails to read it correctly. The application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is successful, the process should continue, if not, the application should indicate that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing the functionality of the Virtual Card with a Valid Non-Adult, Non-Child, non-discreet concessions", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing the functionality of the Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing the functionality of the Virtual Card within Intra-SP Transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing the functionality of the Virtual Card within Inter-SP Transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product from other service provider. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing the functionality of the Virtual Card when the customer requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer requests audio messages for fare payment. The operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing the functionality of the Virtual Card when Daily Cap Reached outside of Transfer window on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Farecard has reached Daily Cap Limit and is out of transfer window. ATS should deduct no fare since the Daily Cap is reached."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing the functionality of the Virtual Card for Premium Service or Special Route/Location on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the fare payment is being made on the SA Tool and the Service Class is Premium or Special Event. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing the functionality of the Virtual Card for Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the fare payment is being made on the SA Tool, the Service Class is Premium or Special Event, the Farecard has a valid Regular Service Transfer Product and the Tap is within Transfer Window. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse."}, {"Test Scenario 1": {"Test scenarios": "Testing the functionality of the Virtual Card being unreadable", "Description": "This scenario tests the functionality of the SA Tool application when it detects the Virtual Card but fails to read it correctly. The application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is successful, the process should continue, if not, the application should indicate that the Virtual Card is unreadable."}, "Test Scenario 2": {"Test scenarios": "Testing the functionality of the Virtual Card with a Valid Non-Adult, Non-Child, non-discreet concessions", "Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, "Test Scenario 3": {"Test scenarios": "Testing the functionality of the Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Description": "This scenario tests the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft."}, "Test Scenario 4": {"Test scenarios": "Testing the functionality of the Virtual Card within Intra-SP Transfer window", "Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, "Test Scenario 5": {"Test scenarios": "Testing the functionality of the Virtual Card within Inter-SP Transfer window", "Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product from other service provider. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, "Test Scenario 6": {"Test scenarios": "Testing the functionality of the Virtual Card when the customer requests Audio Messages", "Description": "This scenario tests the functionality of the SA Tool when the customer requests audio messages for fare payment. The operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."}, "Test Scenario 7": {"Test scenarios": "Testing the functionality of the Virtual Card when Daily Cap Reached outside of Transfer window on SA Tool", "Description": "This scenario tests the functionality of the SA Tool when the Farecard has reached Daily Cap Limit and is out of transfer window. ATS should deduct no fare since the Daily Cap is reached."}, "Test Scenario 8": {"Test scenarios": "Testing the functionality of the Virtual Card for Premium Service or Special Route/Location on SA Tool", "Description": "This scenario tests the functionality of the SA Tool when the fare payment is being made on the SA Tool and the Service Class is Premium or Special Event. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse."}, "Test Scenario 9": {"Test scenarios": "Testing the functionality of the Virtual Card for Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Description": "This scenario tests the functionality of the SA Tool when the fare payment is being made on the SA Tool, the Service Class is Premium or Special Event, the Farecard has a valid Regular Service Transfer Product and the Tap is within Transfer Window. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Farecard is on the Action or Load Value List", "Test_Sce_Description": "Check if the SA Tool correctly verifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Audio Messages for Fare Payment", "Test_Sce_Description": "Check if the customer can request audio messages for the fare payment and if the operator can enable audio mode and adjust the volume level as per the customer's discretion."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment with Daily Cap Reached", "Test_Sce_Description": "Check if the SA Tool correctly deducts no fare when the Daily Cap is reached."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment for Premium Service or Special Route/Location", "Test_Sce_Description": "Check if the SA Tool correctly computes and deducts the Premium or Special Event fare when a tap on a premium service or special route/location is made."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Upgrade for Premium Service or Special Route/Location", "Test_Sce_Description": "Check if the SA Tool correctly computes and deducts the Upgrade fare when a tap on a premium service or special route/location is made after previously riding on a regular service route (within the transfer window)."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Check if the SA Tool correctly processes a fare payment when a tap is made on peak hours after previously reaching off peak daily cap (outside the transfer window)."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment with Period Pass for Higher Fare Value Service Class", "Test_Sce_Description": "Check if the SA Tool correctly computes and deducts the Upgrade fare when the Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment with Period Pass for Lower Fare Value Service Class", "Test_Sce_Description": "Check if the SA Tool correctly identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment when the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment with Limited Period Pass", "Test_Sce_Description": "Check if the SA Tool correctly processes the fare payment when the Farecard has a valid Limited Period Pass and the current time is within the limits of the product."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment with Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "Check if the SA Tool correctly processes the fare payment when the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction."}, {"Test Scenario 1": {"Test scenarios": "Verify Farecard is on the Action or Load Value List", "Description": "Check if the SA Tool correctly verifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, "Test Scenario 2": {"Test scenarios": "Verify Audio Messages for Fare Payment", "Description": "Check if the customer can request audio messages for the fare payment and if the operator can enable audio mode and adjust the volume level as per the customer's discretion."}, "Test Scenario 3": {"Test scenarios": "Verify Fare Payment with Daily Cap Reached", "Description": "Check if the SA Tool correctly deducts no fare when the Daily Cap is reached."}, "Test Scenario 4": {"Test scenarios": "Verify Fare Payment for Premium Service or Special Route/Location", "Description": "Check if the SA Tool correctly computes and deducts the Premium or Special Event fare when a tap on a premium service or special route/location is made."}, "Test Scenario 5": {"Test scenarios": "Verify Fare Upgrade for Premium Service or Special Route/Location", "Description": "Check if the SA Tool correctly computes and deducts the Upgrade fare when a tap on a premium service or special route/location is made after previously riding on a regular service route (within the transfer window)."}, "Test Scenario 6": {"Test scenarios": "Verify Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Check if the SA Tool correctly processes a fare payment when a tap is made on peak hours after previously reaching off peak daily cap (outside the transfer window)."}, "Test Scenario 7": {"Test scenarios": "Verify Fare Payment with Period Pass for Higher Fare Value Service Class", "Description": "Check if the SA Tool correctly computes and deducts the Upgrade fare when the Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value."}, "Test Scenario 8": {"Test scenarios": "Verify Fare Payment with Period Pass for Lower Fare Value Service Class", "Description": "Check if the SA Tool correctly identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment when the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value."}, "Test Scenario 9": {"Test scenarios": "Verify Fare Payment with Limited Period Pass", "Description": "Check if the SA Tool correctly processes the fare payment when the Farecard has a valid Limited Period Pass and the current time is within the limits of the product."}, "Test Scenario 10": {"Test scenarios": "Verify Fare Payment with Limited Period Pass outside of valid time with sufficient e-Purse balance", "Description": "Check if the SA Tool correctly processes the fare payment when the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Limited Period Pass within valid time", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should correctly identify the pass as valid and allow the transaction to proceed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly identify the pass as invalid for the current time, compute the fare to be deducted from the e-Purse, and allow the transaction to proceed by deducting the fare from the e-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Test_Sce_Description": "This scenario is to validate the functionality of the system when an anonymous farecard with an expired period pass and insufficient ePurse balance is used. The system should correctly identify the card as anonymous and the ePurse balance as insufficient, and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Blocked Farecard", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a blocked farecard is used. The system should correctly identify the card as blocked and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Farecard on Deny List", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard on the Deny List is used. The system should correctly identify the card as being on the Deny List, remove it from the Deny List, set it to blocked, and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Low Battery Threshold", "Test_Sce_Description": "This scenario is to validate the functionality of the system when the battery goes below the low battery threshold during a transaction. The system should be able to process the remote lists even after the battery goes below the threshold during a successful Farecard tap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the pass as valid and accept the period pass fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Farecard with Valid Child Concession", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Child concession is used. The system should correctly identify the concession and display the successful Child Transit Pass fare payment screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Failed Inspection", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard fails inspection. The operator should be able to select the payment function on the SA Tool inspection results screen, and the system should record both the fare payment and inspection transactions."}, {"Test Scenario 1": {"Test scenarios": "Validating Limited Period Pass within valid time", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should correctly identify the pass as valid and allow the transaction to proceed."}, "Test Scenario 2": {"Test scenarios": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly identify the pass as invalid for the current time, compute the fare to be deducted from the e-Purse, and allow the transaction to proceed by deducting the fare from the e-Purse."}, "Test Scenario 3": {"Test scenarios": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Description": "This scenario is to validate the functionality of the system when an anonymous farecard with an expired period pass and insufficient ePurse balance is used. The system should correctly identify the card as anonymous and the ePurse balance as insufficient, and decline the transaction."}, "Test Scenario 4": {"Test scenarios": "Handling Blocked Farecard", "Description": "This scenario is to validate the functionality of the system when a blocked farecard is used. The system should correctly identify the card as blocked and decline the transaction."}, "Test Scenario 5": {"Test scenarios": "Handling Farecard on Deny List", "Description": "This scenario is to validate the functionality of the system when a farecard on the Deny List is used. The system should correctly identify the card as being on the Deny List, remove it from the Deny List, set it to blocked, and decline the transaction."}, "Test Scenario 6": {"Test scenarios": "Handling Low Battery Threshold", "Description": "This scenario is to validate the functionality of the system when the battery goes below the low battery threshold during a transaction. The system should be able to process the remote lists even after the battery goes below the threshold during a successful Farecard tap."}, "Test Scenario 7": {"Test scenarios": "Validating Period Pass with Higher Service Class Fare Value", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the pass as valid and accept the period pass fare payment."}, "Test Scenario 8": {"Test scenarios": "Handling Farecard with Valid Child Concession", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Child concession is used. The system should correctly identify the concession and display the successful Child Transit Pass fare payment screen."}, "Test Scenario 9": {"Test scenarios": "Handling Failed Inspection", "Description": "This scenario is to validate the functionality of the system when a farecard fails inspection. The operator should be able to select the payment function on the SA Tool inspection results screen, and the system should record both the fare payment and inspection transactions."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Limited Period Pass within valid time", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the time limit of the pass. The system should correctly identify the pass as valid and allow the transaction to proceed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the time limit of the pass but has sufficient e-Purse balance. The system should correctly identify the pass as invalid for the current time, compute the fare to be deducted from the e-Purse, and deduct the fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Test_Sce_Description": "This scenario is to validate the system's handling when a customer uses an anonymous farecard with an expired period pass and insufficient ePurse balance. The system should detect the card's status and return a declined result, displaying a declined message to the customer and updating the Scratchpad accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Blocked Farecard", "Test_Sce_Description": "This scenario is to validate the system's handling when a customer uses a blocked farecard. The system should detect the card's status and return a declined result, displaying a declined message to the customer and updating the Scratchpad accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Farecard on Deny List", "Test_Sce_Description": "This scenario is to validate the system's handling when a customer uses a farecard that is on the Deny List. The system should detect the card's status, remove it from the Deny List and set it to blocked, and return a declined result, displaying a declined message to the customer and updating the Scratchpad accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Low Battery Threshold During Payment", "Test_Sce_Description": "This scenario is to validate the system's handling when the battery goes below the low battery threshold during a payment transaction. The system should be able to process the remote lists even after the battery goes below the threshold."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value", "Test_Sce_Description": "This scenario is to validate the system's handling when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the pass as valid and accept the period pass fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Farecard with Valid Child Concession", "Test_Sce_Description": "This scenario is to validate the system's handling when a farecard with a valid Child concession is used. The system should correctly identify the concession and display the successful Child Transit Pass fare payment screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario is to validate the system's handling when a fare payment results from a failed inspection. The system should record both the fare payment and inspection transactions and return to the Tap Card screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Test_Sce_Description": "This scenario is to validate the system's handling when a customer uses an anonymous farecard with an expired period pass and insufficient ePurse balance. The system should detect the card's status and display a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Blocked Farecard", "Test_Sce_Description": "This scenario is to validate the system's handling when a customer uses a blocked farecard. The system should detect the card's status and display a declined message to the customer."}, {"Test Scenario 1": {"Test scenarios": "Validating Limited Period Pass within valid time", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the time limit of the pass. The system should correctly identify the pass as valid and allow the transaction to proceed."}, "Test Scenario 2": {"Test scenarios": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the time limit of the pass but has sufficient e-Purse balance. The system should correctly identify the pass as invalid for the current time, compute the fare to be deducted from the e-Purse, and deduct the fare."}, "Test Scenario 3": {"Test scenarios": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Description": "This scenario is to validate the system's handling when a customer uses an anonymous farecard with an expired period pass and insufficient ePurse balance. The system should detect the card's status and return a declined result, displaying a declined message to the customer and updating the Scratchpad accordingly."}, "Test Scenario 4": {"Test scenarios": "Handling Blocked Farecard", "Description": "This scenario is to validate the system's handling when a customer uses a blocked farecard. The system should detect the card's status and return a declined result, displaying a declined message to the customer and updating the Scratchpad accordingly."}, "Test Scenario 5": {"Test scenarios": "Handling Farecard on Deny List", "Description": "This scenario is to validate the system's handling when a customer uses a farecard that is on the Deny List. The system should detect the card's status, remove it from the Deny List and set it to blocked, and return a declined result, displaying a declined message to the customer and updating the Scratchpad accordingly."}, "Test Scenario 6": {"Test scenarios": "Handling Low Battery Threshold During Payment", "Description": "This scenario is to validate the system's handling when the battery goes below the low battery threshold during a payment transaction. The system should be able to process the remote lists even after the battery goes below the threshold."}, "Test Scenario 7": {"Test scenarios": "Validating Period Pass with Higher Service Class Fare Value", "Description": "This scenario is to validate the system's handling when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the pass as valid and accept the period pass fare payment."}, "Test Scenario 8": {"Test scenarios": "Handling Farecard with Valid Child Concession", "Description": "This scenario is to validate the system's handling when a farecard with a valid Child concession is used. The system should correctly identify the concession and display the successful Child Transit Pass fare payment screen."}, "Test Scenario 9": {"Test scenarios": "Handling Fare Payment Resulting from Failed Inspection", "Description": "This scenario is to validate the system's handling when a fare payment results from a failed inspection. The system should record both the fare payment and inspection transactions and return to the Tap Card screen."}, "Test Scenario 10": {"Test scenarios": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Description": "This scenario is to validate the system's handling when a customer uses an anonymous farecard with an expired period pass and insufficient ePurse balance. The system should detect the card's status and display a declined message to the customer."}, "Test Scenario 11": {"Test scenarios": "Handling Blocked Farecard", "Description": "This scenario is to validate the system's handling when a customer uses a blocked farecard. The system should detect the card's status and display a declined message to the customer."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Valid Limited Period Pass within time limit", "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the time limit. The system should correctly deduct the fare from the pass and display a successful payment message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Valid Limited Period Pass outside time limit with sufficient e-Purse balance", "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass outside the time limit but with sufficient e-Purse balance. The system should correctly deduct the fare from the e-Purse and display a successful payment message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Expired Period Pass with insufficient ePurse balance", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a virtual card with an expired Period Pass and insufficient ePurse balance. The system should display a declined message and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Blocked Virtual Card", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked virtual card. The system should display a declined message and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Virtual Card on Deny List", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a virtual card on the Deny List. The system should remove the card from the Deny List, set it to blocked, display a declined message and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Low Battery Threshold during Payment", "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should still be able to process the remote lists and conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Tap Counter at Configured Limit", "Test_Sce_Description": "Verify that the system correctly handles a situation where the tap counter is at the configured limit. The system should display a declined message and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Unreadable Virtual Card", "Test_Sce_Description": "Verify that the system correctly handles a situation where the virtual card is unreadable. The system should indicate to the operator that the virtual card is unreadable and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Expired Period Pass with Sufficient ePurse Balance", "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with an expired Period Pass but with sufficient ePurse balance. The system should correctly deduct the fare from the ePurse and display a successful payment message."}, {"Test Scenario 1": {"Test scenarios": "Valid Limited Period Pass within time limit", "Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the time limit. The system should correctly deduct the fare from the pass and display a successful payment message."}, "Test Scenario 2": {"Test scenarios": "Valid Limited Period Pass outside time limit with sufficient e-Purse balance", "Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass outside the time limit but with sufficient e-Purse balance. The system should correctly deduct the fare from the e-Purse and display a successful payment message."}, "Test Scenario 3": {"Test scenarios": "Expired Period Pass with insufficient ePurse balance", "Description": "Verify that the system correctly declines fare payment from a virtual card with an expired Period Pass and insufficient ePurse balance. The system should display a declined message and not conduct the transaction."}, "Test Scenario 4": {"Test scenarios": "Blocked Virtual Card", "Description": "Verify that the system correctly declines fare payment from a blocked virtual card. The system should display a declined message and not conduct the transaction."}, "Test Scenario 5": {"Test scenarios": "Virtual Card on Deny List", "Description": "Verify that the system correctly declines fare payment from a virtual card on the Deny List. The system should remove the card from the Deny List, set it to blocked, display a declined message and not conduct the transaction."}, "Test Scenario 6": {"Test scenarios": "Low Battery Threshold during Payment", "Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should still be able to process the remote lists and conduct the transaction."}, "Test Scenario 7": {"Test scenarios": "Tap Counter at Configured Limit", "Description": "Verify that the system correctly handles a situation where the tap counter is at the configured limit. The system should display a declined message and not conduct the transaction."}, "Test Scenario 8": {"Test scenarios": "Unreadable Virtual Card", "Description": "Verify that the system correctly handles a situation where the virtual card is unreadable. The system should indicate to the operator that the virtual card is unreadable and not conduct the transaction."}, "Test Scenario 9": {"Test scenarios": "Expired Period Pass with Sufficient ePurse Balance", "Description": "Verify that the system correctly accepts fare payment from a virtual card with an expired Period Pass but with sufficient ePurse balance. The system should correctly deduct the fare from the ePurse and display a successful payment message."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Validating Limited Period Pass within time limit", "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the time limit. The system should correctly identify the pass as valid and allow the transaction to proceed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Validating Limited Period Pass outside time limit with sufficient e-Purse balance", "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass outside the time limit but with sufficient e-Purse balance. The system should correctly identify the pass as invalid due to time limit, compute the fare from the e-Purse balance, and allow the transaction to proceed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Test_Sce_Description": "Verify that the system correctly declines fare payment from an anonymous virtual card with an expired period pass and ePurse balance less than the fare amount. The system should correctly identify the card as anonymous, the pass as expired, and the ePurse balance as insufficient, and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Handling Blocked Virtual Card", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked virtual card. The system should correctly identify the card as blocked and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Handling Virtual Card on Deny List", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a virtual card on the Deny List. The system should correctly identify the card as on the Deny List, remove it from the Deny List, set it to blocked, and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Handling Low Battery Threshold During Payment", "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should correctly identify the low battery situation, process the remote lists, and switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Handling Blocked Farecard", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked Farecard. The system should correctly identify the card as blocked and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Handling Farecard on Hotlist", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a Farecard on the hotlist. The system should correctly identify the card as on the hotlist, update the card's status to blocked, and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Handling Non-Activated Card", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a non-activated card. The system should correctly identify the card as non-activated and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Handling Farecard within Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a Farecard within the Anti-Passback Window. The system should correctly identify the card as within the Anti-Passback Window and decline the transaction."}, {"Test Scenario 1": {"Test scenarios": "Validating Limited Period Pass within time limit", "Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the time limit. The system should correctly identify the pass as valid and allow the transaction to proceed."}, "Test Scenario 2": {"Test scenarios": "Validating Limited Period Pass outside time limit with sufficient e-Purse balance", "Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass outside the time limit but with sufficient e-Purse balance. The system should correctly identify the pass as invalid due to time limit, compute the fare from the e-Purse balance, and allow the transaction to proceed."}, "Test Scenario 3": {"Test scenarios": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Description": "Verify that the system correctly declines fare payment from an anonymous virtual card with an expired period pass and ePurse balance less than the fare amount. The system should correctly identify the card as anonymous, the pass as expired, and the ePurse balance as insufficient, and decline the transaction."}, "Test Scenario 4": {"Test scenarios": "Handling Blocked Virtual Card", "Description": "Verify that the system correctly declines fare payment from a blocked virtual card. The system should correctly identify the card as blocked and decline the transaction."}, "Test Scenario 5": {"Test scenarios": "Handling Virtual Card on Deny List", "Description": "Verify that the system correctly declines fare payment from a virtual card on the Deny List. The system should correctly identify the card as on the Deny List, remove it from the Deny List, set it to blocked, and decline the transaction."}, "Test Scenario 6": {"Test scenarios": "Handling Low Battery Threshold During Payment", "Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should correctly identify the low battery situation, process the remote lists, and switch to 'Out of Service' mode."}, "Test Scenario 7": {"Test scenarios": "Handling Blocked Farecard", "Description": "Verify that the system correctly declines fare payment from a blocked Farecard. The system should correctly identify the card as blocked and decline the transaction."}, "Test Scenario 8": {"Test scenarios": "Handling Farecard on Hotlist", "Description": "Verify that the system correctly declines fare payment from a Farecard on the hotlist. The system should correctly identify the card as on the hotlist, update the card's status to blocked, and decline the transaction."}, "Test Scenario 9": {"Test scenarios": "Handling Non-Activated Card", "Description": "Verify that the system correctly declines fare payment from a non-activated card. The system should correctly identify the card as non-activated and decline the transaction."}, "Test Scenario 10": {"Test scenarios": "Handling Farecard within Anti-Passback Window", "Description": "Verify that the system correctly declines fare payment from a Farecard within the Anti-Passback Window. The system should correctly identify the card as within the Anti-Passback Window and decline the transaction."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the tap is within the transfer window on a Premium Service Class."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the tap is within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Transfer where Premium fare is lower than Special Event fare", "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the tap is within the transfer window on a Premium Service Route where the Premium fare is lower than the Special Event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Transfer where Premium fare is higher than Special Event fare", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare upgrade from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the tap is within the transfer window on a Premium Service Route where the Premium fare is higher than the Special Event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Performance Test", "Test_Sce_Description": "Verify that the system performs efficiently and the fare payment process is completed within the acceptable time frame."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Security Test", "Test_Sce_Description": "Verify that the system securely processes the fare payment and the customer's ePurse balance and other sensitive information are not compromised."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the tap is within the transfer window on a Premium Service Class."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the tap is within the transfer window."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Transfer where Premium fare is lower than Special Event fare", "Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the tap is within the transfer window on a Premium Service Route where the Premium fare is lower than the Special Event fare."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Transfer where Premium fare is higher than Special Event fare", "Description": "Verify that the system correctly computes and deducts the fare upgrade from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the tap is within the transfer window on a Premium Service Route where the Premium fare is higher than the Special Event fare."}, "Test Scenario 9": {"Test scenarios": "Performance Test", "Description": "Verify that the system performs efficiently and the fare payment process is completed within the acceptable time frame."}, "Test Scenario 10": {"Test scenarios": "Security Test", "Description": "Verify that the system securely processes the fare payment and the customer's ePurse balance and other sensitive information are not compromised."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare", "Test_Sce_Description": "Verify that the system correctly computes and allows a free transfer when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window, and the premium fare is lower than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Higher Special Event Fare", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window, and the premium fare is higher than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Performance", "Test_Sce_Description": "Verify that the system performs efficiently and without delay when computing and deducting fares from the ePurse balance during peak usage times."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Security", "Test_Sce_Description": "Verify that the system securely processes fare payments, ensuring that customer data is protected and that transactions are accurately recorded and not susceptible to fraud or manipulation."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Premium Service Class and Lower Special Event Fare", "Description": "Verify that the system correctly computes and allows a free transfer when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window, and the premium fare is lower than the special event fare."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Premium Service Class and Higher Special Event Fare", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window, and the premium fare is higher than the special event fare."}, "Test Scenario 8": {"Test scenarios": "Fare Payment Performance", "Description": "Verify that the system performs efficiently and without delay when computing and deducting fares from the ePurse balance during peak usage times."}, "Test Scenario 9": {"Test scenarios": "Fare Payment Security", "Description": "Verify that the system securely processes fare payments, ensuring that customer data is protected and that transactions are accurately recorded and not susceptible to fraud or manipulation."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after previously reaching off peak daily cap, outside the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route, within the transfer window, and the premium fare is higher than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product resulting in a free transfer", "Test_Sce_Description": "Verify that the system correctly computes and allows a free transfer when a fare payment is made on a premium service route/location after previously riding on a Special Event service route, within the transfer window, and the premium fare is lower than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Performance of the SA Tool during fare payment", "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay during the fare payment process, ensuring a smooth user experience."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Security of the SA Tool during fare payment", "Test_Sce_Description": "Verify that the SA Tool securely processes fare payments, ensuring that customer data is protected and that the fare payment transaction is secure."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after previously reaching off peak daily cap, outside the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route, within the transfer window, and the premium fare is higher than the special event fare."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product resulting in a free transfer", "Description": "Verify that the system correctly computes and allows a free transfer when a fare payment is made on a premium service route/location after previously riding on a Special Event service route, within the transfer window, and the premium fare is lower than the special event fare."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid Non-Adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid Child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, "Test Scenario 7": {"Test scenarios": "Performance of the SA Tool during fare payment", "Description": "Verify that the SA Tool performs efficiently and without delay during the fare payment process, ensuring a smooth user experience."}, "Test Scenario 8": {"Test scenarios": "Security of the SA Tool during fare payment", "Description": "Verify that the SA Tool securely processes fare payments, ensuring that customer data is protected and that the fare payment transaction is secure."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling ePurse balance less than fare amount", "Test_Sce_Description": "This scenario will test if the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing valid transfer product within Intra-agency Transfer window", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing valid transfer product within Inter-agency Transfer window", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product and computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies within the Inter-agency Transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling Autoload Threshold", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing Farecard on the Action or Load Value List", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours after previously reaching off peak daily cap (outside the transfer window) results in a fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a fare upgrade."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling Valid Non-Adult Concession on Farecard", "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child, Non-discreet concession", "Description": "This scenario will test if the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, "Test Scenario 2": {"Test scenarios": "Handling ePurse balance less than fare amount", "Description": "This scenario will test if the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, "Test Scenario 3": {"Test scenarios": "Processing valid transfer product within Intra-agency Transfer window", "Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."}, "Test Scenario 4": {"Test scenarios": "Processing valid transfer product within Inter-agency Transfer window", "Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product and computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies within the Inter-agency Transfer window."}, "Test Scenario 5": {"Test scenarios": "Handling Autoload Threshold", "Description": "This scenario will test if the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, "Test Scenario 6": {"Test scenarios": "Processing Farecard on the Action or Load Value List", "Description": "This scenario will test if the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, "Test Scenario 7": {"Test scenarios": "Handling fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours after previously reaching off peak daily cap (outside the transfer window) results in a fare payment."}, "Test Scenario 8": {"Test scenarios": "Processing Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a fare upgrade."}, "Test Scenario 9": {"Test scenarios": "Processing Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a free transfer."}, "Test Scenario 10": {"Test scenarios": "Handling Valid Non-Adult Concession on Farecard", "Description": "This scenario will test if the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Temporal Class Supplement Tap-On Transaction", "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the device displays an HMI reflecting the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Autoload Enabled Farecard Crossing Threshold", "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance of the Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Override Default Trip with No Default O/D", "Test_Sce_Description": "Verify that when a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on and provides appropriate feedback to the Cardholder of a successful transaction and that the Default Trip was overridden."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Audio Messages Request", "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Farecard Validation Failure at Tap-On", "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device provides the cardholder with the appropriate feedback without updating the Farecard and logs an error in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Blocked Farecard", "Test_Sce_Description": "Verify that when a blocked Farecard is tapped on a device, the right to travel is not conferred, the device provides the appropriate feedback to the Cardholder and logs an error in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Exceeding Max Travel Duration", "Test_Sce_Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment, opens a new trip and deducts the value from the Farecard E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Multiple NFC Media Presentation", "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality, presents Anti-Collision HMI to customer and logs an error in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Non-Activated Farecard Tap-On", "Test_Sce_Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful, the device provides feedback to the Cardholder of an unsuccessful transaction and logs an error in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Card Reading Error", "Test_Sce_Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides appropriate feedback to the Cardholder and logs an error in the background."}, {"Test Scenario 1": {"Test scenarios": "Temporal Class Supplement Tap-On Transaction", "Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the device displays an HMI reflecting the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on."}, "Test Scenario 2": {"Test scenarios": "Autoload Enabled Farecard Crossing Threshold", "Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance of the Farecard."}, "Test Scenario 3": {"Test scenarios": "Override Default Trip with No Default O/D", "Description": "Verify that when a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on and provides appropriate feedback to the Cardholder of a successful transaction and that the Default Trip was overridden."}, "Test Scenario 4": {"Test scenarios": "Audio Messages Request", "Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, "Test Scenario 5": {"Test scenarios": "Farecard Validation Failure at Tap-On", "Description": "Verify that when a Farecard fails validation checks at Tap-On, the device provides the cardholder with the appropriate feedback without updating the Farecard and logs an error in the background."}, "Test Scenario 6": {"Test scenarios": "Blocked Farecard", "Description": "Verify that when a blocked Farecard is tapped on a device, the right to travel is not conferred, the device provides the appropriate feedback to the Cardholder and logs an error in the background."}, "Test Scenario 7": {"Test scenarios": "Exceeding Max Travel Duration", "Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment, opens a new trip and deducts the value from the Farecard E-Purse."}, "Test Scenario 8": {"Test scenarios": "Multiple NFC Media Presentation", "Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality, presents Anti-Collision HMI to customer and logs an error in the background."}, "Test Scenario 9": {"Test scenarios": "Non-Activated Farecard Tap-On", "Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful, the device provides feedback to the Cardholder of an unsuccessful transaction and logs an error in the background."}, "Test Scenario 10": {"Test scenarios": "Card Reading Error", "Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides appropriate feedback to the Cardholder and logs an error in the background."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Autoload Threshold Crossed", "Test_Sce_Description": "Verify that when the Farecard E-Purse Balance crosses the Auto-load threshold due to the Fare, the Autoload amount is automatically added to the E-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Fare Deduction", "Test_Sce_Description": "Verify that the Device correctly deducts the Fare from the Farecard E-Purse balance when the Autoload threshold is crossed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Feedback to Cardholder", "Test_Sce_Description": "Verify that the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to an Autoload transaction and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Temporal Class Supplement Processing", "Test_Sce_Description": "Verify that the Device correctly processes the Tap-On Transaction as a normal tap-on when the device HMI displays the Temporal Class."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Non-Revenue Farecard Acceptance", "Test_Sce_Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode and displays a declined HMI when the Non-Revenue card is tapped in the revenue mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Fare Payment with Fare type Discount", "Test_Sce_Description": "Verify that the Device correctly displays the \u201cFare Payment with Fare type Discount\u201d HMI and accounts for the concession discount in the Fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Default Trip Override", "Test_Sce_Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Audio Messages Request", "Test_Sce_Description": "Verify that when the customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Farecard Validation Failure", "Test_Sce_Description": "Verify that the system correctly handles the scenario when the Farecard fails validation checks at Tap-On."}, {"Test Scenario 1": {"Test scenarios": "Autoload Threshold Crossed", "Description": "Verify that when the Farecard E-Purse Balance crosses the Auto-load threshold due to the Fare, the Autoload amount is automatically added to the E-Purse balance."}, "Test Scenario 2": {"Test scenarios": "Fare Deduction", "Description": "Verify that the Device correctly deducts the Fare from the Farecard E-Purse balance when the Autoload threshold is crossed."}, "Test Scenario 3": {"Test scenarios": "Feedback to Cardholder", "Description": "Verify that the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to an Autoload transaction and updates the Farecard accordingly."}, "Test Scenario 4": {"Test scenarios": "Temporal Class Supplement Processing", "Description": "Verify that the Device correctly processes the Tap-On Transaction as a normal tap-on when the device HMI displays the Temporal Class."}, "Test Scenario 5": {"Test scenarios": "Non-Revenue Farecard Acceptance", "Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode and displays a declined HMI when the Non-Revenue card is tapped in the revenue mode."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Fare type Discount", "Description": "Verify that the Device correctly displays the \u201cFare Payment with Fare type Discount\u201d HMI and accounts for the concession discount in the Fare."}, "Test Scenario 7": {"Test scenarios": "Default Trip Override", "Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on."}, "Test Scenario 8": {"Test scenarios": "Audio Messages Request", "Description": "Verify that when the customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, "Test Scenario 9": {"Test scenarios": "Farecard Validation Failure", "Description": "Verify that the system correctly handles the scenario when the Farecard fails validation checks at Tap-On."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Full Fare-by-Zone transaction processing", "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip should use PAR as the card identifier."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Override Default O/D", "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on. The customer should be able to request the override of a Default Trip by interacting with the Device."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Capping discount eligibility", "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list and complete the fare processing. ATS should calculate the capping discount and apply to the fare calculation."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Multiple capping discounts eligibility", "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS should take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Offline device capping discount processing", "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services. The tap should then be rated in ATS. Capping rules should follow use-case logic outlined in ticketing use cases."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Open Payments Media fails ODA check", "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Open Payments Media Fails Expiry Check", "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device should detect that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Blocked Farecard", "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. The Card reader should detect that Farecard is blocked and the Device should provide the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Max Travel Duration Exceeded", "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. The Device should determine that the Tap-On Time + Max Travel Duration < Current Time and Auto-settle the Underpayment and deduct the value from the Farecard E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Multiple NFC media presented", "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. The Device should block all user functionality, presents Anti-Collision HMI to customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Non-activated Farecard", "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. The Device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Card reading error", "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device should provide the appropriate feedback to the Cardholder."}, {"Test Scenario 1": {"Test scenarios": "Full Fare-by-Zone transaction processing", "Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip should use PAR as the card identifier."}, "Test Scenario 2": {"Test scenarios": "Override Default O/D", "Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on. The customer should be able to request the override of a Default Trip by interacting with the Device."}, "Test Scenario 3": {"Test scenarios": "Capping discount eligibility", "Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list and complete the fare processing. ATS should calculate the capping discount and apply to the fare calculation."}, "Test Scenario 4": {"Test scenarios": "Multiple capping discounts eligibility", "Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS should take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."}, "Test Scenario 5": {"Test scenarios": "Offline device capping discount processing", "Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services. The tap should then be rated in ATS. Capping rules should follow use-case logic outlined in ticketing use cases."}, "Test Scenario 6": {"Test scenarios": "Open Payments Media fails ODA check", "Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder."}, "Test Scenario 7": {"Test scenarios": "Open Payments Media Fails Expiry Check", "Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device should detect that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."}, "Test Scenario 8": {"Test scenarios": "Blocked Farecard", "Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. The Card reader should detect that Farecard is blocked and the Device should provide the appropriate feedback to the Cardholder."}, "Test Scenario 9": {"Test scenarios": "Max Travel Duration Exceeded", "Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. The Device should determine that the Tap-On Time + Max Travel Duration < Current Time and Auto-settle the Underpayment and deduct the value from the Farecard E-Purse."}, "Test Scenario 10": {"Test scenarios": "Multiple NFC media presented", "Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. The Device should block all user functionality, presents Anti-Collision HMI to customer."}, "Test Scenario 11": {"Test scenarios": "Non-activated Farecard", "Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. The Device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."}, "Test Scenario 12": {"Test scenarios": "Card reading error", "Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device should provide the appropriate feedback to the Cardholder."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Non-Revenue farecard in training mode", "Test_Sce_Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode. If the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Temporal Class Supplement", "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the Device should contain an HMI reflecting the Temporal Class Supplement, and process the Tap-On Transaction as a normal tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Autoload Enabled Farecard", "Test_Sce_Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Default O/D Override", "Test_Sce_Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device should process the tap as a result tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Audio Messages Request", "Test_Sce_Description": "Verify that when the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard Validation Check", "Test_Sce_Description": "Verify that if the Farecard fails validation checks at Tap-On, the device should display an error message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Period Pass with Higher Fare Value", "Test_Sce_Description": "Verify that if the Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value, ATS should compute and deduct the Upgrade fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Period Pass with Lower Fare Value", "Test_Sce_Description": "Verify that if the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value, ATS should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Limited Period Pass", "Test_Sce_Description": "Verify that if the Farecard has a valid Limited Period Pass and the current time is within the limits of the product, the device should accept the fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "Verify that if the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the device should accept the fare payment."}, {"Test Scenario 1": {"Test scenarios": "Testing Non-Revenue farecard in training mode", "Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode. If the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI."}, "Test Scenario 2": {"Test scenarios": "Testing Temporal Class Supplement", "Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the Device should contain an HMI reflecting the Temporal Class Supplement, and process the Tap-On Transaction as a normal tap-on."}, "Test Scenario 3": {"Test scenarios": "Testing Autoload Enabled Farecard", "Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance."}, "Test Scenario 4": {"Test scenarios": "Testing Default O/D Override", "Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device should process the tap as a result tap-on."}, "Test Scenario 5": {"Test scenarios": "Testing Audio Messages Request", "Description": "Verify that when the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."}, "Test Scenario 6": {"Test scenarios": "Testing Farecard Validation Check", "Description": "Verify that if the Farecard fails validation checks at Tap-On, the device should display an error message."}, "Test Scenario 7": {"Test scenarios": "Testing Period Pass with Higher Fare Value", "Description": "Verify that if the Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value, ATS should compute and deduct the Upgrade fare."}, "Test Scenario 8": {"Test scenarios": "Testing Period Pass with Lower Fare Value", "Description": "Verify that if the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value, ATS should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."}, "Test Scenario 9": {"Test scenarios": "Testing Limited Period Pass", "Description": "Verify that if the Farecard has a valid Limited Period Pass and the current time is within the limits of the product, the device should accept the fare payment."}, "Test Scenario 10": {"Test scenarios": "Testing Limited Period Pass outside of valid time with sufficient e-Purse balance", "Description": "Verify that if the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the device should accept the fare payment."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Performance", "Test_Sce_Description": "Verify that the system performs the fare payment transaction within the acceptable time limit, ensuring that the system's performance is not compromised."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Security", "Test_Sce_Description": "Verify that the system securely processes the fare payment transaction, ensuring that the customer's ePurse balance and farecard information are not compromised."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly calculates and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly calculates and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Performance", "Description": "Verify that the system performs the fare payment transaction within the acceptable time limit, ensuring that the system's performance is not compromised."}, "Test Scenario 7": {"Test scenarios": "Fare Payment Security", "Description": "Verify that the system securely processes the fare payment transaction, ensuring that the customer's ePurse balance and farecard information are not compromised."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Premium Service Route with Higher Fare than Special Event", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare difference when a customer taps on a premium service route after previously riding on a special event service route within the transfer window. The fare deducted should be the difference between the premium fare and the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Transfer Window Validation", "Test_Sce_Description": "Verify that the system correctly identifies whether the tap is within the transfer window. If the tap is not within the transfer window, the system should not allow the transfer and should charge the full premium fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Farecard Validity Check", "Test_Sce_Description": "Verify that the system correctly identifies whether the farecard has a valid special event transfer product. If the farecard does not have a valid special event transfer product, the system should not allow the transfer and should charge the full premium fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Deduction from ePurse Balance", "Test_Sce_Description": "Verify that the system correctly deducts the fare from the ePurse balance on the farecard. The balance on the ePurse should be reduced by the amount of the fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Communication with SA Tool", "Test_Sce_Description": "Verify that the system correctly communicates the fare calculation and deduction back to the SA Tool. The SA Tool should display the correct fare and remaining balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "POP Print Flag Setting", "Test_Sce_Description": "Verify that the SA Tool correctly sets the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Performance under Load", "Test_Sce_Description": "Verify that the system performs correctly and within acceptable time limits when multiple fare payments are being processed simultaneously."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Security of Farecard Data", "Test_Sce_Description": "Verify that the system securely handles farecard data during the fare payment process. No farecard data should be exposed or accessible to unauthorized parties."}, {"Test Scenario 1": {"Test scenarios": "Premium Service Route with Higher Fare than Special Event", "Description": "Verify that the system correctly calculates and deducts the fare difference when a customer taps on a premium service route after previously riding on a special event service route within the transfer window. The fare deducted should be the difference between the premium fare and the special event fare."}, "Test Scenario 2": {"Test scenarios": "Transfer Window Validation", "Description": "Verify that the system correctly identifies whether the tap is within the transfer window. If the tap is not within the transfer window, the system should not allow the transfer and should charge the full premium fare."}, "Test Scenario 3": {"Test scenarios": "Farecard Validity Check", "Description": "Verify that the system correctly identifies whether the farecard has a valid special event transfer product. If the farecard does not have a valid special event transfer product, the system should not allow the transfer and should charge the full premium fare."}, "Test Scenario 4": {"Test scenarios": "Fare Deduction from ePurse Balance", "Description": "Verify that the system correctly deducts the fare from the ePurse balance on the farecard. The balance on the ePurse should be reduced by the amount of the fare."}, "Test Scenario 5": {"Test scenarios": "Communication with SA Tool", "Description": "Verify that the system correctly communicates the fare calculation and deduction back to the SA Tool. The SA Tool should display the correct fare and remaining balance."}, "Test Scenario 6": {"Test scenarios": "POP Print Flag Setting", "Description": "Verify that the SA Tool correctly sets the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."}, "Test Scenario 7": {"Test scenarios": "Performance under Load", "Description": "Verify that the system performs correctly and within acceptable time limits when multiple fare payments are being processed simultaneously."}, "Test Scenario 8": {"Test scenarios": "Security of Farecard Data", "Description": "Verify that the system securely handles farecard data during the fare payment process. No farecard data should be exposed or accessible to unauthorized parties."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the Special Event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product with lower Premium fare", "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the Special Event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Performance of the SA Tool", "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay when computing and deducting fares from the ePurse balance, providing free transfers, and recording transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Security of the SA Tool", "Test_Sce_Description": "Verify that the SA Tool securely processes fare payments, protects customer information, and prevents unauthorized access."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the Special Event fare."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product with lower Premium fare", "Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the Special Event fare."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."}, "Test Scenario 7": {"Test scenarios": "Performance of the SA Tool", "Description": "Verify that the SA Tool performs efficiently and without delay when computing and deducting fares from the ePurse balance, providing free transfers, and recording transactions."}, "Test Scenario 8": {"Test scenarios": "Security of the SA Tool", "Description": "Verify that the SA Tool securely processes fare payments, protects customer information, and prevents unauthorized access."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession", "Test_Sce_Description": "Verify that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of insufficient ePurse balance", "Test_Sce_Description": "Verify that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of valid transfer product", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Inter-agency transfer processing", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Autoload threshold processing", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of Farecard on the Action or Load Value List", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of fare payment during peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a fare payment is made during peak hours after previously reaching off peak daily cap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of fare payment on Premium Service Route with Transfer", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a fare payment is made on a premium service route/location after previously riding on a Special Event service route."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of Valid Non-Adult Concession on Farecard", "Test_Sce_Description": "Verify that the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child, Non-discreet concession", "Description": "Verify that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, "Test Scenario 2": {"Test scenarios": "Handling of insufficient ePurse balance", "Description": "Verify that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, "Test Scenario 3": {"Test scenarios": "Processing of valid transfer product", "Description": "Verify that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."}, "Test Scenario 4": {"Test scenarios": "Inter-agency transfer processing", "Description": "Verify that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."}, "Test Scenario 5": {"Test scenarios": "Autoload threshold processing", "Description": "Verify that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, "Test Scenario 6": {"Test scenarios": "Processing of Farecard on the Action or Load Value List", "Description": "Verify that the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, "Test Scenario 7": {"Test scenarios": "Handling of fare payment during peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a fare payment is made during peak hours after previously reaching off peak daily cap."}, "Test Scenario 8": {"Test scenarios": "Processing of fare payment on Premium Service Route with Transfer", "Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a fare payment is made on a premium service route/location after previously riding on a Special Event service route."}, "Test Scenario 9": {"Test scenarios": "Handling of Valid Non-Adult Concession on Farecard", "Description": "Verify that the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Transfer Product", "Test_Sce_Description": "Verify that the system correctly identifies a valid transfer product on the customer's TICKET. The system should compute the free transfer correctly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Audio Messages Request", "Test_Sce_Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool", "Test_Sce_Description": "Verify that the system correctly processes a fare payment made on the FLATFARE BASED SA Tool for a premium service or special route/location. The system should not differentiate between service class for CLIENT Ticket."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool", "Test_Sce_Description": "Verify that the system correctly processes a fare payment made on the FLATFARE BASED SA Tool for a premium service or special event route/location after previously riding on a regular, premium, or special event route. The system should compute the free transfer correctly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Valid Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly processes a fare payment resulting from a failed TICKET inspection. The system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly identifies when a customer's ride balance is empty. The system should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Low Battery Threshold", "Test_Sce_Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a successful TICKET tap. The application should switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Non-CLIENT Media", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer taps a card that is not CLIENT media. The system should not respond and display the device error message \u201cCard Read Error\u201d."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly identifies when a customer's TICKET is within the Anti-Passback Window. The system should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly identifies when a customer's TICKET is not activated. The system should not respond and display the device error message \u201cCard Read Error\u201d."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."}, "Test Scenario 2": {"Test scenarios": "Validating Transfer Product", "Description": "Verify that the system correctly identifies a valid transfer product on the customer's TICKET. The system should compute the free transfer correctly."}, "Test Scenario 3": {"Test scenarios": "Audio Messages Request", "Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion."}, "Test Scenario 4": {"Test scenarios": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool", "Description": "Verify that the system correctly processes a fare payment made on the FLATFARE BASED SA Tool for a premium service or special route/location. The system should not differentiate between service class for CLIENT Ticket."}, "Test Scenario 5": {"Test scenarios": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool", "Description": "Verify that the system correctly processes a fare payment made on the FLATFARE BASED SA Tool for a premium service or special event route/location after previously riding on a regular, premium, or special event route. The system should compute the free transfer correctly."}, "Test Scenario 6": {"Test scenarios": "Valid Child Concession", "Description": "Verify that the system correctly identifies and processes a valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, "Test Scenario 7": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly processes a fare payment resulting from a failed TICKET inspection. The system should record both the fare payment and inspection transactions."}, "Test Scenario 8": {"Test scenarios": "Empty Ride Balance", "Description": "Verify that the system correctly identifies when a customer's ride balance is empty. The system should display a declined message to the customer and the transaction should not be conducted."}, "Test Scenario 9": {"Test scenarios": "Low Battery Threshold", "Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a successful TICKET tap. The application should switch to \u201cOut of Service\u201d mode."}, "Test Scenario 10": {"Test scenarios": "Non-CLIENT Media", "Description": "Verify that the system correctly handles a situation where a customer taps a card that is not CLIENT media. The system should not respond and display the device error message \u201cCard Read Error\u201d."}, "Test Scenario 11": {"Test scenarios": "Anti-Passback Window", "Description": "Verify that the system correctly identifies when a customer's TICKET is within the Anti-Passback Window. The system should display a declined message to the customer and the transaction should not be conducted."}, "Test Scenario 12": {"Test scenarios": "Non-Activated Ticket", "Description": "Verify that the system correctly identifies when a customer's TICKET is not activated. The system should not respond and display the device error message \u201cCard Read Error\u201d."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Valid Transfer Product", "Test_Sce_Description": "Verify that the SA Tool correctly computes the free transfer when the ticket has a valid Transfer Product and the tap is within the Transfer Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a Valid Child Concession on the customer's ticket and displays the successful Child fare payment screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the SA Tool correctly records both the fare payment and inspection transactions when the operator determines that the customer has not paid a fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ride balance is empty and displays a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "Verify that the SA Tool correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful ticket tap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "Verify that the SA Tool correctly does not respond when the customer taps a card that is not CLIENT media."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ticket is within the Anti-Passback Window and displays a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ticket is not activated and displays a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Expired Ticket", "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ticket is expired and displays a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Period Pass", "Test_Sce_Description": "Verify that the SA Tool correctly computes that the ticket has a valid period pass and accepts the fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Unreadable Ticket", "Test_Sce_Description": "Verify that the SA Tool correctly detects when the ticket is unreadable and fails to read it correctly."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Valid Transfer Product", "Description": "Verify that the SA Tool correctly computes the free transfer when the ticket has a valid Transfer Product and the tap is within the Transfer Window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the SA Tool correctly identifies a Valid Child Concession on the customer's ticket and displays the successful Child fare payment screen."}, "Test Scenario 3": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the SA Tool correctly records both the fare payment and inspection transactions when the operator determines that the customer has not paid a fare."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the SA Tool correctly detects when the customer's ride balance is empty and displays a declined message to the customer."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Low Battery", "Description": "Verify that the SA Tool correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful ticket tap."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "Verify that the SA Tool correctly does not respond when the customer taps a card that is not CLIENT media."}, "Test Scenario 7": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Verify that the SA Tool correctly detects when the customer's ticket is within the Anti-Passback Window and displays a declined message to the customer."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that the SA Tool correctly detects when the customer's ticket is not activated and displays a declined message to the customer."}, "Test Scenario 9": {"Test scenarios": "Fare Payment with Expired Ticket", "Description": "Verify that the SA Tool correctly detects when the customer's ticket is expired and displays a declined message to the customer."}, "Test Scenario 10": {"Test scenarios": "Fare Payment with Period Pass", "Description": "Verify that the SA Tool correctly computes that the ticket has a valid period pass and accepts the fare."}, "Test Scenario 11": {"Test scenarios": "Fare Payment with Unreadable Ticket", "Description": "Verify that the SA Tool correctly detects when the ticket is unreadable and fails to read it correctly."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's ride balance is empty. The system should detect the empty balance, decline the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the device's battery is below the low battery threshold. The system should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's card is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's ticket is within the Anti-Passback Window. The system should detect the Anti-Passback check failure, decline the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's ticket is not activated. The system should detect the invalidity of the Limited Period Pass, compute the value to be deducted from the e-Purse, detect the overdraft, decline the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the farecard is locked. The system should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Unreadable TICKET", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the TICKET is unreadable. The system should detect the TICKET, fail to read it, indicate to the operator that the TICKET is unreadable, and log the error for troubleshooting."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's TICKET has a valid concession other than Adult or Child. The system should process the concession accordingly."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the system correctly handles a fare payment attempt when the customer's ride balance is empty. The system should detect the empty balance, decline the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Low Battery", "Description": "Verify that the system correctly handles a fare payment attempt when the device's battery is below the low battery threshold. The system should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "Verify that the system correctly handles a fare payment attempt when the customer's card is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, "Test Scenario 4": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Verify that the system correctly handles a fare payment attempt when the customer's ticket is within the Anti-Passback Window. The system should detect the Anti-Passback check failure, decline the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that the system correctly handles a fare payment attempt when the customer's ticket is not activated. The system should detect the invalidity of the Limited Period Pass, compute the value to be deducted from the e-Purse, detect the overdraft, decline the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "Verify that the system correctly handles a fare payment attempt when the farecard is locked. The system should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Unreadable TICKET", "Description": "Verify that the system correctly handles a fare payment attempt when the TICKET is unreadable. The system should detect the TICKET, fail to read it, indicate to the operator that the TICKET is unreadable, and log the error for troubleshooting."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly handles a fare payment attempt when the customer's TICKET has a valid concession other than Adult or Child. The system should process the concession accordingly."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Low Battery Threshold Test", "Test_Sce_Description": "This scenario tests the functionality of the application when the battery goes below the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Fare Payment Processing Test", "Test_Sce_Description": "This scenario tests the fare payment processing functionality of the application. The application should successfully process the customer's fare payment as per Step 5 if the low battery threshold is not reached before Step 5."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Out of Service Mode Test", "Test_Sce_Description": "This scenario tests the 'Out of Service' mode functionality of the application. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5 or after the customer's fare payment is processed as per Step 5."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Card Read Error Test", "Test_Sce_Description": "This scenario tests the error handling functionality of the application when a card that is not CLIENT media is tapped. The application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Anti-Passback Checks Test", "Test_Sce_Description": "This scenario tests the Anti-Passback checks functionality of the application. The device should detect that the TICKET fails the Anti-Passback checks and the application should display a declined message to the customer. The transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Declined Message Display Test", "Test_Sce_Description": "This scenario tests the declined message display functionality of the application. The application should display a declined message to the customer if the TICKET fails the Anti-Passback checks. The SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Non-Activated Ticket Test", "Test_Sce_Description": "This scenario tests the functionality of the application when a non-activated TICKET is tapped. The application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Performance Test", "Test_Sce_Description": "This scenario tests the performance of the application under different battery levels. The application should perform as expected under different battery levels and should switch to 'Out of Service' mode when the battery goes below the low battery threshold."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Security Test", "Test_Sce_Description": "This scenario tests the security features of the application. The application should securely process the customer's fare payment and should securely handle errors such as 'Card Read Error'."}, {"Test Scenario 1": {"Test scenarios": "Low Battery Threshold Test", "Description": "This scenario tests the functionality of the application when the battery goes below the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, "Test Scenario 2": {"Test scenarios": "Fare Payment Processing Test", "Description": "This scenario tests the fare payment processing functionality of the application. The application should successfully process the customer's fare payment as per Step 5 if the low battery threshold is not reached before Step 5."}, "Test Scenario 3": {"Test scenarios": "Out of Service Mode Test", "Description": "This scenario tests the 'Out of Service' mode functionality of the application. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5 or after the customer's fare payment is processed as per Step 5."}, "Test Scenario 4": {"Test scenarios": "Card Read Error Test", "Description": "This scenario tests the error handling functionality of the application when a card that is not CLIENT media is tapped. The application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, "Test Scenario 5": {"Test scenarios": "Anti-Passback Checks Test", "Description": "This scenario tests the Anti-Passback checks functionality of the application. The device should detect that the TICKET fails the Anti-Passback checks and the application should display a declined message to the customer. The transaction should not be conducted."}, "Test Scenario 6": {"Test scenarios": "Declined Message Display Test", "Description": "This scenario tests the declined message display functionality of the application. The application should display a declined message to the customer if the TICKET fails the Anti-Passback checks. The SA Tool should play the declined audio tone."}, "Test Scenario 7": {"Test scenarios": "Non-Activated Ticket Test", "Description": "This scenario tests the functionality of the application when a non-activated TICKET is tapped. The application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, "Test Scenario 8": {"Test scenarios": "Performance Test", "Description": "This scenario tests the performance of the application under different battery levels. The application should perform as expected under different battery levels and should switch to 'Out of Service' mode when the battery goes below the low battery threshold."}, "Test Scenario 9": {"Test scenarios": "Security Test", "Description": "This scenario tests the security features of the application. The application should securely process the customer's fare payment and should securely handle errors such as 'Card Read Error'."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Non-CLIENT Media Card", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should display a declined message and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Low Battery Threshold", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Anti-Passback Window Ticket", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should display a declined message and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a non-activated ticket. The system should display a declined message and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a locked farecard. The system should display a declined screen and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Unreadable TICKET", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with an unreadable TICKET. The system should indicate to the operator that the TICKET is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a TICKET that has a valid Non-Adult, Non-Child concession."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Non-CLIENT Media Card", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should display a declined message and not conduct the transaction."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Low Battery Threshold", "Description": "Verify that the system correctly identifies and handles a situation where the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Anti-Passback Window Ticket", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should display a declined message and not conduct the transaction."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a non-activated ticket. The system should display a declined message and not conduct the transaction."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a locked farecard. The system should display a declined screen and not proceed with the inspection."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Unreadable TICKET", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with an unreadable TICKET. The system should indicate to the operator that the TICKET is unreadable."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a TICKET that has a valid Non-Adult, Non-Child concession."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Anti-Passback Window Check", "Test_Sce_Description": "Verify that the system correctly identifies a TICKET that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Timeout Functionality", "Test_Sce_Description": "Verify that the system returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the TICKET being within the Anti-Passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Non-Activated Ticket Check", "Test_Sce_Description": "Verify that the system correctly identifies a non-activated TICKET and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Performance under Low Battery", "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful TICKET tap. The system should still process the fare payment if the low battery threshold is reached after Step 5 of the Main Use Case."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Non-CLIENT Media Check", "Test_Sce_Description": "Verify that the system correctly identifies a card that is not CLIENT media and does not respond. The device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Expired Ticket Check", "Test_Sce_Description": "Verify that the system correctly identifies an expired TICKET and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Valid Period Pass Check", "Test_Sce_Description": "Verify that the system correctly identifies a TICKET with a valid period pass and accepts the fare. The system should update the TICKET accordingly and display the successful fare payment screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Successful Fare Payment Audio Tone", "Test_Sce_Description": "Verify that the system plays the successful fare payment audio tone when a fare payment is accepted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Fare Payment from Unreadable TICKET", "Test_Sce_Description": "Verify that the system correctly identifies an unreadable TICKET and fails to read it correctly. The system should display a declined message to the customer and play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly identifies a TICKET with an empty ride balance and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, {"Test Scenario 1": {"Test scenarios": "Anti-Passback Window Check", "Description": "Verify that the system correctly identifies a TICKET that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, "Test Scenario 2": {"Test scenarios": "Timeout Functionality", "Description": "Verify that the system returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the TICKET being within the Anti-Passback Window."}, "Test Scenario 3": {"Test scenarios": "Non-Activated Ticket Check", "Description": "Verify that the system correctly identifies a non-activated TICKET and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, "Test Scenario 4": {"Test scenarios": "Performance under Low Battery", "Description": "Verify that the system correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful TICKET tap. The system should still process the fare payment if the low battery threshold is reached after Step 5 of the Main Use Case."}, "Test Scenario 5": {"Test scenarios": "Non-CLIENT Media Check", "Description": "Verify that the system correctly identifies a card that is not CLIENT media and does not respond. The device error message 'Card Read Error' should be displayed for a short period of time."}, "Test Scenario 6": {"Test scenarios": "Expired Ticket Check", "Description": "Verify that the system correctly identifies an expired TICKET and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, "Test Scenario 7": {"Test scenarios": "Valid Period Pass Check", "Description": "Verify that the system correctly identifies a TICKET with a valid period pass and accepts the fare. The system should update the TICKET accordingly and display the successful fare payment screen."}, "Test Scenario 8": {"Test scenarios": "Successful Fare Payment Audio Tone", "Description": "Verify that the system plays the successful fare payment audio tone when a fare payment is accepted."}, "Test Scenario 9": {"Test scenarios": "Fare Payment from Unreadable TICKET", "Description": "Verify that the system correctly identifies an unreadable TICKET and fails to read it correctly. The system should display a declined message to the customer and play a declined audio tone."}, "Test Scenario 10": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the system correctly identifies a TICKET with an empty ride balance and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a non-activated ticket. The system should detect that the ticket is not activated, display a declined message to the customer, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should detect that the ride balance is empty, display a declined message to the customer, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Low Battery Threshold", "Test_Sce_Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-Client Media", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a card that is not client media. The system should not respond and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should detect that the ticket fails the Anti-Passback checks, display a declined message to the customer, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a locked farecard. The system should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Valid Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that has a valid child concession. The system should find the valid child concession, display the successful child fare payment screen, and play the successful fare payment audio tone for child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly handles a situation where a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions and return to the Tap Card screen with a toast notification of the corresponding inspection action."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Unreadable Ticket", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with an unreadable ticket. The system should detect the ticket but fail to read it, indicate to the operator that the ticket is unreadable, and log the error for troubleshooting."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that has a valid non-adult, non-child concession. The system should find the valid concession and proceed with the fare payment process."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a non-activated ticket. The system should detect that the ticket is not activated, display a declined message to the customer, and not conduct the transaction."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should detect that the ride balance is empty, display a declined message to the customer, and not conduct the transaction."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Low Battery Threshold", "Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Client Media", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a card that is not client media. The system should not respond and display a 'Card Read Error' message."}, "Test Scenario 5": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should detect that the ticket fails the Anti-Passback checks, display a declined message to the customer, and not conduct the transaction."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a locked farecard. The system should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Valid Child Concession", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that has a valid child concession. The system should find the valid child concession, display the successful child fare payment screen, and play the successful fare payment audio tone for child concession."}, "Test Scenario 8": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly handles a situation where a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions and return to the Tap Card screen with a toast notification of the corresponding inspection action."}, "Test Scenario 9": {"Test scenarios": "Fare Payment with Unreadable Ticket", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with an unreadable ticket. The system should detect the ticket but fail to read it, indicate to the operator that the ticket is unreadable, and log the error for troubleshooting."}, "Test Scenario 10": {"Test scenarios": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that has a valid non-adult, non-child concession. The system should find the valid concession and proceed with the fare payment process."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Farecard has reached off peak Daily Cap Limit", "Test_Sce_Description": "Verify that the system correctly identifies when a farecard has reached the off peak daily cap limit and prevents further fare deductions for off peak travel."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Farecard has not reached Peak Daily Cap limit", "Test_Sce_Description": "Verify that the system correctly identifies when a farecard has not reached the peak daily cap limit and allows fare deductions for peak travel."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Farecard is out of transfer window", "Test_Sce_Description": "Verify that the system correctly identifies when a farecard is out of the transfer window and does not allow free transfers."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare upgrade from the ePurse balance when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Test_Sce_Description": "Verify that the system correctly allows a free transfer when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window and the premium fare is lower than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Customer has a Valid Non-Adult Concession on their Farecard", "Test_Sce_Description": "Verify that the system correctly identifies when a customer's farecard has a valid non-adult concession and deducts the correct concession fare from the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Performance Test", "Test_Sce_Description": "Verify that the system performs efficiently and effectively under varying loads and conditions, including peak hours and off-peak hours."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Security Test", "Test_Sce_Description": "Verify that the system securely handles and stores sensitive customer information, including farecard data and ePurse balance."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Farecard has reached off peak Daily Cap Limit", "Description": "Verify that the system correctly identifies when a farecard has reached the off peak daily cap limit and prevents further fare deductions for off peak travel."}, "Test Scenario 3": {"Test scenarios": "Farecard has not reached Peak Daily Cap limit", "Description": "Verify that the system correctly identifies when a farecard has not reached the peak daily cap limit and allows fare deductions for peak travel."}, "Test Scenario 4": {"Test scenarios": "Farecard is out of transfer window", "Description": "Verify that the system correctly identifies when a farecard is out of the transfer window and does not allow free transfers."}, "Test Scenario 5": {"Test scenarios": "Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Description": "Verify that the system correctly calculates and deducts the fare upgrade from the ePurse balance when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window."}, "Test Scenario 6": {"Test scenarios": "Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Description": "Verify that the system correctly allows a free transfer when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window and the premium fare is lower than the special event fare."}, "Test Scenario 7": {"Test scenarios": "Customer has a Valid Non-Adult Concession on their Farecard", "Description": "Verify that the system correctly identifies when a customer's farecard has a valid non-adult concession and deducts the correct concession fare from the ePurse balance."}, "Test Scenario 8": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."}, "Test Scenario 9": {"Test scenarios": "Performance Test", "Description": "Verify that the system performs efficiently and effectively under varying loads and conditions, including peak hours and off-peak hours."}, "Test Scenario 10": {"Test scenarios": "Security Test", "Description": "Verify that the system securely handles and stores sensitive customer information, including farecard data and ePurse balance."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after previously reaching the off peak daily cap, outside the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Valid Regular Service Transfer Product", "Test_Sce_Description": "Check if the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a service class of Premium or Special Event, and the farecard has a valid Regular Service Transfer Product, within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Valid Special Event Transfer Product", "Test_Sce_Description": "Ensure that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a service class of Premium, and the farecard has a valid Special Event Transfer Product, within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Validate that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Confirm that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare", "Test_Sce_Description": "Check if the system correctly computes and provides a free transfer when a fare payment is made with a service class of Premium, and the farecard has a valid Special Event Transfer Product, within the transfer window, and the Premium fare is lower than the Special Event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Higher Special Event Fare", "Test_Sce_Description": "Ensure that the system correctly computes and deducts the fare upgrade from the ePurse balance when a fare payment is made with a service class of Premium, and the farecard has a valid Special Event Transfer Product, within the transfer window, and the Premium fare is higher than the Special Event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Performance of the SA Tool", "Test_Sce_Description": "Validate the performance of the SA Tool by checking the response time when computing and deducting fares, and when communicating back to the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Security of the SA Tool", "Test_Sce_Description": "Ensure that the SA Tool securely handles customer\u2019s farecard information and ePurse balance during fare payment transactions."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after previously reaching the off peak daily cap, outside the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Valid Regular Service Transfer Product", "Description": "Check if the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a service class of Premium or Special Event, and the farecard has a valid Regular Service Transfer Product, within the transfer window."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Premium Service Class and Valid Special Event Transfer Product", "Description": "Ensure that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a service class of Premium, and the farecard has a valid Special Event Transfer Product, within the transfer window."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Validate that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid Non-Adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Confirm that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid Child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Premium Service Class and Lower Special Event Fare", "Description": "Check if the system correctly computes and provides a free transfer when a fare payment is made with a service class of Premium, and the farecard has a valid Special Event Transfer Product, within the transfer window, and the Premium fare is lower than the Special Event fare."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Premium Service Class and Higher Special Event Fare", "Description": "Ensure that the system correctly computes and deducts the fare upgrade from the ePurse balance when a fare payment is made with a service class of Premium, and the farecard has a valid Special Event Transfer Product, within the transfer window, and the Premium fare is higher than the Special Event fare."}, "Test Scenario 9": {"Test scenarios": "Performance of the SA Tool", "Description": "Validate the performance of the SA Tool by checking the response time when computing and deducting fares, and when communicating back to the SA Tool."}, "Test Scenario 10": {"Test scenarios": "Security of the SA Tool", "Description": "Ensure that the SA Tool securely handles customer\u2019s farecard information and ePurse balance during fare payment transactions."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Premium Service Route with Lower Fare than Special Event", "Test_Sce_Description": "Verify that when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window, a free transfer is computed and deducted from the ePurse Balance. Ensure that the SA Tool sets the POP Print Flag to 0 and accurately displays the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak Hours after Reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that when a customer taps on peak hours after previously reaching off peak daily cap and is outside the transfer window, a fare payment is computed and deducted from the ePurse Balance. Ensure that the SA Tool sets the POP Print Flag to 0 and accurately displays the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Premium Service Route with Higher Fare than Special Event", "Test_Sce_Description": "Verify that when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window, a fare upgrade is computed and deducted from the ePurse Balance. Ensure that the SA Tool sets the POP Print Flag to 0 and accurately displays the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Valid Non-Adult Concession Fare Payment", "Test_Sce_Description": "Verify that when a customer with a valid Non-Adult concession taps, the SA Tool computes and deducts the Upgrade fare. Ensure that the SA Tool sets the POP Print Flag to 0 and accurately displays the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Valid Child Concession Fare Payment", "Test_Sce_Description": "Verify that when a customer with a valid Child concession taps, the SA Tool computes and deducts the correct Child Concession fare. Ensure that the SA Tool sets the POP Print Flag to 0 and accurately displays the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that when an operator inspects a customer\u2019s farecard and determines that they have not paid a fare, the operator can select the payment function on the SA Tool inspection results screen and the SA Tool records both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Performance Test", "Test_Sce_Description": "Verify the system's performance under a significant load. Check the response time of the fare payment process and ensure it is within acceptable limits."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Security Test", "Test_Sce_Description": "Verify that all data transmissions between the SA Tool and the farecard are secure and encrypted. Ensure that customer's ePurse Balance and other sensitive data are not exposed during the fare payment process."}, {"Test Scenario 1": {"Test scenarios": "Premium Service Route with Lower Fare than Special Event", "Description": "Verify that when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window, a free transfer is computed and deducted from the ePurse Balance. Ensure that the SA Tool sets the POP Print Flag to 0 and accurately displays the transfer print status if the farecard is queried."}, "Test Scenario 2": {"Test scenarios": "Fare Payment during Peak Hours after Reaching Off Peak Daily Cap", "Description": "Verify that when a customer taps on peak hours after previously reaching off peak daily cap and is outside the transfer window, a fare payment is computed and deducted from the ePurse Balance. Ensure that the SA Tool sets the POP Print Flag to 0 and accurately displays the transfer print status if the farecard is queried."}, "Test Scenario 3": {"Test scenarios": "Premium Service Route with Higher Fare than Special Event", "Description": "Verify that when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window, a fare upgrade is computed and deducted from the ePurse Balance. Ensure that the SA Tool sets the POP Print Flag to 0 and accurately displays the transfer print status if the farecard is queried."}, "Test Scenario 4": {"Test scenarios": "Valid Non-Adult Concession Fare Payment", "Description": "Verify that when a customer with a valid Non-Adult concession taps, the SA Tool computes and deducts the Upgrade fare. Ensure that the SA Tool sets the POP Print Flag to 0 and accurately displays the transfer print status if the farecard is queried."}, "Test Scenario 5": {"Test scenarios": "Valid Child Concession Fare Payment", "Description": "Verify that when a customer with a valid Child concession taps, the SA Tool computes and deducts the correct Child Concession fare. Ensure that the SA Tool sets the POP Print Flag to 0 and accurately displays the transfer print status if the farecard is queried."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that when an operator inspects a customer\u2019s farecard and determines that they have not paid a fare, the operator can select the payment function on the SA Tool inspection results screen and the SA Tool records both the fare payment and inspection transactions."}, "Test Scenario 7": {"Test scenarios": "Performance Test", "Description": "Verify the system's performance under a significant load. Check the response time of the fare payment process and ensure it is within acceptable limits."}, "Test Scenario 8": {"Test scenarios": "Security Test", "Description": "Verify that all data transmissions between the SA Tool and the farecard are secure and encrypted. Ensure that customer's ePurse Balance and other sensitive data are not exposed during the fare payment process."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of insufficient ePurse balance", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of valid transfer product", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Inter-agency transfer processing", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Autoload threshold processing", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly checks that the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of Action or Load Value List", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly verifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of fare payment during peak hours after reaching off peak daily cap", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a fare payment is made during peak hours after previously reaching off peak daily cap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of fare payment on premium service route with transfer where the premium fare is higher than the special event fare", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a fare payment is made on a premium service route/location after previously riding on a Special Event service route."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of fare payment on premium service route with transfer where the premium fare is lower than the special event fare", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the premium fare is lower than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of fare payment with valid non-adult concession", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and processes a fare payment when the customer's Farecard has a valid non-adult concession."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child, Non-discreet concession", "Description": "This scenario is to validate that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, "Test Scenario 2": {"Test scenarios": "Handling of insufficient ePurse balance", "Description": "This scenario is to validate that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, "Test Scenario 3": {"Test scenarios": "Processing of valid transfer product", "Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."}, "Test Scenario 4": {"Test scenarios": "Inter-agency transfer processing", "Description": "This scenario is to validate that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."}, "Test Scenario 5": {"Test scenarios": "Autoload threshold processing", "Description": "This scenario is to validate that the SA Tool correctly checks that the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, "Test Scenario 6": {"Test scenarios": "Processing of Action or Load Value List", "Description": "This scenario is to validate that the SA Tool correctly verifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, "Test Scenario 7": {"Test scenarios": "Processing of fare payment during peak hours after reaching off peak daily cap", "Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a fare payment is made during peak hours after previously reaching off peak daily cap."}, "Test Scenario 8": {"Test scenarios": "Processing of fare payment on premium service route with transfer where the premium fare is higher than the special event fare", "Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a fare payment is made on a premium service route/location after previously riding on a Special Event service route."}, "Test Scenario 9": {"Test scenarios": "Processing of fare payment on premium service route with transfer where the premium fare is lower than the special event fare", "Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the premium fare is lower than the special event fare."}, "Test Scenario 10": {"Test scenarios": "Processing of fare payment with valid non-adult concession", "Description": "This scenario is to validate that the SA Tool correctly identifies and processes a fare payment when the customer's Farecard has a valid non-adult concession."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and processes a ticket with a valid non-adult, non-child concession. The system should play the successful fare payment audio tone for a concession other than Adult or Child."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Transfer Product", "Test_Sce_Description": "Verify that the system correctly identifies and processes a ticket with a valid transfer product. The system should compute the free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Audio Messages Request", "Test_Sce_Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level. The system should play the corresponding audio message in the default language of the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool", "Test_Sce_Description": "Verify that the system correctly processes a ticket tap on a premium service or special route/location. The system should not differentiate between service class for CLIENT Ticket."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool", "Test_Sce_Description": "Verify that the system correctly processes a ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route. The system should compute the free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Valid Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and processes a ticket with a valid child concession. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly processes a fare payment resulting from a failed inspection. The system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly identifies and processes a ticket with no ride balance remaining. The system should display a declined message to the customer and play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Low Battery Threshold", "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Non-CLIENT Media", "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer taps a card that is not CLIENT media. The system should not respond, but the device error message 'Card Read Error' should be displayed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly identifies and processes a ticket within the Anti-Passback Window. The system should display a declined message to the customer and play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly identifies and processes a non-activated ticket. The system should display a declined message to the customer and play the declined audio tone."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly identifies and processes a ticket with a valid non-adult, non-child concession. The system should play the successful fare payment audio tone for a concession other than Adult or Child."}, "Test Scenario 2": {"Test scenarios": "Validating Transfer Product", "Description": "Verify that the system correctly identifies and processes a ticket with a valid transfer product. The system should compute the free transfer."}, "Test Scenario 3": {"Test scenarios": "Audio Messages Request", "Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level. The system should play the corresponding audio message in the default language of the customer's Farecard."}, "Test Scenario 4": {"Test scenarios": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool", "Description": "Verify that the system correctly processes a ticket tap on a premium service or special route/location. The system should not differentiate between service class for CLIENT Ticket."}, "Test Scenario 5": {"Test scenarios": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool", "Description": "Verify that the system correctly processes a ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route. The system should compute the free transfer."}, "Test Scenario 6": {"Test scenarios": "Valid Child Concession", "Description": "Verify that the system correctly identifies and processes a ticket with a valid child concession. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, "Test Scenario 7": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly processes a fare payment resulting from a failed inspection. The system should record both the fare payment and inspection transactions."}, "Test Scenario 8": {"Test scenarios": "Empty Ride Balance", "Description": "Verify that the system correctly identifies and processes a ticket with no ride balance remaining. The system should display a declined message to the customer and play the declined audio tone."}, "Test Scenario 9": {"Test scenarios": "Low Battery Threshold", "Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should switch to 'Out of Service' mode."}, "Test Scenario 10": {"Test scenarios": "Non-CLIENT Media", "Description": "Verify that the system correctly handles a situation where the customer taps a card that is not CLIENT media. The system should not respond, but the device error message 'Card Read Error' should be displayed."}, "Test Scenario 11": {"Test scenarios": "Anti-Passback Window", "Description": "Verify that the system correctly identifies and processes a ticket within the Anti-Passback Window. The system should display a declined message to the customer and play the declined audio tone."}, "Test Scenario 12": {"Test scenarios": "Non-Activated Ticket", "Description": "Verify that the system correctly identifies and processes a non-activated ticket. The system should display a declined message to the customer and play the declined audio tone."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Validating Fare Payment with Failed Inspection", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made after a failed inspection. The operator inspects a customer\u2019s TICKET and determines that they have not paid a fare. The operator then selects the payment function on the SA Tool inspection results screen. The SA Tool should record both the fare payment and inspection transactions and return to the Tap Card screen with a toast notification of the corresponding inspection action."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Performance of SA Tool during Failed Inspection", "Test_Sce_Description": "This scenario tests the performance of the SA Tool during a fare payment resulting from a failed inspection. The tool should be able to handle the fare payment process smoothly without any lag or delay. The time taken to process the fare payment and display the toast notification should be within acceptable limits."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Security of Fare Payment with Failed Inspection", "Test_Sce_Description": "This scenario tests the security aspects of the SA Tool during a fare payment resulting from a failed inspection. The tool should securely record the fare payment and inspection transactions without any data leakage or security breach. The customer's TICKET information should be securely handled during the entire process."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Handling Unreadable TICKET during Fare Payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it detects an unreadable TICKET during a fare payment. The tool should be able to detect the unreadable TICKET and fail to read it correctly. The SA Tool should display an appropriate error message and not proceed with the fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Performance of SA Tool with Unreadable TICKET", "Test_Sce_Description": "This scenario tests the performance of the SA Tool when it encounters an unreadable TICKET during a fare payment. The tool should be able to detect the unreadable TICKET quickly and display the error message without any delay. The time taken to detect the unreadable TICKET and display the error message should be within acceptable limits."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Security with Unreadable TICKET during Fare Payment", "Test_Sce_Description": "This scenario tests the security aspects of the SA Tool when it encounters an unreadable TICKET during a fare payment. The tool should securely handle the unreadable TICKET without any data leakage or security breach. The error message displayed should not reveal any sensitive information about the TICKET or the customer."}, {"Test Scenario 1": {"Test scenarios": "Validating Fare Payment with Failed Inspection", "Description": "This scenario tests the functionality of the SA Tool when a fare payment is made after a failed inspection. The operator inspects a customer\u2019s TICKET and determines that they have not paid a fare. The operator then selects the payment function on the SA Tool inspection results screen. The SA Tool should record both the fare payment and inspection transactions and return to the Tap Card screen with a toast notification of the corresponding inspection action."}, "Test Scenario 2": {"Test scenarios": "Performance of SA Tool during Failed Inspection", "Description": "This scenario tests the performance of the SA Tool during a fare payment resulting from a failed inspection. The tool should be able to handle the fare payment process smoothly without any lag or delay. The time taken to process the fare payment and display the toast notification should be within acceptable limits."}, "Test Scenario 3": {"Test scenarios": "Security of Fare Payment with Failed Inspection", "Description": "This scenario tests the security aspects of the SA Tool during a fare payment resulting from a failed inspection. The tool should securely record the fare payment and inspection transactions without any data leakage or security breach. The customer's TICKET information should be securely handled during the entire process."}, "Test Scenario 4": {"Test scenarios": "Handling Unreadable TICKET during Fare Payment", "Description": "This scenario tests the functionality of the SA Tool when it detects an unreadable TICKET during a fare payment. The tool should be able to detect the unreadable TICKET and fail to read it correctly. The SA Tool should display an appropriate error message and not proceed with the fare payment."}, "Test Scenario 5": {"Test scenarios": "Performance of SA Tool with Unreadable TICKET", "Description": "This scenario tests the performance of the SA Tool when it encounters an unreadable TICKET during a fare payment. The tool should be able to detect the unreadable TICKET quickly and display the error message without any delay. The time taken to detect the unreadable TICKET and display the error message should be within acceptable limits."}, "Test Scenario 6": {"Test scenarios": "Security with Unreadable TICKET during Fare Payment", "Description": "This scenario tests the security aspects of the SA Tool when it encounters an unreadable TICKET during a fare payment. The tool should securely handle the unreadable TICKET without any data leakage or security breach. The error message displayed should not reveal any sensitive information about the TICKET or the customer."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's ride balance is empty. The system should detect the empty balance, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the device's battery is below the low battery threshold. The system should switch to 'Out of Service' mode if the threshold is reached before the payment processing step."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's card is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's ticket is within the Anti-Passback Window. The system should detect the Anti-Passback check failure, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's ticket is not activated. The system should detect the invalidity of the ticket, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the farecard is locked. The system should read the farecard, determine that it is locked, display a declined screen, and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Unreadable TICKET", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the TICKET is unreadable. The system should detect the TICKET but fail to read it, indicate to the operator that the TICKET is unreadable, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's TICKET has a valid non-adult, non-child concession. The system should detect the concession, display a declined message, and not conduct the transaction."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the system correctly handles a fare payment attempt when the customer's ride balance is empty. The system should detect the empty balance, display a declined message, and not conduct the transaction."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Low Battery", "Description": "Verify that the system correctly handles a fare payment attempt when the device's battery is below the low battery threshold. The system should switch to 'Out of Service' mode if the threshold is reached before the payment processing step."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "Verify that the system correctly handles a fare payment attempt when the customer's card is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, "Test Scenario 4": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Verify that the system correctly handles a fare payment attempt when the customer's ticket is within the Anti-Passback Window. The system should detect the Anti-Passback check failure, display a declined message, and not conduct the transaction."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that the system correctly handles a fare payment attempt when the customer's ticket is not activated. The system should detect the invalidity of the ticket, display a declined message, and not conduct the transaction."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "Verify that the system correctly handles a fare payment attempt when the farecard is locked. The system should read the farecard, determine that it is locked, display a declined screen, and not proceed with the inspection."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Unreadable TICKET", "Description": "Verify that the system correctly handles a fare payment attempt when the TICKET is unreadable. The system should detect the TICKET but fail to read it, indicate to the operator that the TICKET is unreadable, and not conduct the transaction."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly handles a fare payment attempt when the customer's TICKET has a valid non-adult, non-child concession. The system should detect the concession, display a declined message, and not conduct the transaction."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Low Battery Threshold Test", "Test_Sce_Description": "This scenario will test the functionality of the application when the battery level goes below the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Fare Payment Processing Test", "Test_Sce_Description": "This scenario will test the fare payment processing functionality of the application. The application should be able to successfully process the customer's fare payment as per Step 5 in the Main Use Case, provided the low battery threshold is not reached before this step."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Card Read Error Test", "Test_Sce_Description": "This scenario will test the application's response when a customer taps a card that is not CLIENT media. The application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Anti-Passback Window Test", "Test_Sce_Description": "This scenario will test the application's functionality when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and the application should display a declined message to the customer. The transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Ticket Activation Test", "Test_Sce_Description": "This scenario will test the application's functionality when a customer taps a non-activated TICKET. The application should be able to detect that the TICKET is not activated and respond accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Performance Test", "Test_Sce_Description": "This scenario will test the performance of the application under different conditions such as low battery, during fare payment processing, when a card read error occurs, etc. The application should perform efficiently and without any delays or crashes under all these conditions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Security Test", "Test_Sce_Description": "This scenario will test the security features of the application. The application should be able to securely process fare payments, handle card read errors, and manage TICKET activations without any security breaches or data leaks."}, {"Test Scenario 1": {"Test scenarios": "Low Battery Threshold Test", "Description": "This scenario will test the functionality of the application when the battery level goes below the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, "Test Scenario 2": {"Test scenarios": "Fare Payment Processing Test", "Description": "This scenario will test the fare payment processing functionality of the application. The application should be able to successfully process the customer's fare payment as per Step 5 in the Main Use Case, provided the low battery threshold is not reached before this step."}, "Test Scenario 3": {"Test scenarios": "Card Read Error Test", "Description": "This scenario will test the application's response when a customer taps a card that is not CLIENT media. The application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, "Test Scenario 4": {"Test scenarios": "Anti-Passback Window Test", "Description": "This scenario will test the application's functionality when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and the application should display a declined message to the customer. The transaction should not be conducted."}, "Test Scenario 5": {"Test scenarios": "Ticket Activation Test", "Description": "This scenario will test the application's functionality when a customer taps a non-activated TICKET. The application should be able to detect that the TICKET is not activated and respond accordingly."}, "Test Scenario 6": {"Test scenarios": "Performance Test", "Description": "This scenario will test the performance of the application under different conditions such as low battery, during fare payment processing, when a card read error occurs, etc. The application should perform efficiently and without any delays or crashes under all these conditions."}, "Test Scenario 7": {"Test scenarios": "Security Test", "Description": "This scenario will test the security features of the application. The application should be able to securely process fare payments, handle card read errors, and manage TICKET activations without any security breaches or data leaks."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Non-CLIENT Media Card", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Empty Ride Balance", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that has an empty ride balance. The system should detect the empty ride balance, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Low Battery Threshold", "Test_Sce_Description": "This scenario is to validate the system's response when the device's battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Ticket in Anti-Passback Window", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that is within the Anti-Passback Window. The system should detect the Anti-Passback check failure, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a non-activated ticket. The system should detect the invalidity of the ticket, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Locked Farecard", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a locked farecard. The system should detect the locked farecard, display a declined message, and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Unreadable TICKET", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with an unreadable TICKET. The system should detect the unreadable TICKET, display an error message, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Valid Non-Adult, Non-Child Concession", "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a valid non-adult, non-child concession tries to make a fare payment. The system should detect the concession, calculate the fare accordingly, and conduct the transaction."}, {"Test Scenario 1": {"Test scenarios": "Validating Fare Payment with Non-CLIENT Media Card", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, "Test Scenario 2": {"Test scenarios": "Validating Fare Payment with Empty Ride Balance", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that has an empty ride balance. The system should detect the empty ride balance, display a declined message, and not conduct the transaction."}, "Test Scenario 3": {"Test scenarios": "Validating Fare Payment with Low Battery Threshold", "Description": "This scenario is to validate the system's response when the device's battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."}, "Test Scenario 4": {"Test scenarios": "Validating Fare Payment with Ticket in Anti-Passback Window", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that is within the Anti-Passback Window. The system should detect the Anti-Passback check failure, display a declined message, and not conduct the transaction."}, "Test Scenario 5": {"Test scenarios": "Validating Fare Payment with Non-Activated Ticket", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a non-activated ticket. The system should detect the invalidity of the ticket, display a declined message, and not conduct the transaction."}, "Test Scenario 6": {"Test scenarios": "Validating Fare Payment with Locked Farecard", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a locked farecard. The system should detect the locked farecard, display a declined message, and not proceed with the inspection."}, "Test Scenario 7": {"Test scenarios": "Validating Fare Payment with Unreadable TICKET", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with an unreadable TICKET. The system should detect the unreadable TICKET, display an error message, and not conduct the transaction."}, "Test Scenario 8": {"Test scenarios": "Validating Fare Payment with Valid Non-Adult, Non-Child Concession", "Description": "This scenario is to validate the system's response when a customer with a valid non-adult, non-child concession tries to make a fare payment. The system should detect the concession, calculate the fare accordingly, and conduct the transaction."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Anti-Passback Window Check", "Test_Sce_Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Timeout Functionality", "Test_Sce_Description": "Verify that the system correctly returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the ticket being within the Anti-Passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Ticket Validation", "Test_Sce_Description": "Verify that the system correctly validates the ticket during the Anti-Passback Window check. The system should correctly identify the ticket and its status."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Audio Tone Functionality", "Test_Sce_Description": "Verify that the system plays the correct declined audio tone when a transaction is declined due to the ticket being within the Anti-Passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Exception Flow - Low Battery Threshold", "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful ticket tap. The system should process the fare payment if the threshold is reached after Step 5 of the Main Use Case."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Exception Flow - Non-CLIENT Media", "Test_Sce_Description": "Verify that the system correctly identifies a card that is not CLIENT media and does not respond. The device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Alternate Flow - Unreadable Ticket", "Test_Sce_Description": "Verify that the system correctly identifies an unreadable ticket and fails to read it correctly. The system should handle this exception appropriately."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Alternate Flow - Valid Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies a ticket with a Valid Child concession and processes the fare payment accordingly. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Alternate Flow - Failed Inspection", "Test_Sce_Description": "Verify that the system correctly handles a situation where an operator inspects a customer's ticket and determines that they have not paid a fare. The system should allow the operator to select the payment function on the SA Tool inspection results screen and process the fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Performance - Multiple Transactions", "Test_Sce_Description": "Verify that the system can handle multiple transactions in a short period of time without any performance degradation. The system should be able to process each transaction quickly and accurately."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Security - Unauthorized Access", "Test_Sce_Description": "Verify that the system prevents unauthorized access to the SA Tool application. Only operators who are signed-in to the SA Tool application in the revenue mode should be able to accept fare payments."}, {"Test Scenario 1": {"Test scenarios": "Anti-Passback Window Check", "Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, "Test Scenario 2": {"Test scenarios": "Timeout Functionality", "Description": "Verify that the system correctly returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the ticket being within the Anti-Passback Window."}, "Test Scenario 3": {"Test scenarios": "Ticket Validation", "Description": "Verify that the system correctly validates the ticket during the Anti-Passback Window check. The system should correctly identify the ticket and its status."}, "Test Scenario 4": {"Test scenarios": "Audio Tone Functionality", "Description": "Verify that the system plays the correct declined audio tone when a transaction is declined due to the ticket being within the Anti-Passback Window."}, "Test Scenario 5": {"Test scenarios": "Exception Flow - Low Battery Threshold", "Description": "Verify that the system correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful ticket tap. The system should process the fare payment if the threshold is reached after Step 5 of the Main Use Case."}, "Test Scenario 6": {"Test scenarios": "Exception Flow - Non-CLIENT Media", "Description": "Verify that the system correctly identifies a card that is not CLIENT media and does not respond. The device error message 'Card Read Error' should be displayed for a short period of time."}, "Test Scenario 7": {"Test scenarios": "Alternate Flow - Unreadable Ticket", "Description": "Verify that the system correctly identifies an unreadable ticket and fails to read it correctly. The system should handle this exception appropriately."}, "Test Scenario 8": {"Test scenarios": "Alternate Flow - Valid Child Concession", "Description": "Verify that the system correctly identifies a ticket with a Valid Child concession and processes the fare payment accordingly. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, "Test Scenario 9": {"Test scenarios": "Alternate Flow - Failed Inspection", "Description": "Verify that the system correctly handles a situation where an operator inspects a customer's ticket and determines that they have not paid a fare. The system should allow the operator to select the payment function on the SA Tool inspection results screen and process the fare payment."}, "Test Scenario 10": {"Test scenarios": "Performance - Multiple Transactions", "Description": "Verify that the system can handle multiple transactions in a short period of time without any performance degradation. The system should be able to process each transaction quickly and accurately."}, "Test Scenario 11": {"Test scenarios": "Security - Unauthorized Access", "Description": "Verify that the system prevents unauthorized access to the SA Tool application. Only operators who are signed-in to the SA Tool application in the revenue mode should be able to accept fare payments."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a non-activated ticket. The system should detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should detect that the ride balance is empty and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-Client Media", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a card that is not client media. The system should not respond and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should detect that the ticket fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a locked farecard. The system should detect that the farecard is locked and display a declined screen to the operator. The inspection should not proceed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a ticket that has a valid non-adult, non-child concession. The system should detect the valid concession and proceed with the fare payment process."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Unreadable Ticket", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with an unreadable ticket. The system should detect that the ticket is unreadable and indicate to the operator that the ticket is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Valid Child Concession", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a ticket that has a valid child concession. The system should detect the valid child concession and display the successful child fare payment screen. The SA Tool should play the successful fare payment audio tone for child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly handles a situation where a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions and return to the Tap Card screen."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a non-activated ticket. The system should detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should detect that the ride balance is empty and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Low Battery", "Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Client Media", "Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a card that is not client media. The system should not respond and display a 'Card Read Error' message."}, "Test Scenario 5": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should detect that the ticket fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a locked farecard. The system should detect that the farecard is locked and display a declined screen to the operator. The inspection should not proceed."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a ticket that has a valid non-adult, non-child concession. The system should detect the valid concession and proceed with the fare payment process."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Unreadable Ticket", "Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with an unreadable ticket. The system should detect that the ticket is unreadable and indicate to the operator that the ticket is unreadable."}, "Test Scenario 9": {"Test scenarios": "Fare Payment with Valid Child Concession", "Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a ticket that has a valid child concession. The system should detect the valid child concession and display the successful child fare payment screen. The SA Tool should play the successful fare payment audio tone for child concession."}, "Test Scenario 10": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly handles a situation where a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions and return to the Tap Card screen."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Virtual Card Unreadable", "Test_Sce_Description": "Verify that the SA Tool application correctly detects and handles the scenario when the Virtual Card is unreadable. The application should indicate to the operator that the Virtual Card is unreadable and prompt the customer to tap again. If the second tap is also unsuccessful, the application should again indicate to the operator that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Fare Payment with Non-Adult, Non-Child, Non-Discreet Concessions", "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card that has a valid non-adult, non-child, non-discreet concession. The application should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Fare Payment with Insufficient ePurse Balance", "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card with an ePurse balance less than the fare amount. The application should send the tap to ATS for processing, which should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Fare Payment within Intra-SP Transfer Window", "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card within the Intra-SP Transfer window. The application should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Fare Payment within Inter-SP Transfer Window", "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card within the Inter-SP Transfer window. The application should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Fare Payment with Expired Period Pass and Sufficient ePurse Balance", "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card with an expired period pass and an ePurse balance more than the fare amount. The application should detect that the Period Pass has expired, compute the value to be deducted from the e-Purse, and deduct the fare accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Fare Payment with Expired Period Pass and Insufficient ePurse Balance", "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card with an expired period pass and an ePurse balance less than the fare amount. The application should detect that the Period Pass has expired, compute the value to be deducted from the e-Purse, and deduct the fare accordingly. The Virtual Card should be put into overdraft."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Fare Payment with Inter-SP Transfer and Valid Period Pass", "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card with a valid inter-agency transfer product and a valid period pass. The application should read that the Virtual Card contains a valid inter-agency transfer product and has a valid period pass. The right to travel should be conferred to the Cardholder by updating the Virtual Card."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Fare Payment with Audio Messages Request", "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card when the customer requests audio messages for fare payment. The operator should be able to enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion."}, {"Test Scenario 1": {"Test scenarios": "Virtual Card Unreadable", "Description": "Verify that the SA Tool application correctly detects and handles the scenario when the Virtual Card is unreadable. The application should indicate to the operator that the Virtual Card is unreadable and prompt the customer to tap again. If the second tap is also unsuccessful, the application should again indicate to the operator that the Virtual Card is unreadable."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Non-Adult, Non-Child, Non-Discreet Concessions", "Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card that has a valid non-adult, non-child, non-discreet concession. The application should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Insufficient ePurse Balance", "Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card with an ePurse balance less than the fare amount. The application should send the tap to ATS for processing, which should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."}, "Test Scenario 4": {"Test scenarios": "Fare Payment within Intra-SP Transfer Window", "Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card within the Intra-SP Transfer window. The application should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card."}, "Test Scenario 5": {"Test scenarios": "Fare Payment within Inter-SP Transfer Window", "Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card within the Inter-SP Transfer window. The application should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Expired Period Pass and Sufficient ePurse Balance", "Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card with an expired period pass and an ePurse balance more than the fare amount. The application should detect that the Period Pass has expired, compute the value to be deducted from the e-Purse, and deduct the fare accordingly."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Expired Period Pass and Insufficient ePurse Balance", "Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card with an expired period pass and an ePurse balance less than the fare amount. The application should detect that the Period Pass has expired, compute the value to be deducted from the e-Purse, and deduct the fare accordingly. The Virtual Card should be put into overdraft."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Inter-SP Transfer and Valid Period Pass", "Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card with a valid inter-agency transfer product and a valid period pass. The application should read that the Virtual Card contains a valid inter-agency transfer product and has a valid period pass. The right to travel should be conferred to the Cardholder by updating the Virtual Card."}, "Test Scenario 9": {"Test scenarios": "Fare Payment with Audio Messages Request", "Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card when the customer requests audio messages for fare payment. The operator should be able to enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Testing the functionality of the SA Tool when the Virtual Card is unreadable", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it detects a Virtual Card but is unable to read it. The tool should indicate to the operator that the Virtual Card is unreadable. The customer will then tap on the NFC reader again. If the tap is successful, the transaction should proceed. If the tap is unsuccessful, the tool should again indicate to the operator that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Testing the functionality of the SA Tool when the customer has a non-adult, non-child, non-discreet concession", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer's Virtual Card has a valid non-adult, non-child, non-discreet concession. The tool should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Testing the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount. The tool should send the tap to ATS for processing. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The tool should then confer the right to travel to the Cardholder by updating the Virtual Card accordingly and provide the appropriate feedback to the Cardholder of a successful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Testing the functionality of the SA Tool when the transaction is within the Intra-SP Transfer window", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product and the transaction is within the Intra-SP Transfer window. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The tool should then confer the right to travel to the Cardholder by updating the Virtual Card and provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Testing the functionality of the SA Tool when the transaction is within the Inter-SP Transfer window", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product from other service provider and the transaction is within the Inter-SP Transfer window. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The tool should then confer the right to travel to the Cardholder by updating the Virtual Card and provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Testing the performance of the SA Tool when processing transactions", "Test_Sce_Description": "This scenario will test the performance of the SA Tool when processing transactions. The tool should be able to handle multiple transactions simultaneously without any decrease in performance or functionality."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Testing the security of the SA Tool when processing transactions", "Test_Sce_Description": "This scenario will test the security of the SA Tool when processing transactions. The tool should securely process all transactions, ensuring that all customer data is protected and that all transactions are processed correctly and securely."}, {"Test Scenario 1": {"Test scenarios": "Testing the functionality of the SA Tool when the Virtual Card is unreadable", "Description": "This scenario will test the functionality of the SA Tool when it detects a Virtual Card but is unable to read it. The tool should indicate to the operator that the Virtual Card is unreadable. The customer will then tap on the NFC reader again. If the tap is successful, the transaction should proceed. If the tap is unsuccessful, the tool should again indicate to the operator that the Virtual Card is unreadable."}, "Test Scenario 2": {"Test scenarios": "Testing the functionality of the SA Tool when the customer has a non-adult, non-child, non-discreet concession", "Description": "This scenario will test the functionality of the SA Tool when the customer's Virtual Card has a valid non-adult, non-child, non-discreet concession. The tool should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, "Test Scenario 3": {"Test scenarios": "Testing the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount", "Description": "This scenario will test the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount. The tool should send the tap to ATS for processing. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The tool should then confer the right to travel to the Cardholder by updating the Virtual Card accordingly and provide the appropriate feedback to the Cardholder of a successful transaction."}, "Test Scenario 4": {"Test scenarios": "Testing the functionality of the SA Tool when the transaction is within the Intra-SP Transfer window", "Description": "This scenario will test the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product and the transaction is within the Intra-SP Transfer window. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The tool should then confer the right to travel to the Cardholder by updating the Virtual Card and provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, "Test Scenario 5": {"Test scenarios": "Testing the functionality of the SA Tool when the transaction is within the Inter-SP Transfer window", "Description": "This scenario will test the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product from other service provider and the transaction is within the Inter-SP Transfer window. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The tool should then confer the right to travel to the Cardholder by updating the Virtual Card and provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, "Test Scenario 6": {"Test scenarios": "Testing the performance of the SA Tool when processing transactions", "Description": "This scenario will test the performance of the SA Tool when processing transactions. The tool should be able to handle multiple transactions simultaneously without any decrease in performance or functionality."}, "Test Scenario 7": {"Test scenarios": "Testing the security of the SA Tool when processing transactions", "Description": "This scenario will test the security of the SA Tool when processing transactions. The tool should securely process all transactions, ensuring that all customer data is protected and that all transactions are processed correctly and securely."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Virtual Card Detection", "Test_Sce_Description": "Verify that the SA Tool application is able to detect the Virtual Card when it is tapped on the NFC reader. The application should indicate if the card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Fare Payment with Insufficient ePurse Balance", "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer's ePurse balance is less than the fare amount. The system should remove the fare from the Virtual Card e-Purse and put the card into overdraft."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Successful Transaction Feedback", "Test_Sce_Description": "Verify that the system provides the appropriate feedback to the Cardholder of a successful transaction. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Unsuccessful Card Tap", "Test_Sce_Description": "Verify that the system correctly handles an unsuccessful card tap. If the tap is unsuccessful, the SA Tool application should indicate to the operator that the CLIENT (Virtual) Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Fare Payment with Non-Adult, Non-Child, non-discreet concessions", "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Transaction within Intra-SP Transfer window", "Test_Sce_Description": "Verify that the system correctly handles a transaction within the Intra-SP Transfer window. The system should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Transaction within Inter-SP Transfer window", "Test_Sce_Description": "Verify that the system correctly handles a transaction within the Inter-SP Transfer window. The system should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Payment by e-Purse", "Test_Sce_Description": "Verify that the system correctly handles a payment by e-Purse. The system should deduct the balance from the e-purse and use it as a payment means for the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Insufficient e-Purse Balance", "Test_Sce_Description": "Verify that the system correctly handles a situation where the e-Purse balance is insufficient. A notification should inform the operator that the e-Purse balance cannot cover the price."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Split Payments", "Test_Sce_Description": "Verify that the system correctly handles split payments. If the operator has edited the amount to pay, the system should check if the payment amount is more than the total shopping cart amount."}, {"Test Scenario 1": {"Test scenarios": "Virtual Card Detection", "Description": "Verify that the SA Tool application is able to detect the Virtual Card when it is tapped on the NFC reader. The application should indicate if the card is unreadable."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Insufficient ePurse Balance", "Description": "Verify that the system correctly handles a situation where the customer's ePurse balance is less than the fare amount. The system should remove the fare from the Virtual Card e-Purse and put the card into overdraft."}, "Test Scenario 3": {"Test scenarios": "Successful Transaction Feedback", "Description": "Verify that the system provides the appropriate feedback to the Cardholder of a successful transaction. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."}, "Test Scenario 4": {"Test scenarios": "Unsuccessful Card Tap", "Description": "Verify that the system correctly handles an unsuccessful card tap. If the tap is unsuccessful, the SA Tool application should indicate to the operator that the CLIENT (Virtual) Card is unreadable."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Non-Adult, Non-Child, non-discreet concessions", "Description": "Verify that the system correctly handles a situation where the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, "Test Scenario 6": {"Test scenarios": "Transaction within Intra-SP Transfer window", "Description": "Verify that the system correctly handles a transaction within the Intra-SP Transfer window. The system should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, "Test Scenario 7": {"Test scenarios": "Transaction within Inter-SP Transfer window", "Description": "Verify that the system correctly handles a transaction within the Inter-SP Transfer window. The system should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, "Test Scenario 8": {"Test scenarios": "Payment by e-Purse", "Description": "Verify that the system correctly handles a payment by e-Purse. The system should deduct the balance from the e-purse and use it as a payment means for the transaction."}, "Test Scenario 9": {"Test scenarios": "Insufficient e-Purse Balance", "Description": "Verify that the system correctly handles a situation where the e-Purse balance is insufficient. A notification should inform the operator that the e-Purse balance cannot cover the price."}, "Test Scenario 10": {"Test scenarios": "Split Payments", "Description": "Verify that the system correctly handles split payments. If the operator has edited the amount to pay, the system should check if the payment amount is more than the total shopping cart amount."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Virtual Card Unreadable", "Test_Sce_Description": "Test the scenario where the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer will tap on the NFC reader again. If the tap is successful, steps 4 \u2013 7 will be conducted. If the tap is unsuccessful, the SA Tool application will indicate to the operator that the CLIENT (Virtual) Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions", "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "ePurse balance less than fare amount", "Test_Sce_Description": "Test the scenario where the customer\u2019s ePurse balance is less than the fare amount. The device sends the tap to ATS for processing. ATS checks the online hotlist and completes the fare processing. ATS removes the fare from the Virtual Card e-Purse and puts the card into overdraft."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Transaction within Intra-SP Transfer window", "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product. ATS will read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This will be communicated back to the device."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Transaction within Inter-SP Transfer window", "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product from other service provider. ATS will read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This will be communicated back to the device."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Customer requests Audio Messages", "Test_Sce_Description": "Test the scenario where the customer asks to pay for the trip with their Virtual Card and requests audio messages for fare payment. Operator enables audio mode. The operator can change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Daily Cap Reached outside of Transfer window", "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, Farecard has reached Daily Cap Limit and Farecard is out of transfer window. ATS deducts no fare since the Daily Cap is reached."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Premium Service or Special Route/Location", "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool and Service Class is Premium or Special Event. ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade", "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, Service Class is Premium or Special Event, Farecard has a valid Regular Service Transfer Product and Tap is within Transfer Window. ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool."}, {"Test Scenario 1": {"Test scenarios": "Virtual Card Unreadable", "Description": "Test the scenario where the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer will tap on the NFC reader again. If the tap is successful, steps 4 \u2013 7 will be conducted. If the tap is unsuccessful, the SA Tool application will indicate to the operator that the CLIENT (Virtual) Card is unreadable."}, "Test Scenario 2": {"Test scenarios": "Non-Adult, Non-Child, non-discreet concessions", "Description": "Test the scenario where the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, "Test Scenario 3": {"Test scenarios": "ePurse balance less than fare amount", "Description": "Test the scenario where the customer\u2019s ePurse balance is less than the fare amount. The device sends the tap to ATS for processing. ATS checks the online hotlist and completes the fare processing. ATS removes the fare from the Virtual Card e-Purse and puts the card into overdraft."}, "Test Scenario 4": {"Test scenarios": "Transaction within Intra-SP Transfer window", "Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product. ATS will read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This will be communicated back to the device."}, "Test Scenario 5": {"Test scenarios": "Transaction within Inter-SP Transfer window", "Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product from other service provider. ATS will read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This will be communicated back to the device."}, "Test Scenario 6": {"Test scenarios": "Customer requests Audio Messages", "Description": "Test the scenario where the customer asks to pay for the trip with their Virtual Card and requests audio messages for fare payment. Operator enables audio mode. The operator can change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case."}, "Test Scenario 7": {"Test scenarios": "Daily Cap Reached outside of Transfer window", "Description": "Test the scenario where the fare payment is being made on the SA Tool, Farecard has reached Daily Cap Limit and Farecard is out of transfer window. ATS deducts no fare since the Daily Cap is reached."}, "Test Scenario 8": {"Test scenarios": "Premium Service or Special Route/Location", "Description": "Test the scenario where the fare payment is being made on the SA Tool and Service Class is Premium or Special Event. ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool."}, "Test Scenario 9": {"Test scenarios": "Premium Service or Special Route/Location with Fare Upgrade", "Description": "Test the scenario where the fare payment is being made on the SA Tool, Service Class is Premium or Special Event, Farecard has a valid Regular Service Transfer Product and Tap is within Transfer Window. ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing Virtual Card Readability", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application in detecting and reading the Virtual Card. The test will involve presenting a Virtual Card to the NFC reader and verifying if the application can successfully read it. In case of failure, the application should indicate to the operator that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing Fare Payment with Non-Adult, Non-Child, Non-Discreet Concessions", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application in processing fare payment from a Virtual Card with a valid Non-Adult, Non-Child, non-discreet concession. The test will involve presenting such a Virtual Card to the NFC reader and verifying if the application can successfully process the fare payment and display the appropriate screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing Fare Payment with Insufficient ePurse Balance", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application in processing fare payment from a Virtual Card with an ePurse balance less than the fare amount. The test will involve presenting such a Virtual Card to the NFC reader and verifying if the application can successfully process the fare payment by putting the card into overdraft and providing the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing Fare Payment within Intra-SP Transfer Window", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application in processing fare payment from a Virtual Card within the Intra-SP Transfer window. The test will involve presenting such a Virtual Card to the NFC reader and verifying if the application can successfully process the fare payment by deducting $0 from the Virtual Card E-Purse and providing the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing Fare Payment within Inter-SP Transfer Window", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application in processing fare payment from a Virtual Card within the Inter-SP Transfer window. The test will involve presenting such a Virtual Card to the NFC reader and verifying if the application can successfully process the fare payment by deducting $0 from the Virtual Card E-Purse and providing the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing Audio Messages Request", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application in processing a customer's request for audio messages for fare payment. The test will involve a customer asking to pay for the trip with their Virtual Card and requesting audio messages, and verifying if the operator can successfully enable audio mode and the application can play the corresponding audio message in the default language of the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing Fare Payment with Daily Cap Reached", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application in processing fare payment from a Farecard that has reached the Daily Cap Limit and is out of transfer window. The test will involve presenting such a Farecard to the NFC reader and verifying if the application can successfully process the fare payment by deducting no fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing Fare Payment for Premium Service or Special Route/Location", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application in processing fare payment from a Virtual Card for a premium service or special route/location. The test will involve presenting such a Virtual Card to the NFC reader and verifying if the application can successfully process the fare payment by computing the fare and deducting the amount from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Testing Fare Upgrade for Premium Service or Special Route/Location", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application in processing a fare upgrade from a Farecard for a premium service or special event route/location after previously riding on a regular service route (within the transfer window). The test will involve presenting such a Farecard to the NFC reader and verifying if the application can successfully process the fare upgrade."}, {"Test Scenario 1": {"Test scenarios": "Testing Virtual Card Readability", "Description": "This scenario will test the functionality of the SA Tool application in detecting and reading the Virtual Card. The test will involve presenting a Virtual Card to the NFC reader and verifying if the application can successfully read it. In case of failure, the application should indicate to the operator that the Virtual Card is unreadable."}, "Test Scenario 2": {"Test scenarios": "Testing Fare Payment with Non-Adult, Non-Child, Non-Discreet Concessions", "Description": "This scenario will test the functionality of the SA Tool application in processing fare payment from a Virtual Card with a valid Non-Adult, Non-Child, non-discreet concession. The test will involve presenting such a Virtual Card to the NFC reader and verifying if the application can successfully process the fare payment and display the appropriate screen."}, "Test Scenario 3": {"Test scenarios": "Testing Fare Payment with Insufficient ePurse Balance", "Description": "This scenario will test the functionality of the SA Tool application in processing fare payment from a Virtual Card with an ePurse balance less than the fare amount. The test will involve presenting such a Virtual Card to the NFC reader and verifying if the application can successfully process the fare payment by putting the card into overdraft and providing the appropriate feedback to the Cardholder."}, "Test Scenario 4": {"Test scenarios": "Testing Fare Payment within Intra-SP Transfer Window", "Description": "This scenario will test the functionality of the SA Tool application in processing fare payment from a Virtual Card within the Intra-SP Transfer window. The test will involve presenting such a Virtual Card to the NFC reader and verifying if the application can successfully process the fare payment by deducting $0 from the Virtual Card E-Purse and providing the appropriate feedback to the Cardholder."}, "Test Scenario 5": {"Test scenarios": "Testing Fare Payment within Inter-SP Transfer Window", "Description": "This scenario will test the functionality of the SA Tool application in processing fare payment from a Virtual Card within the Inter-SP Transfer window. The test will involve presenting such a Virtual Card to the NFC reader and verifying if the application can successfully process the fare payment by deducting $0 from the Virtual Card E-Purse and providing the appropriate feedback to the Cardholder."}, "Test Scenario 6": {"Test scenarios": "Testing Audio Messages Request", "Description": "This scenario will test the functionality of the SA Tool application in processing a customer's request for audio messages for fare payment. The test will involve a customer asking to pay for the trip with their Virtual Card and requesting audio messages, and verifying if the operator can successfully enable audio mode and the application can play the corresponding audio message in the default language of the customer's Farecard."}, "Test Scenario 7": {"Test scenarios": "Testing Fare Payment with Daily Cap Reached", "Description": "This scenario will test the functionality of the SA Tool application in processing fare payment from a Farecard that has reached the Daily Cap Limit and is out of transfer window. The test will involve presenting such a Farecard to the NFC reader and verifying if the application can successfully process the fare payment by deducting no fare."}, "Test Scenario 8": {"Test scenarios": "Testing Fare Payment for Premium Service or Special Route/Location", "Description": "This scenario will test the functionality of the SA Tool application in processing fare payment from a Virtual Card for a premium service or special route/location. The test will involve presenting such a Virtual Card to the NFC reader and verifying if the application can successfully process the fare payment by computing the fare and deducting the amount from the Virtual Card E-Purse."}, "Test Scenario 9": {"Test scenarios": "Testing Fare Upgrade for Premium Service or Special Route/Location", "Description": "This scenario will test the functionality of the SA Tool application in processing a fare upgrade from a Farecard for a premium service or special event route/location after previously riding on a regular service route (within the transfer window). The test will involve presenting such a Farecard to the NFC reader and verifying if the application can successfully process the fare upgrade."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Farecard is on the Action or Load Value List", "Test_Sce_Description": "The system should be able to verify that the Farecard is on the Action or Load Value List and update the Farecard accordingly. This is to ensure that the Farecard is valid and can be used for fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Audio Messages for Fare Payment", "Test_Sce_Description": "The system should be able to play audio messages for the fare payment when the customer requests it. The audio messages should be played in the default language of the Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment with Daily Cap Reached", "Test_Sce_Description": "The system should not deduct any fare when the Daily Cap is reached. This is to ensure that the customer is not charged more than the daily cap limit."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment for Premium Service or Special Route/Location", "Test_Sce_Description": "The system should be able to compute and deduct the Premium or Special Event fare when the service class is Premium or Special Event. This is to ensure that the correct fare is charged for the premium service or special event."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Upgrade for Premium Service or Special Route/Location", "Test_Sce_Description": "The system should be able to compute and deduct the Upgrade fare when the customer taps on a premium service or special event route/location after previously riding on a regular service route. This is to ensure that the correct fare upgrade is charged."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "The system should be able to charge a fare payment during peak hours after the customer has previously reached the off peak daily cap. This is to ensure that the correct fare is charged during peak hours."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment with Period Pass for Higher Fare Value Service Class", "Test_Sce_Description": "The system should be able to compute and deduct the Upgrade fare when the Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment with Period Pass for Lower Fare Value Service Class", "Test_Sce_Description": "The system should be able to accept the period pass fare payment when the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment with Limited Period Pass", "Test_Sce_Description": "The system should be able to accept the fare payment when the Farecard has a valid Limited Period Pass and the current time is within the limits of the product."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment with Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "The system should be able to deduct the fare from the e-Purse balance when the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction."}, {"Test Scenario 1": {"Test scenarios": "Verify Farecard is on the Action or Load Value List", "Description": "The system should be able to verify that the Farecard is on the Action or Load Value List and update the Farecard accordingly. This is to ensure that the Farecard is valid and can be used for fare payment."}, "Test Scenario 2": {"Test scenarios": "Verify Audio Messages for Fare Payment", "Description": "The system should be able to play audio messages for the fare payment when the customer requests it. The audio messages should be played in the default language of the Farecard."}, "Test Scenario 3": {"Test scenarios": "Verify Fare Payment with Daily Cap Reached", "Description": "The system should not deduct any fare when the Daily Cap is reached. This is to ensure that the customer is not charged more than the daily cap limit."}, "Test Scenario 4": {"Test scenarios": "Verify Fare Payment for Premium Service or Special Route/Location", "Description": "The system should be able to compute and deduct the Premium or Special Event fare when the service class is Premium or Special Event. This is to ensure that the correct fare is charged for the premium service or special event."}, "Test Scenario 5": {"Test scenarios": "Verify Fare Upgrade for Premium Service or Special Route/Location", "Description": "The system should be able to compute and deduct the Upgrade fare when the customer taps on a premium service or special event route/location after previously riding on a regular service route. This is to ensure that the correct fare upgrade is charged."}, "Test Scenario 6": {"Test scenarios": "Verify Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "The system should be able to charge a fare payment during peak hours after the customer has previously reached the off peak daily cap. This is to ensure that the correct fare is charged during peak hours."}, "Test Scenario 7": {"Test scenarios": "Verify Fare Payment with Period Pass for Higher Fare Value Service Class", "Description": "The system should be able to compute and deduct the Upgrade fare when the Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value."}, "Test Scenario 8": {"Test scenarios": "Verify Fare Payment with Period Pass for Lower Fare Value Service Class", "Description": "The system should be able to accept the period pass fare payment when the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value."}, "Test Scenario 9": {"Test scenarios": "Verify Fare Payment with Limited Period Pass", "Description": "The system should be able to accept the fare payment when the Farecard has a valid Limited Period Pass and the current time is within the limits of the product."}, "Test Scenario 10": {"Test scenarios": "Verify Fare Payment with Limited Period Pass outside of valid time with sufficient e-Purse balance", "Description": "The system should be able to deduct the fare from the e-Purse balance when the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Limited Period Pass within valid time", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should correctly identify the validity of the pass and allow the transaction to proceed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly identify the invalidity of the pass due to time limit, compute the fare to be deducted from the e-Purse and deduct the fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Test_Sce_Description": "This scenario is to validate the functionality of the system when an anonymous farecard with an expired period pass and insufficient ePurse balance is used. The system should correctly identify the expired pass and insufficient balance, and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Blocked Farecard", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a blocked farecard is used. The system should correctly identify the blocked farecard and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Farecard on Deny List", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard on the Deny List is used. The system should correctly identify the farecard on the Deny List, remove it from the list, set it to blocked and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Low Battery Threshold during Payment", "Test_Sce_Description": "This scenario is to validate the functionality of the system when the battery goes below the low battery threshold during a payment. The system should be able to process the remote lists even after the battery goes below the threshold during a successful Farecard tap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the validity of the pass and accept the period pass fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Farecard with Valid Child Concession", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Child concession is used. The system should correctly identify the Child concession and display the successful Child Transit Pass fare payment screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Failed Inspection", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard fails inspection. The operator should be able to select the payment function on the SA Tool inspection results screen and the system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Test_Sce_Description": "This scenario is to validate the functionality of the system when an anonymous farecard with an expired period pass and insufficient ePurse balance is used. The system should correctly identify the expired pass and insufficient balance, and decline the transaction."}, {"Test Scenario 1": {"Test scenarios": "Validating Limited Period Pass within valid time", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should correctly identify the validity of the pass and allow the transaction to proceed."}, "Test Scenario 2": {"Test scenarios": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly identify the invalidity of the pass due to time limit, compute the fare to be deducted from the e-Purse and deduct the fare."}, "Test Scenario 3": {"Test scenarios": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Description": "This scenario is to validate the functionality of the system when an anonymous farecard with an expired period pass and insufficient ePurse balance is used. The system should correctly identify the expired pass and insufficient balance, and decline the transaction."}, "Test Scenario 4": {"Test scenarios": "Handling Blocked Farecard", "Description": "This scenario is to validate the functionality of the system when a blocked farecard is used. The system should correctly identify the blocked farecard and decline the transaction."}, "Test Scenario 5": {"Test scenarios": "Handling Farecard on Deny List", "Description": "This scenario is to validate the functionality of the system when a farecard on the Deny List is used. The system should correctly identify the farecard on the Deny List, remove it from the list, set it to blocked and decline the transaction."}, "Test Scenario 6": {"Test scenarios": "Handling Low Battery Threshold during Payment", "Description": "This scenario is to validate the functionality of the system when the battery goes below the low battery threshold during a payment. The system should be able to process the remote lists even after the battery goes below the threshold during a successful Farecard tap."}, "Test Scenario 7": {"Test scenarios": "Validating Period Pass with Higher Service Class Fare Value", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the validity of the pass and accept the period pass fare payment."}, "Test Scenario 8": {"Test scenarios": "Handling Farecard with Valid Child Concession", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Child concession is used. The system should correctly identify the Child concession and display the successful Child Transit Pass fare payment screen."}, "Test Scenario 9": {"Test scenarios": "Handling Failed Inspection", "Description": "This scenario is to validate the functionality of the system when a farecard fails inspection. The operator should be able to select the payment function on the SA Tool inspection results screen and the system should record both the fare payment and inspection transactions."}, "Test Scenario 10": {"Test scenarios": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Description": "This scenario is to validate the functionality of the system when an anonymous farecard with an expired period pass and insufficient ePurse balance is used. The system should correctly identify the expired pass and insufficient balance, and decline the transaction."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Limited Period Pass within valid time", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the time limit of the pass. The system should successfully accept the fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the time limit of the pass but has sufficient e-Purse balance to cover the transaction. The system should successfully deduct the fare from the e-Purse and accept the fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Test_Sce_Description": "This scenario is to validate the system's response when a customer with an anonymous farecard with an expired period pass and ePurse balance less than the fare amount attempts to make a fare payment. The system should decline the transaction and display a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Blocked Farecard", "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a blocked farecard attempts to make a fare payment. The system should decline the transaction and display a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Farecard on the Deny List", "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a farecard on the Deny List attempts to make a fare payment. The system should remove the card from the Deny List, set it to blocked, decline the transaction, and display a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Low Battery Threshold during Payment", "Test_Sce_Description": "This scenario is to validate the system's performance when the battery goes below the low battery threshold during a fare payment. The system should be able to process the remote lists even after the battery goes below the threshold."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should successfully accept the period pass fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Farecard with Valid Child Concession", "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a farecard with a valid Child concession attempts to make a fare payment. The system should display the successful Child Transit Pass fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario is to validate the system's response when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."}, {"Test Scenario 1": {"Test scenarios": "Validating Limited Period Pass within valid time", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the time limit of the pass. The system should successfully accept the fare payment."}, "Test Scenario 2": {"Test scenarios": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the time limit of the pass but has sufficient e-Purse balance to cover the transaction. The system should successfully deduct the fare from the e-Purse and accept the fare payment."}, "Test Scenario 3": {"Test scenarios": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Description": "This scenario is to validate the system's response when a customer with an anonymous farecard with an expired period pass and ePurse balance less than the fare amount attempts to make a fare payment. The system should decline the transaction and display a declined message to the customer."}, "Test Scenario 4": {"Test scenarios": "Handling Blocked Farecard", "Description": "This scenario is to validate the system's response when a customer with a blocked farecard attempts to make a fare payment. The system should decline the transaction and display a declined message to the customer."}, "Test Scenario 5": {"Test scenarios": "Handling Farecard on the Deny List", "Description": "This scenario is to validate the system's response when a customer with a farecard on the Deny List attempts to make a fare payment. The system should remove the card from the Deny List, set it to blocked, decline the transaction, and display a declined message to the customer."}, "Test Scenario 6": {"Test scenarios": "Handling Low Battery Threshold during Payment", "Description": "This scenario is to validate the system's performance when the battery goes below the low battery threshold during a fare payment. The system should be able to process the remote lists even after the battery goes below the threshold."}, "Test Scenario 7": {"Test scenarios": "Validating Period Pass with Higher Service Class Fare Value", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should successfully accept the period pass fare payment."}, "Test Scenario 8": {"Test scenarios": "Handling Farecard with Valid Child Concession", "Description": "This scenario is to validate the system's response when a customer with a farecard with a valid Child concession attempts to make a fare payment. The system should display the successful Child Transit Pass fare payment screen and play the successful fare payment audio tone for Child concession."}, "Test Scenario 9": {"Test scenarios": "Handling Fare Payment Resulting from Failed Inspection", "Description": "This scenario is to validate the system's response when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Valid Limited Period Pass within time limit", "Test_Sce_Description": "Verify that the system accepts fare payment from a virtual card with a valid Limited Period Pass within the time limit. The system should correctly deduct the fare from the pass and display a successful payment message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Valid Limited Period Pass outside time limit with sufficient e-Purse balance", "Test_Sce_Description": "Verify that the system accepts fare payment from a virtual card with a valid Limited Period Pass outside the time limit but with sufficient e-Purse balance. The system should correctly deduct the fare from the e-Purse and display a successful payment message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Expired Period Pass with insufficient ePurse balance", "Test_Sce_Description": "Verify that the system declines fare payment from a virtual card with an expired Period Pass and insufficient ePurse balance. The system should display a declined message and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Blocked Virtual Card", "Test_Sce_Description": "Verify that the system declines fare payment from a blocked virtual card. The system should display a declined message and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Virtual Card on Deny List", "Test_Sce_Description": "Verify that the system declines fare payment from a virtual card on the Deny List. The system should remove the card from the Deny List, set it to blocked, display a declined message and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Low Battery Threshold during Payment", "Test_Sce_Description": "Verify that the system handles a situation where the battery goes below the low battery threshold during payment. The system should be able to process the remote lists even after the battery goes below the threshold during a successful Farecard tap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Tap Counter at Configured Limit", "Test_Sce_Description": "Verify that the system handles a situation where the tap counter is at the configured limit. The system should display a declined message and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Unreadable Virtual Card", "Test_Sce_Description": "Verify that the system handles a situation where the Virtual Card is unreadable. The system should indicate to the operator that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Expired Period Pass with Sufficient ePurse Balance", "Test_Sce_Description": "Verify that the system accepts fare payment from a virtual card with an expired Period Pass but with sufficient ePurse balance. The system should correctly deduct the fare from the ePurse and display a successful payment message."}, {"Test Scenario 1": {"Test scenarios": "Valid Limited Period Pass within time limit", "Description": "Verify that the system accepts fare payment from a virtual card with a valid Limited Period Pass within the time limit. The system should correctly deduct the fare from the pass and display a successful payment message."}, "Test Scenario 2": {"Test scenarios": "Valid Limited Period Pass outside time limit with sufficient e-Purse balance", "Description": "Verify that the system accepts fare payment from a virtual card with a valid Limited Period Pass outside the time limit but with sufficient e-Purse balance. The system should correctly deduct the fare from the e-Purse and display a successful payment message."}, "Test Scenario 3": {"Test scenarios": "Expired Period Pass with insufficient ePurse balance", "Description": "Verify that the system declines fare payment from a virtual card with an expired Period Pass and insufficient ePurse balance. The system should display a declined message and not conduct the transaction."}, "Test Scenario 4": {"Test scenarios": "Blocked Virtual Card", "Description": "Verify that the system declines fare payment from a blocked virtual card. The system should display a declined message and not conduct the transaction."}, "Test Scenario 5": {"Test scenarios": "Virtual Card on Deny List", "Description": "Verify that the system declines fare payment from a virtual card on the Deny List. The system should remove the card from the Deny List, set it to blocked, display a declined message and not conduct the transaction."}, "Test Scenario 6": {"Test scenarios": "Low Battery Threshold during Payment", "Description": "Verify that the system handles a situation where the battery goes below the low battery threshold during payment. The system should be able to process the remote lists even after the battery goes below the threshold during a successful Farecard tap."}, "Test Scenario 7": {"Test scenarios": "Tap Counter at Configured Limit", "Description": "Verify that the system handles a situation where the tap counter is at the configured limit. The system should display a declined message and not conduct the transaction."}, "Test Scenario 8": {"Test scenarios": "Unreadable Virtual Card", "Description": "Verify that the system handles a situation where the Virtual Card is unreadable. The system should indicate to the operator that the Virtual Card is unreadable."}, "Test Scenario 9": {"Test scenarios": "Expired Period Pass with Sufficient ePurse Balance", "Description": "Verify that the system accepts fare payment from a virtual card with an expired Period Pass but with sufficient ePurse balance. The system should correctly deduct the fare from the ePurse and display a successful payment message."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Valid Limited Period Pass within time limit", "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the time limit. The system should correctly identify the pass as valid and deduct the fare from the pass balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Valid Limited Period Pass outside time limit with sufficient e-Purse balance", "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass outside the time limit but with a sufficient e-Purse balance. The system should correctly identify the pass as invalid due to the time limit, and deduct the fare from the e-Purse balance instead."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Expired Period Pass with insufficient ePurse balance", "Test_Sce_Description": "Verify that the system correctly declines fare payment from an anonymous virtual card with an expired Period Pass and an ePurse balance less than the fare amount. The system should correctly identify the pass as expired and the ePurse balance as insufficient, and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Blocked Virtual Card", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked virtual card. The system should correctly identify the card as blocked and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Virtual Card on Deny List", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a virtual card on the Deny List. The system should correctly identify the card as being on the Deny List, remove it from the list, set it to blocked, and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Low Battery during Payment", "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should be able to process the remote lists even after the battery goes below the threshold, and then switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Non-Farecard Tap", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer taps a card that is not a Farecard. The system should display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Farecard within Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a Farecard within the Anti-Passback Window. The system should correctly identify the card as being within the Anti-Passback Window and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Non-Activated Card Tap", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer taps a non-activated card. The system should display a 'Card Read Error' message."}, {"Test Scenario 1": {"Test scenarios": "Valid Limited Period Pass within time limit", "Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the time limit. The system should correctly identify the pass as valid and deduct the fare from the pass balance."}, "Test Scenario 2": {"Test scenarios": "Valid Limited Period Pass outside time limit with sufficient e-Purse balance", "Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass outside the time limit but with a sufficient e-Purse balance. The system should correctly identify the pass as invalid due to the time limit, and deduct the fare from the e-Purse balance instead."}, "Test Scenario 3": {"Test scenarios": "Expired Period Pass with insufficient ePurse balance", "Description": "Verify that the system correctly declines fare payment from an anonymous virtual card with an expired Period Pass and an ePurse balance less than the fare amount. The system should correctly identify the pass as expired and the ePurse balance as insufficient, and decline the transaction."}, "Test Scenario 4": {"Test scenarios": "Blocked Virtual Card", "Description": "Verify that the system correctly declines fare payment from a blocked virtual card. The system should correctly identify the card as blocked and decline the transaction."}, "Test Scenario 5": {"Test scenarios": "Virtual Card on Deny List", "Description": "Verify that the system correctly declines fare payment from a virtual card on the Deny List. The system should correctly identify the card as being on the Deny List, remove it from the list, set it to blocked, and decline the transaction."}, "Test Scenario 6": {"Test scenarios": "Low Battery during Payment", "Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should be able to process the remote lists even after the battery goes below the threshold, and then switch to 'Out of Service' mode."}, "Test Scenario 7": {"Test scenarios": "Non-Farecard Tap", "Description": "Verify that the system correctly handles a situation where a customer taps a card that is not a Farecard. The system should display a 'Card Read Error' message."}, "Test Scenario 8": {"Test scenarios": "Farecard within Anti-Passback Window", "Description": "Verify that the system correctly declines fare payment from a Farecard within the Anti-Passback Window. The system should correctly identify the card as being within the Anti-Passback Window and decline the transaction."}, "Test Scenario 9": {"Test scenarios": "Non-Activated Card Tap", "Description": "Verify that the system correctly handles a situation where a customer taps a non-activated card. The system should display a 'Card Read Error' message."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the service class is Premium."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Performance Test for Fare Payment", "Test_Sce_Description": "Verify that the system can handle a high volume of fare payments simultaneously without any degradation in performance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Security Test for Fare Payment", "Test_Sce_Description": "Verify that the system securely processes fare payments, ensuring that sensitive customer data is not compromised."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Transfer Window", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Off Peak Daily Cap Limit", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has reached the off peak daily cap limit."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the service class is Premium."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, "Test Scenario 6": {"Test scenarios": "Performance Test for Fare Payment", "Description": "Verify that the system can handle a high volume of fare payments simultaneously without any degradation in performance."}, "Test Scenario 7": {"Test scenarios": "Security Test for Fare Payment", "Description": "Verify that the system securely processes fare payments, ensuring that sensitive customer data is not compromised."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Special Event Transfer Product", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product."}, "Test Scenario 9": {"Test scenarios": "Fare Payment with Transfer Window", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made within the transfer window."}, "Test Scenario 10": {"Test scenarios": "Fare Payment with Off Peak Daily Cap Limit", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has reached the off peak daily cap limit."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare", "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Performance of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame and does not cause any delays or disruptions in the service."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Security of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is secure and does not expose any sensitive customer information or allow any unauthorized access to the system."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the special event fare."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Premium Service Class and Lower Special Event Fare", "Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the special event fare."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, "Test Scenario 7": {"Test scenarios": "Performance of Fare Payment Process", "Description": "Verify that the fare payment process is completed within the acceptable time frame and does not cause any delays or disruptions in the service."}, "Test Scenario 8": {"Test scenarios": "Security of Fare Payment Process", "Description": "Verify that the fare payment process is secure and does not expose any sensitive customer information or allow any unauthorized access to the system."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Valid Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid non-adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Performance of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak loads."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Security of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is secure and that all sensitive data is encrypted. Unauthorized access to the fare payment process should be prevented."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Valid Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid non-adult concession."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid child concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."}, "Test Scenario 6": {"Test scenarios": "Performance of Fare Payment Process", "Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak loads."}, "Test Scenario 7": {"Test scenarios": "Security of Fare Payment Process", "Description": "Verify that the fare payment process is secure and that all sensitive data is encrypted. Unauthorized access to the fare payment process should be prevented."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard. The tool should also play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling ePurse balance less than fare amount", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly handles the situation when the customer's ePurse balance is less than the fare amount. The tool should put the Farecard into overdraft (negative balance)."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing valid transfer product within Intra-agency Transfer window", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a valid transfer product within the Intra-agency Transfer window. The tool should compute the free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing valid transfer product within Inter-agency Transfer window", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a valid transfer product within the Inter-agency Transfer window. The tool should compute the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies, and deduct the appropriate fare, if applicable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling Autoload Threshold", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly handles the situation when the customer's Farecard meets or drops below Autoload Threshold. The tool should check that the ePurse balance (after deducting the travel fare) is under the Autoload threshold and add the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing Farecard on the Action or Load Value List", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a Farecard that is on the Action or Load Value list. The tool should verify that the Farecard is on the list and update the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly handles a fare payment made during Peak hours after the Farecard has reached off peak Daily Cap Limit and is out of transfer window. The tool should compute the fare and deduct the amount from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The tool should compute the fare and deduct the amount from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The tool should compute the fare and deduct the amount from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult Concession on Farecard", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and processes a Farecard with a Valid Non-Adult concession."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child, Non-discreet concession", "Description": "This scenario is to validate that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard. The tool should also play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, "Test Scenario 2": {"Test scenarios": "Handling ePurse balance less than fare amount", "Description": "This scenario is to validate that the SA Tool correctly handles the situation when the customer's ePurse balance is less than the fare amount. The tool should put the Farecard into overdraft (negative balance)."}, "Test Scenario 3": {"Test scenarios": "Processing valid transfer product within Intra-agency Transfer window", "Description": "This scenario is to validate that the SA Tool correctly processes a valid transfer product within the Intra-agency Transfer window. The tool should compute the free transfer."}, "Test Scenario 4": {"Test scenarios": "Processing valid transfer product within Inter-agency Transfer window", "Description": "This scenario is to validate that the SA Tool correctly processes a valid transfer product within the Inter-agency Transfer window. The tool should compute the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies, and deduct the appropriate fare, if applicable."}, "Test Scenario 5": {"Test scenarios": "Handling Autoload Threshold", "Description": "This scenario is to validate that the SA Tool correctly handles the situation when the customer's Farecard meets or drops below Autoload Threshold. The tool should check that the ePurse balance (after deducting the travel fare) is under the Autoload threshold and add the Autoload amount to the ePurse balance."}, "Test Scenario 6": {"Test scenarios": "Processing Farecard on the Action or Load Value List", "Description": "This scenario is to validate that the SA Tool correctly processes a Farecard that is on the Action or Load Value list. The tool should verify that the Farecard is on the list and update the Farecard accordingly."}, "Test Scenario 7": {"Test scenarios": "Handling fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Description": "This scenario is to validate that the SA Tool correctly handles a fare payment made during Peak hours after the Farecard has reached off peak Daily Cap Limit and is out of transfer window. The tool should compute the fare and deduct the amount from the Virtual Card E-Purse."}, "Test Scenario 8": {"Test scenarios": "Processing Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Description": "This scenario is to validate that the SA Tool correctly processes a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The tool should compute the fare and deduct the amount from the Virtual Card E-Purse."}, "Test Scenario 9": {"Test scenarios": "Processing Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Description": "This scenario is to validate that the SA Tool correctly processes a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The tool should compute the fare and deduct the amount from the Virtual Card E-Purse."}, "Test Scenario 10": {"Test scenarios": "Validating Non-Adult Concession on Farecard", "Description": "This scenario is to validate that the SA Tool correctly identifies and processes a Farecard with a Valid Non-Adult concession."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Deny list functionality when device is offline", "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Declined tap sent to ATS", "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the declined tap is sent to ATS. This should happen even when the device is offline."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Multiple NFC media presented to the device", "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Device in Out-of-Service state", "Test_Sce_Description": "Verify that when the device is in Out-of-Service state, it does not detect the media when a customer attempts to tap their Open Payments Media on the card reader. The device should remain in Out-of-Service State."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Error handling on the device", "Test_Sce_Description": "Verify that when an error has occurred on the device that does not cover the exception cases above, the device records the tap and provides the Declined \u2013 See Customer Service Screen to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Anti-passback functionality when device is online", "Test_Sce_Description": "Verify that when a cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window and the device is online, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Anti-passback functionality when device is offline", "Test_Sce_Description": "Verify that when a cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window and the device is offline, the device should handle this scenario appropriately. The specific behavior will depend on the system's offline anti-passback logic."}, {"Test Scenario 1": {"Test scenarios": "Deny list functionality when device is offline", "Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, "Test Scenario 2": {"Test scenarios": "Declined tap sent to ATS", "Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the declined tap is sent to ATS. This should happen even when the device is offline."}, "Test Scenario 3": {"Test scenarios": "Multiple NFC media presented to the device", "Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, "Test Scenario 4": {"Test scenarios": "Device in Out-of-Service state", "Description": "Verify that when the device is in Out-of-Service state, it does not detect the media when a customer attempts to tap their Open Payments Media on the card reader. The device should remain in Out-of-Service State."}, "Test Scenario 5": {"Test scenarios": "Error handling on the device", "Description": "Verify that when an error has occurred on the device that does not cover the exception cases above, the device records the tap and provides the Declined \u2013 See Customer Service Screen to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, "Test Scenario 6": {"Test scenarios": "Anti-passback functionality when device is online", "Description": "Verify that when a cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window and the device is online, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, "Test Scenario 7": {"Test scenarios": "Anti-passback functionality when device is offline", "Description": "Verify that when a cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window and the device is offline, the device should handle this scenario appropriately. The specific behavior will depend on the system's offline anti-passback logic."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Multiple NFC media presented to the device", "Test_Sce_Description": "This scenario will test the functionality of the device when multiple NFC media are presented at once. The device should block all user functionality and present an Anti-Collision toast message to the customer. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Non-activated Farecard tapped on the device", "Test_Sce_Description": "This scenario will test the functionality of the device when a non-activated Farecard is tapped. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Card reading error occurs", "Test_Sce_Description": "This scenario will test the functionality of the device when a Card reading error occurs. The device should not provide any feedback and screen remains \u201cIn-Service\u201d display. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Card write error occurs", "Test_Sce_Description": "This scenario will test the functionality of the device when a Card write error occurs. The device should not provide any feedback and screen remains \u201cIn-Service\u201d display. The device should delete the transaction information. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Device in Out-of-Service state", "Test_Sce_Description": "This scenario will test the functionality of the device when it is in Out-of-Service state. The device should display the appropriate \u2018Out-of-Service\u2019 display to customers."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Virtual Card Media tapped when device is in Out-of-Service state", "Test_Sce_Description": "This scenario will test the functionality of the device when a Virtual Card Media is tapped while the device is in Out-of-Service state. The device should not detect the media and remain in Out-of-Service State."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Customer attempts to tap-on immediately after tapping-off at the same station", "Test_Sce_Description": "This scenario will test the functionality of the device when a customer attempts to tap-on immediately after tapping-off at the same station. The device should provide the cardholder with the appropriate feedback."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Customer attempts to tap-on immediately after tapping-off at the same station and the device is offline", "Test_Sce_Description": "This scenario will test the functionality of the device when a customer attempts to tap-on immediately after tapping-off at the same station and the device is offline. The device should provide the cardholder with the appropriate feedback."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Error has occurred on the device", "Test_Sce_Description": "This scenario will test the functionality of the device when an error has occurred that does not cover the exception cases above. The device should record the tap and provide the cardholder with the appropriate feedback."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Virtual Card has insufficient E-Purse to cover the Tap-On Fare", "Test_Sce_Description": "This scenario will test the functionality of the device when a Virtual Card has insufficient E-Purse to cover the Tap-On Fare. The device should provide the cardholder with the appropriate feedback."}, {"Test Scenario 1": {"Test scenarios": "Multiple NFC media presented to the device", "Description": "This scenario will test the functionality of the device when multiple NFC media are presented at once. The device should block all user functionality and present an Anti-Collision toast message to the customer. An error should be captured and logged in the background for troubleshooting purposes."}, "Test Scenario 2": {"Test scenarios": "Non-activated Farecard tapped on the device", "Description": "This scenario will test the functionality of the device when a non-activated Farecard is tapped. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction. An error should be captured and logged in the background for troubleshooting purposes."}, "Test Scenario 3": {"Test scenarios": "Card reading error occurs", "Description": "This scenario will test the functionality of the device when a Card reading error occurs. The device should not provide any feedback and screen remains \u201cIn-Service\u201d display. An error should be captured and logged in the background for troubleshooting purposes."}, "Test Scenario 4": {"Test scenarios": "Card write error occurs", "Description": "This scenario will test the functionality of the device when a Card write error occurs. The device should not provide any feedback and screen remains \u201cIn-Service\u201d display. The device should delete the transaction information. An error should be captured and logged in the background for troubleshooting purposes."}, "Test Scenario 5": {"Test scenarios": "Device in Out-of-Service state", "Description": "This scenario will test the functionality of the device when it is in Out-of-Service state. The device should display the appropriate \u2018Out-of-Service\u2019 display to customers."}, "Test Scenario 6": {"Test scenarios": "Virtual Card Media tapped when device is in Out-of-Service state", "Description": "This scenario will test the functionality of the device when a Virtual Card Media is tapped while the device is in Out-of-Service state. The device should not detect the media and remain in Out-of-Service State."}, "Test Scenario 7": {"Test scenarios": "Customer attempts to tap-on immediately after tapping-off at the same station", "Description": "This scenario will test the functionality of the device when a customer attempts to tap-on immediately after tapping-off at the same station. The device should provide the cardholder with the appropriate feedback."}, "Test Scenario 8": {"Test scenarios": "Customer attempts to tap-on immediately after tapping-off at the same station and the device is offline", "Description": "This scenario will test the functionality of the device when a customer attempts to tap-on immediately after tapping-off at the same station and the device is offline. The device should provide the cardholder with the appropriate feedback."}, "Test Scenario 9": {"Test scenarios": "Error has occurred on the device", "Description": "This scenario will test the functionality of the device when an error has occurred that does not cover the exception cases above. The device should record the tap and provide the cardholder with the appropriate feedback."}, "Test Scenario 10": {"Test scenarios": "Virtual Card has insufficient E-Purse to cover the Tap-On Fare", "Description": "This scenario will test the functionality of the device when a Virtual Card has insufficient E-Purse to cover the Tap-On Fare. The device should provide the cardholder with the appropriate feedback."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing Open Payments Media tap when SA Tool is in Out-of-Service state", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader. The expected outcome is that the device will not detect the media and will remain in the Out-of-Service state."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing Open Payments Media tap when SA Tool is configured for Farecard reversals only", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is configured for only farecard reversals and a customer attempts to tap their Open Payments Media on the card reader. The expected outcome is that the device will display an error message indicating that it is only available for Farecard reversals."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing Open Payments Media tap not on the approved media list while the device is in Pilot mode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Pilot mode and a customer attempts to tap an Open Payments Media that is not on the approved media list. The expected outcome is that the device will check the approved media list and if the media is not found, it will display a 'Declined \u2013 Not Accepted, Tap Farecard' screen to the cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing Open Payments Media tap when the media is on the BIN Blocking List", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Open Payments Media is on the BIN Blocking List. The expected outcome is that the device will check its local BIN Blocking list and if the card's BIN is found to be on the list, it will play a decline audio tone and display a 'Declined \u2013 Try Another Card (BIN Blocked)' screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing fare payment reversal with Interac Card while Interac is disabled on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to reverse fare payment with an Interac Card while Interac is disabled on the tool. The expected outcome is that the device will determine that the media tapped is not supported and will display an error message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing fare payment reversal with Open Payment Card while Open Payments are disabled on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to reverse fare payment with an Open Payment Card while Open Payments are disabled on the tool. The expected outcome is that the device will determine that the media tapped is not supported and will display an error message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing fare payment reversal with Open Payment Card while corresponding payment method / card brand is disabled on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to reverse fare payment with an Open Payment Card while the corresponding payment method / card brand is disabled on the tool. The expected outcome is that the device will determine that the media tapped is not supported and will display an error message."}, {"Test Scenario 1": {"Test scenarios": "Testing Open Payments Media tap when SA Tool is in Out-of-Service state", "Description": "This scenario tests the functionality of the SA Tool when it is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader. The expected outcome is that the device will not detect the media and will remain in the Out-of-Service state."}, "Test Scenario 2": {"Test scenarios": "Testing Open Payments Media tap when SA Tool is configured for Farecard reversals only", "Description": "This scenario tests the functionality of the SA Tool when it is configured for only farecard reversals and a customer attempts to tap their Open Payments Media on the card reader. The expected outcome is that the device will display an error message indicating that it is only available for Farecard reversals."}, "Test Scenario 3": {"Test scenarios": "Testing Open Payments Media tap not on the approved media list while the device is in Pilot mode", "Description": "This scenario tests the functionality of the SA Tool when it is in Pilot mode and a customer attempts to tap an Open Payments Media that is not on the approved media list. The expected outcome is that the device will check the approved media list and if the media is not found, it will display a 'Declined \u2013 Not Accepted, Tap Farecard' screen to the cardholder."}, "Test Scenario 4": {"Test scenarios": "Testing Open Payments Media tap when the media is on the BIN Blocking List", "Description": "This scenario tests the functionality of the SA Tool when a customer's Open Payments Media is on the BIN Blocking List. The expected outcome is that the device will check its local BIN Blocking list and if the card's BIN is found to be on the list, it will play a decline audio tone and display a 'Declined \u2013 Try Another Card (BIN Blocked)' screen."}, "Test Scenario 5": {"Test scenarios": "Testing fare payment reversal with Interac Card while Interac is disabled on SA Tool", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to reverse fare payment with an Interac Card while Interac is disabled on the tool. The expected outcome is that the device will determine that the media tapped is not supported and will display an error message."}, "Test Scenario 6": {"Test scenarios": "Testing fare payment reversal with Open Payment Card while Open Payments are disabled on SA Tool", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to reverse fare payment with an Open Payment Card while Open Payments are disabled on the tool. The expected outcome is that the device will determine that the media tapped is not supported and will display an error message."}, "Test Scenario 7": {"Test scenarios": "Testing fare payment reversal with Open Payment Card while corresponding payment method / card brand is disabled on SA Tool", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to reverse fare payment with an Open Payment Card while the corresponding payment method / card brand is disabled on the tool. The expected outcome is that the device will determine that the media tapped is not supported and will display an error message."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Testing the error logging functionality when an error occurs", "Test_Sce_Description": "This scenario will test if the system correctly logs the error when an error occurs on the device. The error should be captured and logged in the background to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Testing the response when a Virtual Card\u2019s E-Purse balance is insufficient", "Test_Sce_Description": "This scenario will test if the system correctly responds when a Virtual Card\u2019s E-Purse balance is less than that of the Tap-On Fare. The device should send the tap to ATS which should return a response that the virtual card does not have a sufficient E-Purse balance to cover the tap-on fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Testing the response when Virtual Card Media is on the Online Hotlist", "Test_Sce_Description": "This scenario will test if the system correctly responds when the Virtual Card media is on the online hotlist. The device should send the tap to ATS and return a response that the media is on the online hotlist. The right to travel should not be conferred."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Testing the response when Virtual Card Media is on the Online Hotlist but the scratchpad does not indicate blocked", "Test_Sce_Description": "This scenario will test if the system correctly responds when the Virtual Card media is on the online hotlist but the scratchpad does not indicate blocked. The device should send the tap to ATS for processing. ATS should check the online hotlist and confirm that the virtual card is on the online hotlist. ATS should send the rejected tap back to the device via API. The device should update the scratchpad with the blocked status and send a notification to ATS that it has done so."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Testing the response when Virtual Card Media is on the local hotlist and device is offline", "Test_Sce_Description": "This scenario will test if the system correctly responds when the Virtual Card Media is on the local hotlist and the device is offline. The device should record the tap and the Declined \u2013 Please Contact Customer Service screen should be provided to the cardholder. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Testing the response when an Open Payments media not on the approved media list is tapped on the device in Pilot mode", "Test_Sce_Description": "This scenario will test if the system correctly responds when an Open Payments media that is not on the approved media list is tapped on the device in Pilot mode. The device should check the approved media list. If the media is not found on the approved media list, the Declined \u2013 Not Accepted, Tap Farecard screen should be provided to the cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Testing the response when Customer\u2019s Open Payments Media is on the BIN Blocking List", "Test_Sce_Description": "This scenario will test if the system correctly responds when the Customer\u2019s Open Payments Media is on the BIN Blocking List. The device should check its local BIN Blocking list. The card\u2019s BIN should be found to be on the BIN Blocking List. The device should play the decline audio tone and display the Declined \u2013 Try Another Card (BIN Blocked) screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Testing the response when Customer is travelling with an Interac Card, and ATS returns a decline response due to Media In Debt", "Test_Sce_Description": "This scenario will test if the system correctly responds when the Customer is travelling with an Interac Card, and ATS returns a decline response due to Media In Debt. The device should send the tap to ATS and return a response that the Interac media is on the deny list. The right to travel should not be conferred."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Testing the response when Customer is travelling with an Interac Card, device is offline, and Interac media is on the local deny list due to Media In Debt", "Test_Sce_Description": "This scenario will test if the system correctly responds when the Customer is travelling with an Interac Card, the device is offline, and the Interac media is on the local deny list due to Media In Debt. The device should check the local deny list. The media should be on the local deny list due to reason Media in Debt. The right to travel should not be conferred."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Testing the response when Customer taps Interac Card while Interac is disabled on SA Tool", "Test_Sce_Description": "This scenario will test if the system correctly responds when the Customer taps the Interac Card while Interac is disabled on SA Tool. The device should detect the Interac media. The device should determine that the media tapped is not supported and display an error message. The right to travel should not be conferred. A transaction should not be recorded."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Testing the response when Customer taps Open Payment Card while Open Payments are disabled on SA Tool", "Test_Sce_Description": "This scenario will test if the system correctly responds when the Customer taps Open Payment Card while Open Payments are disabled on SA Tool. The device should detect the Open Payment Card. The device should determine that the media tapped is not supported and display an error message. The right to travel should not be conferred. A transaction should not be recorded."}, {"Test Scenario 1": {"Test scenarios": "Testing the error logging functionality when an error occurs", "Description": "This scenario will test if the system correctly logs the error when an error occurs on the device. The error should be captured and logged in the background to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, "Test Scenario 2": {"Test scenarios": "Testing the response when a Virtual Card\u2019s E-Purse balance is insufficient", "Description": "This scenario will test if the system correctly responds when a Virtual Card\u2019s E-Purse balance is less than that of the Tap-On Fare. The device should send the tap to ATS which should return a response that the virtual card does not have a sufficient E-Purse balance to cover the tap-on fare."}, "Test Scenario 3": {"Test scenarios": "Testing the response when Virtual Card Media is on the Online Hotlist", "Description": "This scenario will test if the system correctly responds when the Virtual Card media is on the online hotlist. The device should send the tap to ATS and return a response that the media is on the online hotlist. The right to travel should not be conferred."}, "Test Scenario 4": {"Test scenarios": "Testing the response when Virtual Card Media is on the Online Hotlist but the scratchpad does not indicate blocked", "Description": "This scenario will test if the system correctly responds when the Virtual Card media is on the online hotlist but the scratchpad does not indicate blocked. The device should send the tap to ATS for processing. ATS should check the online hotlist and confirm that the virtual card is on the online hotlist. ATS should send the rejected tap back to the device via API. The device should update the scratchpad with the blocked status and send a notification to ATS that it has done so."}, "Test Scenario 5": {"Test scenarios": "Testing the response when Virtual Card Media is on the local hotlist and device is offline", "Description": "This scenario will test if the system correctly responds when the Virtual Card Media is on the local hotlist and the device is offline. The device should record the tap and the Declined \u2013 Please Contact Customer Service screen should be provided to the cardholder. The declined tap should be sent to ATS."}, "Test Scenario 6": {"Test scenarios": "Testing the response when an Open Payments media not on the approved media list is tapped on the device in Pilot mode", "Description": "This scenario will test if the system correctly responds when an Open Payments media that is not on the approved media list is tapped on the device in Pilot mode. The device should check the approved media list. If the media is not found on the approved media list, the Declined \u2013 Not Accepted, Tap Farecard screen should be provided to the cardholder."}, "Test Scenario 7": {"Test scenarios": "Testing the response when Customer\u2019s Open Payments Media is on the BIN Blocking List", "Description": "This scenario will test if the system correctly responds when the Customer\u2019s Open Payments Media is on the BIN Blocking List. The device should check its local BIN Blocking list. The card\u2019s BIN should be found to be on the BIN Blocking List. The device should play the decline audio tone and display the Declined \u2013 Try Another Card (BIN Blocked) screen."}, "Test Scenario 8": {"Test scenarios": "Testing the response when Customer is travelling with an Interac Card, and ATS returns a decline response due to Media In Debt", "Description": "This scenario will test if the system correctly responds when the Customer is travelling with an Interac Card, and ATS returns a decline response due to Media In Debt. The device should send the tap to ATS and return a response that the Interac media is on the deny list. The right to travel should not be conferred."}, "Test Scenario 9": {"Test scenarios": "Testing the response when Customer is travelling with an Interac Card, device is offline, and Interac media is on the local deny list due to Media In Debt", "Description": "This scenario will test if the system correctly responds when the Customer is travelling with an Interac Card, the device is offline, and the Interac media is on the local deny list due to Media In Debt. The device should check the local deny list. The media should be on the local deny list due to reason Media in Debt. The right to travel should not be conferred."}, "Test Scenario 10": {"Test scenarios": "Testing the response when Customer taps Interac Card while Interac is disabled on SA Tool", "Description": "This scenario will test if the system correctly responds when the Customer taps the Interac Card while Interac is disabled on SA Tool. The device should detect the Interac media. The device should determine that the media tapped is not supported and display an error message. The right to travel should not be conferred. A transaction should not be recorded."}, "Test Scenario 11": {"Test scenarios": "Testing the response when Customer taps Open Payment Card while Open Payments are disabled on SA Tool", "Description": "This scenario will test if the system correctly responds when the Customer taps Open Payment Card while Open Payments are disabled on SA Tool. The device should detect the Open Payment Card. The device should determine that the media tapped is not supported and display an error message. The right to travel should not be conferred. A transaction should not be recorded."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Open Payments Media on Deny List", "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Open Payments Media on Local Deny List and Device Offline", "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Multiple NFC Media Presented at Once", "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Tap Open Payments Media when Device is Out-of-Service", "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Error Occurred on Device", "Test_Sce_Description": "Verify that when an error has occurred on the device that does not cover the exception cases above, the device records the tap and the Declined \u2013 See Customer Service Screen is provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Tap Open Payments Media Not on Approved List in Beta Mode", "Test_Sce_Description": "Verify that when a customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Tap-on Immediately After Tapping-off at Same Station (Online)", "Test_Sce_Description": "Verify that when a customer taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Tap-on Immediately After Tapping-off at Same Station (Offline)", "Test_Sce_Description": "Verify that when a customer taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window and the device is offline, the device should not detect the tap and remain in the offline state. An error should be captured and logged in the background."}, {"Test Scenario 1": {"Test scenarios": "Open Payments Media on Deny List", "Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."}, "Test Scenario 2": {"Test scenarios": "Open Payments Media on Local Deny List and Device Offline", "Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."}, "Test Scenario 3": {"Test scenarios": "Multiple NFC Media Presented at Once", "Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background."}, "Test Scenario 4": {"Test scenarios": "Tap Open Payments Media when Device is Out-of-Service", "Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."}, "Test Scenario 5": {"Test scenarios": "Error Occurred on Device", "Description": "Verify that when an error has occurred on the device that does not cover the exception cases above, the device records the tap and the Declined \u2013 See Customer Service Screen is provided to the cardholder. An error should be captured and logged in the background."}, "Test Scenario 6": {"Test scenarios": "Tap Open Payments Media Not on Approved List in Beta Mode", "Description": "Verify that when a customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."}, "Test Scenario 7": {"Test scenarios": "Tap-on Immediately After Tapping-off at Same Station (Online)", "Description": "Verify that when a customer taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background."}, "Test Scenario 8": {"Test scenarios": "Tap-on Immediately After Tapping-off at Same Station (Offline)", "Description": "Verify that when a customer taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window and the device is offline, the device should not detect the tap and remain in the offline state. An error should be captured and logged in the background."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after reaching the off peak daily cap and outside of the transfer window. The system should correctly identify the farecard's status, compute the fare based on peak hour rates, and deduct the amount from the ePurse balance. The transaction should be communicated back to the SA Tool and the fare payment should be successfully completed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Valid Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly identifies a valid non-adult concession on the farecard and computes and deducts the correct fare from the ePurse balance. The system should correctly identify the concession, compute the fare based on the concession rates, and deduct the amount from the ePurse balance. The fare payment should be successfully completed and the SA Tool should display the successful fare payment screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment on Premium Service Route with Transfer where Premium fare is higher than Special Event fare", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window. The system should correctly identify the farecard's status, compute the fare based on the premium service rates, and deduct the amount from the ePurse balance. The fare payment should be successfully completed and the SA Tool should display the successful fare payment screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment on Premium Service Route with Transfer where Premium fare is lower than Special Event fare", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window. The system should correctly identify the farecard's status, compute the fare based on the premium service rates, and deduct the amount from the ePurse balance. The fare payment should be successfully completed and the SA Tool should display the successful fare payment screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Valid Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies a valid child concession on the farecard and computes and deducts the correct fare from the ePurse balance. The system should correctly identify the concession, compute the fare based on the concession rates, and deduct the amount from the ePurse balance. The fare payment should be successfully completed and the SA Tool should display the successful fare payment screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should correctly identify the farecard's status, compute the fare based on the appropriate rates, and deduct the amount from the ePurse balance. The fare payment and inspection transactions should be recorded and the SA Tool should return to the Tap Card screen."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after reaching the off peak daily cap and outside of the transfer window. The system should correctly identify the farecard's status, compute the fare based on peak hour rates, and deduct the amount from the ePurse balance. The transaction should be communicated back to the SA Tool and the fare payment should be successfully completed."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Valid Non-Adult Concession", "Description": "Verify that the system correctly identifies a valid non-adult concession on the farecard and computes and deducts the correct fare from the ePurse balance. The system should correctly identify the concession, compute the fare based on the concession rates, and deduct the amount from the ePurse balance. The fare payment should be successfully completed and the SA Tool should display the successful fare payment screen."}, "Test Scenario 3": {"Test scenarios": "Fare Payment on Premium Service Route with Transfer where Premium fare is higher than Special Event fare", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window. The system should correctly identify the farecard's status, compute the fare based on the premium service rates, and deduct the amount from the ePurse balance. The fare payment should be successfully completed and the SA Tool should display the successful fare payment screen."}, "Test Scenario 4": {"Test scenarios": "Fare Payment on Premium Service Route with Transfer where Premium fare is lower than Special Event fare", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window. The system should correctly identify the farecard's status, compute the fare based on the premium service rates, and deduct the amount from the ePurse balance. The fare payment should be successfully completed and the SA Tool should display the successful fare payment screen."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Valid Child Concession", "Description": "Verify that the system correctly identifies a valid child concession on the farecard and computes and deducts the correct fare from the ePurse balance. The system should correctly identify the concession, compute the fare based on the concession rates, and deduct the amount from the ePurse balance. The fare payment should be successfully completed and the SA Tool should display the successful fare payment screen."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should correctly identify the farecard's status, compute the fare based on the appropriate rates, and deduct the amount from the ePurse balance. The fare payment and inspection transactions should be recorded and the SA Tool should return to the Tap Card screen."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid non-adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Performance of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak load conditions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Security of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is secure and that all sensitive data is encrypted during transmission and storage."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid non-adult concession."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid child concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."}, "Test Scenario 6": {"Test scenarios": "Performance of Fare Payment Process", "Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak load conditions."}, "Test Scenario 7": {"Test scenarios": "Security of Fare Payment Process", "Description": "Verify that the fare payment process is secure and that all sensitive data is encrypted during transmission and storage."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the Special Event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product with lower fare", "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the Special Event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the Child Concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Performance of the SA Tool", "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay when computing and deducting fares from the ePurse balance under various conditions such as peak hours, off peak hours, within transfer window, outside transfer window, with different service classes and transfer products."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Security of the SA Tool", "Test_Sce_Description": "Verify that the SA Tool securely handles the customer's farecard information and ePurse balance during fare payment computations and deductions. The system should not expose any sensitive customer information during these transactions."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the Special Event fare."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product with lower fare", "Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the Special Event fare."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the Child Concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."}, "Test Scenario 7": {"Test scenarios": "Performance of the SA Tool", "Description": "Verify that the SA Tool performs efficiently and without delay when computing and deducting fares from the ePurse balance under various conditions such as peak hours, off peak hours, within transfer window, outside transfer window, with different service classes and transfer products."}, "Test Scenario 8": {"Test scenarios": "Security of the SA Tool", "Description": "Verify that the SA Tool securely handles the customer's farecard information and ePurse balance during fare payment computations and deductions. The system should not expose any sensitive customer information during these transactions."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of insufficient ePurse balance", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly handles the situation when the customer's ePurse balance is less than the fare amount. The tool should put the Farecard into overdraft (negative balance)."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of valid transfer product within Intra-agency Transfer window", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of valid transfer product within Inter-agency Transfer window", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product from other transit agency and computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of Autoload Threshold", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of Farecard on the Action or Load Value List", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours after previously reaching off peak daily cap (outside the transfer window) results in a fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of fare payment on Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a fare upgrade."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of fare payment on Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of fare payment with a Valid Non-Adult Concession on the Farecard", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and processes the fare payment when the customer's Farecard has a Valid Non-Adult concession."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child, Non-discreet concession", "Description": "This scenario is to validate that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, "Test Scenario 2": {"Test scenarios": "Handling of insufficient ePurse balance", "Description": "This scenario is to validate that the SA Tool correctly handles the situation when the customer's ePurse balance is less than the fare amount. The tool should put the Farecard into overdraft (negative balance)."}, "Test Scenario 3": {"Test scenarios": "Processing of valid transfer product within Intra-agency Transfer window", "Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."}, "Test Scenario 4": {"Test scenarios": "Processing of valid transfer product within Inter-agency Transfer window", "Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product from other transit agency and computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."}, "Test Scenario 5": {"Test scenarios": "Handling of Autoload Threshold", "Description": "This scenario is to validate that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, "Test Scenario 6": {"Test scenarios": "Processing of Farecard on the Action or Load Value List", "Description": "This scenario is to validate that the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, "Test Scenario 7": {"Test scenarios": "Handling of fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours after previously reaching off peak daily cap (outside the transfer window) results in a fare payment."}, "Test Scenario 8": {"Test scenarios": "Processing of fare payment on Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a fare upgrade."}, "Test Scenario 9": {"Test scenarios": "Processing of fare payment on Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a free transfer."}, "Test Scenario 10": {"Test scenarios": "Processing of fare payment with a Valid Non-Adult Concession on the Farecard", "Description": "This scenario is to validate that the SA Tool correctly identifies and processes the fare payment when the customer's Farecard has a Valid Non-Adult concession."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Temporal Class Supplement Tap-On Transaction", "Test_Sce_Description": "Verify that the device correctly processes a Tap-On Transaction when a Farecard is tapped during a time period that contains an associated Temporal Class Supplement. The device should reflect the Temporal Class Supplement on the HMI and process the transaction as a normal tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Autoload Enabled Farecard Crossing Threshold", "Test_Sce_Description": "Verify that when a Farecard with Autoload enabled is tapped and the Fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance. The device should detect this and deduct the Fare from the Farecard E-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Override Default Trip with No Default O/D", "Test_Sce_Description": "Verify that when a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on. The device should provide feedback to the Cardholder of a successful transaction and notify the customer that the Default Trip was overridden."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Audio Messages Request", "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Farecard Validation Failure at Tap-On", "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device provides the cardholder with the appropriate feedback without updating the Farecard. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Blocked Farecard", "Test_Sce_Description": "Verify that when a blocked Farecard is tapped, the right to travel is not conferred. The device should detect that the Farecard is blocked and provide the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Exceeding Max Travel Duration", "Test_Sce_Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment and opens a new trip. The device should determine this and deduct the value from the Farecard E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Multiple NFC Media Presentation", "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality and presents Anti-Collision HMI to customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Non-Activated Farecard Tap-On", "Test_Sce_Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Card Reading Error", "Test_Sce_Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides feedback to the Cardholder of an unsuccessful transaction."}, {"Test Scenario 1": {"Test scenarios": "Temporal Class Supplement Tap-On Transaction", "Description": "Verify that the device correctly processes a Tap-On Transaction when a Farecard is tapped during a time period that contains an associated Temporal Class Supplement. The device should reflect the Temporal Class Supplement on the HMI and process the transaction as a normal tap-on."}, "Test Scenario 2": {"Test scenarios": "Autoload Enabled Farecard Crossing Threshold", "Description": "Verify that when a Farecard with Autoload enabled is tapped and the Fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance. The device should detect this and deduct the Fare from the Farecard E-Purse balance."}, "Test Scenario 3": {"Test scenarios": "Override Default Trip with No Default O/D", "Description": "Verify that when a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on. The device should provide feedback to the Cardholder of a successful transaction and notify the customer that the Default Trip was overridden."}, "Test Scenario 4": {"Test scenarios": "Audio Messages Request", "Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, "Test Scenario 5": {"Test scenarios": "Farecard Validation Failure at Tap-On", "Description": "Verify that when a Farecard fails validation checks at Tap-On, the device provides the cardholder with the appropriate feedback without updating the Farecard. An error should be captured and logged in the background."}, "Test Scenario 6": {"Test scenarios": "Blocked Farecard", "Description": "Verify that when a blocked Farecard is tapped, the right to travel is not conferred. The device should detect that the Farecard is blocked and provide the appropriate feedback to the Cardholder."}, "Test Scenario 7": {"Test scenarios": "Exceeding Max Travel Duration", "Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment and opens a new trip. The device should determine this and deduct the value from the Farecard E-Purse."}, "Test Scenario 8": {"Test scenarios": "Multiple NFC Media Presentation", "Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality and presents Anti-Collision HMI to customer."}, "Test Scenario 9": {"Test scenarios": "Non-Activated Farecard Tap-On", "Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."}, "Test Scenario 10": {"Test scenarios": "Card Reading Error", "Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides feedback to the Cardholder of an unsuccessful transaction."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Autoload Threshold Crossed", "Test_Sce_Description": "Verify that when the Farecard E-Purse Balance crosses the Auto-load threshold due to the Fare, the Autoload amount is automatically added to the E-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Fare Deduction", "Test_Sce_Description": "Verify that the Device correctly deducts the Fare from the Farecard E-Purse balance when the Autoload threshold is crossed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Feedback to Cardholder", "Test_Sce_Description": "Verify that the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to an Autoload transaction and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Temporal Class Supplement Processing", "Test_Sce_Description": "Verify that the Device correctly processes the Tap-On Transaction as a normal tap-on when the device HMI displays the Temporal Class."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Non-Revenue Farecard Acceptance", "Test_Sce_Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode and displays a declined HMI when the Non-Revenue card is tapped in the revenue mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Fare Payment with Fare type Discount", "Test_Sce_Description": "Verify that the Device correctly displays the \u201cFare Payment with Fare type Discount\u201d HMI and accounts for the concession discount in the Fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Default Trip Override", "Test_Sce_Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Farecard Validation Failure", "Test_Sce_Description": "Verify that the system correctly handles the scenario when the Farecard fails validation checks at Tap-On."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Audio Messages Request", "Test_Sce_Description": "Verify that when the customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Performance of Autoload Process", "Test_Sce_Description": "Verify that the Autoload process is completed within the acceptable time frame when the Farecard E-Purse Balance crosses the Auto-load threshold."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Security of Autoload Process", "Test_Sce_Description": "Verify that the Autoload process is secure and does not expose any sensitive cardholder information."}, {"Test Scenario 1": {"Test scenarios": "Autoload Threshold Crossed", "Description": "Verify that when the Farecard E-Purse Balance crosses the Auto-load threshold due to the Fare, the Autoload amount is automatically added to the E-Purse balance."}, "Test Scenario 2": {"Test scenarios": "Fare Deduction", "Description": "Verify that the Device correctly deducts the Fare from the Farecard E-Purse balance when the Autoload threshold is crossed."}, "Test Scenario 3": {"Test scenarios": "Feedback to Cardholder", "Description": "Verify that the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to an Autoload transaction and updates the Farecard accordingly."}, "Test Scenario 4": {"Test scenarios": "Temporal Class Supplement Processing", "Description": "Verify that the Device correctly processes the Tap-On Transaction as a normal tap-on when the device HMI displays the Temporal Class."}, "Test Scenario 5": {"Test scenarios": "Non-Revenue Farecard Acceptance", "Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode and displays a declined HMI when the Non-Revenue card is tapped in the revenue mode."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Fare type Discount", "Description": "Verify that the Device correctly displays the \u201cFare Payment with Fare type Discount\u201d HMI and accounts for the concession discount in the Fare."}, "Test Scenario 7": {"Test scenarios": "Default Trip Override", "Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on."}, "Test Scenario 8": {"Test scenarios": "Farecard Validation Failure", "Description": "Verify that the system correctly handles the scenario when the Farecard fails validation checks at Tap-On."}, "Test Scenario 9": {"Test scenarios": "Audio Messages Request", "Description": "Verify that when the customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, "Test Scenario 10": {"Test scenarios": "Performance of Autoload Process", "Description": "Verify that the Autoload process is completed within the acceptable time frame when the Farecard E-Purse Balance crosses the Auto-load threshold."}, "Test Scenario 11": {"Test scenarios": "Security of Autoload Process", "Description": "Verify that the Autoload process is secure and does not expose any sensitive cardholder information."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Full Fare-by-Zone transaction processing", "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Override of Default Trip", "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on when the customer requests the override of a Default Trip by interacting with the Device."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Capping discount eligibility", "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Multiple capping discounts eligibility", "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS will take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Offline device capping discount processing", "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules will follow use-case logic outlined in ticketing use cases."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Open Payments Media fails ODA check", "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device performs the necessary validation and determines that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen is provided to the cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Open Payments Media Fails Expiry Check", "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Blocked Farecard", "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. Card reader detects Farecard is blocked. Right to travel is not conferred and the Device provides the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Max Travel Duration Exceedance", "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. Device determines that the Tap-On Time + Max Travel Duration < Current Time. Device Auto-settles the Underpayment and deducts the value from the Farecard E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Multiple NFC media presentation", "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. Customer presents multiple NFC medias to the card reader at once. Device blocks all user functionality, presents Anti-Collision HMI to customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Non-activated Farecard", "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. Device detects that the Farecard is not activated. The device provides feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Card reading error", "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides the appropriate feedback to the cardholder."}, {"Test Scenario 1": {"Test scenarios": "Full Fare-by-Zone transaction processing", "Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."}, "Test Scenario 2": {"Test scenarios": "Override of Default Trip", "Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on when the customer requests the override of a Default Trip by interacting with the Device."}, "Test Scenario 3": {"Test scenarios": "Capping discount eligibility", "Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation."}, "Test Scenario 4": {"Test scenarios": "Multiple capping discounts eligibility", "Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS will take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."}, "Test Scenario 5": {"Test scenarios": "Offline device capping discount processing", "Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules will follow use-case logic outlined in ticketing use cases."}, "Test Scenario 6": {"Test scenarios": "Open Payments Media fails ODA check", "Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device performs the necessary validation and determines that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen is provided to the cardholder."}, "Test Scenario 7": {"Test scenarios": "Open Payments Media Fails Expiry Check", "Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."}, "Test Scenario 8": {"Test scenarios": "Blocked Farecard", "Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. Card reader detects Farecard is blocked. Right to travel is not conferred and the Device provides the appropriate feedback to the Cardholder."}, "Test Scenario 9": {"Test scenarios": "Max Travel Duration Exceedance", "Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. Device determines that the Tap-On Time + Max Travel Duration < Current Time. Device Auto-settles the Underpayment and deducts the value from the Farecard E-Purse."}, "Test Scenario 10": {"Test scenarios": "Multiple NFC media presentation", "Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. Customer presents multiple NFC medias to the card reader at once. Device blocks all user functionality, presents Anti-Collision HMI to customer."}, "Test Scenario 11": {"Test scenarios": "Non-activated Farecard", "Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. Device detects that the Farecard is not activated. The device provides feedback to the Cardholder of an unsuccessful transaction."}, "Test Scenario 12": {"Test scenarios": "Card reading error", "Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides the appropriate feedback to the cardholder."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Non-Revenue farecard in training mode", "Test_Sce_Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode. If the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard with Temporal Class Supplement", "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the Device should contain an HMI reflecting the Temporal Class Supplement, and process the Tap-On Transaction as a normal tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard with Autoload Enabled", "Test_Sce_Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard without Default O/D", "Test_Sce_Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device should process the tap as a result tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Audio Messages Request", "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard Validation Checks", "Test_Sce_Description": "Verify that if a Farecard fails validation checks at Tap-On, the system should handle this exception flow appropriately."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Fare Payment with Period Pass", "Test_Sce_Description": "Verify that when a Farecard with a valid Period Pass is used for fare payment, the system should correctly compute and deduct the Upgrade fare if the Service class fare value is lower than the current route/location Service Class fare value."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Fare Payment with Limited Period Pass", "Test_Sce_Description": "Verify that when a Farecard with a valid Limited Period Pass is used for fare payment, the system should correctly accept the period pass fare payment if the time at tap is occurring within the time limit of the Limited Period Pass Product."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Fare Payment with Limited Period Pass outside of valid time", "Test_Sce_Description": "Verify that when a Farecard with a valid Limited Period Pass is used for fare payment, the system should correctly deduct the fare from the e-Purse balance if the time at tap is occurring outside of the time limit of the Limited Period Pass Product."}, {"Test Scenario 1": {"Test scenarios": "Testing Non-Revenue farecard in training mode", "Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode. If the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI."}, "Test Scenario 2": {"Test scenarios": "Testing Farecard with Temporal Class Supplement", "Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the Device should contain an HMI reflecting the Temporal Class Supplement, and process the Tap-On Transaction as a normal tap-on."}, "Test Scenario 3": {"Test scenarios": "Testing Farecard with Autoload Enabled", "Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance."}, "Test Scenario 4": {"Test scenarios": "Testing Farecard without Default O/D", "Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device should process the tap as a result tap-on."}, "Test Scenario 5": {"Test scenarios": "Testing Audio Messages Request", "Description": "Verify that when a customer requests audio messages for the fare payment, the operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."}, "Test Scenario 6": {"Test scenarios": "Testing Farecard Validation Checks", "Description": "Verify that if a Farecard fails validation checks at Tap-On, the system should handle this exception flow appropriately."}, "Test Scenario 7": {"Test scenarios": "Testing Fare Payment with Period Pass", "Description": "Verify that when a Farecard with a valid Period Pass is used for fare payment, the system should correctly compute and deduct the Upgrade fare if the Service class fare value is lower than the current route/location Service Class fare value."}, "Test Scenario 8": {"Test scenarios": "Testing Fare Payment with Limited Period Pass", "Description": "Verify that when a Farecard with a valid Limited Period Pass is used for fare payment, the system should correctly accept the period pass fare payment if the time at tap is occurring within the time limit of the Limited Period Pass Product."}, "Test Scenario 9": {"Test scenarios": "Testing Fare Payment with Limited Period Pass outside of valid time", "Description": "Verify that when a Farecard with a valid Limited Period Pass is used for fare payment, the system should correctly deduct the fare from the e-Purse balance if the time at tap is occurring outside of the time limit of the Limited Period Pass Product."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare", "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window, and the premium fare is lower than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid non-adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Performance of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame and does not cause any performance issues in the system."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Security of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is secure and does not expose any sensitive customer information or system data."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Premium Service Class and Lower Special Event Fare", "Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window, and the premium fare is lower than the special event fare."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid non-adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, "Test Scenario 7": {"Test scenarios": "Performance of Fare Payment Process", "Description": "Verify that the fare payment process is completed within the acceptable time frame and does not cause any performance issues in the system."}, "Test Scenario 8": {"Test scenarios": "Security of Fare Payment Process", "Description": "Verify that the fare payment process is secure and does not expose any sensitive customer information or system data."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Premium Service Route with Higher Fare", "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare when a customer taps on a premium service route/location after previously riding on a Special Event service route within the transfer window. The fare for the premium service should be higher than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Transfer Window Validation", "Test_Sce_Description": "Verify that the SA Tool correctly identifies whether the tap is within the transfer window. If the tap is not within the transfer window, the fare should not be deducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Valid Special Event Transfer Product", "Test_Sce_Description": "Verify that the SA Tool correctly identifies whether the farecard has a valid Special Event Transfer Product. If the farecard does not have a valid Special Event Transfer Product, the fare should not be deducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Service Class Validation", "Test_Sce_Description": "Verify that the SA Tool correctly identifies the service class as Premium. If the service class is not identified as Premium, the fare should not be deducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Deduction from Virtual Card E-Purse", "Test_Sce_Description": "Verify that the SA Tool correctly deducts the fare from the Virtual Card E-Purse. The balance in the E-Purse should be reduced by the amount of the fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Communication with SA Tool", "Test_Sce_Description": "Verify that the ATS correctly communicates the fare deduction back to the SA Tool. The SA Tool should display the updated balance in the E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "POP Print Flag Setting", "Test_Sce_Description": "Verify that the SA Tool correctly sets the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Performance Test", "Test_Sce_Description": "Verify that the SA Tool performs the fare deduction and updates the E-Purse balance within the acceptable time limit."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Security Test", "Test_Sce_Description": "Verify that the SA Tool securely processes the fare payment and does not expose any sensitive customer information during the transaction."}, {"Test Scenario 1": {"Test scenarios": "Premium Service Route with Higher Fare", "Description": "Verify that the SA Tool correctly computes and deducts the fare when a customer taps on a premium service route/location after previously riding on a Special Event service route within the transfer window. The fare for the premium service should be higher than the special event fare."}, "Test Scenario 2": {"Test scenarios": "Transfer Window Validation", "Description": "Verify that the SA Tool correctly identifies whether the tap is within the transfer window. If the tap is not within the transfer window, the fare should not be deducted."}, "Test Scenario 3": {"Test scenarios": "Valid Special Event Transfer Product", "Description": "Verify that the SA Tool correctly identifies whether the farecard has a valid Special Event Transfer Product. If the farecard does not have a valid Special Event Transfer Product, the fare should not be deducted."}, "Test Scenario 4": {"Test scenarios": "Service Class Validation", "Description": "Verify that the SA Tool correctly identifies the service class as Premium. If the service class is not identified as Premium, the fare should not be deducted."}, "Test Scenario 5": {"Test scenarios": "Fare Deduction from Virtual Card E-Purse", "Description": "Verify that the SA Tool correctly deducts the fare from the Virtual Card E-Purse. The balance in the E-Purse should be reduced by the amount of the fare."}, "Test Scenario 6": {"Test scenarios": "Communication with SA Tool", "Description": "Verify that the ATS correctly communicates the fare deduction back to the SA Tool. The SA Tool should display the updated balance in the E-Purse."}, "Test Scenario 7": {"Test scenarios": "POP Print Flag Setting", "Description": "Verify that the SA Tool correctly sets the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."}, "Test Scenario 8": {"Test scenarios": "Performance Test", "Description": "Verify that the SA Tool performs the fare deduction and updates the E-Purse balance within the acceptable time limit."}, "Test Scenario 9": {"Test scenarios": "Security Test", "Description": "Verify that the SA Tool securely processes the fare payment and does not expose any sensitive customer information during the transaction."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after previously reaching off peak daily cap (outside the transfer window). The system should correctly identify that the farecard has reached off peak Daily Cap Limit, has not reached Peak Daily Cap limit and is out of transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare upgrade from the ePurse balance when a tap is made on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The system should correctly identify that the Service Class is Premium, the Farecard has a valid Special Event Transfer Product and the Tap is within Transfer Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Test_Sce_Description": "Verify that the system correctly computes and allows a free transfer when a tap is made on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The system should correctly identify that the Service Class is Premium, the Farecard has a valid Special Event Transfer Product and the Tap is within Transfer Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Valid Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the Upgrade fare from the ePurse balance when the customer\u2019s Farecard has a Valid Non-Adult concession. The system should correctly identify the concession and apply the correct fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Valid Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the correct Child Concession fare from the ePurse balance when the customer\u2019s Farecard has a Valid Child concession. The system should correctly identify the concession and apply the correct fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when the operator inspects a customer\u2019s farecard and determines that they have not paid a fare. The system should correctly record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Performance Test", "Test_Sce_Description": "Verify that the system performs efficiently under load. The system should be able to handle multiple fare payments simultaneously without any degradation in performance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Security Test", "Test_Sce_Description": "Verify that the system securely handles all transactions and customer data. The system should encrypt all sensitive data and should not allow unauthorized access."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after previously reaching off peak daily cap (outside the transfer window). The system should correctly identify that the farecard has reached off peak Daily Cap Limit, has not reached Peak Daily Cap limit and is out of transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Description": "Verify that the system correctly computes and deducts the fare upgrade from the ePurse balance when a tap is made on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The system should correctly identify that the Service Class is Premium, the Farecard has a valid Special Event Transfer Product and the Tap is within Transfer Window."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Description": "Verify that the system correctly computes and allows a free transfer when a tap is made on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The system should correctly identify that the Service Class is Premium, the Farecard has a valid Special Event Transfer Product and the Tap is within Transfer Window."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Valid Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the Upgrade fare from the ePurse balance when the customer\u2019s Farecard has a Valid Non-Adult concession. The system should correctly identify the concession and apply the correct fare."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Valid Child Concession", "Description": "Verify that the system correctly computes and deducts the correct Child Concession fare from the ePurse balance when the customer\u2019s Farecard has a Valid Child concession. The system should correctly identify the concession and apply the correct fare."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when the operator inspects a customer\u2019s farecard and determines that they have not paid a fare. The system should correctly record both the fare payment and inspection transactions."}, "Test Scenario 7": {"Test scenarios": "Performance Test", "Description": "Verify that the system performs efficiently under load. The system should be able to handle multiple fare payments simultaneously without any degradation in performance."}, "Test Scenario 8": {"Test scenarios": "Security Test", "Description": "Verify that the system securely handles all transactions and customer data. The system should encrypt all sensitive data and should not allow unauthorized access."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession", "Test_Sce_Description": "Verify that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of insufficient ePurse balance", "Test_Sce_Description": "Verify that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of valid transfer product", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Inter-agency transfer processing", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Autoload threshold processing", "Test_Sce_Description": "Verify that the SA Tool correctly checks that the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of Action or Load Value list", "Test_Sce_Description": "Verify that the SA Tool correctly identifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Peak hours fare payment after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Premium Service Route fare payment with Transfer where the Premium fare is higher than the Special Event fare", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Premium Service Route fare payment with Transfer where the Premium fare is lower than the Special Event fare", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Valid Non-Adult Concession processing", "Test_Sce_Description": "Verify that the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child, Non-discreet concession", "Description": "Verify that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, "Test Scenario 2": {"Test scenarios": "Handling of insufficient ePurse balance", "Description": "Verify that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, "Test Scenario 3": {"Test scenarios": "Processing of valid transfer product", "Description": "Verify that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."}, "Test Scenario 4": {"Test scenarios": "Inter-agency transfer processing", "Description": "Verify that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."}, "Test Scenario 5": {"Test scenarios": "Autoload threshold processing", "Description": "Verify that the SA Tool correctly checks that the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, "Test Scenario 6": {"Test scenarios": "Processing of Action or Load Value list", "Description": "Verify that the SA Tool correctly identifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, "Test Scenario 7": {"Test scenarios": "Peak hours fare payment after reaching Off Peak Daily Cap", "Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap."}, "Test Scenario 8": {"Test scenarios": "Premium Service Route fare payment with Transfer where the Premium fare is higher than the Special Event fare", "Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."}, "Test Scenario 9": {"Test scenarios": "Premium Service Route fare payment with Transfer where the Premium fare is lower than the Special Event fare", "Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."}, "Test Scenario 10": {"Test scenarios": "Valid Non-Adult Concession processing", "Description": "Verify that the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Processing Valid Transfer Product", "Test_Sce_Description": "Verify that the system correctly identifies a valid transfer product on the customer's TICKET and computes the free transfer. The system should follow the Transfer Product Processing rules as per [R6]."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Audio Messages Request", "Test_Sce_Description": "Verify that the system correctly processes the customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion. The audio message should be played in the default language of the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool", "Test_Sce_Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location, resulting in a regular ride balance fare payment and Transfer Product creation. The device should not differentiate between service class for CLIENT Ticket."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool", "Test_Sce_Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route, resulting in a free transfer. The device should not differentiate between service class for CLIENT Ticket."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Valid Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and processes a Valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly processes fare payment resulting from a failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen. The system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly identifies when the customer's ride balance is empty. The system should display a declined message to the customer and play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Low Battery Threshold", "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The application should switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Non-CLIENT Media", "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer's card is not CLIENT media. The system should display the device error message \u201cCard Read Error\u201d."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly identifies when the customer's TICKET is within the Anti-Passback Window. The system should display a declined message to the customer and play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly identifies when the customer's TICKET is not activated. The system should display a declined message to the customer and play the declined audio tone."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."}, "Test Scenario 2": {"Test scenarios": "Processing Valid Transfer Product", "Description": "Verify that the system correctly identifies a valid transfer product on the customer's TICKET and computes the free transfer. The system should follow the Transfer Product Processing rules as per [R6]."}, "Test Scenario 3": {"Test scenarios": "Audio Messages Request", "Description": "Verify that the system correctly processes the customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion. The audio message should be played in the default language of the customer's Farecard."}, "Test Scenario 4": {"Test scenarios": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool", "Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location, resulting in a regular ride balance fare payment and Transfer Product creation. The device should not differentiate between service class for CLIENT Ticket."}, "Test Scenario 5": {"Test scenarios": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool", "Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route, resulting in a free transfer. The device should not differentiate between service class for CLIENT Ticket."}, "Test Scenario 6": {"Test scenarios": "Valid Child Concession", "Description": "Verify that the system correctly identifies and processes a Valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, "Test Scenario 7": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly processes fare payment resulting from a failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen. The system should record both the fare payment and inspection transactions."}, "Test Scenario 8": {"Test scenarios": "Empty Ride Balance", "Description": "Verify that the system correctly identifies when the customer's ride balance is empty. The system should display a declined message to the customer and play the declined audio tone."}, "Test Scenario 9": {"Test scenarios": "Low Battery Threshold", "Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The application should switch to \u201cOut of Service\u201d mode."}, "Test Scenario 10": {"Test scenarios": "Non-CLIENT Media", "Description": "Verify that the system correctly handles a situation where the customer's card is not CLIENT media. The system should display the device error message \u201cCard Read Error\u201d."}, "Test Scenario 11": {"Test scenarios": "Anti-Passback Window", "Description": "Verify that the system correctly identifies when the customer's TICKET is within the Anti-Passback Window. The system should display a declined message to the customer and play the declined audio tone."}, "Test Scenario 12": {"Test scenarios": "Non-Activated Ticket", "Description": "Verify that the system correctly identifies when the customer's TICKET is not activated. The system should display a declined message to the customer and play the declined audio tone."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Valid Transfer Product", "Test_Sce_Description": "Verify that the SA Tool correctly computes the free transfer when the ticket has a valid Transfer Product and the tap is within the Transfer Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a Valid Child Concession on the customer's ticket and successfully completes the fare payment, displaying the correct screen and playing the correct audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that when an operator determines a customer has not paid a fare, the SA Tool correctly records both the fare payment and inspection transactions after the operator selects the payment function."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that when a customer's ride balance is empty, the SA Tool correctly detects this, declines the transaction, and displays the correct message and audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "Verify that when the device battery goes below the low battery threshold during a successful ticket tap, the application correctly switches to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "Verify that when a customer taps a card that is not CLIENT media, the SA Tool application does not respond and correctly displays the 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Verify that when a customer's ticket is within the Anti-Passback Window, the SA Tool correctly detects this, declines the transaction, and displays the correct message and audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that when a customer taps a non-activated ticket, the SA Tool correctly detects this, declines the transaction, and displays the correct message and audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Expired Ticket", "Test_Sce_Description": "Verify that when a customer taps an expired ticket, the SA Tool correctly detects this, declines the transaction, and displays the correct message and audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Period Pass", "Test_Sce_Description": "Verify that when a customer's ticket has a valid period pass, the SA Tool correctly computes the fare, updates the ticket, and displays the successful fare payment screen and audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Unreadable Ticket", "Test_Sce_Description": "Verify that when the SA Tool application detects a ticket and fails to read it correctly, the correct error handling processes are followed."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Valid Transfer Product", "Description": "Verify that the SA Tool correctly computes the free transfer when the ticket has a valid Transfer Product and the tap is within the Transfer Window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the SA Tool correctly identifies a Valid Child Concession on the customer's ticket and successfully completes the fare payment, displaying the correct screen and playing the correct audio tone."}, "Test Scenario 3": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that when an operator determines a customer has not paid a fare, the SA Tool correctly records both the fare payment and inspection transactions after the operator selects the payment function."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that when a customer's ride balance is empty, the SA Tool correctly detects this, declines the transaction, and displays the correct message and audio tone."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Low Battery", "Description": "Verify that when the device battery goes below the low battery threshold during a successful ticket tap, the application correctly switches to 'Out of Service' mode."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "Verify that when a customer taps a card that is not CLIENT media, the SA Tool application does not respond and correctly displays the 'Card Read Error' message."}, "Test Scenario 7": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Verify that when a customer's ticket is within the Anti-Passback Window, the SA Tool correctly detects this, declines the transaction, and displays the correct message and audio tone."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that when a customer taps a non-activated ticket, the SA Tool correctly detects this, declines the transaction, and displays the correct message and audio tone."}, "Test Scenario 9": {"Test scenarios": "Fare Payment with Expired Ticket", "Description": "Verify that when a customer taps an expired ticket, the SA Tool correctly detects this, declines the transaction, and displays the correct message and audio tone."}, "Test Scenario 10": {"Test scenarios": "Fare Payment with Period Pass", "Description": "Verify that when a customer's ticket has a valid period pass, the SA Tool correctly computes the fare, updates the ticket, and displays the successful fare payment screen and audio tone."}, "Test Scenario 11": {"Test scenarios": "Fare Payment with Unreadable Ticket", "Description": "Verify that when the SA Tool application detects a ticket and fails to read it correctly, the correct error handling processes are followed."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that has no ride balance remaining. The SA Tool should detect the empty ride balance, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "This scenario tests the performance of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5 of the Main Use Case. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a card that is not CLIENT media. The SA Tool should not respond and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that is within the Anti-Passback Window. The SA Tool should detect the Anti-Passback violation, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a non-activated TICKET. The SA Tool should detect the invalidity of the TICKET, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a locked Farecard. The SA Tool should read the Farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Unreadable TICKET", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with an unreadable TICKET. The SA Tool should detect the TICKET but fail to read it, indicate to the operator that the TICKET is unreadable, and log the error for troubleshooting."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that has a valid concession other than Adult or Child. The specific functionality to be tested will depend on the specific concession type."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that has no ride balance remaining. The SA Tool should detect the empty ride balance, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Low Battery", "Description": "This scenario tests the performance of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5 of the Main Use Case. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a card that is not CLIENT media. The SA Tool should not respond and display a 'Card Read Error' message."}, "Test Scenario 4": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that is within the Anti-Passback Window. The SA Tool should detect the Anti-Passback violation, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a non-activated TICKET. The SA Tool should detect the invalidity of the TICKET, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a locked Farecard. The SA Tool should read the Farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Unreadable TICKET", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with an unreadable TICKET. The SA Tool should detect the TICKET but fail to read it, indicate to the operator that the TICKET is unreadable, and log the error for troubleshooting."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Non-Adult, Non-Child Concession", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that has a valid concession other than Adult or Child. The specific functionality to be tested will depend on the specific concession type."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Low Battery Threshold Test", "Test_Sce_Description": "This scenario tests the functionality of the application when the battery level reaches the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Fare Payment Processing Test", "Test_Sce_Description": "This scenario tests the functionality of the application when processing a fare payment. The application should correctly compute the fare payment and update the customer's balance accordingly. If the customer's balance is insufficient, the application should display a declined message and the transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Card Read Error Test", "Test_Sce_Description": "This scenario tests the functionality of the application when a card that is not CLIENT media is tapped. The application should not respond and a 'Card Read Error' message should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Anti-Passback Window Test", "Test_Sce_Description": "This scenario tests the functionality of the application when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Non-Activated Ticket Test", "Test_Sce_Description": "This scenario tests the functionality of the application when a non-activated TICKET is tapped. The application should detect that the TICKET is not activated and display a declined message to the customer. The transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Performance Test", "Test_Sce_Description": "This scenario tests the performance of the application under various conditions such as high load, low battery, and poor network connectivity. The application should maintain its functionality and performance under these conditions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Security Test", "Test_Sce_Description": "This scenario tests the security features of the application such as data encryption, user authentication, and secure payment processing. The application should protect the user's data and prevent unauthorized access."}, {"Test Scenario 1": {"Test scenarios": "Low Battery Threshold Test", "Description": "This scenario tests the functionality of the application when the battery level reaches the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, "Test Scenario 2": {"Test scenarios": "Fare Payment Processing Test", "Description": "This scenario tests the functionality of the application when processing a fare payment. The application should correctly compute the fare payment and update the customer's balance accordingly. If the customer's balance is insufficient, the application should display a declined message and the transaction should not be conducted."}, "Test Scenario 3": {"Test scenarios": "Card Read Error Test", "Description": "This scenario tests the functionality of the application when a card that is not CLIENT media is tapped. The application should not respond and a 'Card Read Error' message should be displayed for a short period of time."}, "Test Scenario 4": {"Test scenarios": "Anti-Passback Window Test", "Description": "This scenario tests the functionality of the application when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted."}, "Test Scenario 5": {"Test scenarios": "Non-Activated Ticket Test", "Description": "This scenario tests the functionality of the application when a non-activated TICKET is tapped. The application should detect that the TICKET is not activated and display a declined message to the customer. The transaction should not be conducted."}, "Test Scenario 6": {"Test scenarios": "Performance Test", "Description": "This scenario tests the performance of the application under various conditions such as high load, low battery, and poor network connectivity. The application should maintain its functionality and performance under these conditions."}, "Test Scenario 7": {"Test scenarios": "Security Test", "Description": "This scenario tests the security features of the application such as data encryption, user authentication, and secure payment processing. The application should protect the user's data and prevent unauthorized access."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment using a card that is not CLIENT media. The SA Tool should not respond and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Empty Ride Balance", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment with a ticket that has an empty ride balance. The SA Tool should detect the empty ride balance, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Low Battery Threshold", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. The application should switch to 'Out of Service' mode after processing the fare payment if the low battery threshold is reached."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Anti-Passback Window", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The SA Tool should detect the Anti-Passback check failure, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment with a non-activated ticket. The SA Tool should detect the invalidity of the ticket, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Locked Farecard", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment with a locked farecard. The SA Tool should detect the locked farecard, display a declined message, and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Unreadable TICKET", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment with an unreadable TICKET. The SA Tool should detect the unreadable TICKET, display an error message, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Non-Adult, Non-Child Concession", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that has a valid non-adult, non-child concession. The SA Tool should detect the concession, display a successful fare payment screen, and conduct the transaction."}, {"Test Scenario 1": {"Test scenarios": "Validating Fare Payment with Non-CLIENT Media", "Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment using a card that is not CLIENT media. The SA Tool should not respond and display a 'Card Read Error' message."}, "Test Scenario 2": {"Test scenarios": "Validating Fare Payment with Empty Ride Balance", "Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment with a ticket that has an empty ride balance. The SA Tool should detect the empty ride balance, display a declined message, and not conduct the transaction."}, "Test Scenario 3": {"Test scenarios": "Validating Fare Payment with Low Battery Threshold", "Description": "This scenario will test the functionality of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. The application should switch to 'Out of Service' mode after processing the fare payment if the low battery threshold is reached."}, "Test Scenario 4": {"Test scenarios": "Validating Fare Payment with Anti-Passback Window", "Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The SA Tool should detect the Anti-Passback check failure, display a declined message, and not conduct the transaction."}, "Test Scenario 5": {"Test scenarios": "Validating Fare Payment with Non-Activated Ticket", "Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment with a non-activated ticket. The SA Tool should detect the invalidity of the ticket, display a declined message, and not conduct the transaction."}, "Test Scenario 6": {"Test scenarios": "Validating Fare Payment with Locked Farecard", "Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment with a locked farecard. The SA Tool should detect the locked farecard, display a declined message, and not proceed with the inspection."}, "Test Scenario 7": {"Test scenarios": "Validating Fare Payment with Unreadable TICKET", "Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment with an unreadable TICKET. The SA Tool should detect the unreadable TICKET, display an error message, and not conduct the transaction."}, "Test Scenario 8": {"Test scenarios": "Validating Fare Payment with Non-Adult, Non-Child Concession", "Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that has a valid non-adult, non-child concession. The SA Tool should detect the concession, display a successful fare payment screen, and conduct the transaction."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Anti-Passback Window Check", "Test_Sce_Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Timeout Functionality", "Test_Sce_Description": "Verify that the system correctly returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the ticket being within the Anti-Passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Ticket Validation Process", "Test_Sce_Description": "Verify that the system correctly performs all necessary validation checks when a ticket is tapped on the NFC card reader. This includes checking if the ticket is within the Anti-Passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Audio Tone Functionality", "Test_Sce_Description": "Verify that the system plays the correct audio tone (declined) when a transaction is declined due to the ticket being within the Anti-Passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Non-Activated Ticket Handling", "Test_Sce_Description": "Verify that the system correctly identifies a non-activated ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Expired Ticket Handling", "Test_Sce_Description": "Verify that the system correctly identifies an expired ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Period Pass Validation", "Test_Sce_Description": "Verify that the system correctly identifies a ticket with a valid period pass and accepts the fare. The system should display a successful fare payment screen and play a successful fare payment audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Ticket Update Process", "Test_Sce_Description": "Verify that the system correctly updates the ticket information after a successful fare payment using a period pass."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Low Battery Threshold Handling", "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the battery goes below the low battery threshold during a successful ticket tap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Non-CLIENT Media Handling", "Test_Sce_Description": "Verify that the system correctly identifies a card that is not CLIENT media and does not respond. The device error message 'Card Read Error' should be displayed for a short period of time."}, {"Test Scenario 1": {"Test scenarios": "Anti-Passback Window Check", "Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, "Test Scenario 2": {"Test scenarios": "Timeout Functionality", "Description": "Verify that the system correctly returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the ticket being within the Anti-Passback Window."}, "Test Scenario 3": {"Test scenarios": "Ticket Validation Process", "Description": "Verify that the system correctly performs all necessary validation checks when a ticket is tapped on the NFC card reader. This includes checking if the ticket is within the Anti-Passback Window."}, "Test Scenario 4": {"Test scenarios": "Audio Tone Functionality", "Description": "Verify that the system plays the correct audio tone (declined) when a transaction is declined due to the ticket being within the Anti-Passback Window."}, "Test Scenario 5": {"Test scenarios": "Non-Activated Ticket Handling", "Description": "Verify that the system correctly identifies a non-activated ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, "Test Scenario 6": {"Test scenarios": "Expired Ticket Handling", "Description": "Verify that the system correctly identifies an expired ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, "Test Scenario 7": {"Test scenarios": "Period Pass Validation", "Description": "Verify that the system correctly identifies a ticket with a valid period pass and accepts the fare. The system should display a successful fare payment screen and play a successful fare payment audio tone."}, "Test Scenario 8": {"Test scenarios": "Ticket Update Process", "Description": "Verify that the system correctly updates the ticket information after a successful fare payment using a period pass."}, "Test Scenario 9": {"Test scenarios": "Low Battery Threshold Handling", "Description": "Verify that the system correctly switches to 'Out of Service' mode when the battery goes below the low battery threshold during a successful ticket tap."}, "Test Scenario 10": {"Test scenarios": "Non-CLIENT Media Handling", "Description": "Verify that the system correctly identifies a card that is not CLIENT media and does not respond. The device error message 'Card Read Error' should be displayed for a short period of time."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a non-activated ticket. The system should display a declined message, not conduct the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a ticket with an empty ride balance. The system should display a declined message, not conduct the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a card that is not CLIENT media. The system should not respond, but display a 'Card Read Error' message for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should display a declined message, not conduct the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a locked farecard. The system should display a declined screen to the operator and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Unreadable Ticket", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using an unreadable ticket. The system should indicate to the operator that the ticket is unreadable. If the customer taps the NFC reader again and the tap is successful, the system should proceed with steps 4-9. If the tap is unsuccessful, the system should indicate to the operator that the ticket is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a ticket with a valid non-adult, non-child concession. The system should process the fare payment accordingly."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a non-activated ticket. The system should display a declined message, not conduct the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a ticket with an empty ride balance. The system should display a declined message, not conduct the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Low Battery", "Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a card that is not CLIENT media. The system should not respond, but display a 'Card Read Error' message for a short period of time."}, "Test Scenario 5": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should display a declined message, not conduct the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a locked farecard. The system should display a declined screen to the operator and not proceed with the inspection."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Unreadable Ticket", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using an unreadable ticket. The system should indicate to the operator that the ticket is unreadable. If the customer taps the NFC reader again and the tap is successful, the system should proceed with steps 4-9. If the tap is unsuccessful, the system should indicate to the operator that the ticket is unreadable."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a ticket with a valid non-adult, non-child concession. The system should process the fare payment accordingly."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service class and the farecard has a valid special event transfer product and the tap is within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made and the farecard has a valid special event transfer product and the tap is within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the farecard has a valid non-adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the farecard has a valid child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Performance of Fare Payment", "Test_Sce_Description": "Verify that the system performs the fare payment process within the acceptable time limit under varying loads."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Security of Fare Payment", "Test_Sce_Description": "Verify that the system securely processes the fare payment and does not expose any sensitive information during the process."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service class and the farecard has a valid special event transfer product and the tap is within the transfer window."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made and the farecard has a valid special event transfer product and the tap is within the transfer window."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the farecard has a valid non-adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the farecard has a valid child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, "Test Scenario 7": {"Test scenarios": "Performance of Fare Payment", "Description": "Verify that the system performs the fare payment process within the acceptable time limit under varying loads."}, "Test Scenario 8": {"Test scenarios": "Security of Fare Payment", "Description": "Verify that the system securely processes the fare payment and does not expose any sensitive information during the process."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Premium Service Route with Higher Fare", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The premium fare should be higher than the Special Event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Deduction Communication", "Test_Sce_Description": "Verify that the fare deduction is correctly communicated back to the SA Tool after the ATS computes and deducts the fare from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Transfer Print Status Display", "Test_Sce_Description": "Verify that the SA Tool sets the POP Print Flag to 0 and accurately displays the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Peak Hour Fare Payment after Off Peak Cap", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a customer taps during peak hours after previously reaching off peak daily cap outside the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Premium Service Route with Lower Fare", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The premium fare should be lower than the Special Event fare, resulting in a free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Non-Adult Concession Fare Payment", "Test_Sce_Description": "Verify that the system correctly identifies a valid Non-Adult concession on the customer's Farecard and deducts the appropriate fare from the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Child Concession Fare Payment", "Test_Sce_Description": "Verify that the system correctly identifies a valid Child concession on the customer's Farecard and deducts the appropriate fare from the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment after Failed Inspection", "Test_Sce_Description": "Verify that the system correctly processes a fare payment after the operator determines that the customer has not paid a fare during an inspection. The SA Tool should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Performance Test", "Test_Sce_Description": "Verify that the system performs efficiently under high load, such as during peak hours when multiple fare payments are being processed simultaneously."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Security Test", "Test_Sce_Description": "Verify that the system securely processes fare payments, ensuring that customer data is protected and that unauthorized access is prevented."}, {"Test Scenario 1": {"Test scenarios": "Premium Service Route with Higher Fare", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The premium fare should be higher than the Special Event fare."}, "Test Scenario 2": {"Test scenarios": "Fare Deduction Communication", "Description": "Verify that the fare deduction is correctly communicated back to the SA Tool after the ATS computes and deducts the fare from the Virtual Card E-Purse."}, "Test Scenario 3": {"Test scenarios": "Transfer Print Status Display", "Description": "Verify that the SA Tool sets the POP Print Flag to 0 and accurately displays the transfer print status if the farecard is queried."}, "Test Scenario 4": {"Test scenarios": "Peak Hour Fare Payment after Off Peak Cap", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a customer taps during peak hours after previously reaching off peak daily cap outside the transfer window."}, "Test Scenario 5": {"Test scenarios": "Premium Service Route with Lower Fare", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The premium fare should be lower than the Special Event fare, resulting in a free transfer."}, "Test Scenario 6": {"Test scenarios": "Non-Adult Concession Fare Payment", "Description": "Verify that the system correctly identifies a valid Non-Adult concession on the customer's Farecard and deducts the appropriate fare from the ePurse balance."}, "Test Scenario 7": {"Test scenarios": "Child Concession Fare Payment", "Description": "Verify that the system correctly identifies a valid Child concession on the customer's Farecard and deducts the appropriate fare from the ePurse balance."}, "Test Scenario 8": {"Test scenarios": "Fare Payment after Failed Inspection", "Description": "Verify that the system correctly processes a fare payment after the operator determines that the customer has not paid a fare during an inspection. The SA Tool should record both the fare payment and inspection transactions."}, "Test Scenario 9": {"Test scenarios": "Performance Test", "Description": "Verify that the system performs efficiently under high load, such as during peak hours when multiple fare payments are being processed simultaneously."}, "Test Scenario 10": {"Test scenarios": "Security Test", "Description": "Verify that the system securely processes fare payments, ensuring that customer data is protected and that unauthorized access is prevented."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Premium Service Route with Transfer where Premium fare is higher than Special Event fare", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare upgrade from the ePurse balance when a tap is made on a premium service route after previously riding on a Special Event service route within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Premium Service Route with Transfer where Premium fare is lower than Special Event fare", "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a tap is made on a premium service route after previously riding on a Special Event service route within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Valid Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when the customer's farecard has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Valid Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the Child Concession fare from the ePurse balance when the customer's farecard has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when the operator determines that the customer has not paid a fare during inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Performance of the SA Tool", "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay when computing and deducting fares from the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Security of the SA Tool", "Test_Sce_Description": "Verify that the SA Tool securely processes fare payments and protects customer's ePurse balance and personal information."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Premium Service Route with Transfer where Premium fare is higher than Special Event fare", "Description": "Verify that the system correctly computes and deducts the fare upgrade from the ePurse balance when a tap is made on a premium service route after previously riding on a Special Event service route within the transfer window."}, "Test Scenario 3": {"Test scenarios": "Premium Service Route with Transfer where Premium fare is lower than Special Event fare", "Description": "Verify that the system correctly computes and provides a free transfer when a tap is made on a premium service route after previously riding on a Special Event service route within the transfer window."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Valid Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when the customer's farecard has a valid Non-Adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Valid Child Concession", "Description": "Verify that the system correctly computes and deducts the Child Concession fare from the ePurse balance when the customer's farecard has a valid Child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when the operator determines that the customer has not paid a fare during inspection."}, "Test Scenario 7": {"Test scenarios": "Performance of the SA Tool", "Description": "Verify that the SA Tool performs efficiently and without delay when computing and deducting fares from the ePurse balance."}, "Test Scenario 8": {"Test scenarios": "Security of the SA Tool", "Description": "Verify that the SA Tool securely processes fare payments and protects customer's ePurse balance and personal information."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession", "Test_Sce_Description": "Verify that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of insufficient ePurse balance", "Test_Sce_Description": "Verify that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of valid transfer product", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Inter-agency transfer processing", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies, and deducts the appropriate fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Autoload threshold processing", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold, and adds the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Action or Load Value list processing", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the customer's Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Peak hours fare payment after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Premium Service Route fare payment with valid Special Event Transfer Product", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Valid Non-Adult Concession processing", "Test_Sce_Description": "Verify that the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child, Non-discreet concession", "Description": "Verify that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, "Test Scenario 2": {"Test scenarios": "Handling of insufficient ePurse balance", "Description": "Verify that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, "Test Scenario 3": {"Test scenarios": "Processing of valid transfer product", "Description": "Verify that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."}, "Test Scenario 4": {"Test scenarios": "Inter-agency transfer processing", "Description": "Verify that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies, and deducts the appropriate fare."}, "Test Scenario 5": {"Test scenarios": "Autoload threshold processing", "Description": "Verify that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold, and adds the Autoload amount to the ePurse balance."}, "Test Scenario 6": {"Test scenarios": "Action or Load Value list processing", "Description": "Verify that the SA Tool correctly identifies when the customer's Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, "Test Scenario 7": {"Test scenarios": "Peak hours fare payment after reaching Off Peak Daily Cap", "Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap."}, "Test Scenario 8": {"Test scenarios": "Premium Service Route fare payment with valid Special Event Transfer Product", "Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."}, "Test Scenario 9": {"Test scenarios": "Valid Non-Adult Concession processing", "Description": "Verify that the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Transfer Product", "Test_Sce_Description": "Verify that the system correctly identifies a valid transfer product on the customer's TICKET and computes the free transfer. The system should follow the Transfer Product Processing rules as per [R6]."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Audio Messages Request", "Test_Sce_Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion. The audio message should be played in the default language of the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool", "Test_Sce_Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location, resulting in a regular ride balance fare payment and Transfer Product creation. The device should not differentiate between service class for CLIENT Ticket."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool", "Test_Sce_Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route, resulting in a free transfer. The device should not differentiate between service class for CLIENT Ticket."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Valid Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and processes a Valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly processes a fare payment resulting from a failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen. The system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly identifies and processes a TICKET with no Ride Balance remaining. The system should display a declined message to the customer and play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Low Battery Threshold", "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should switch to \u201cOut of Service\u201d mode if the low battery threshold is reached before Step 5. Else, the customers fare payment should be processed as per Step 5 and then the application should switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Non-CLIENT Media", "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer taps a card that is not CLIENT media. The system should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly identifies and processes a TICKET that is within the Anti-Passback Window. The system should display a declined message to the customer and play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly identifies and processes a non-activated TICKET. The system should display a declined message to the customer and play the declined audio tone."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."}, "Test Scenario 2": {"Test scenarios": "Validating Transfer Product", "Description": "Verify that the system correctly identifies a valid transfer product on the customer's TICKET and computes the free transfer. The system should follow the Transfer Product Processing rules as per [R6]."}, "Test Scenario 3": {"Test scenarios": "Audio Messages Request", "Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion. The audio message should be played in the default language of the customer's Farecard."}, "Test Scenario 4": {"Test scenarios": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool", "Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location, resulting in a regular ride balance fare payment and Transfer Product creation. The device should not differentiate between service class for CLIENT Ticket."}, "Test Scenario 5": {"Test scenarios": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool", "Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route, resulting in a free transfer. The device should not differentiate between service class for CLIENT Ticket."}, "Test Scenario 6": {"Test scenarios": "Valid Child Concession", "Description": "Verify that the system correctly identifies and processes a Valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, "Test Scenario 7": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly processes a fare payment resulting from a failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen. The system should record both the fare payment and inspection transactions."}, "Test Scenario 8": {"Test scenarios": "Empty Ride Balance", "Description": "Verify that the system correctly identifies and processes a TICKET with no Ride Balance remaining. The system should display a declined message to the customer and play the declined audio tone."}, "Test Scenario 9": {"Test scenarios": "Low Battery Threshold", "Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should switch to \u201cOut of Service\u201d mode if the low battery threshold is reached before Step 5. Else, the customers fare payment should be processed as per Step 5 and then the application should switch to \u201cOut of Service\u201d mode."}, "Test Scenario 10": {"Test scenarios": "Non-CLIENT Media", "Description": "Verify that the system correctly handles a situation where the customer taps a card that is not CLIENT media. The system should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, "Test Scenario 11": {"Test scenarios": "Anti-Passback Window", "Description": "Verify that the system correctly identifies and processes a TICKET that is within the Anti-Passback Window. The system should display a declined message to the customer and play the declined audio tone."}, "Test Scenario 12": {"Test scenarios": "Non-Activated Ticket", "Description": "Verify that the system correctly identifies and processes a non-activated TICKET. The system should display a declined message to the customer and play the declined audio tone."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Valid Transfer Product", "Test_Sce_Description": "Verify that the SA Tool correctly computes the free transfer when the ticket has a valid Transfer Product and the tap is within the Transfer Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a Valid Child Concession on the customer's ticket and displays the successful Child fare payment screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the SA Tool correctly records both the fare payment and inspection transactions when the operator determines that the customer has not paid a fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ride balance is empty and displays a declined message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "Verify that the SA Tool correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful ticket tap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "Verify that the SA Tool correctly displays a 'Card Read Error' message when the customer's card is not CLIENT media."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ticket is within the Anti-Passback Window and displays a declined message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ticket is not activated and displays a declined message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Expired Ticket", "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ticket is expired and displays a declined message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Period Pass", "Test_Sce_Description": "Verify that the SA Tool correctly computes that the ticket has a valid period pass and accepts the fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Unreadable Ticket", "Test_Sce_Description": "Verify that the SA Tool correctly detects when the ticket is unreadable and fails to read it correctly."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Valid Transfer Product", "Description": "Verify that the SA Tool correctly computes the free transfer when the ticket has a valid Transfer Product and the tap is within the Transfer Window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the SA Tool correctly identifies a Valid Child Concession on the customer's ticket and displays the successful Child fare payment screen."}, "Test Scenario 3": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the SA Tool correctly records both the fare payment and inspection transactions when the operator determines that the customer has not paid a fare."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the SA Tool correctly detects when the customer's ride balance is empty and displays a declined message."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Low Battery", "Description": "Verify that the SA Tool correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful ticket tap."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "Verify that the SA Tool correctly displays a 'Card Read Error' message when the customer's card is not CLIENT media."}, "Test Scenario 7": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Verify that the SA Tool correctly detects when the customer's ticket is within the Anti-Passback Window and displays a declined message."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that the SA Tool correctly detects when the customer's ticket is not activated and displays a declined message."}, "Test Scenario 9": {"Test scenarios": "Fare Payment with Expired Ticket", "Description": "Verify that the SA Tool correctly detects when the customer's ticket is expired and displays a declined message."}, "Test Scenario 10": {"Test scenarios": "Fare Payment with Period Pass", "Description": "Verify that the SA Tool correctly computes that the ticket has a valid period pass and accepts the fare."}, "Test Scenario 11": {"Test scenarios": "Fare Payment with Unreadable Ticket", "Description": "Verify that the SA Tool correctly detects when the ticket is unreadable and fails to read it correctly."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that has no ride balance remaining. The SA Tool should detect the empty ride balance, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "This scenario tests the performance of the SA Tool when the device battery goes below the low battery threshold during a fare payment. The SA Tool should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed. If the threshold is reached after the fare payment is processed, the application should complete the transaction and then switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a card that is not CLIENT media. The SA Tool should not respond and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that is within the Anti-Passback Window. The SA Tool should detect the Anti-Passback violation, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a non-activated TICKET. The SA Tool should detect the invalidity of the TICKET, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a locked farecard. The SA Tool should read the farecard, detect that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Unreadable TICKET", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with an unreadable TICKET. The SA Tool should detect the TICKET but fail to read it, indicate to the operator that the TICKET is unreadable, and log the error for troubleshooting."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a valid Non-Adult, Non-Child concession attempts to make a fare payment. The SA Tool should process the concession accordingly."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that has no ride balance remaining. The SA Tool should detect the empty ride balance, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Low Battery", "Description": "This scenario tests the performance of the SA Tool when the device battery goes below the low battery threshold during a fare payment. The SA Tool should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed. If the threshold is reached after the fare payment is processed, the application should complete the transaction and then switch to 'Out of Service' mode."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a card that is not CLIENT media. The SA Tool should not respond and display a 'Card Read Error' message."}, "Test Scenario 4": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that is within the Anti-Passback Window. The SA Tool should detect the Anti-Passback violation, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a non-activated TICKET. The SA Tool should detect the invalidity of the TICKET, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a locked farecard. The SA Tool should read the farecard, detect that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Unreadable TICKET", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with an unreadable TICKET. The SA Tool should detect the TICKET but fail to read it, indicate to the operator that the TICKET is unreadable, and log the error for troubleshooting."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Non-Adult, Non-Child Concession", "Description": "This scenario tests the functionality of the SA Tool when a customer with a valid Non-Adult, Non-Child concession attempts to make a fare payment. The SA Tool should process the concession accordingly."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Low Battery Threshold Test", "Test_Sce_Description": "This scenario tests the functionality of the application when the battery level goes below the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Card Read Error Test", "Test_Sce_Description": "This scenario tests the application's response when a customer taps a card that is not CLIENT media. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Anti-Passback Window Test", "Test_Sce_Description": "This scenario tests the application's response when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Non-Activated Ticket Test", "Test_Sce_Description": "This scenario tests the application's response when a customer taps a non-activated TICKET. The application should detect that the TICKET is not activated and display an error message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Empty Ride Balance Test", "Test_Sce_Description": "This scenario tests the application's response when a customer's ride balance is empty. The SA Tool should detect that the Ride Balance is empty and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Valid Child Concession Test", "Test_Sce_Description": "This scenario tests the application's response when a customer's TICKET has a Valid Child concession. A Valid Child Concession should be found and the SA Tool should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Failed Inspection Test", "Test_Sce_Description": "This scenario tests the application's response when the operator inspects a customer's TICKET and determines that they have not paid a fare. The operator should select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."}, {"Test Scenario 1": {"Test scenarios": "Low Battery Threshold Test", "Description": "This scenario tests the functionality of the application when the battery level goes below the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, "Test Scenario 2": {"Test scenarios": "Card Read Error Test", "Description": "This scenario tests the application's response when a customer taps a card that is not CLIENT media. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, "Test Scenario 3": {"Test scenarios": "Anti-Passback Window Test", "Description": "This scenario tests the application's response when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, "Test Scenario 4": {"Test scenarios": "Non-Activated Ticket Test", "Description": "This scenario tests the application's response when a customer taps a non-activated TICKET. The application should detect that the TICKET is not activated and display an error message to the customer."}, "Test Scenario 5": {"Test scenarios": "Empty Ride Balance Test", "Description": "This scenario tests the application's response when a customer's ride balance is empty. The SA Tool should detect that the Ride Balance is empty and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, "Test Scenario 6": {"Test scenarios": "Valid Child Concession Test", "Description": "This scenario tests the application's response when a customer's TICKET has a Valid Child concession. A Valid Child Concession should be found and the SA Tool should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, "Test Scenario 7": {"Test scenarios": "Failed Inspection Test", "Description": "This scenario tests the application's response when the operator inspects a customer's TICKET and determines that they have not paid a fare. The operator should select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Non-CLIENT Media Card", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Empty Ride Balance", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that has an empty ride balance. The system should detect the empty ride balance, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Low Battery Threshold", "Test_Sce_Description": "This scenario is to validate the system's response when the device's battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Locked Farecard", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a locked farecard. The system should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Unreadable TICKET", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with an unreadable TICKET. The system should detect the TICKET but fail to read it, and indicate to the operator that the TICKET is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Non-Adult, Non-Child Concession", "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a valid non-adult, non-child concession tries to make a fare payment. The system should process the fare payment accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with TICKET in Anti-Passback Window", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a TICKET that is within the Anti-Passback Window. The system should detect that the TICKET fails the Anti-Passback checks, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Non-Activated TICKET", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a non-activated TICKET. The system should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, detect that the farecard is in overdraft, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Failed Inspection", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment after a failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen, and the system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Valid Child Concession", "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a valid child concession tries to make a fare payment. The system should find the valid child concession, display the successful child fare payment screen, and play the successful fare payment audio tone for child concession."}, {"Test Scenario 1": {"Test scenarios": "Validating Fare Payment with Non-CLIENT Media Card", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, "Test Scenario 2": {"Test scenarios": "Validating Fare Payment with Empty Ride Balance", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that has an empty ride balance. The system should detect the empty ride balance, display a declined message, and not conduct the transaction."}, "Test Scenario 3": {"Test scenarios": "Validating Fare Payment with Low Battery Threshold", "Description": "This scenario is to validate the system's response when the device's battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."}, "Test Scenario 4": {"Test scenarios": "Validating Fare Payment with Locked Farecard", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a locked farecard. The system should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, "Test Scenario 5": {"Test scenarios": "Validating Fare Payment with Unreadable TICKET", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with an unreadable TICKET. The system should detect the TICKET but fail to read it, and indicate to the operator that the TICKET is unreadable."}, "Test Scenario 6": {"Test scenarios": "Validating Fare Payment with Non-Adult, Non-Child Concession", "Description": "This scenario is to validate the system's response when a customer with a valid non-adult, non-child concession tries to make a fare payment. The system should process the fare payment accordingly."}, "Test Scenario 7": {"Test scenarios": "Validating Fare Payment with TICKET in Anti-Passback Window", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a TICKET that is within the Anti-Passback Window. The system should detect that the TICKET fails the Anti-Passback checks, display a declined message, and not conduct the transaction."}, "Test Scenario 8": {"Test scenarios": "Validating Fare Payment with Non-Activated TICKET", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a non-activated TICKET. The system should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, detect that the farecard is in overdraft, display a declined message, and not conduct the transaction."}, "Test Scenario 9": {"Test scenarios": "Validating Fare Payment with Failed Inspection", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment after a failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen, and the system should record both the fare payment and inspection transactions."}, "Test Scenario 10": {"Test scenarios": "Validating Fare Payment with Valid Child Concession", "Description": "This scenario is to validate the system's response when a customer with a valid child concession tries to make a fare payment. The system should find the valid child concession, display the successful child fare payment screen, and play the successful fare payment audio tone for child concession."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Anti-Passback Window Check", "Test_Sce_Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Timeout Functionality", "Test_Sce_Description": "Verify that the system returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the ticket being within the Anti-Passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Ticket Validation", "Test_Sce_Description": "Verify that the system correctly validates the ticket during the Anti-Passback Window check. The system should correctly identify the ticket status and decline the transaction if it is within the Anti-Passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Audio Tone Functionality", "Test_Sce_Description": "Verify that the system plays the correct declined audio tone when a transaction is declined due to the ticket being within the Anti-Passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Exception Flow - Low Battery Threshold", "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful ticket tap. The system should process the fare payment if the threshold is reached after Step 5 and then switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Exception Flow - Non-CLIENT Media", "Test_Sce_Description": "Verify that the system correctly identifies a non-CLIENT media card and does not respond to the tap. The device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Alternate Flow - Unreadable Ticket", "Test_Sce_Description": "Verify that the system correctly identifies an unreadable ticket and fails to read it correctly. The system should display a declined message to the customer and play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Alternate Flow - Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly identifies a non-activated ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Performance - Multiple Transactions", "Test_Sce_Description": "Verify that the system can handle multiple transactions in quick succession without any performance degradation. The system should correctly process each transaction and display the appropriate messages."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Security - Unauthorized Access", "Test_Sce_Description": "Verify that the system prevents unauthorized access to the SA Tool application. Only operators who are signed-in to the application in the revenue mode should be able to access the payment function."}, {"Test Scenario 1": {"Test scenarios": "Anti-Passback Window Check", "Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, "Test Scenario 2": {"Test scenarios": "Timeout Functionality", "Description": "Verify that the system returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the ticket being within the Anti-Passback Window."}, "Test Scenario 3": {"Test scenarios": "Ticket Validation", "Description": "Verify that the system correctly validates the ticket during the Anti-Passback Window check. The system should correctly identify the ticket status and decline the transaction if it is within the Anti-Passback Window."}, "Test Scenario 4": {"Test scenarios": "Audio Tone Functionality", "Description": "Verify that the system plays the correct declined audio tone when a transaction is declined due to the ticket being within the Anti-Passback Window."}, "Test Scenario 5": {"Test scenarios": "Exception Flow - Low Battery Threshold", "Description": "Verify that the system correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful ticket tap. The system should process the fare payment if the threshold is reached after Step 5 and then switch to 'Out of Service' mode."}, "Test Scenario 6": {"Test scenarios": "Exception Flow - Non-CLIENT Media", "Description": "Verify that the system correctly identifies a non-CLIENT media card and does not respond to the tap. The device error message 'Card Read Error' should be displayed for a short period of time."}, "Test Scenario 7": {"Test scenarios": "Alternate Flow - Unreadable Ticket", "Description": "Verify that the system correctly identifies an unreadable ticket and fails to read it correctly. The system should display a declined message to the customer and play a declined audio tone."}, "Test Scenario 8": {"Test scenarios": "Alternate Flow - Non-Activated Ticket", "Description": "Verify that the system correctly identifies a non-activated ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, "Test Scenario 9": {"Test scenarios": "Performance - Multiple Transactions", "Description": "Verify that the system can handle multiple transactions in quick succession without any performance degradation. The system should correctly process each transaction and display the appropriate messages."}, "Test Scenario 10": {"Test scenarios": "Security - Unauthorized Access", "Description": "Verify that the system prevents unauthorized access to the SA Tool application. Only operators who are signed-in to the application in the revenue mode should be able to access the payment function."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a non-activated ticket. The system should detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should detect that the ride balance is empty and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Low Battery Threshold", "Test_Sce_Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-CLIENT Media Card", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should detect that the ticket fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a locked farecard. The system should read the farecard, determine that it is locked, display a declined screen to the operator and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Unreadable Ticket", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with an unreadable ticket. The system should detect the ticket but fail to read it, indicating to the operator that the ticket is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a ticket that has a valid non-adult, non-child concession. The system should process the fare payment accordingly."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a non-activated ticket. The system should detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should detect that the ride balance is empty and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Low Battery Threshold", "Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-CLIENT Media Card", "Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, "Test Scenario 5": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should detect that the ticket fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a locked farecard. The system should read the farecard, determine that it is locked, display a declined screen to the operator and not proceed with the inspection."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Unreadable Ticket", "Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with an unreadable ticket. The system should detect the ticket but fail to read it, indicating to the operator that the ticket is unreadable."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a ticket that has a valid non-adult, non-child concession. The system should process the fare payment accordingly."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Virtual Card Unreadable", "Test_Sce_Description": "Verify that the SA Tool application correctly detects and handles a situation where the Virtual Card is unreadable. The application should indicate to the operator that the Virtual Card is unreadable and prompt the customer to tap on the NFC reader again."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Successful Tap After Unreadable Card", "Test_Sce_Description": "Verify that if the customer taps the NFC reader again after an unreadable card error, the application correctly reads the card and proceeds with steps 4-7 of the main use case."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Unsuccessful Tap After Unreadable Card", "Test_Sce_Description": "Verify that if the customer taps the NFC reader again after an unreadable card error and the tap is still unsuccessful, the application correctly indicates to the operator that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Non-Adult, Non-Child, Non-Discreet Concessions", "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the customer's Virtual Card has a valid non-adult, non-child, non-discreet concession. The application should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "ePurse Balance Less Than Fare Amount", "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the customer's ePurse balance is less than the fare amount. The application should send the tap to ATS for processing, which should remove the fare from the Virtual Card e-Purse and put the card into overdraft."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Valid Intra-SP Transfer Product", "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the customer's Virtual Card has a valid intra-agency transfer product. The application should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Valid Inter-SP Transfer Product", "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the customer's Virtual Card has a valid inter-agency transfer product. The application should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Expired Period Pass with Sufficient ePurse Balance", "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the customer's Virtual Card has an expired period pass and the ePurse balance is more than the fare amount. The application should detect that the Period Pass has expired, compute the value to be deducted from the e-Purse, and deduct the fare accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Expired Period Pass with Insufficient ePurse Balance", "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the customer's Virtual Card has an expired period pass and the ePurse balance is less than the fare amount. The application should detect that the Period Pass has expired, compute the value to be deducted from the e-Purse, and deduct the fare accordingly, putting the Virtual Card into overdraft."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Customer Requests Audio Messages", "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the customer requests audio messages for fare payment. The operator should be able to enable audio mode and adjust the volume level using the physical device buttons at the customer's discretion."}, {"Test Scenario 1": {"Test scenarios": "Virtual Card Unreadable", "Description": "Verify that the SA Tool application correctly detects and handles a situation where the Virtual Card is unreadable. The application should indicate to the operator that the Virtual Card is unreadable and prompt the customer to tap on the NFC reader again."}, "Test Scenario 2": {"Test scenarios": "Successful Tap After Unreadable Card", "Description": "Verify that if the customer taps the NFC reader again after an unreadable card error, the application correctly reads the card and proceeds with steps 4-7 of the main use case."}, "Test Scenario 3": {"Test scenarios": "Unsuccessful Tap After Unreadable Card", "Description": "Verify that if the customer taps the NFC reader again after an unreadable card error and the tap is still unsuccessful, the application correctly indicates to the operator that the Virtual Card is unreadable."}, "Test Scenario 4": {"Test scenarios": "Non-Adult, Non-Child, Non-Discreet Concessions", "Description": "Verify that the SA Tool correctly handles a situation where the customer's Virtual Card has a valid non-adult, non-child, non-discreet concession. The application should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, "Test Scenario 5": {"Test scenarios": "ePurse Balance Less Than Fare Amount", "Description": "Verify that the SA Tool correctly handles a situation where the customer's ePurse balance is less than the fare amount. The application should send the tap to ATS for processing, which should remove the fare from the Virtual Card e-Purse and put the card into overdraft."}, "Test Scenario 6": {"Test scenarios": "Valid Intra-SP Transfer Product", "Description": "Verify that the SA Tool correctly handles a situation where the customer's Virtual Card has a valid intra-agency transfer product. The application should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, "Test Scenario 7": {"Test scenarios": "Valid Inter-SP Transfer Product", "Description": "Verify that the SA Tool correctly handles a situation where the customer's Virtual Card has a valid inter-agency transfer product. The application should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, "Test Scenario 8": {"Test scenarios": "Expired Period Pass with Sufficient ePurse Balance", "Description": "Verify that the SA Tool correctly handles a situation where the customer's Virtual Card has an expired period pass and the ePurse balance is more than the fare amount. The application should detect that the Period Pass has expired, compute the value to be deducted from the e-Purse, and deduct the fare accordingly."}, "Test Scenario 9": {"Test scenarios": "Expired Period Pass with Insufficient ePurse Balance", "Description": "Verify that the SA Tool correctly handles a situation where the customer's Virtual Card has an expired period pass and the ePurse balance is less than the fare amount. The application should detect that the Period Pass has expired, compute the value to be deducted from the e-Purse, and deduct the fare accordingly, putting the Virtual Card into overdraft."}, "Test Scenario 10": {"Test scenarios": "Customer Requests Audio Messages", "Description": "Verify that the SA Tool correctly handles a situation where the customer requests audio messages for fare payment. The operator should be able to enable audio mode and adjust the volume level using the physical device buttons at the customer's discretion."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Testing the functionality of the SA Tool when the Virtual Card is unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it detects a Virtual Card but is unable to read it. The test will verify if the SA Tool application correctly indicates to the operator that the Virtual Card is unreadable. The test will also check if the customer can tap on the NFC reader again and if the SA Tool application correctly indicates to the operator that the CLIENT (Virtual) Card is unreadable when the tap is unsuccessful."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Testing the functionality of the SA Tool when the customer has a concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The test will verify if the SA Tool shows the successful fare payment screen for non-adult concession, plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Testing the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount. The test will verify if the device sends the tap to ATS for processing, if ATS checks the online hotlist and completes the fare processing, if ATS removes the fare from the Virtual Card e-Purse and puts the card into overdraft, and if the right to travel is conferred to the Cardholder by updating the Virtual Card accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Testing the functionality of the SA Tool when the transaction is within Intra-SP Transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product. The test will verify if ATS reads that the Virtual Card contains a valid intra-agency transfer product and deducts $0 from the Virtual Card E-Purse, and if this is communicated back to the device."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Testing the functionality of the SA Tool when the transaction is within Inter-SP Transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product from other service provider. The test will verify if ATS reads that the Virtual Card contains a valid inter-agency transfer product and deducts $0 from the Virtual Card E-Purse, and if this is communicated back to the device."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Testing the functionality of the SA Tool when the customer requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer requests Audio Messages. The test will verify if the SA Tool plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Test Scenario 1": {"Test scenarios": "Testing the functionality of the SA Tool when the Virtual Card is unreadable", "Description": "This scenario tests the functionality of the SA Tool when it detects a Virtual Card but is unable to read it. The test will verify if the SA Tool application correctly indicates to the operator that the Virtual Card is unreadable. The test will also check if the customer can tap on the NFC reader again and if the SA Tool application correctly indicates to the operator that the CLIENT (Virtual) Card is unreadable when the tap is unsuccessful."}, "Test Scenario 2": {"Test scenarios": "Testing the functionality of the SA Tool when the customer has a concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The test will verify if the SA Tool shows the successful fare payment screen for non-adult concession, plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, "Test Scenario 3": {"Test scenarios": "Testing the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount", "Description": "This scenario tests the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount. The test will verify if the device sends the tap to ATS for processing, if ATS checks the online hotlist and completes the fare processing, if ATS removes the fare from the Virtual Card e-Purse and puts the card into overdraft, and if the right to travel is conferred to the Cardholder by updating the Virtual Card accordingly."}, "Test Scenario 4": {"Test scenarios": "Testing the functionality of the SA Tool when the transaction is within Intra-SP Transfer window", "Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product. The test will verify if ATS reads that the Virtual Card contains a valid intra-agency transfer product and deducts $0 from the Virtual Card E-Purse, and if this is communicated back to the device."}, "Test Scenario 5": {"Test scenarios": "Testing the functionality of the SA Tool when the transaction is within Inter-SP Transfer window", "Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product from other service provider. The test will verify if ATS reads that the Virtual Card contains a valid inter-agency transfer product and deducts $0 from the Virtual Card E-Purse, and if this is communicated back to the device."}, "Test Scenario 6": {"Test scenarios": "Testing the functionality of the SA Tool when the customer requests Audio Messages", "Description": "This scenario tests the functionality of the SA Tool when the customer requests Audio Messages. The test will verify if the SA Tool plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Virtual Card Unreadable", "Test_Sce_Description": "Test the scenario where the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer will tap on the NFC reader again. If the tap is unsuccessful, the SA Tool application should indicate to the operator that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions", "Test_Sce_Description": "Test the scenario where the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "ePurse Balance Less Than the Fare Amount", "Test_Sce_Description": "Test the scenario where the customer's ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly. The device should provide the appropriate feedback to the Cardholder of a successful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Transaction within Intra-SP Transfer window", "Test_Sce_Description": "Test the scenario where the customer's Virtual Card has a valid transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card, the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Transaction within Inter-SP Transfer window", "Test_Sce_Description": "Test the scenario where the customer's Virtual Card has a valid transfer product from other service provider and a transfer agreement between the service providers has been established. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card; the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Payment by e-Purse", "Test_Sce_Description": "Test the scenario where the customer wants to pay with their e-purse balance. The operator should place the customer\u2019s Farecard on the NFC card reader and select to pay by e-Purse. The SA Tool should automatically detect the Farecard and initiate the identification checks. If the Farecard is valid, not on the hotlist, and has at least a minimum balance needed for payment, then the SA Tool should populate the full payment amount and the operator should have the option to edit if the customer is making a split payment."}, {"Test Scenario 1": {"Test scenarios": "Virtual Card Unreadable", "Description": "Test the scenario where the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer will tap on the NFC reader again. If the tap is unsuccessful, the SA Tool application should indicate to the operator that the Virtual Card is unreadable."}, "Test Scenario 2": {"Test scenarios": "Non-Adult, Non-Child, non-discreet concessions", "Description": "Test the scenario where the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, "Test Scenario 3": {"Test scenarios": "ePurse Balance Less Than the Fare Amount", "Description": "Test the scenario where the customer's ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly. The device should provide the appropriate feedback to the Cardholder of a successful transaction."}, "Test Scenario 4": {"Test scenarios": "Transaction within Intra-SP Transfer window", "Description": "Test the scenario where the customer's Virtual Card has a valid transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card, the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, "Test Scenario 5": {"Test scenarios": "Transaction within Inter-SP Transfer window", "Description": "Test the scenario where the customer's Virtual Card has a valid transfer product from other service provider and a transfer agreement between the service providers has been established. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card; the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, "Test Scenario 6": {"Test scenarios": "Payment by e-Purse", "Description": "Test the scenario where the customer wants to pay with their e-purse balance. The operator should place the customer\u2019s Farecard on the NFC card reader and select to pay by e-Purse. The SA Tool should automatically detect the Farecard and initiate the identification checks. If the Farecard is valid, not on the hotlist, and has at least a minimum balance needed for payment, then the SA Tool should populate the full payment amount and the operator should have the option to edit if the customer is making a split payment."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Virtual Card Unreadable", "Test_Sce_Description": "Test the scenario where the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is successful, the fare payment process should continue. If the tap is unsuccessful, the application should again indicate to the operator that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions", "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "ePurse balance less than fare amount", "Test_Sce_Description": "Test the scenario where the customer\u2019s ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly. The device should provide the appropriate feedback to the Cardholder of a successful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Transaction within Intra-SP Transfer window", "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card, the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Transaction within Inter-SP Transfer window", "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product from other service provider and a transfer agreement between the service providers has been established. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card; the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Customer requests Audio Messages", "Test_Sce_Description": "Test the scenario where the customer asks to pay for the trip with their Virtual Card and requests audio messages for fare payment. The operator should enable audio mode and can change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case. The SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message. Corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Daily Cap Reached outside of Transfer window", "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, Farecard has reached Daily Cap Limit and Farecard is out of transfer window. ATS should deduct no fare since the Daily Cap is reached."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Premium Service or Special Route/Location", "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool and Service Class is Premium or Special Event. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade", "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, Service Class is Premium or Special Event, Farecard has a valid Regular Service Transfer Product and Tap is within Transfer Window. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool."}, {"Test Scenario 1": {"Test scenarios": "Virtual Card Unreadable", "Description": "Test the scenario where the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is successful, the fare payment process should continue. If the tap is unsuccessful, the application should again indicate to the operator that the Virtual Card is unreadable."}, "Test Scenario 2": {"Test scenarios": "Non-Adult, Non-Child, non-discreet concessions", "Description": "Test the scenario where the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, "Test Scenario 3": {"Test scenarios": "ePurse balance less than fare amount", "Description": "Test the scenario where the customer\u2019s ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly. The device should provide the appropriate feedback to the Cardholder of a successful transaction."}, "Test Scenario 4": {"Test scenarios": "Transaction within Intra-SP Transfer window", "Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card, the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, "Test Scenario 5": {"Test scenarios": "Transaction within Inter-SP Transfer window", "Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product from other service provider and a transfer agreement between the service providers has been established. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card; the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, "Test Scenario 6": {"Test scenarios": "Customer requests Audio Messages", "Description": "Test the scenario where the customer asks to pay for the trip with their Virtual Card and requests audio messages for fare payment. The operator should enable audio mode and can change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case. The SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message. Corresponding audio message should be played to the customer in the default language of their Farecard."}, "Test Scenario 7": {"Test scenarios": "Daily Cap Reached outside of Transfer window", "Description": "Test the scenario where the fare payment is being made on the SA Tool, Farecard has reached Daily Cap Limit and Farecard is out of transfer window. ATS should deduct no fare since the Daily Cap is reached."}, "Test Scenario 8": {"Test scenarios": "Premium Service or Special Route/Location", "Description": "Test the scenario where the fare payment is being made on the SA Tool and Service Class is Premium or Special Event. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool."}, "Test Scenario 9": {"Test scenarios": "Premium Service or Special Route/Location with Fare Upgrade", "Description": "Test the scenario where the fare payment is being made on the SA Tool, Service Class is Premium or Special Event, Farecard has a valid Regular Service Transfer Product and Tap is within Transfer Window. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Virtual Card Unreadable", "Test_Sce_Description": "Test the scenario where the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is unsuccessful, the application should indicate to the operator that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions", "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "ePurse balance less than fare amount", "Test_Sce_Description": "Test the scenario where the customer\u2019s ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly. The device should provide the appropriate feedback to the Cardholder of a successful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Transaction within Intra-SP Transfer window", "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card, the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Transaction within Inter-SP Transfer window", "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product from other service provider and a transfer agreement between the service providers has been established. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card; the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Customer requests Audio Messages", "Test_Sce_Description": "Test the scenario where the customer asks to pay for the trip with their Virtual Card and requests audio messages for fare payment. The operator should enable audio mode and change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case. The SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message. Corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Daily Cap Reached outside of Transfer window", "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, the Farecard has reached Daily Cap Limit and is out of transfer window. ATS should deduct no fare since the Daily Cap is reached."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Premium Service or Special Route/Location", "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool and the Service Class is Premium or Special Event. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade", "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, the Service Class is Premium or Special Event, the Farecard has a valid Regular Service Transfer Product and the tap is within Transfer Window. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool."}, {"Test Scenario 1": {"Test scenarios": "Virtual Card Unreadable", "Description": "Test the scenario where the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is unsuccessful, the application should indicate to the operator that the Virtual Card is unreadable."}, "Test Scenario 2": {"Test scenarios": "Non-Adult, Non-Child, non-discreet concessions", "Description": "Test the scenario where the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, "Test Scenario 3": {"Test scenarios": "ePurse balance less than fare amount", "Description": "Test the scenario where the customer\u2019s ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly. The device should provide the appropriate feedback to the Cardholder of a successful transaction."}, "Test Scenario 4": {"Test scenarios": "Transaction within Intra-SP Transfer window", "Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card, the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, "Test Scenario 5": {"Test scenarios": "Transaction within Inter-SP Transfer window", "Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product from other service provider and a transfer agreement between the service providers has been established. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card; the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, "Test Scenario 6": {"Test scenarios": "Customer requests Audio Messages", "Description": "Test the scenario where the customer asks to pay for the trip with their Virtual Card and requests audio messages for fare payment. The operator should enable audio mode and change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case. The SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message. Corresponding audio message should be played to the customer in the default language of their Farecard."}, "Test Scenario 7": {"Test scenarios": "Daily Cap Reached outside of Transfer window", "Description": "Test the scenario where the fare payment is being made on the SA Tool, the Farecard has reached Daily Cap Limit and is out of transfer window. ATS should deduct no fare since the Daily Cap is reached."}, "Test Scenario 8": {"Test scenarios": "Premium Service or Special Route/Location", "Description": "Test the scenario where the fare payment is being made on the SA Tool and the Service Class is Premium or Special Event. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool."}, "Test Scenario 9": {"Test scenarios": "Premium Service or Special Route/Location with Fare Upgrade", "Description": "Test the scenario where the fare payment is being made on the SA Tool, the Service Class is Premium or Special Event, the Farecard has a valid Regular Service Transfer Product and the tap is within Transfer Window. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Farecard is on the Action or Load Value List", "Test_Sce_Description": "Check if the SA Tool correctly identifies and updates a Farecard that is on the Action or Load Value List. The tool should be able to verify the Farecard's status and update it accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Audio Messages for Fare Payment", "Test_Sce_Description": "Ensure that when a customer requests audio messages for fare payment, the SA Tool correctly enables audio mode and plays the corresponding audio message in the default language of the Farecard. The volume level should be adjustable and return to the device default after the use case is completed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment with Daily Cap Reached", "Test_Sce_Description": "Check if the SA Tool correctly identifies a Farecard that has reached its Daily Cap Limit and is out of the transfer window. The tool should not deduct any fare in this case."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment for Premium Service or Special Route/Location", "Test_Sce_Description": "Ensure that the SA Tool correctly computes and deducts the Premium or Special Event fare when a tap on a premium service or special route/location is made. A Transfer Product creation for the Premium Service or special event Class should also occur."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Upgrade for Premium Service or Special Route/Location", "Test_Sce_Description": "Check if the SA Tool correctly computes and deducts the Upgrade fare when a tap on a premium service or special event route/location is made after previously riding on a regular service route (within the transfer window). The SA Tool should also set the POP Print Flag to 0 to ensure accurate display of the transfer print status."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Ensure that the SA Tool correctly identifies a Farecard that has reached off peak Daily Cap Limit, has not reached Peak Daily Cap limit, and is out of transfer window. The tool should process a fare payment in this case."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment with Period Pass for Higher Fare Value Service Class", "Test_Sce_Description": "Check if the SA Tool correctly computes and deducts the Upgrade fare when a Farecard with a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value is used."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment with Period Pass for Lower Fare Value Service Class", "Test_Sce_Description": "Ensure that the SA Tool correctly identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment when a Farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment with Limited Period Pass", "Test_Sce_Description": "Check if the SA Tool correctly identifies a Farecard with a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product. The tool should process the fare payment in this case."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify Fare Payment with Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "Ensure that the SA Tool correctly identifies a Farecard with a valid Limited Period Pass product on it and the time at tap is occurring outside of the time limit of the Limited Period Pass Product. The tool should process the fare payment using the e-Purse balance in this case."}, {"Test Scenario 1": {"Test scenarios": "Verify Farecard is on the Action or Load Value List", "Description": "Check if the SA Tool correctly identifies and updates a Farecard that is on the Action or Load Value List. The tool should be able to verify the Farecard's status and update it accordingly."}, "Test Scenario 2": {"Test scenarios": "Verify Audio Messages for Fare Payment", "Description": "Ensure that when a customer requests audio messages for fare payment, the SA Tool correctly enables audio mode and plays the corresponding audio message in the default language of the Farecard. The volume level should be adjustable and return to the device default after the use case is completed."}, "Test Scenario 3": {"Test scenarios": "Verify Fare Payment with Daily Cap Reached", "Description": "Check if the SA Tool correctly identifies a Farecard that has reached its Daily Cap Limit and is out of the transfer window. The tool should not deduct any fare in this case."}, "Test Scenario 4": {"Test scenarios": "Verify Fare Payment for Premium Service or Special Route/Location", "Description": "Ensure that the SA Tool correctly computes and deducts the Premium or Special Event fare when a tap on a premium service or special route/location is made. A Transfer Product creation for the Premium Service or special event Class should also occur."}, "Test Scenario 5": {"Test scenarios": "Verify Fare Upgrade for Premium Service or Special Route/Location", "Description": "Check if the SA Tool correctly computes and deducts the Upgrade fare when a tap on a premium service or special event route/location is made after previously riding on a regular service route (within the transfer window). The SA Tool should also set the POP Print Flag to 0 to ensure accurate display of the transfer print status."}, "Test Scenario 6": {"Test scenarios": "Verify Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Ensure that the SA Tool correctly identifies a Farecard that has reached off peak Daily Cap Limit, has not reached Peak Daily Cap limit, and is out of transfer window. The tool should process a fare payment in this case."}, "Test Scenario 7": {"Test scenarios": "Verify Fare Payment with Period Pass for Higher Fare Value Service Class", "Description": "Check if the SA Tool correctly computes and deducts the Upgrade fare when a Farecard with a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value is used."}, "Test Scenario 8": {"Test scenarios": "Verify Fare Payment with Period Pass for Lower Fare Value Service Class", "Description": "Ensure that the SA Tool correctly identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment when a Farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used."}, "Test Scenario 9": {"Test scenarios": "Verify Fare Payment with Limited Period Pass", "Description": "Check if the SA Tool correctly identifies a Farecard with a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product. The tool should process the fare payment in this case."}, "Test Scenario 10": {"Test scenarios": "Verify Fare Payment with Limited Period Pass outside of valid time with sufficient e-Purse balance", "Description": "Ensure that the SA Tool correctly identifies a Farecard with a valid Limited Period Pass product on it and the time at tap is occurring outside of the time limit of the Limited Period Pass Product. The tool should process the fare payment using the e-Purse balance in this case."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Limited Period Pass within valid time", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass product is used within the time limit of the product. The system should correctly identify the validity of the pass and allow the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass product is used outside the time limit of the product but has sufficient e-Purse balance. The system should correctly identify the invalidity of the pass, compute the value to be deducted from the e-Purse, and deduct the fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a customer with an anonymous farecard with an expired period pass and ePurse balance less than the fare amount tries to make a transaction. The system should correctly identify the situation and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Blocked Farecard", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a customer with a blocked farecard tries to make a transaction. The system should correctly identify the blocked farecard and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Farecard on the Deny List", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a customer with a farecard on the Deny List tries to make a transaction. The system should correctly identify the farecard on the Deny List, remove it from the list, set it to blocked, and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Low Battery Threshold during Payment", "Test_Sce_Description": "This scenario is to validate the functionality of the system when the battery goes below the low battery threshold during a successful Farecard tap. The system should correctly handle the situation and process the remote lists even after the battery goes below the threshold."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Period Pass with Higher Fare Value", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the situation and accept the period pass fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Farecard with Valid Child Concession", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a customer with a farecard with a Valid Child concession tries to make a transaction. The system should correctly identify the concession and display the successful Child Transit Pass fare payment screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a fare payment results from a failed inspection. The system should correctly handle the situation, record both the fare payment and inspection transactions, and return to the Tap Card screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Performance Testing", "Test_Sce_Description": "This scenario is to validate the performance of the system under different loads and stress conditions. The system should be able to handle multiple transactions simultaneously without any degradation in performance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Security Testing", "Test_Sce_Description": "This scenario is to validate the security features of the system. The system should be able to securely handle transactions, protect customer data, and prevent unauthorized access."}, {"Test Scenario 1": {"Test scenarios": "Validating Limited Period Pass within valid time", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass product is used within the time limit of the product. The system should correctly identify the validity of the pass and allow the transaction."}, "Test Scenario 2": {"Test scenarios": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass product is used outside the time limit of the product but has sufficient e-Purse balance. The system should correctly identify the invalidity of the pass, compute the value to be deducted from the e-Purse, and deduct the fare."}, "Test Scenario 3": {"Test scenarios": "Handling Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Description": "This scenario is to validate the functionality of the system when a customer with an anonymous farecard with an expired period pass and ePurse balance less than the fare amount tries to make a transaction. The system should correctly identify the situation and decline the transaction."}, "Test Scenario 4": {"Test scenarios": "Handling Blocked Farecard", "Description": "This scenario is to validate the functionality of the system when a customer with a blocked farecard tries to make a transaction. The system should correctly identify the blocked farecard and decline the transaction."}, "Test Scenario 5": {"Test scenarios": "Handling Farecard on the Deny List", "Description": "This scenario is to validate the functionality of the system when a customer with a farecard on the Deny List tries to make a transaction. The system should correctly identify the farecard on the Deny List, remove it from the list, set it to blocked, and decline the transaction."}, "Test Scenario 6": {"Test scenarios": "Handling Low Battery Threshold during Payment", "Description": "This scenario is to validate the functionality of the system when the battery goes below the low battery threshold during a successful Farecard tap. The system should correctly handle the situation and process the remote lists even after the battery goes below the threshold."}, "Test Scenario 7": {"Test scenarios": "Validating Period Pass with Higher Fare Value", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the situation and accept the period pass fare payment."}, "Test Scenario 8": {"Test scenarios": "Handling Farecard with Valid Child Concession", "Description": "This scenario is to validate the functionality of the system when a customer with a farecard with a Valid Child concession tries to make a transaction. The system should correctly identify the concession and display the successful Child Transit Pass fare payment screen."}, "Test Scenario 9": {"Test scenarios": "Handling Fare Payment Resulting from Failed Inspection", "Description": "This scenario is to validate the functionality of the system when a fare payment results from a failed inspection. The system should correctly handle the situation, record both the fare payment and inspection transactions, and return to the Tap Card screen."}, "Test Scenario 10": {"Test scenarios": "Performance Testing", "Description": "This scenario is to validate the performance of the system under different loads and stress conditions. The system should be able to handle multiple transactions simultaneously without any degradation in performance."}, "Test Scenario 11": {"Test scenarios": "Security Testing", "Description": "This scenario is to validate the security features of the system. The system should be able to securely handle transactions, protect customer data, and prevent unauthorized access."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Limited Period Pass within valid time", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should correctly identify the validity of the pass and allow the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly compute the value to be deducted from the e-Purse and deduct the fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Test_Sce_Description": "This scenario is to validate the system's response when a customer with an anonymous farecard with an expired period pass and insufficient ePurse balance attempts to make a transaction. The system should decline the transaction and display a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Blocked Farecard", "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a blocked farecard attempts to make a transaction. The system should decline the transaction and display a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Farecard on Deny List", "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a farecard on the Deny List attempts to make a transaction. The system should remove the card from the Deny List, set it to blocked, decline the transaction, and display a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Low Battery Threshold", "Test_Sce_Description": "This scenario is to validate the system's performance when the battery goes below the low battery threshold during a transaction. The system should be able to process the remote lists even after the battery goes below the threshold."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the validity of the pass and accept the period pass fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Farecard with Valid Child Concession", "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a farecard with a Valid Child concession attempts to make a transaction. The system should display the successful Child Transit Pass fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Failed Inspection", "Test_Sce_Description": "This scenario is to validate the system's response when a farecard fails inspection. The system should record both the fare payment and inspection transactions and display a toast notification of the corresponding inspection action."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Test_Sce_Description": "This scenario is to validate the system's response when a customer with an anonymous farecard with an expired period pass and insufficient ePurse balance attempts to make a transaction. The system should decline the transaction and display a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Blocked Farecard", "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a blocked farecard attempts to make a transaction. The system should decline the transaction and display a declined message to the customer."}, {"Test Scenario 1": {"Test scenarios": "Validating Limited Period Pass within valid time", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should correctly identify the validity of the pass and allow the transaction."}, "Test Scenario 2": {"Test scenarios": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly compute the value to be deducted from the e-Purse and deduct the fare."}, "Test Scenario 3": {"Test scenarios": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Description": "This scenario is to validate the system's response when a customer with an anonymous farecard with an expired period pass and insufficient ePurse balance attempts to make a transaction. The system should decline the transaction and display a declined message to the customer."}, "Test Scenario 4": {"Test scenarios": "Handling Blocked Farecard", "Description": "This scenario is to validate the system's response when a customer with a blocked farecard attempts to make a transaction. The system should decline the transaction and display a declined message to the customer."}, "Test Scenario 5": {"Test scenarios": "Handling Farecard on Deny List", "Description": "This scenario is to validate the system's response when a customer with a farecard on the Deny List attempts to make a transaction. The system should remove the card from the Deny List, set it to blocked, decline the transaction, and display a declined message to the customer."}, "Test Scenario 6": {"Test scenarios": "Handling Low Battery Threshold", "Description": "This scenario is to validate the system's performance when the battery goes below the low battery threshold during a transaction. The system should be able to process the remote lists even after the battery goes below the threshold."}, "Test Scenario 7": {"Test scenarios": "Validating Period Pass with Higher Service Class Fare Value", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the validity of the pass and accept the period pass fare payment."}, "Test Scenario 8": {"Test scenarios": "Handling Farecard with Valid Child Concession", "Description": "This scenario is to validate the system's response when a customer with a farecard with a Valid Child concession attempts to make a transaction. The system should display the successful Child Transit Pass fare payment screen and play the successful fare payment audio tone for Child concession."}, "Test Scenario 9": {"Test scenarios": "Handling Failed Inspection", "Description": "This scenario is to validate the system's response when a farecard fails inspection. The system should record both the fare payment and inspection transactions and display a toast notification of the corresponding inspection action."}, "Test Scenario 10": {"Test scenarios": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Description": "This scenario is to validate the system's response when a customer with an anonymous farecard with an expired period pass and insufficient ePurse balance attempts to make a transaction. The system should decline the transaction and display a declined message to the customer."}, "Test Scenario 11": {"Test scenarios": "Handling Blocked Farecard", "Description": "This scenario is to validate the system's response when a customer with a blocked farecard attempts to make a transaction. The system should decline the transaction and display a declined message to the customer."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Validating Limited Period Pass within valid time", "Test_Sce_Description": "This scenario is to validate the functionality of the system when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product. The system should successfully deduct the fare from the farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario is to validate the functionality of the system when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring outside of the time limit of the Limited Period Pass Product but the farecard has sufficient e-Purse balance to cover the transaction. The system should successfully deduct the fare from the e-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Handling Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario is to validate the functionality of the system when the customer has an expired period pass, ePurse balance is less than the fare amount and the customer has an anonymous Virtual Card. The system should decline the transaction and display a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Handling Blocked Virtual Card", "Test_Sce_Description": "This scenario is to validate the functionality of the system when the customer\u2019s Farecard is blocked. The system should decline the transaction and display a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Handling Virtual Card on the Deny List", "Test_Sce_Description": "This scenario is to validate the functionality of the system when the customer\u2019s Virtual Card is on the Deny List. The system should remove the card from the Deny List, set it to blocked, decline the transaction and display a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Handling Low Battery Threshold during Payment", "Test_Sce_Description": "This scenario is to validate the functionality of the system when the low battery threshold is high enough that the remote lists can be processed even after the SA Tool battery goes below the low battery threshold during a successful Farecard tap. The system should successfully process the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Handling Tap Counter at the Configured Limit", "Test_Sce_Description": "This scenario is to validate the functionality of the system when the tap counter is at the configured limit. The system should decline the transaction and display a declined message to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Handling Unreadable Virtual Card", "Test_Sce_Description": "This scenario is to validate the functionality of the system when the SA Tool application detects the Virtual Card and fails to read it correctly. The system should indicate to the operator that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Handling Virtual Card with Sufficient ePurse Balance and an Expired Period Pass", "Test_Sce_Description": "This scenario is to validate the functionality of the system when the customer\u2019s Virtual Card has an expired period pass and the customer\u2019s ePurse balance is more than the fare amount. The system should successfully deduct the fare from the e-Purse."}, {"Test Scenario 1": {"Test scenarios": "Validating Limited Period Pass within valid time", "Description": "This scenario is to validate the functionality of the system when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product. The system should successfully deduct the fare from the farecard."}, "Test Scenario 2": {"Test scenarios": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance", "Description": "This scenario is to validate the functionality of the system when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring outside of the time limit of the Limited Period Pass Product but the farecard has sufficient e-Purse balance to cover the transaction. The system should successfully deduct the fare from the e-Purse."}, "Test Scenario 3": {"Test scenarios": "Handling Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Description": "This scenario is to validate the functionality of the system when the customer has an expired period pass, ePurse balance is less than the fare amount and the customer has an anonymous Virtual Card. The system should decline the transaction and display a declined message to the customer."}, "Test Scenario 4": {"Test scenarios": "Handling Blocked Virtual Card", "Description": "This scenario is to validate the functionality of the system when the customer\u2019s Farecard is blocked. The system should decline the transaction and display a declined message to the customer."}, "Test Scenario 5": {"Test scenarios": "Handling Virtual Card on the Deny List", "Description": "This scenario is to validate the functionality of the system when the customer\u2019s Virtual Card is on the Deny List. The system should remove the card from the Deny List, set it to blocked, decline the transaction and display a declined message to the customer."}, "Test Scenario 6": {"Test scenarios": "Handling Low Battery Threshold during Payment", "Description": "This scenario is to validate the functionality of the system when the low battery threshold is high enough that the remote lists can be processed even after the SA Tool battery goes below the low battery threshold during a successful Farecard tap. The system should successfully process the transaction."}, "Test Scenario 7": {"Test scenarios": "Handling Tap Counter at the Configured Limit", "Description": "This scenario is to validate the functionality of the system when the tap counter is at the configured limit. The system should decline the transaction and display a declined message to the customer."}, "Test Scenario 8": {"Test scenarios": "Handling Unreadable Virtual Card", "Description": "This scenario is to validate the functionality of the system when the SA Tool application detects the Virtual Card and fails to read it correctly. The system should indicate to the operator that the Virtual Card is unreadable."}, "Test Scenario 9": {"Test scenarios": "Handling Virtual Card with Sufficient ePurse Balance and an Expired Period Pass", "Description": "This scenario is to validate the functionality of the system when the customer\u2019s Virtual Card has an expired period pass and the customer\u2019s ePurse balance is more than the fare amount. The system should successfully deduct the fare from the e-Purse."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Validating Limited Period Pass within valid time", "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the valid time limit. The system should correctly identify the pass as valid and allow the transaction to proceed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance", "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass outside the valid time limit but with sufficient e-Purse balance. The system should correctly identify the pass as invalid due to the time limit, compute the fare to be deducted from the e-Purse, and allow the transaction to proceed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Test_Sce_Description": "Verify that the system correctly declines fare payment from an anonymous virtual card with an expired period pass and ePurse balance less than the fare amount. The system should correctly identify the card as anonymous, the pass as expired, and the ePurse balance as insufficient, and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Handling Blocked Virtual Card", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked virtual card. The system should correctly identify the card as blocked and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Handling Virtual Card on Deny List", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a virtual card on the Deny List. The system should correctly identify the card as being on the Deny List, remove it from the list, set it to blocked, and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Handling Low Battery during Payment", "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should be able to process the remote lists even after the battery goes below the threshold during a successful Farecard tap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Handling Blocked Farecard", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked Farecard. The system should correctly identify the Farecard as blocked and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Handling Farecard on Hotlist", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a Farecard on the hotlist. The system should correctly identify the Farecard as being on the hotlist, update its status to blocked, and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Handling Non-Farecard Tap", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer taps a card that is not a Farecard. The system should display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Handling Farecard within Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a Farecard within the Anti-Passback Window. The system should correctly identify the Farecard as being within the Anti-Passback Window and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Handling Non-Activated Card", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a non-activated card. The system should correctly identify the card as not activated and not on the action list available on the device, and decline the transaction."}, {"Test Scenario 1": {"Test scenarios": "Validating Limited Period Pass within valid time", "Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the valid time limit. The system should correctly identify the pass as valid and allow the transaction to proceed."}, "Test Scenario 2": {"Test scenarios": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance", "Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass outside the valid time limit but with sufficient e-Purse balance. The system should correctly identify the pass as invalid due to the time limit, compute the fare to be deducted from the e-Purse, and allow the transaction to proceed."}, "Test Scenario 3": {"Test scenarios": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Description": "Verify that the system correctly declines fare payment from an anonymous virtual card with an expired period pass and ePurse balance less than the fare amount. The system should correctly identify the card as anonymous, the pass as expired, and the ePurse balance as insufficient, and decline the transaction."}, "Test Scenario 4": {"Test scenarios": "Handling Blocked Virtual Card", "Description": "Verify that the system correctly declines fare payment from a blocked virtual card. The system should correctly identify the card as blocked and decline the transaction."}, "Test Scenario 5": {"Test scenarios": "Handling Virtual Card on Deny List", "Description": "Verify that the system correctly declines fare payment from a virtual card on the Deny List. The system should correctly identify the card as being on the Deny List, remove it from the list, set it to blocked, and decline the transaction."}, "Test Scenario 6": {"Test scenarios": "Handling Low Battery during Payment", "Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should be able to process the remote lists even after the battery goes below the threshold during a successful Farecard tap."}, "Test Scenario 7": {"Test scenarios": "Handling Blocked Farecard", "Description": "Verify that the system correctly declines fare payment from a blocked Farecard. The system should correctly identify the Farecard as blocked and decline the transaction."}, "Test Scenario 8": {"Test scenarios": "Handling Farecard on Hotlist", "Description": "Verify that the system correctly declines fare payment from a Farecard on the hotlist. The system should correctly identify the Farecard as being on the hotlist, update its status to blocked, and decline the transaction."}, "Test Scenario 9": {"Test scenarios": "Handling Non-Farecard Tap", "Description": "Verify that the system correctly handles a situation where a customer taps a card that is not a Farecard. The system should display a 'Card Read Error' message."}, "Test Scenario 10": {"Test scenarios": "Handling Farecard within Anti-Passback Window", "Description": "Verify that the system correctly declines fare payment from a Farecard within the Anti-Passback Window. The system should correctly identify the Farecard as being within the Anti-Passback Window and decline the transaction."}, "Test Scenario 11": {"Test scenarios": "Handling Non-Activated Card", "Description": "Verify that the system correctly declines fare payment from a non-activated card. The system should correctly identify the card as not activated and not on the action list available on the device, and decline the transaction."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a premium service class and the farecard has a valid special event transfer product."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a special event transfer product and the farecard is within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made with a valid non-adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made with a valid child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Performance Test for Fare Payment", "Test_Sce_Description": "Verify that the system can handle a high volume of fare payments simultaneously without any performance degradation."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Security Test for Fare Payment", "Test_Sce_Description": "Verify that the system securely processes fare payments and that sensitive customer data is not exposed during the transaction."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a premium service class and the farecard has a valid special event transfer product."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a special event transfer product and the farecard is within the transfer window."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made with a valid non-adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made with a valid child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, "Test Scenario 7": {"Test scenarios": "Performance Test for Fare Payment", "Description": "Verify that the system can handle a high volume of fare payments simultaneously without any performance degradation."}, "Test Scenario 8": {"Test scenarios": "Security Test for Fare Payment", "Description": "Verify that the system securely processes fare payments and that sensitive customer data is not exposed during the transaction."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare", "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the special event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Performance of the SA Tool during Fare Payment", "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay during the fare payment process, including the computation and deduction of fares from the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Security of the SA Tool during Fare Payment", "Test_Sce_Description": "Verify that the SA Tool securely processes fare payments, ensuring that customer data is protected and that the ePurse balance is accurately updated."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the special event fare."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Premium Service Class and Lower Special Event Fare", "Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the special event fare."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."}, "Test Scenario 7": {"Test scenarios": "Performance of the SA Tool during Fare Payment", "Description": "Verify that the SA Tool performs efficiently and without delay during the fare payment process, including the computation and deduction of fares from the ePurse balance."}, "Test Scenario 8": {"Test scenarios": "Security of the SA Tool during Fare Payment", "Description": "Verify that the SA Tool securely processes fare payments, ensuring that customer data is protected and that the ePurse balance is accurately updated."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Premium Service Route with Lower Fare than Special Event", "Test_Sce_Description": "Verify that when a customer taps on a premium service route after previously riding on a Special Event service route (within the transfer window), the system correctly identifies this as a free transfer and does not deduct any fare from the ePurse Balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Deduction from ePurse Balance", "Test_Sce_Description": "Verify that the ATS correctly computes the fare and deducts the amount from the Virtual Card E-Purse. The deducted amount should be equal to the fare for the premium service route."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Communication with SA Tool", "Test_Sce_Description": "Verify that the fare deduction and the remaining balance are correctly communicated back to the SA Tool and displayed to the user."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Transfer Print Status Display", "Test_Sce_Description": "Verify that the SA Tool sets the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Valid Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly identifies a valid Special Event Transfer Product on the Farecard and allows the free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Transfer Window Validation", "Test_Sce_Description": "Verify that the system correctly identifies that the tap is within the Transfer Window and allows the free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Performance Test", "Test_Sce_Description": "Verify that the system can handle multiple fare payments simultaneously without any performance degradation."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Security Test", "Test_Sce_Description": "Verify that the system securely handles the fare payment transaction and does not expose any sensitive customer information."}, {"Test Scenario 1": {"Test scenarios": "Premium Service Route with Lower Fare than Special Event", "Description": "Verify that when a customer taps on a premium service route after previously riding on a Special Event service route (within the transfer window), the system correctly identifies this as a free transfer and does not deduct any fare from the ePurse Balance."}, "Test Scenario 2": {"Test scenarios": "Fare Deduction from ePurse Balance", "Description": "Verify that the ATS correctly computes the fare and deducts the amount from the Virtual Card E-Purse. The deducted amount should be equal to the fare for the premium service route."}, "Test Scenario 3": {"Test scenarios": "Communication with SA Tool", "Description": "Verify that the fare deduction and the remaining balance are correctly communicated back to the SA Tool and displayed to the user."}, "Test Scenario 4": {"Test scenarios": "Transfer Print Status Display", "Description": "Verify that the SA Tool sets the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."}, "Test Scenario 5": {"Test scenarios": "Valid Special Event Transfer Product", "Description": "Verify that the system correctly identifies a valid Special Event Transfer Product on the Farecard and allows the free transfer."}, "Test Scenario 6": {"Test scenarios": "Transfer Window Validation", "Description": "Verify that the system correctly identifies that the tap is within the Transfer Window and allows the free transfer."}, "Test Scenario 7": {"Test scenarios": "Performance Test", "Description": "Verify that the system can handle multiple fare payments simultaneously without any performance degradation."}, "Test Scenario 8": {"Test scenarios": "Security Test", "Description": "Verify that the system securely handles the fare payment transaction and does not expose any sensitive customer information."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet Concessions", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a valid Non-Adult, Non-Child, Non-discreet concession is found. The tool should correctly deduct the concession from the fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling Insufficient ePurse Balance", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount. The tool should correctly put the Farecard into overdraft."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing Intra-agency Transfer", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a valid transfer product is found. The tool should correctly compute the free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing Inter-agency Transfer", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a valid transfer product from another transit agency is found. The tool should correctly compute the fare based on the transfer product and the agreement between the transit agencies."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling Autoload Threshold", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the Autoload threshold is met or dropped below. The tool should correctly add the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing Action or Load Value List", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the Farecard is on the Action or Load Value list. The tool should correctly verify the Farecard and update it accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling Premium or Special Event Service Class", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the fare payment is being made on a Premium or Special Event service class. The tool should correctly compute the fare and deduct it from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made during peak hours after previously reaching off peak daily cap. The tool should correctly compute the fare and deduct it from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a tap on a premium service route/location after previously riding on a Special Event service route. The tool should correctly compute the fare and deduct it from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a tap on a premium service route/location after previously riding on a Special Event service route. The tool should correctly compute the fare and deduct it from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult Concession", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a valid Non-Adult concession is found on the Farecard. The tool should correctly validate the concession."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child, Non-discreet Concessions", "Description": "This scenario will test the functionality of the SA Tool when a valid Non-Adult, Non-Child, Non-discreet concession is found. The tool should correctly deduct the concession from the fare."}, "Test Scenario 2": {"Test scenarios": "Handling Insufficient ePurse Balance", "Description": "This scenario will test the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount. The tool should correctly put the Farecard into overdraft."}, "Test Scenario 3": {"Test scenarios": "Processing Intra-agency Transfer", "Description": "This scenario will test the functionality of the SA Tool when a valid transfer product is found. The tool should correctly compute the free transfer."}, "Test Scenario 4": {"Test scenarios": "Processing Inter-agency Transfer", "Description": "This scenario will test the functionality of the SA Tool when a valid transfer product from another transit agency is found. The tool should correctly compute the fare based on the transfer product and the agreement between the transit agencies."}, "Test Scenario 5": {"Test scenarios": "Handling Autoload Threshold", "Description": "This scenario will test the functionality of the SA Tool when the Autoload threshold is met or dropped below. The tool should correctly add the Autoload amount to the ePurse balance."}, "Test Scenario 6": {"Test scenarios": "Processing Action or Load Value List", "Description": "This scenario will test the functionality of the SA Tool when the Farecard is on the Action or Load Value list. The tool should correctly verify the Farecard and update it accordingly."}, "Test Scenario 7": {"Test scenarios": "Handling Premium or Special Event Service Class", "Description": "This scenario will test the functionality of the SA Tool when the fare payment is being made on a Premium or Special Event service class. The tool should correctly compute the fare and deduct it from the Virtual Card E-Purse."}, "Test Scenario 8": {"Test scenarios": "Processing Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "This scenario will test the functionality of the SA Tool when a fare payment is made during peak hours after previously reaching off peak daily cap. The tool should correctly compute the fare and deduct it from the Virtual Card E-Purse."}, "Test Scenario 9": {"Test scenarios": "Handling Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Description": "This scenario will test the functionality of the SA Tool when a tap on a premium service route/location after previously riding on a Special Event service route. The tool should correctly compute the fare and deduct it from the Virtual Card E-Purse."}, "Test Scenario 10": {"Test scenarios": "Handling Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Description": "This scenario will test the functionality of the SA Tool when a tap on a premium service route/location after previously riding on a Special Event service route. The tool should correctly compute the fare and deduct it from the Virtual Card E-Purse."}, "Test Scenario 11": {"Test scenarios": "Validating Non-Adult Concession", "Description": "This scenario will test the functionality of the SA Tool when a valid Non-Adult concession is found on the Farecard. The tool should correctly validate the concession."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Open Payments Media on Deny List", "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Open Payments Media on Local Deny List and Device Offline", "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Multiple NFC Media Presented at Once", "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Device in Out-of-Service State", "Test_Sce_Description": "Verify that when the device is in an Out-of-Service state, the Not In Service Screen is provided to the cardholder and the device does not detect the media. The device should remain in the Out-of-Service State."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Error Occurred on Device", "Test_Sce_Description": "Verify that when an error has occurred on the device that does not cover the exception cases above, the device records the tap. The Declined \u2013 See Customer Service Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Open Payments Media Not on Approved List in Beta Mode", "Test_Sce_Description": "Verify that when a customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Anti-passback Functionality", "Test_Sce_Description": "Verify that when a customer attempts to tap-on immediately after tapping-off at the same station and the device is online, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Anti-passback Functionality Offline", "Test_Sce_Description": "Verify that when a customer attempts to tap-on immediately after tapping-off at the same station and the device is offline, the device should not allow the tap and should provide the appropriate feedback to the cardholder."}, {"Test Scenario 1": {"Test scenarios": "Open Payments Media on Deny List", "Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, "Test Scenario 2": {"Test scenarios": "Open Payments Media on Local Deny List and Device Offline", "Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."}, "Test Scenario 3": {"Test scenarios": "Multiple NFC Media Presented at Once", "Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."}, "Test Scenario 4": {"Test scenarios": "Device in Out-of-Service State", "Description": "Verify that when the device is in an Out-of-Service state, the Not In Service Screen is provided to the cardholder and the device does not detect the media. The device should remain in the Out-of-Service State."}, "Test Scenario 5": {"Test scenarios": "Error Occurred on Device", "Description": "Verify that when an error has occurred on the device that does not cover the exception cases above, the device records the tap. The Declined \u2013 See Customer Service Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."}, "Test Scenario 6": {"Test scenarios": "Open Payments Media Not on Approved List in Beta Mode", "Description": "Verify that when a customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, "Test Scenario 7": {"Test scenarios": "Anti-passback Functionality", "Description": "Verify that when a customer attempts to tap-on immediately after tapping-off at the same station and the device is online, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, "Test Scenario 8": {"Test scenarios": "Anti-passback Functionality Offline", "Description": "Verify that when a customer attempts to tap-on immediately after tapping-off at the same station and the device is offline, the device should not allow the tap and should provide the appropriate feedback to the cardholder."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Multiple NFC media presented at once", "Test_Sce_Description": "This scenario tests the functionality of the device when multiple NFC media are presented to the card reader at once. The expected outcome is that the device blocks all user functionality and presents an Anti-Collision toast message to the customer. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Non-activated Farecard", "Test_Sce_Description": "This scenario tests the functionality of the device when a non-activated Farecard is tapped on the device. The expected outcome is that the transaction is unsuccessful and the device provides feedback to the Cardholder of an unsuccessful transaction due to inactive farecard. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Card reading error", "Test_Sce_Description": "This scenario tests the functionality of the device when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs. The expected outcome is that the device will not provide any feedback and screen remains \u201cIn-Service\u201d display. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Card write error", "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard is tapped on an SA Tool and a card write error occurs. The expected outcome is that the device will not provide any feedback and screen remains \u201cIn-Service\u201d display. The device should delete the transaction information. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Out-of-Service state", "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard is tapped on an SA Tool that is in Out-of-Service state. The expected outcome is that the device displays the Not in Service screen to the cardholder and does not detect the media."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Tap-on immediately after tapping-off", "Test_Sce_Description": "This scenario tests the functionality of the device when a cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-off anti-passback Window. The expected outcome is that the device sends the tap to ATS which returns a response that the cardholder has already tapped on at the same station and is within the Tap-off anti-passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Error occurred", "Test_Sce_Description": "This scenario tests the functionality of the device when an error has occurred on the device that does not cover the exception cases. The expected outcome is that the device records the tap and provides the Declined \u2013 See Customer Service Screen to the cardholder. An error should be captured and logged in the background for troubleshooting purposes."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Multiple NFC media are presented to the device at one time", "Test_Scnario": "Insufficient E-Purse", "Test_Sce_Description": "This scenario tests the functionality of the device when a Virtual Card has insufficient E-Purse to cover the Tap-On Fare. The expected outcome is that the device records the tap and provides the Declined \u2013 See Customer Service Screen to the cardholder. An error should be captured and logged in the background for troubleshooting purposes."}, {"Test Scenario 1": {"Test scenarios": "Multiple NFC media presented at once", "Description": "This scenario tests the functionality of the device when multiple NFC media are presented to the card reader at once. The expected outcome is that the device blocks all user functionality and presents an Anti-Collision toast message to the customer. An error should be captured and logged in the background for troubleshooting purposes."}, "Test Scenario 2": {"Test scenarios": "Non-activated Farecard", "Description": "This scenario tests the functionality of the device when a non-activated Farecard is tapped on the device. The expected outcome is that the transaction is unsuccessful and the device provides feedback to the Cardholder of an unsuccessful transaction due to inactive farecard. An error should be captured and logged in the background for troubleshooting purposes."}, "Test Scenario 3": {"Test scenarios": "Card reading error", "Description": "This scenario tests the functionality of the device when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs. The expected outcome is that the device will not provide any feedback and screen remains \u201cIn-Service\u201d display. An error should be captured and logged in the background for troubleshooting purposes."}, "Test Scenario 4": {"Test scenarios": "Card write error", "Description": "This scenario tests the functionality of the device when a Farecard is tapped on an SA Tool and a card write error occurs. The expected outcome is that the device will not provide any feedback and screen remains \u201cIn-Service\u201d display. The device should delete the transaction information. An error should be captured and logged in the background for troubleshooting purposes."}, "Test Scenario 5": {"Test scenarios": "Out-of-Service state", "Description": "This scenario tests the functionality of the device when a Farecard is tapped on an SA Tool that is in Out-of-Service state. The expected outcome is that the device displays the Not in Service screen to the cardholder and does not detect the media."}, "Test Scenario 6": {"Test scenarios": "Tap-on immediately after tapping-off", "Description": "This scenario tests the functionality of the device when a cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-off anti-passback Window. The expected outcome is that the device sends the tap to ATS which returns a response that the cardholder has already tapped on at the same station and is within the Tap-off anti-passback Window."}, "Test Scenario 7": {"Test scenarios": "Error occurred", "Description": "This scenario tests the functionality of the device when an error has occurred on the device that does not cover the exception cases. The expected outcome is that the device records the tap and provides the Declined \u2013 See Customer Service Screen to the cardholder. An error should be captured and logged in the background for troubleshooting purposes."}, "Test Scenario 8": {"Test scenarios": "Insufficient E-Purse", "Description": "This scenario tests the functionality of the device when a Virtual Card has insufficient E-Purse to cover the Tap-On Fare. The expected outcome is that the device records the tap and provides the Declined \u2013 See Customer Service Screen to the cardholder. An error should be captured and logged in the background for troubleshooting purposes."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing Out-of-Service state", "Test_Sce_Description": "Verify that when the SA Tool is in Out-of-Service state, it does not detect the Open Payments Media when a customer attempts to tap their card on the reader. The device should remain in the Out-of-Service state."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing Farecard reversal configuration", "Test_Sce_Description": "Verify that when the SA Tool is configured for Farecard reversals only, it provides an error message 'Only Available for Farecard' when a customer attempts to tap their Open Payments Media on the card reader."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing approved media list in Pilot mode", "Test_Sce_Description": "Verify that when the device is in Pilot mode and a customer attempts to tap an Open Payments media not on the approved media list, the device checks the approved media list and provides a 'Declined \u2013 Not Accepted, Tap Farecard' screen to the cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing BIN Blocking List", "Test_Sce_Description": "Verify that when a customer\u2019s Open Payments Media is on the BIN Blocking List, the device checks its local BIN Blocking list, plays the decline audio tone and displays the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing Interac Card reversal with Interac disabled", "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Interac Card while Interac is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message. The fare payment reversal should not be recorded."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing Open Payment Card reversal with Open Payments disabled", "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while Open Payments are disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message. The fare payment reversal should not be recorded."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing Open Payment Card reversal with corresponding payment method / card brand disabled", "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while corresponding payment method / card brand is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message. The fare payment reversal should not be recorded."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing Standby State", "Test_Sce_Description": "Verify that when the SA Tool is in Standby state, the screen is turned off and the device disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing Revenue Mode", "Test_Sce_Description": "Verify that in Revenue Mode, the SA Tool operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Scnario": "Testing Training Mode", "Test_Sce_Description": "Verify that in Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode."}, {"Test Scenario 1": {"Test scenarios": "Testing Out-of-Service state", "Description": "Verify that when the SA Tool is in Out-of-Service state, it does not detect the Open Payments Media when a customer attempts to tap their card on the reader. The device should remain in the Out-of-Service state."}, "Test Scenario 2": {"Test scenarios": "Testing Farecard reversal configuration", "Description": "Verify that when the SA Tool is configured for Farecard reversals only, it provides an error message 'Only Available for Farecard' when a customer attempts to tap their Open Payments Media on the card reader."}, "Test Scenario 3": {"Test scenarios": "Testing approved media list in Pilot mode", "Description": "Verify that when the device is in Pilot mode and a customer attempts to tap an Open Payments media not on the approved media list, the device checks the approved media list and provides a 'Declined \u2013 Not Accepted, Tap Farecard' screen to the cardholder."}, "Test Scenario 4": {"Test scenarios": "Testing BIN Blocking List", "Description": "Verify that when a customer\u2019s Open Payments Media is on the BIN Blocking List, the device checks its local BIN Blocking list, plays the decline audio tone and displays the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."}, "Test Scenario 5": {"Test scenarios": "Testing Interac Card reversal with Interac disabled", "Description": "Verify that when a customer attempts to reverse fare payment with Interac Card while Interac is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message. The fare payment reversal should not be recorded."}, "Test Scenario 6": {"Test scenarios": "Testing Open Payment Card reversal with Open Payments disabled", "Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while Open Payments are disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message. The fare payment reversal should not be recorded."}, "Test Scenario 7": {"Test scenarios": "Testing Open Payment Card reversal with corresponding payment method / card brand disabled", "Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while corresponding payment method / card brand is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message. The fare payment reversal should not be recorded."}, "Test Scenario 8": {"Test scenarios": "Testing Standby State", "Description": "Verify that when the SA Tool is in Standby state, the screen is turned off and the device disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."}, "Test Scenario 9": {"Test scenarios": "Testing Revenue Mode", "Description": "Verify that in Revenue Mode, the SA Tool operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."}, "Test Scenario 10": {"Test scenarios": "Testing Training Mode", "Description": "Verify that in Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Error Occurrence on Device", "Test_Sce_Description": "Validate that the device correctly records the tap and displays the 'Declined \u2013 See Customer Service Screen' to the cardholder when an error occurs. Also, verify that the error is captured and logged in the background and in the SOTI logs for troubleshooting."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Insufficient E-Purse Balance", "Test_Sce_Description": "Verify that the device sends the tap to ATS and returns a response that the virtual card does not have a sufficient E-Purse balance to cover the tap-on fare. Also, ensure that the 'Declined \u2013 Insufficient E-Purse Balance' message is displayed to the cardholder and the error is logged."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Virtual Card Media on Online Hotlist", "Test_Sce_Description": "Check that the device sends the tap to ATS and returns a response that the media is on the online hotlist. Also, validate that the 'Declined \u2013 Blocked Screen' is displayed to the cardholder and the blocking parameter on the Virtual Card Scratchpad is enabled."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Virtual Card Media on Online Hotlist with Unblocked Scratchpad", "Test_Sce_Description": "Ensure that the device sends the tap to ATS, ATS checks the online hotlist and confirms that the virtual card is on the online hotlist. Verify that the device updates the scratchpad with the blocked status and sends a notification to ATS."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Virtual Card Media on Local Hotlist and Device Offline", "Test_Sce_Description": "Validate that the device records the tap and displays the 'Declined \u2013 Please Contact Customer Service' screen to the cardholder when the device is offline and the Virtual Card Media is on the local hotlist."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Open Payments Media Not on Approved List", "Test_Sce_Description": "Check that the device checks the approved media list and if the media is not found, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is displayed to the cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Open Payments Media on BIN Blocking List", "Test_Sce_Description": "Ensure that the device checks its local BIN Blocking list and if the card\u2019s BIN is found to be on the BIN Blocking List, the 'Declined \u2013 Try Another Card (BIN Blocked)' screen is displayed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Interac Card in Debt", "Test_Sce_Description": "Verify that the device sends the tap to ATS and returns a response that the Interac media is on the deny list. Also, ensure that the 'Declined \u2013 Tap Again (in X Seconds)' screen is displayed to the cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Interac Card in Debt with Device Offline", "Test_Sce_Description": "Check that the device checks the local deny list when offline and if the media is on the local deny list due to reason Media in Debt, the 'Declined \u2013 Tap Again (in X Seconds)' screen is displayed to the cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Interac Card Tapped while Interac is Disabled", "Test_Sce_Description": "Ensure that the device detects the Interac media and determines that the media tapped is not supported and displays an error message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Customer attempts to tap on and an error has occurred", "Test_Scnario": "Open Payment Card Tapped while Open Payments are Disabled", "Test_Sce_Description": "Verify that the device detects the Open Payment Card and determines that the media tapped is not supported and displays an error message."}, {"Test Scenario 1": {"Test scenarios": "Error Occurrence on Device", "Description": "Validate that the device correctly records the tap and displays the 'Declined \u2013 See Customer Service Screen' to the cardholder when an error occurs. Also, verify that the error is captured and logged in the background and in the SOTI logs for troubleshooting."}, "Test Scenario 2": {"Test scenarios": "Insufficient E-Purse Balance", "Description": "Verify that the device sends the tap to ATS and returns a response that the virtual card does not have a sufficient E-Purse balance to cover the tap-on fare. Also, ensure that the 'Declined \u2013 Insufficient E-Purse Balance' message is displayed to the cardholder and the error is logged."}, "Test Scenario 3": {"Test scenarios": "Virtual Card Media on Online Hotlist", "Description": "Check that the device sends the tap to ATS and returns a response that the media is on the online hotlist. Also, validate that the 'Declined \u2013 Blocked Screen' is displayed to the cardholder and the blocking parameter on the Virtual Card Scratchpad is enabled."}, "Test Scenario 4": {"Test scenarios": "Virtual Card Media on Online Hotlist with Unblocked Scratchpad", "Description": "Ensure that the device sends the tap to ATS, ATS checks the online hotlist and confirms that the virtual card is on the online hotlist. Verify that the device updates the scratchpad with the blocked status and sends a notification to ATS."}, "Test Scenario 5": {"Test scenarios": "Virtual Card Media on Local Hotlist and Device Offline", "Description": "Validate that the device records the tap and displays the 'Declined \u2013 Please Contact Customer Service' screen to the cardholder when the device is offline and the Virtual Card Media is on the local hotlist."}, "Test Scenario 6": {"Test scenarios": "Open Payments Media Not on Approved List", "Description": "Check that the device checks the approved media list and if the media is not found, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is displayed to the cardholder."}, "Test Scenario 7": {"Test scenarios": "Open Payments Media on BIN Blocking List", "Description": "Ensure that the device checks its local BIN Blocking list and if the card\u2019s BIN is found to be on the BIN Blocking List, the 'Declined \u2013 Try Another Card (BIN Blocked)' screen is displayed."}, "Test Scenario 8": {"Test scenarios": "Interac Card in Debt", "Description": "Verify that the device sends the tap to ATS and returns a response that the Interac media is on the deny list. Also, ensure that the 'Declined \u2013 Tap Again (in X Seconds)' screen is displayed to the cardholder."}, "Test Scenario 9": {"Test scenarios": "Interac Card in Debt with Device Offline", "Description": "Check that the device checks the local deny list when offline and if the media is on the local deny list due to reason Media in Debt, the 'Declined \u2013 Tap Again (in X Seconds)' screen is displayed to the cardholder."}, "Test Scenario 10": {"Test scenarios": "Interac Card Tapped while Interac is Disabled", "Description": "Ensure that the device detects the Interac media and determines that the media tapped is not supported and displays an error message."}, "Test Scenario 11": {"Test scenarios": "Open Payment Card Tapped while Open Payments are Disabled", "Description": "Verify that the device detects the Open Payment Card and determines that the media tapped is not supported and displays an error message."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Open Payments Media on Deny List", "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Open Payments Media on Local Deny List and Device Offline", "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Multiple NFC Media Presented at Once", "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Tap Open Payments Media when Device is Out-of-Service", "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Error Occurred on Device", "Test_Sce_Description": "Verify that when an error has occurred on the device that does not cover the exception cases above, the device records the tap and the Declined \u2013 See Customer Service Screen is provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Tap Open Payments Media Not on Approved List in Beta Mode", "Test_Sce_Description": "Verify that when a customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Tap-on Immediately After Tapping-off at Same Station (Online)", "Test_Sce_Description": "Verify that when a cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Scnario": "Tap-on Immediately After Tapping-off at Same Station (Offline)", "Test_Sce_Description": "Verify that when a cardholder taps-on again at an SA Tool after just tapping-off at the same station and the device is offline, the device should not allow the tap and should provide appropriate feedback to the cardholder. An error should be captured and logged in the background."}, {"Test Scenario 1": {"Test scenarios": "Open Payments Media on Deny List", "Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."}, "Test Scenario 2": {"Test scenarios": "Open Payments Media on Local Deny List and Device Offline", "Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."}, "Test Scenario 3": {"Test scenarios": "Multiple NFC Media Presented at Once", "Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background."}, "Test Scenario 4": {"Test scenarios": "Tap Open Payments Media when Device is Out-of-Service", "Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."}, "Test Scenario 5": {"Test scenarios": "Error Occurred on Device", "Description": "Verify that when an error has occurred on the device that does not cover the exception cases above, the device records the tap and the Declined \u2013 See Customer Service Screen is provided to the cardholder. An error should be captured and logged in the background."}, "Test Scenario 6": {"Test scenarios": "Tap Open Payments Media Not on Approved List in Beta Mode", "Description": "Verify that when a customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."}, "Test Scenario 7": {"Test scenarios": "Tap-on Immediately After Tapping-off at Same Station (Online)", "Description": "Verify that when a cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background."}, "Test Scenario 8": {"Test scenarios": "Tap-on Immediately After Tapping-off at Same Station (Offline)", "Description": "Verify that when a cardholder taps-on again at an SA Tool after just tapping-off at the same station and the device is offline, the device should not allow the tap and should provide appropriate feedback to the cardholder. An error should be captured and logged in the background."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Limited Period Pass within valid time", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should correctly identify the validity of the pass and allow the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly identify the invalidity of the pass and deduct the fare from the e-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a customer has an anonymous farecard with an expired period pass and insufficient ePurse balance. The system should correctly identify the situation and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Blocked Farecard", "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a customer's farecard is blocked. The system should correctly identify the blocked card and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Farecard on Deny List", "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a customer's farecard is on the Deny List. The system should correctly identify the card on the Deny List, remove it from the list, set it to blocked, and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Low Battery Threshold during Payment", "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where the battery goes below the low battery threshold during payment. The system should be able to process the remote lists even after the battery goes below the threshold."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the validity of the pass and accept the period pass fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Farecard with Valid Child Concession", "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a customer's farecard has a valid Child concession. The system should correctly identify the concession and display the successful Child Transit Pass fare payment screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a fare payment results from a failed inspection. The system should correctly record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a customer has an anonymous farecard with an expired period pass and insufficient ePurse balance. The system should correctly identify the situation and decline the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Blocked Farecard", "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a customer's farecard is blocked. The system should correctly identify the blocked card and decline the transaction."}, {"Test Scenario 1": {"Test scenarios": "Validating Limited Period Pass within valid time", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should correctly identify the validity of the pass and allow the transaction."}, "Test Scenario 2": {"Test scenarios": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly identify the invalidity of the pass and deduct the fare from the e-Purse balance."}, "Test Scenario 3": {"Test scenarios": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Description": "This scenario is to validate the system's ability to handle a situation where a customer has an anonymous farecard with an expired period pass and insufficient ePurse balance. The system should correctly identify the situation and decline the transaction."}, "Test Scenario 4": {"Test scenarios": "Handling Blocked Farecard", "Description": "This scenario is to validate the system's ability to handle a situation where a customer's farecard is blocked. The system should correctly identify the blocked card and decline the transaction."}, "Test Scenario 5": {"Test scenarios": "Handling Farecard on Deny List", "Description": "This scenario is to validate the system's ability to handle a situation where a customer's farecard is on the Deny List. The system should correctly identify the card on the Deny List, remove it from the list, set it to blocked, and decline the transaction."}, "Test Scenario 6": {"Test scenarios": "Handling Low Battery Threshold during Payment", "Description": "This scenario is to validate the system's ability to handle a situation where the battery goes below the low battery threshold during payment. The system should be able to process the remote lists even after the battery goes below the threshold."}, "Test Scenario 7": {"Test scenarios": "Validating Period Pass with Higher Service Class Fare Value", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the validity of the pass and accept the period pass fare payment."}, "Test Scenario 8": {"Test scenarios": "Handling Farecard with Valid Child Concession", "Description": "This scenario is to validate the system's ability to handle a situation where a customer's farecard has a valid Child concession. The system should correctly identify the concession and display the successful Child Transit Pass fare payment screen."}, "Test Scenario 9": {"Test scenarios": "Handling Fare Payment Resulting from Failed Inspection", "Description": "This scenario is to validate the system's ability to handle a situation where a fare payment results from a failed inspection. The system should correctly record both the fare payment and inspection transactions."}, "Test Scenario 10": {"Test scenarios": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Description": "This scenario is to validate the system's ability to handle a situation where a customer has an anonymous farecard with an expired period pass and insufficient ePurse balance. The system should correctly identify the situation and decline the transaction."}, "Test Scenario 11": {"Test scenarios": "Handling Blocked Farecard", "Description": "This scenario is to validate the system's ability to handle a situation where a customer's farecard is blocked. The system should correctly identify the blocked card and decline the transaction."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Limited Period Pass within valid time", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should correctly identify the validity of the pass and allow the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly identify the invalidity of the pass due to time limit, calculate the fare to be deducted from the e-Purse and allow the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Test_Sce_Description": "This scenario is to validate the functionality of the system when an anonymous farecard with an expired period pass and insufficient ePurse balance is used. The system should correctly identify the expired pass and insufficient balance, decline the transaction and display a declined message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Blocked Farecard", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a blocked farecard is used. The system should correctly identify the blocked status of the farecard, decline the transaction and display a declined message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Farecard on Deny List", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard on the Deny List is used. The system should correctly identify the farecard's status, remove it from the Deny List, set it to blocked, decline the transaction and display a declined message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Low Battery Threshold During Payment", "Test_Sce_Description": "This scenario is to validate the functionality of the system when the battery goes below the low battery threshold during a payment. The system should correctly process the remote lists even after the battery goes below the threshold during a successful Farecard tap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the validity of the pass and accept the period pass fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Farecard with Valid Child Concession", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Child concession is used. The system should correctly identify the concession, display the successful Child Transit Pass fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Handling Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario is to validate the functionality of the system when a fare payment results from a failed inspection. The system should correctly record both the fare payment and inspection transactions and display a toast notification of the corresponding inspection action."}, {"Test Scenario 1": {"Test scenarios": "Validating Limited Period Pass within valid time", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should correctly identify the validity of the pass and allow the transaction."}, "Test Scenario 2": {"Test scenarios": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly identify the invalidity of the pass due to time limit, calculate the fare to be deducted from the e-Purse and allow the transaction."}, "Test Scenario 3": {"Test scenarios": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance", "Description": "This scenario is to validate the functionality of the system when an anonymous farecard with an expired period pass and insufficient ePurse balance is used. The system should correctly identify the expired pass and insufficient balance, decline the transaction and display a declined message."}, "Test Scenario 4": {"Test scenarios": "Handling Blocked Farecard", "Description": "This scenario is to validate the functionality of the system when a blocked farecard is used. The system should correctly identify the blocked status of the farecard, decline the transaction and display a declined message."}, "Test Scenario 5": {"Test scenarios": "Handling Farecard on Deny List", "Description": "This scenario is to validate the functionality of the system when a farecard on the Deny List is used. The system should correctly identify the farecard's status, remove it from the Deny List, set it to blocked, decline the transaction and display a declined message."}, "Test Scenario 6": {"Test scenarios": "Handling Low Battery Threshold During Payment", "Description": "This scenario is to validate the functionality of the system when the battery goes below the low battery threshold during a payment. The system should correctly process the remote lists even after the battery goes below the threshold during a successful Farecard tap."}, "Test Scenario 7": {"Test scenarios": "Validating Period Pass with Higher Service Class Fare Value", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the validity of the pass and accept the period pass fare payment."}, "Test Scenario 8": {"Test scenarios": "Handling Farecard with Valid Child Concession", "Description": "This scenario is to validate the functionality of the system when a farecard with a valid Child concession is used. The system should correctly identify the concession, display the successful Child Transit Pass fare payment screen and play the successful fare payment audio tone for Child concession."}, "Test Scenario 9": {"Test scenarios": "Handling Fare Payment Resulting from Failed Inspection", "Description": "This scenario is to validate the functionality of the system when a fare payment results from a failed inspection. The system should correctly record both the fare payment and inspection transactions and display a toast notification of the corresponding inspection action."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Valid Limited Period Pass within time limit", "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the time limit. The system should detect the validity of the pass and complete the transaction successfully."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Valid Limited Period Pass outside time limit with sufficient e-Purse balance", "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass outside the time limit but with sufficient e-Purse balance. The system should detect the invalidity of the pass due to time limit, compute the fare to be deducted from the e-Purse, and complete the transaction successfully."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Expired Period Pass with insufficient ePurse balance", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a virtual card with an expired Period Pass and insufficient ePurse balance. The system should detect the expired pass and insufficient balance, and return a declined result."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Blocked Virtual Card", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked virtual card. The system should detect the blocked status of the card and return a declined result."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Virtual Card on Deny List", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a virtual card on the Deny List. The system should detect the card's status on the Deny List, remove it from the list, set it to blocked, and return a declined result."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Low Battery Threshold", "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should still be able to process the remote lists even after the battery goes below the threshold."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Tap Counter at Limit", "Test_Sce_Description": "Verify that the system correctly declines a transaction when the tap counter is at the limit. The system should detect the limit, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Unreadable Virtual Card", "Test_Sce_Description": "Verify that the system correctly handles a situation where the virtual card is unreadable. The system should detect the unreadable card and indicate to the operator that the card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Expired Period Pass with Sufficient ePurse Balance", "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with an expired Period Pass but with sufficient ePurse balance. The system should detect the expired pass, compute the fare to be deducted from the ePurse, and complete the transaction successfully."}, {"Test Scenario 1": {"Test scenarios": "Valid Limited Period Pass within time limit", "Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the time limit. The system should detect the validity of the pass and complete the transaction successfully."}, "Test Scenario 2": {"Test scenarios": "Valid Limited Period Pass outside time limit with sufficient e-Purse balance", "Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass outside the time limit but with sufficient e-Purse balance. The system should detect the invalidity of the pass due to time limit, compute the fare to be deducted from the e-Purse, and complete the transaction successfully."}, "Test Scenario 3": {"Test scenarios": "Expired Period Pass with insufficient ePurse balance", "Description": "Verify that the system correctly declines fare payment from a virtual card with an expired Period Pass and insufficient ePurse balance. The system should detect the expired pass and insufficient balance, and return a declined result."}, "Test Scenario 4": {"Test scenarios": "Blocked Virtual Card", "Description": "Verify that the system correctly declines fare payment from a blocked virtual card. The system should detect the blocked status of the card and return a declined result."}, "Test Scenario 5": {"Test scenarios": "Virtual Card on Deny List", "Description": "Verify that the system correctly declines fare payment from a virtual card on the Deny List. The system should detect the card's status on the Deny List, remove it from the list, set it to blocked, and return a declined result."}, "Test Scenario 6": {"Test scenarios": "Low Battery Threshold", "Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should still be able to process the remote lists even after the battery goes below the threshold."}, "Test Scenario 7": {"Test scenarios": "Tap Counter at Limit", "Description": "Verify that the system correctly declines a transaction when the tap counter is at the limit. The system should detect the limit, display a declined message, and not conduct the transaction."}, "Test Scenario 8": {"Test scenarios": "Unreadable Virtual Card", "Description": "Verify that the system correctly handles a situation where the virtual card is unreadable. The system should detect the unreadable card and indicate to the operator that the card is unreadable."}, "Test Scenario 9": {"Test scenarios": "Expired Period Pass with Sufficient ePurse Balance", "Description": "Verify that the system correctly accepts fare payment from a virtual card with an expired Period Pass but with sufficient ePurse balance. The system should detect the expired pass, compute the fare to be deducted from the ePurse, and complete the transaction successfully."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Valid Limited Period Pass within time limit", "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the time limit. The system should recognize the pass as valid and allow the transaction to proceed without deducting any amount from the e-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Valid Limited Period Pass outside time limit with sufficient e-Purse balance", "Test_Sce_Description": "Verify that the system correctly handles fare payment from a virtual card with a valid Limited Period Pass that is outside the time limit but has a sufficient e-Purse balance. The system should recognize that the pass is not valid at the current time, compute the fare to be deducted from the e-Purse, and deduct the fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Expired Period Pass with insufficient ePurse balance", "Test_Sce_Description": "Verify that the system correctly declines fare payment from an anonymous virtual card with an expired Period Pass and an ePurse balance less than the fare amount. The system should detect the card's status and insufficient balance, and return a declined result."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Blocked Virtual Card", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked virtual card. The system should detect the card's blocked status and return a declined result."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Virtual Card on Deny List", "Test_Sce_Description": "Verify that the system correctly handles fare payment from a virtual card on the Deny List. The system should detect the card's status, remove it from the Deny List, set it to blocked, and return a declined result."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Low Battery Threshold during Payment", "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should be able to process the remote lists even after the battery goes below the threshold during a successful Farecard tap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Blocked Farecard", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked Farecard. The system should detect the card's blocked status and return a declined result."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Farecard on Hotlist", "Test_Sce_Description": "Verify that the system correctly handles fare payment from a Farecard on the hotlist. The system should detect the card's status, update it to blocked, and return a declined result."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Non-activated Card", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer taps a non-activated card. The system should display a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Farecard within Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly declines fare payment from a Farecard within the Anti-Passback Window. The system should detect the card's status and return a declined result."}, {"Test Scenario 1": {"Test scenarios": "Valid Limited Period Pass within time limit", "Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the time limit. The system should recognize the pass as valid and allow the transaction to proceed without deducting any amount from the e-Purse."}, "Test Scenario 2": {"Test scenarios": "Valid Limited Period Pass outside time limit with sufficient e-Purse balance", "Description": "Verify that the system correctly handles fare payment from a virtual card with a valid Limited Period Pass that is outside the time limit but has a sufficient e-Purse balance. The system should recognize that the pass is not valid at the current time, compute the fare to be deducted from the e-Purse, and deduct the fare."}, "Test Scenario 3": {"Test scenarios": "Expired Period Pass with insufficient ePurse balance", "Description": "Verify that the system correctly declines fare payment from an anonymous virtual card with an expired Period Pass and an ePurse balance less than the fare amount. The system should detect the card's status and insufficient balance, and return a declined result."}, "Test Scenario 4": {"Test scenarios": "Blocked Virtual Card", "Description": "Verify that the system correctly declines fare payment from a blocked virtual card. The system should detect the card's blocked status and return a declined result."}, "Test Scenario 5": {"Test scenarios": "Virtual Card on Deny List", "Description": "Verify that the system correctly handles fare payment from a virtual card on the Deny List. The system should detect the card's status, remove it from the Deny List, set it to blocked, and return a declined result."}, "Test Scenario 6": {"Test scenarios": "Low Battery Threshold during Payment", "Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should be able to process the remote lists even after the battery goes below the threshold during a successful Farecard tap."}, "Test Scenario 7": {"Test scenarios": "Blocked Farecard", "Description": "Verify that the system correctly declines fare payment from a blocked Farecard. The system should detect the card's blocked status and return a declined result."}, "Test Scenario 8": {"Test scenarios": "Farecard on Hotlist", "Description": "Verify that the system correctly handles fare payment from a Farecard on the hotlist. The system should detect the card's status, update it to blocked, and return a declined result."}, "Test Scenario 9": {"Test scenarios": "Non-activated Card", "Description": "Verify that the system correctly handles a situation where a customer taps a non-activated card. The system should display a 'Card Read Error' message."}, "Test Scenario 10": {"Test scenarios": "Farecard within Anti-Passback Window", "Description": "Verify that the system correctly declines fare payment from a Farecard within the Anti-Passback Window. The system should detect the card's status and return a declined result."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked", "Test_Scnario": "Virtual Card is Blocked", "Test_Sce_Description": "Verify that when a customer's virtual card is blocked, the transaction is declined and an appropriate declined message is displayed to the customer. The SA Tool should also play a declined audio tone and update the Scratchpad accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked", "Test_Scnario": "Virtual Card is on the Deny List", "Test_Sce_Description": "Verify that when a customer's virtual card is on the Deny List, the card is removed from the Deny List and set to blocked. The transaction should be declined and an appropriate declined message should be displayed to the customer. The SA Tool should also play a declined audio tone and update the Scratchpad accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked", "Test_Scnario": "Low Battery Threshold", "Test_Sce_Description": "Verify that when the low battery threshold is reached during a transaction, the application switches to 'Out of Service' mode. If the low battery threshold is reached before Step 5, the customers fare payment should not be processed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked", "Test_Scnario": "Card is not a Farecard", "Test_Sce_Description": "Verify that when a customer taps a card that is not a Farecard, the SA Tool application does not respond and the device error message 'Card Read Error' is displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked", "Test_Scnario": "Card is within the Anti-Passback Window", "Test_Sce_Description": "Verify that when a customer's card is within the Anti-Passback Window, the transaction is declined and an appropriate declined message is displayed to the customer. The SA Tool should also play a declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked", "Test_Scnario": "Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled", "Test_Sce_Description": "Verify that when the Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled, the right to travel is not conferred and the device does not know a tap is attempted and will have no action."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked", "Test_Scnario": "Tap counter is greater than the allowable offline taps", "Test_Sce_Description": "Verify that when the tap counter is greater than the allowable offline taps, the offline device will reject the tap and the rider will not be permitted entry. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked", "Test_Scnario": "E-Ticket holder scans QR Code against the SA Tool reader and the SA Tool is Offline", "Test_Sce_Description": "Verify that when an E-Ticket holder scans QR Code against the SA Tool reader and the SA Tool is Offline, the call to the Bytemark backend will fail and be unable to retrieve details regarding the E-Ticket. The result should be cached in an offline database to be uploaded to Bytemark API when connection is resumed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked", "Test_Scnario": "E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader", "Test_Sce_Description": "Verify that when an E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader, the device returns the appropriate feedback, and the right to travel is not conferred."}, {"Test Scenario 1": {"Test scenarios": "Virtual Card is Blocked", "Description": "Verify that when a customer's virtual card is blocked, the transaction is declined and an appropriate declined message is displayed to the customer. The SA Tool should also play a declined audio tone and update the Scratchpad accordingly."}, "Test Scenario 2": {"Test scenarios": "Virtual Card is on the Deny List", "Description": "Verify that when a customer's virtual card is on the Deny List, the card is removed from the Deny List and set to blocked. The transaction should be declined and an appropriate declined message should be displayed to the customer. The SA Tool should also play a declined audio tone and update the Scratchpad accordingly."}, "Test Scenario 3": {"Test scenarios": "Low Battery Threshold", "Description": "Verify that when the low battery threshold is reached during a transaction, the application switches to 'Out of Service' mode. If the low battery threshold is reached before Step 5, the customers fare payment should not be processed."}, "Test Scenario 4": {"Test scenarios": "Card is not a Farecard", "Description": "Verify that when a customer taps a card that is not a Farecard, the SA Tool application does not respond and the device error message 'Card Read Error' is displayed for a short period of time."}, "Test Scenario 5": {"Test scenarios": "Card is within the Anti-Passback Window", "Description": "Verify that when a customer's card is within the Anti-Passback Window, the transaction is declined and an appropriate declined message is displayed to the customer. The SA Tool should also play a declined audio tone."}, "Test Scenario 6": {"Test scenarios": "Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled", "Description": "Verify that when the Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled, the right to travel is not conferred and the device does not know a tap is attempted and will have no action."}, "Test Scenario 7": {"Test scenarios": "Tap counter is greater than the allowable offline taps", "Description": "Verify that when the tap counter is greater than the allowable offline taps, the offline device will reject the tap and the rider will not be permitted entry. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."}, "Test Scenario 8": {"Test scenarios": "E-Ticket holder scans QR Code against the SA Tool reader and the SA Tool is Offline", "Description": "Verify that when an E-Ticket holder scans QR Code against the SA Tool reader and the SA Tool is Offline, the call to the Bytemark backend will fail and be unable to retrieve details regarding the E-Ticket. The result should be cached in an offline database to be uploaded to Bytemark API when connection is resumed."}, "Test Scenario 9": {"Test scenarios": "E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader", "Description": "Verify that when an E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader, the device returns the appropriate feedback, and the right to travel is not conferred."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List", "Test_Scnario": "Anonymous Farecard with Insufficient ePurse Balance", "Test_Sce_Description": "Verify that the SA Tool application correctly identifies an anonymous Farecard with an ePurse balance less than the fare amount, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List", "Test_Scnario": "Blocked Farecard", "Test_Sce_Description": "Check that the SA Tool application correctly identifies a blocked Farecard, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List", "Test_Scnario": "Farecard on the Hotlist", "Test_Sce_Description": "Ensure that the SA Tool application correctly identifies a Farecard on the hotlist, updates the card\u2019s status to blocked, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List", "Test_Scnario": "Low Battery Threshold", "Test_Sce_Description": "Verify that the application correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful Farecard tap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List", "Test_Scnario": "Non-Farecard Tap", "Test_Sce_Description": "Check that the SA Tool correctly displays the 'Card Read Error' toast message when a non-Farecard is tapped."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List", "Test_Scnario": "Farecard within the Anti-Passback Window", "Test_Sce_Description": "Ensure that the device correctly detects that the Farecard fails the Anti-Passback checks, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List", "Test_Scnario": "Non-Activated Card Tap", "Test_Sce_Description": "Verify that the device correctly detects that the Farecard is not activated, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List", "Test_Scnario": "Limited Period Pass Outside of Valid Time", "Test_Sce_Description": "Check that the SA Tool correctly detects that the Limited Period Pass is not valid at the current time, computes the value to be deducted from the e-Purse, detects that farecard is in overdraft, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List", "Test_Scnario": "Locked Farecard", "Test_Sce_Description": "Ensure that the SA Tool correctly reads the Farecard and determines that it is locked, displays a declined screen to the operator and does not proceed with the inspection."}, {"Test Scenario 1": {"Test scenarios": "Anonymous Farecard with Insufficient ePurse Balance", "Description": "Verify that the SA Tool application correctly identifies an anonymous Farecard with an ePurse balance less than the fare amount, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."}, "Test Scenario 2": {"Test scenarios": "Blocked Farecard", "Description": "Check that the SA Tool application correctly identifies a blocked Farecard, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."}, "Test Scenario 3": {"Test scenarios": "Farecard on the Hotlist", "Description": "Ensure that the SA Tool application correctly identifies a Farecard on the hotlist, updates the card\u2019s status to blocked, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."}, "Test Scenario 4": {"Test scenarios": "Low Battery Threshold", "Description": "Verify that the application correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful Farecard tap."}, "Test Scenario 5": {"Test scenarios": "Non-Farecard Tap", "Description": "Check that the SA Tool correctly displays the 'Card Read Error' toast message when a non-Farecard is tapped."}, "Test Scenario 6": {"Test scenarios": "Farecard within the Anti-Passback Window", "Description": "Ensure that the device correctly detects that the Farecard fails the Anti-Passback checks, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."}, "Test Scenario 7": {"Test scenarios": "Non-Activated Card Tap", "Description": "Verify that the device correctly detects that the Farecard is not activated, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."}, "Test Scenario 8": {"Test scenarios": "Limited Period Pass Outside of Valid Time", "Description": "Check that the SA Tool correctly detects that the Limited Period Pass is not valid at the current time, computes the value to be deducted from the e-Purse, detects that farecard is in overdraft, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."}, "Test Scenario 9": {"Test scenarios": "Locked Farecard", "Description": "Ensure that the SA Tool correctly reads the Farecard and determines that it is locked, displays a declined screen to the operator and does not proceed with the inspection."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment", "Test_Scnario": "Low Battery Threshold Test", "Test_Sce_Description": "This scenario tests the functionality of the application when the battery level goes below the low battery threshold during a successful Farecard tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment", "Test_Scnario": "Farecard Tap Test", "Test_Sce_Description": "This scenario tests the functionality of the application when a customer taps a card that is not a Farecard. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment", "Test_Scnario": "Anti-Passback Window Test", "Test_Sce_Description": "This scenario tests the functionality of the application when a customer's card is within the Anti-Passback Window. The ATS should detect that the Farecard fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment", "Test_Scnario": "Blocked Virtual Card Test", "Test_Sce_Description": "This scenario tests the functionality of the application when a customer's Virtual Card is blocked. The SA Tool application should read Scratchpad and detect that the Farecard is blocked. The SA Tool application should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment", "Test_Scnario": "Deny List Test", "Test_Sce_Description": "This scenario tests the functionality of the application when a customer's Virtual Card is on the Deny List. The device should read the Scratchpad and detect the Virtual Card is on the local Deny List. The SA Tool application should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone and the Scratchpad should be updated accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment", "Test_Scnario": "Performance Test", "Test_Sce_Description": "This scenario tests the performance of the application under different conditions such as low battery, blocked card, card on the deny list, etc. The application should perform as expected under all these conditions without any lag or delay."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment", "Test_Scnario": "Security Test", "Test_Sce_Description": "This scenario tests the security features of the application. The application should securely handle all transactions and should not allow any unauthorized access or transactions."}, {"Test Scenario 1": {"Test scenarios": "Low Battery Threshold Test", "Description": "This scenario tests the functionality of the application when the battery level goes below the low battery threshold during a successful Farecard tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, "Test Scenario 2": {"Test scenarios": "Farecard Tap Test", "Description": "This scenario tests the functionality of the application when a customer taps a card that is not a Farecard. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, "Test Scenario 3": {"Test scenarios": "Anti-Passback Window Test", "Description": "This scenario tests the functionality of the application when a customer's card is within the Anti-Passback Window. The ATS should detect that the Farecard fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, "Test Scenario 4": {"Test scenarios": "Blocked Virtual Card Test", "Description": "This scenario tests the functionality of the application when a customer's Virtual Card is blocked. The SA Tool application should read Scratchpad and detect that the Farecard is blocked. The SA Tool application should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone."}, "Test Scenario 5": {"Test scenarios": "Deny List Test", "Description": "This scenario tests the functionality of the application when a customer's Virtual Card is on the Deny List. The device should read the Scratchpad and detect the Virtual Card is on the local Deny List. The SA Tool application should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone and the Scratchpad should be updated accordingly."}, "Test Scenario 6": {"Test scenarios": "Performance Test", "Description": "This scenario tests the performance of the application under different conditions such as low battery, blocked card, card on the deny list, etc. The application should perform as expected under all these conditions without any lag or delay."}, "Test Scenario 7": {"Test scenarios": "Security Test", "Description": "This scenario tests the security features of the application. The application should securely handle all transactions and should not allow any unauthorized access or transactions."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Unreadable Card", "Test_Sce_Description": "Test the functionality of the SA Tool when a customer taps a Virtual Card that is unreadable. The SA Tool should detect the Virtual Card but fail to read it correctly, indicating to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Non-Adult, Non-Child, non-discreet concessions", "Test_Sce_Description": "Test the functionality of the SA Tool when a customer with a Valid Non-Adult, Non-Child, non-discreet concessions taps their Virtual Card. The SA Tool should show the successful fare payment screen for non-adult concession, and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Insufficient ePurse Balance", "Test_Sce_Description": "Test the functionality of the SA Tool when a customer with an ePurse balance less than the fare amount taps their Virtual Card. The ATS should check the online hotlist, complete the fare processing, remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Intra-SP Transfer window", "Test_Sce_Description": "Test the functionality of the SA Tool when a customer with a valid transfer product taps their Virtual Card. The ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Inter-SP Transfer window", "Test_Sce_Description": "Test the functionality of the SA Tool when a customer with a valid transfer product from other service provider taps their Virtual Card. The ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Incorrect Farecard Type", "Test_Sce_Description": "Test the functionality of the SA Tool when a customer taps a Farecard that is the incorrect Farecard type for the Mode. The SA Tool should read the Farecard information, check the Farecard Type, and notify the operator of the incorrect Farecard Type."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Non-Farecard tapped", "Test_Sce_Description": "Test the functionality of the SA Tool when a customer taps a Non-Farecard. The SA Tool should identify the card to be a non-Farecard and display an error pop up message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Blocked/Hotlisted Farecard", "Test_Sce_Description": "Test the functionality of the SA Tool when a customer taps a blocked Farecard. The SA Tool should detect that the Farecard is blocked and display the Farecard query screen indicating that the Farecard has been blocked."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Ineligible Products", "Test_Sce_Description": "Test the functionality of the SA Tool when the shopping cart has ineligible products. The device should display an error confirming that one or more of the products are not available for sale."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Virtual Card - ATS failure to load products", "Test_Sce_Description": "Test the functionality of the SA Tool when ATS is unable to load products to the customer\u2019s account. The SA Tool should inform the operator that the products purchased were not added to the user\u2019s account."}, {"Test Scenario 1": {"Test scenarios": "Accepting Fare Payment from a Virtual Card - Unreadable Card", "Description": "Test the functionality of the SA Tool when a customer taps a Virtual Card that is unreadable. The SA Tool should detect the Virtual Card but fail to read it correctly, indicating to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again."}, "Test Scenario 2": {"Test scenarios": "Accepting Fare Payment from a Virtual Card - Non-Adult, Non-Child, non-discreet concessions", "Description": "Test the functionality of the SA Tool when a customer with a Valid Non-Adult, Non-Child, non-discreet concessions taps their Virtual Card. The SA Tool should show the successful fare payment screen for non-adult concession, and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, "Test Scenario 3": {"Test scenarios": "Accepting Fare Payment from a Virtual Card - Insufficient ePurse Balance", "Description": "Test the functionality of the SA Tool when a customer with an ePurse balance less than the fare amount taps their Virtual Card. The ATS should check the online hotlist, complete the fare processing, remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."}, "Test Scenario 4": {"Test scenarios": "Accepting Fare Payment from a Virtual Card - Intra-SP Transfer window", "Description": "Test the functionality of the SA Tool when a customer with a valid transfer product taps their Virtual Card. The ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card."}, "Test Scenario 5": {"Test scenarios": "Accepting Fare Payment from a Virtual Card - Inter-SP Transfer window", "Description": "Test the functionality of the SA Tool when a customer with a valid transfer product from other service provider taps their Virtual Card. The ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card."}, "Test Scenario 6": {"Test scenarios": "Accepting Fare Payment from a Virtual Card - Incorrect Farecard Type", "Description": "Test the functionality of the SA Tool when a customer taps a Farecard that is the incorrect Farecard type for the Mode. The SA Tool should read the Farecard information, check the Farecard Type, and notify the operator of the incorrect Farecard Type."}, "Test Scenario 7": {"Test scenarios": "Accepting Fare Payment from a Virtual Card - Non-Farecard tapped", "Description": "Test the functionality of the SA Tool when a customer taps a Non-Farecard. The SA Tool should identify the card to be a non-Farecard and display an error pop up message."}, "Test Scenario 8": {"Test scenarios": "Accepting Fare Payment from a Virtual Card - Blocked/Hotlisted Farecard", "Description": "Test the functionality of the SA Tool when a customer taps a blocked Farecard. The SA Tool should detect that the Farecard is blocked and display the Farecard query screen indicating that the Farecard has been blocked."}, "Test Scenario 9": {"Test scenarios": "Accepting Fare Payment from a Virtual Card - Ineligible Products", "Description": "Test the functionality of the SA Tool when the shopping cart has ineligible products. The device should display an error confirming that one or more of the products are not available for sale."}, "Test Scenario 10": {"Test scenarios": "Accepting Fare Payment from a Virtual Card - ATS failure to load products", "Description": "Test the functionality of the SA Tool when ATS is unable to load products to the customer\u2019s account. The SA Tool should inform the operator that the products purchased were not added to the user\u2019s account."}}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Farecard Fails Anti-Passback Checks", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it detects that the Farecard fails the Anti-Passback checks. The expected outcome is that the SA Tool application will display a declined message to the customer and the transaction is not conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Successful Fare Payment from a Virtual Card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is successfully made from a Virtual Card. The expected outcome is that the SA Tool displays the successful fare payment screen and plays the successful payment audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Fare Payment from a Virtual Card with Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer requests audio messages for fare payment. The expected outcome is that the SA Tool displays the fare payment screen to the operator and customer for the duration of the audio message and the corresponding audio message is played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Farecard Fails Anti-Passback Checks", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it detects that the Farecard fails the Anti-Passback checks. The expected outcome is that the SA Tool application will display a declined message to the customer and the transaction is not conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Farecard is Not Activated", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it detects that the Farecard is not activated. The expected outcome is that the SA Tool application will display a declined message to the customer and the transaction is not conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Limited Period Pass Outside of Valid Time", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it detects that the Limited Period Pass is not valid at the current time and the farecard is in overdraft. The expected outcome is that the SA Tool application will display a declined message to the customer and the transaction is not conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Farecard is Locked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it reads the Farecard and determines that it is locked. The expected outcome is that the device displays a declined screen to the operator and does not proceed with the inspection."}, {"Test Scenario 1": {"Test scenarios": "Farecard Fails Anti-Passback Checks", "Description": "This scenario tests the functionality of the SA Tool when it detects that the Farecard fails the Anti-Passback checks. The expected outcome is that the SA Tool application will display a declined message to the customer and the transaction is not conducted."}, "Test Scenario 2": {"Test scenarios": "Successful Fare Payment from a Virtual Card", "Description": "This scenario tests the functionality of the SA Tool when a fare payment is successfully made from a Virtual Card. The expected outcome is that the SA Tool displays the successful fare payment screen and plays the successful payment audio tone."}, "Test Scenario 3": {"Test scenarios": "Fare Payment from a Virtual Card with Audio Messages", "Description": "This scenario tests the functionality of the SA Tool when a customer requests audio messages for fare payment. The expected outcome is that the SA Tool displays the fare payment screen to the operator and customer for the duration of the audio message and the corresponding audio message is played to the customer in the default language of their Farecard."}, "Test Scenario 4": {"Test scenarios": "Farecard Fails Anti-Passback Checks", "Description": "This scenario tests the functionality of the SA Tool when it detects that the Farecard fails the Anti-Passback checks. The expected outcome is that the SA Tool application will display a declined message to the customer and the transaction is not conducted."}, "Test Scenario 5": {"Test scenarios": "Farecard is Not Activated", "Description": "This scenario tests the functionality of the SA Tool when it detects that the Farecard is not activated. The expected outcome is that the SA Tool application will display a declined message to the customer and the transaction is not conducted."}, "Test Scenario 6": {"Test scenarios": "Limited Period Pass Outside of Valid Time", "Description": "This scenario tests the functionality of the SA Tool when it detects that the Limited Period Pass is not valid at the current time and the farecard is in overdraft. The expected outcome is that the SA Tool application will display a declined message to the customer and the transaction is not conducted."}, "Test Scenario 7": {"Test scenarios": "Farecard is Locked", "Description": "This scenario tests the functionality of the SA Tool when it reads the Farecard and determines that it is locked. The expected outcome is that the device displays a declined screen to the operator and does not proceed with the inspection."}}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service class and the farecard has a valid special event transfer product and the tap is within the transfer window."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid special event transfer product and the tap is within the transfer window."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid non-adult concession."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid child concession."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Performance Test", "Test_Sce_Description": "Verify that the system performs efficiently and effectively under varying loads and conditions, including peak hours and off-peak hours."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Security Test", "Test_Sce_Description": "Verify that the system securely handles all transactions and data, including fare payments and ePurse balances, and that it prevents unauthorized access and data breaches."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service class and the farecard has a valid special event transfer product and the tap is within the transfer window."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Special Event Transfer Product", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid special event transfer product and the tap is within the transfer window."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid non-adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, "Test Scenario 7": {"Test scenarios": "Performance Test", "Description": "Verify that the system performs efficiently and effectively under varying loads and conditions, including peak hours and off-peak hours."}, "Test Scenario 8": {"Test scenarios": "Security Test", "Description": "Verify that the system securely handles all transactions and data, including fare payments and ePurse balances, and that it prevents unauthorized access and data breaches."}}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid non-adult concession."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid child concession."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare", "Test_Sce_Description": "Verify that the system correctly computes and allows a free transfer when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window, and the premium fare is lower than the special event fare."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Performance", "Test_Sce_Description": "Verify that the system performs efficiently when computing and deducting the fare from the ePurse balance during peak usage times."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Security", "Test_Sce_Description": "Verify that the system securely processes fare payments, ensuring that customer data is protected and that the fare is correctly deducted from the ePurse balance."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid non-adult concession."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid child concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Premium Service Class and Lower Special Event Fare", "Description": "Verify that the system correctly computes and allows a free transfer when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window, and the premium fare is lower than the special event fare."}, "Test Scenario 7": {"Test scenarios": "Fare Payment Performance", "Description": "Verify that the system performs efficiently when computing and deducting the fare from the ePurse balance during peak usage times."}, "Test Scenario 8": {"Test scenarios": "Fare Payment Security", "Description": "Verify that the system securely processes fare payments, ensuring that customer data is protected and that the fare is correctly deducted from the ePurse balance."}}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and valid Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the special event fare."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and valid Special Event Transfer Product with lower fare", "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the special event fare."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Performance of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak load conditions."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Security of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is secure and that sensitive customer data such as ePurse balance and farecard details are not exposed during the process."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and valid Special Event Transfer Product", "Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the special event fare."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Premium Service Class and valid Special Event Transfer Product with lower fare", "Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the special event fare."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."}, "Test Scenario 7": {"Test scenarios": "Performance of Fare Payment Process", "Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak load conditions."}, "Test Scenario 8": {"Test scenarios": "Security of Fare Payment Process", "Description": "Verify that the fare payment process is secure and that sensitive customer data such as ePurse balance and farecard details are not exposed during the process."}}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of insufficient ePurse balance", "Test_Sce_Description": "This scenario is to test how the SA Tool handles a situation where the customer's ePurse balance is less than the fare amount. The tool should put the Farecard into overdraft (negative balance)."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of valid transfer product within Intra-agency Transfer window", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of valid transfer product within Inter-agency Transfer window", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product from other transit agency and computes the fare based on the transfer product and the transfer agreement between the transit agencies."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of Autoload Threshold", "Test_Sce_Description": "This scenario is to test how the SA Tool handles a situation where the customer's Farecard meets or drops below Autoload Threshold. The tool should add the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of Farecard on the Action or Load Value List", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a Farecard on the Action or Load Value List and updates the Farecard accordingly."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Test_Sce_Description": "This scenario is to test how the SA Tool handles a situation where a fare payment is made during Peak hours after previously reaching off peak daily cap (outside the transfer window). The tool should compute the fare and deduct the amount from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) and results in a fare upgrade."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) and results in a free transfer."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of Valid Non-Adult Concession on Farecard", "Test_Sce_Description": "This scenario is to test how the SA Tool handles a situation where the customer's Farecard has a Valid Non-Adult concession. The tool should correctly identify and process the concession."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child, Non-discreet concession", "Description": "This scenario is to validate that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, "Test Scenario 2": {"Test scenarios": "Handling of insufficient ePurse balance", "Description": "This scenario is to test how the SA Tool handles a situation where the customer's ePurse balance is less than the fare amount. The tool should put the Farecard into overdraft (negative balance)."}, "Test Scenario 3": {"Test scenarios": "Processing of valid transfer product within Intra-agency Transfer window", "Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."}, "Test Scenario 4": {"Test scenarios": "Processing of valid transfer product within Inter-agency Transfer window", "Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product from other transit agency and computes the fare based on the transfer product and the transfer agreement between the transit agencies."}, "Test Scenario 5": {"Test scenarios": "Handling of Autoload Threshold", "Description": "This scenario is to test how the SA Tool handles a situation where the customer's Farecard meets or drops below Autoload Threshold. The tool should add the Autoload amount to the ePurse balance."}, "Test Scenario 6": {"Test scenarios": "Processing of Farecard on the Action or Load Value List", "Description": "This scenario is to validate that the SA Tool correctly identifies a Farecard on the Action or Load Value List and updates the Farecard accordingly."}, "Test Scenario 7": {"Test scenarios": "Handling of fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Description": "This scenario is to test how the SA Tool handles a situation where a fare payment is made during Peak hours after previously reaching off peak daily cap (outside the transfer window). The tool should compute the fare and deduct the amount from the Virtual Card E-Purse."}, "Test Scenario 8": {"Test scenarios": "Processing of Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Description": "This scenario is to validate that the SA Tool correctly identifies a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) and results in a fare upgrade."}, "Test Scenario 9": {"Test scenarios": "Processing of Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Description": "This scenario is to validate that the SA Tool correctly identifies a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) and results in a free transfer."}, "Test Scenario 10": {"Test scenarios": "Handling of Valid Non-Adult Concession on Farecard", "Description": "This scenario is to test how the SA Tool handles a situation where the customer's Farecard has a Valid Non-Adult concession. The tool should correctly identify and process the concession."}}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Temporal Class Supplement Tap-On Transaction", "Test_Sce_Description": "Verify that the device correctly processes a Tap-On transaction when the Farecard is tapped during a time period that contains an associated Temporal Class Supplement. The device should display an HMI reflecting the Temporal Class Supplement and process the transaction as a normal tap-on."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Autoload Enabled Farecard Crossing Threshold", "Test_Sce_Description": "Verify that when a Farecard with Autoload enabled is tapped and the Fare amount crosses the Auto-load threshold, the Farecard automatically adds the Autoload amount to the E-Purse balance. The device should detect this, deduct the Fare from the Farecard E-Purse balance, and provide appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Override Default Trip with No Default O/D", "Test_Sce_Description": "Verify that when a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on. The device should provide appropriate feedback to the Cardholder of a successful transaction and notify the customer that the Default Trip was overridden."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Audio Messages Request", "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Farecard Validation Failure at Tap-On", "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The device should provide appropriate feedback to the cardholder without updating the Farecard."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Blocked Farecard", "Test_Sce_Description": "Verify that when a blocked Farecard is tapped, the right to travel is not conferred. The device should detect that the Farecard is blocked and provide appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Exceeding Max Travel Duration", "Test_Sce_Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment and opens a new trip. The device should determine that the Tap-On Time + Max Travel Duration < Current Time, auto-settle the Underpayment, and deduct the value from the Farecard E-Purse."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Multiple NFC Media Presentation", "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality and presents Anti-Collision HMI to customer."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Non-Activated Farecard Tap-On", "Test_Sce_Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Card Reading Error", "Test_Sce_Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides appropriate feedback to the Cardholder."}, {"Test Scenario 1": {"Test scenarios": "Temporal Class Supplement Tap-On Transaction", "Description": "Verify that the device correctly processes a Tap-On transaction when the Farecard is tapped during a time period that contains an associated Temporal Class Supplement. The device should display an HMI reflecting the Temporal Class Supplement and process the transaction as a normal tap-on."}, "Test Scenario 2": {"Test scenarios": "Autoload Enabled Farecard Crossing Threshold", "Description": "Verify that when a Farecard with Autoload enabled is tapped and the Fare amount crosses the Auto-load threshold, the Farecard automatically adds the Autoload amount to the E-Purse balance. The device should detect this, deduct the Fare from the Farecard E-Purse balance, and provide appropriate feedback to the Cardholder."}, "Test Scenario 3": {"Test scenarios": "Override Default Trip with No Default O/D", "Description": "Verify that when a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on. The device should provide appropriate feedback to the Cardholder of a successful transaction and notify the customer that the Default Trip was overridden."}, "Test Scenario 4": {"Test scenarios": "Audio Messages Request", "Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, "Test Scenario 5": {"Test scenarios": "Farecard Validation Failure at Tap-On", "Description": "Verify that when a Farecard fails validation checks at Tap-On, the device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The device should provide appropriate feedback to the cardholder without updating the Farecard."}, "Test Scenario 6": {"Test scenarios": "Blocked Farecard", "Description": "Verify that when a blocked Farecard is tapped, the right to travel is not conferred. The device should detect that the Farecard is blocked and provide appropriate feedback to the Cardholder."}, "Test Scenario 7": {"Test scenarios": "Exceeding Max Travel Duration", "Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment and opens a new trip. The device should determine that the Tap-On Time + Max Travel Duration < Current Time, auto-settle the Underpayment, and deduct the value from the Farecard E-Purse."}, "Test Scenario 8": {"Test scenarios": "Multiple NFC Media Presentation", "Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality and presents Anti-Collision HMI to customer."}, "Test Scenario 9": {"Test scenarios": "Non-Activated Farecard Tap-On", "Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."}, "Test Scenario 10": {"Test scenarios": "Card Reading Error", "Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides appropriate feedback to the Cardholder."}}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Autoload Threshold Crossed", "Test_Sce_Description": "Verify that when the Farecard E-Purse Balance crosses the Auto-load threshold due to the Fare, the Autoload amount is automatically added to the E-Purse balance."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Autoload Threshold Not Crossed", "Test_Sce_Description": "Verify that when the Farecard E-Purse Balance does not cross the Auto-load threshold due to the Fare, the Autoload amount is not added to the E-Purse balance."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Fare Deduction", "Test_Sce_Description": "Verify that the Device correctly deducts the Fare from the Farecard E-Purse balance when the Farecard is tapped on the device."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Feedback on Successful Transaction", "Test_Sce_Description": "Verify that the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to an Autoload transaction and updates the Farecard accordingly."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Feedback on Unsuccessful Transaction", "Test_Sce_Description": "Verify that the device provides the appropriate feedback to the Cardholder of an unsuccessful transaction and does not update the Farecard."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Performance under Load", "Test_Sce_Description": "Verify the system's performance when multiple Farecards are tapped on the device simultaneously, ensuring that the system can handle high traffic."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Security of Farecard Data", "Test_Sce_Description": "Verify that the Farecard data is securely transmitted and stored, ensuring that no unauthorized access or data leakage occurs."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Exception Flow - Farecard Validation Failure", "Test_Sce_Description": "Verify that the system handles the exception correctly when the Farecard fails validation checks at Tap-On, providing appropriate feedback to the Cardholder and not updating the Farecard."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Alternate Flow - Default Trip Override", "Test_Sce_Description": "Verify that the system correctly processes the tap as a result tap-on when the Farecard with no Default O/D is tapped on while the device is in Override mode, providing appropriate feedback to the Cardholder and updating the Farecard accordingly."}, {"Test Scenario 1": {"Test scenarios": "Autoload Threshold Crossed", "Description": "Verify that when the Farecard E-Purse Balance crosses the Auto-load threshold due to the Fare, the Autoload amount is automatically added to the E-Purse balance."}, "Test Scenario 2": {"Test scenarios": "Autoload Threshold Not Crossed", "Description": "Verify that when the Farecard E-Purse Balance does not cross the Auto-load threshold due to the Fare, the Autoload amount is not added to the E-Purse balance."}, "Test Scenario 3": {"Test scenarios": "Fare Deduction", "Description": "Verify that the Device correctly deducts the Fare from the Farecard E-Purse balance when the Farecard is tapped on the device."}, "Test Scenario 4": {"Test scenarios": "Feedback on Successful Transaction", "Description": "Verify that the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to an Autoload transaction and updates the Farecard accordingly."}, "Test Scenario 5": {"Test scenarios": "Feedback on Unsuccessful Transaction", "Description": "Verify that the device provides the appropriate feedback to the Cardholder of an unsuccessful transaction and does not update the Farecard."}, "Test Scenario 6": {"Test scenarios": "Performance under Load", "Description": "Verify the system's performance when multiple Farecards are tapped on the device simultaneously, ensuring that the system can handle high traffic."}, "Test Scenario 7": {"Test scenarios": "Security of Farecard Data", "Description": "Verify that the Farecard data is securely transmitted and stored, ensuring that no unauthorized access or data leakage occurs."}, "Test Scenario 8": {"Test scenarios": "Exception Flow - Farecard Validation Failure", "Description": "Verify that the system handles the exception correctly when the Farecard fails validation checks at Tap-On, providing appropriate feedback to the Cardholder and not updating the Farecard."}, "Test Scenario 9": {"Test scenarios": "Alternate Flow - Default Trip Override", "Description": "Verify that the system correctly processes the tap as a result tap-on when the Farecard with no Default O/D is tapped on while the device is in Override mode, providing appropriate feedback to the Cardholder and updating the Farecard accordingly."}}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Full Fare-by-Zone transaction processing", "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Override Default O/D", "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and process the tap as a regular tap-on when the customer requests the override of a Default Trip by interacting with the Device."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Capping discount eligibility", "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Multiple capping discounts eligibility", "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS will take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Offline device capping discount eligibility", "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules will follow use-case logic outlined in ticketing use cases."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Open Payments Media fails ODA check", "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device performs the necessary validation and determines that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen is provided to the cardholder. An error will be captured and logged in the background when this occurs to help with troubleshooting the issue. This error will also be captured in the SOTI logs."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Open Payments Media Fails Expiry Check", "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Farecard is blocked", "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. Card reader detects Farecard is blocked. Right to travel is not conferred. The Device provides the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration", "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. Device determines that the Tap-On Time + Max Travel Duration < Current Time. Device Auto-settles the Underpayment and deducts the value from the Farecard E-Purse."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Multiple NFC media are presented to the device at one time", "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. Customer presents multiple NFC medias to the card reader at once. Device blocks all user functionality, presents Anti-Collision HMI to customer."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Tap a non-activated Farecard on an SA Tool", "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. Device detects that the Farecard is not activated. The device provides feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides feedback to the Cardholder of an unsuccessful transaction."}, {"Test Scenario 1": {"Test scenarios": "Full Fare-by-Zone transaction processing", "Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."}, "Test Scenario 2": {"Test scenarios": "Override Default O/D", "Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and process the tap as a regular tap-on when the customer requests the override of a Default Trip by interacting with the Device."}, "Test Scenario 3": {"Test scenarios": "Capping discount eligibility", "Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation."}, "Test Scenario 4": {"Test scenarios": "Multiple capping discounts eligibility", "Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS will take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."}, "Test Scenario 5": {"Test scenarios": "Offline device capping discount eligibility", "Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules will follow use-case logic outlined in ticketing use cases."}, "Test Scenario 6": {"Test scenarios": "Open Payments Media fails ODA check", "Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device performs the necessary validation and determines that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen is provided to the cardholder. An error will be captured and logged in the background when this occurs to help with troubleshooting the issue. This error will also be captured in the SOTI logs."}, "Test Scenario 7": {"Test scenarios": "Open Payments Media Fails Expiry Check", "Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."}, "Test Scenario 8": {"Test scenarios": "Farecard is blocked", "Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. Card reader detects Farecard is blocked. Right to travel is not conferred. The Device provides the appropriate feedback to the Cardholder."}, "Test Scenario 9": {"Test scenarios": "Time since Tap-On Exceeds Max Travel Duration", "Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. Device determines that the Tap-On Time + Max Travel Duration < Current Time. Device Auto-settles the Underpayment and deducts the value from the Farecard E-Purse."}, "Test Scenario 10": {"Test scenarios": "Multiple NFC media are presented to the device at one time", "Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. Customer presents multiple NFC medias to the card reader at once. Device blocks all user functionality, presents Anti-Collision HMI to customer."}, "Test Scenario 11": {"Test scenarios": "Tap a non-activated Farecard on an SA Tool", "Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. Device detects that the Farecard is not activated. The device provides feedback to the Cardholder of an unsuccessful transaction."}, "Test Scenario 12": {"Test scenarios": "Tap a Farecard on an SA Tool and card reading error occurs", "Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides feedback to the Cardholder of an unsuccessful transaction."}}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Non-Revenue farecard in training mode", "Test_Sce_Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode and if the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard tap during Temporal Class Supplement", "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the Device should contain an HMI reflecting the Temporal Class Supplement, and process the Tap-On Transaction as a normal tap-on."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard with Autoload Enabled", "Test_Sce_Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard without Default O/D", "Test_Sce_Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device should process the tap as a result tap-on."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Audio Messages request", "Test_Sce_Description": "Verify that when the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard validation checks at Tap-On", "Test_Sce_Description": "Verify that if the Farecard fails validation checks at Tap-On, the system should handle this exception flow appropriately."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Fare Payment from a Virtual Card using Period Pass", "Test_Sce_Description": "Verify that when a Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value, the ATS should compute and deduct the Upgrade fare."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Fare Payment from a Virtual Card using Period Pass with lower fare value", "Test_Sce_Description": "Verify that when a Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value, the ATS should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Fare Payment from a Virtual Card using Limited Period Pass", "Test_Sce_Description": "Verify that when a Farecard has a valid Limited Period Pass and the current time is within the limits of the product, the system should accept the fare payment."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Fare Payment from a Virtual Card using Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "Verify that when a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the system should accept the fare payment."}, {"Test Scenario 1": {"Test scenarios": "Testing Non-Revenue farecard in training mode", "Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode and if the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI."}, "Test Scenario 2": {"Test scenarios": "Testing Farecard tap during Temporal Class Supplement", "Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the Device should contain an HMI reflecting the Temporal Class Supplement, and process the Tap-On Transaction as a normal tap-on."}, "Test Scenario 3": {"Test scenarios": "Testing Farecard with Autoload Enabled", "Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance."}, "Test Scenario 4": {"Test scenarios": "Testing Farecard without Default O/D", "Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device should process the tap as a result tap-on."}, "Test Scenario 5": {"Test scenarios": "Testing Audio Messages request", "Description": "Verify that when the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."}, "Test Scenario 6": {"Test scenarios": "Testing Farecard validation checks at Tap-On", "Description": "Verify that if the Farecard fails validation checks at Tap-On, the system should handle this exception flow appropriately."}, "Test Scenario 7": {"Test scenarios": "Testing Fare Payment from a Virtual Card using Period Pass", "Description": "Verify that when a Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value, the ATS should compute and deduct the Upgrade fare."}, "Test Scenario 8": {"Test scenarios": "Testing Fare Payment from a Virtual Card using Period Pass with lower fare value", "Description": "Verify that when a Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value, the ATS should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."}, "Test Scenario 9": {"Test scenarios": "Testing Fare Payment from a Virtual Card using Limited Period Pass", "Description": "Verify that when a Farecard has a valid Limited Period Pass and the current time is within the limits of the product, the system should accept the fare payment."}, "Test Scenario 10": {"Test scenarios": "Testing Fare Payment from a Virtual Card using Limited Period Pass outside of valid time with sufficient e-Purse balance", "Description": "Verify that when a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the system should accept the fare payment."}}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a premium service class farecard that has a valid Special Event Transfer Product and the tap is within the transfer window."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the upgrade fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the child concession fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Performance of Fare Payment Process", "Test_Sce_Description": "Verify that the system processes the fare payment within the acceptable time limit and does not cause any delay or inconvenience to the user."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Security of Fare Payment Process", "Test_Sce_Description": "Verify that the system securely processes the fare payment and does not expose any sensitive user information during the process."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Accuracy of Fare Calculation", "Test_Sce_Description": "Verify that the system accurately calculates the fare based on the service class, transfer product, and concession type of the farecard."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Correct Deduction of Fare from ePurse Balance", "Test_Sce_Description": "Verify that the system correctly deducts the calculated fare from the ePurse balance and updates the balance accurately."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Handling of Insufficient ePurse Balance", "Test_Sce_Description": "Verify that the system correctly handles the scenario when the ePurse balance is insufficient to cover the calculated fare."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a premium service class farecard that has a valid Special Event Transfer Product and the tap is within the transfer window."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly calculates and deducts the upgrade fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly calculates and deducts the child concession fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, "Test Scenario 6": {"Test scenarios": "Performance of Fare Payment Process", "Description": "Verify that the system processes the fare payment within the acceptable time limit and does not cause any delay or inconvenience to the user."}, "Test Scenario 7": {"Test scenarios": "Security of Fare Payment Process", "Description": "Verify that the system securely processes the fare payment and does not expose any sensitive user information during the process."}, "Test Scenario 8": {"Test scenarios": "Accuracy of Fare Calculation", "Description": "Verify that the system accurately calculates the fare based on the service class, transfer product, and concession type of the farecard."}, "Test Scenario 9": {"Test scenarios": "Correct Deduction of Fare from ePurse Balance", "Description": "Verify that the system correctly deducts the calculated fare from the ePurse balance and updates the balance accurately."}, "Test Scenario 10": {"Test scenarios": "Handling of Insufficient ePurse Balance", "Description": "Verify that the system correctly handles the scenario when the ePurse balance is insufficient to cover the calculated fare."}}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Premium Service Route with Higher Fare", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The fare for the premium service route should be higher than the Special Event fare."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Transfer Window Validation", "Test_Sce_Description": "Verify that the system correctly identifies whether the tap is within the transfer window. If the tap is not within the transfer window, the system should not allow a fare upgrade."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Valid Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly identifies whether the farecard has a valid Special Event Transfer Product. If the farecard does not have a valid Special Event Transfer Product, the system should not allow a fare upgrade."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Service Class Validation", "Test_Sce_Description": "Verify that the system correctly identifies the service class as Premium. If the service class is not identified as Premium, the system should not allow a fare upgrade."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Deduction from ePurse Balance", "Test_Sce_Description": "Verify that the system correctly deducts the fare from the ePurse balance. The deducted amount should be equal to the fare for the premium service route."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Communication with SA Tool", "Test_Sce_Description": "Verify that the system correctly communicates the fare deduction back to the SA Tool. The SA Tool should display the updated ePurse balance."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "POP Print Flag Setting", "Test_Sce_Description": "Verify that the system correctly sets the POP Print Flag to 0. This is to ensure that the device accurately displays the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Performance Test", "Test_Sce_Description": "Verify that the system performs the fare calculation and deduction within an acceptable time frame. The system should not lag or freeze during this process."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Security Test", "Test_Sce_Description": "Verify that the system securely processes the fare payment. The customer's ePurse balance and other sensitive information should be encrypted and protected from unauthorized access."}, {"Test Scenario 1": {"Test scenarios": "Premium Service Route with Higher Fare", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The fare for the premium service route should be higher than the Special Event fare."}, "Test Scenario 2": {"Test scenarios": "Transfer Window Validation", "Description": "Verify that the system correctly identifies whether the tap is within the transfer window. If the tap is not within the transfer window, the system should not allow a fare upgrade."}, "Test Scenario 3": {"Test scenarios": "Valid Special Event Transfer Product", "Description": "Verify that the system correctly identifies whether the farecard has a valid Special Event Transfer Product. If the farecard does not have a valid Special Event Transfer Product, the system should not allow a fare upgrade."}, "Test Scenario 4": {"Test scenarios": "Service Class Validation", "Description": "Verify that the system correctly identifies the service class as Premium. If the service class is not identified as Premium, the system should not allow a fare upgrade."}, "Test Scenario 5": {"Test scenarios": "Fare Deduction from ePurse Balance", "Description": "Verify that the system correctly deducts the fare from the ePurse balance. The deducted amount should be equal to the fare for the premium service route."}, "Test Scenario 6": {"Test scenarios": "Communication with SA Tool", "Description": "Verify that the system correctly communicates the fare deduction back to the SA Tool. The SA Tool should display the updated ePurse balance."}, "Test Scenario 7": {"Test scenarios": "POP Print Flag Setting", "Description": "Verify that the system correctly sets the POP Print Flag to 0. This is to ensure that the device accurately displays the transfer print status if the farecard is queried."}, "Test Scenario 8": {"Test scenarios": "Performance Test", "Description": "Verify that the system performs the fare calculation and deduction within an acceptable time frame. The system should not lag or freeze during this process."}, "Test Scenario 9": {"Test scenarios": "Security Test", "Description": "Verify that the system securely processes the fare payment. The customer's ePurse balance and other sensitive information should be encrypted and protected from unauthorized access."}}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off-peak daily cap has been reached and the farecard is outside the transfer window."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the Special Event fare."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product with lower Premium fare", "Test_Sce_Description": "Verify that the system correctly calculates and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the Special Event fare."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Performance of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak load conditions."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Security of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is secure and that all sensitive data is encrypted during transmission and storage."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off-peak daily cap has been reached and the farecard is outside the transfer window."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the Special Event fare."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Premium Service Class and Special Event Transfer Product with lower Premium fare", "Description": "Verify that the system correctly calculates and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the Special Event fare."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Non-Adult Concession", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Child Concession", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."}, "Test Scenario 6": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, "Test Scenario 7": {"Test scenarios": "Performance of Fare Payment Process", "Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak load conditions."}, "Test Scenario 8": {"Test scenarios": "Security of Fare Payment Process", "Description": "Verify that the fare payment process is secure and that all sensitive data is encrypted during transmission and storage."}}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession", "Test_Sce_Description": "Verify that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of insufficient ePurse balance", "Test_Sce_Description": "Verify that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of valid transfer product", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Inter-agency transfer processing", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of Autoload threshold", "Test_Sce_Description": "Verify that the SA Tool correctly checks that the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of Action or Load Value list", "Test_Sce_Description": "Verify that the SA Tool correctly identifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of fare payment during peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of fare upgrade on premium service route", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of free transfer on premium service route", "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route and the premium fare is lower than the Special Event fare."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of Valid Non-Adult concession", "Test_Sce_Description": "Verify that the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child, Non-discreet concession", "Description": "Verify that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, "Test Scenario 2": {"Test scenarios": "Handling of insufficient ePurse balance", "Description": "Verify that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, "Test Scenario 3": {"Test scenarios": "Processing of valid transfer product", "Description": "Verify that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."}, "Test Scenario 4": {"Test scenarios": "Inter-agency transfer processing", "Description": "Verify that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."}, "Test Scenario 5": {"Test scenarios": "Handling of Autoload threshold", "Description": "Verify that the SA Tool correctly checks that the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, "Test Scenario 6": {"Test scenarios": "Processing of Action or Load Value list", "Description": "Verify that the SA Tool correctly identifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, "Test Scenario 7": {"Test scenarios": "Handling of fare payment during peak hours after reaching Off Peak Daily Cap", "Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap."}, "Test Scenario 8": {"Test scenarios": "Processing of fare upgrade on premium service route", "Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."}, "Test Scenario 9": {"Test scenarios": "Handling of free transfer on premium service route", "Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route and the premium fare is lower than the Special Event fare."}, "Test Scenario 10": {"Test scenarios": "Processing of Valid Non-Adult concession", "Description": "Verify that the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."}}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Non-Adult, Non-Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Transfer Product", "Test_Sce_Description": "Verify that the system correctly identifies a valid transfer product on the customer's TICKET and computes the free transfer. The system should follow the Transfer Product Processing rules as per [R6]."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Audio Messages Request", "Test_Sce_Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level using the physical device buttons. The audio message should be played in the default language of the customer's Farecard."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool", "Test_Sce_Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location. The system should result in a regular ride balance fare payment and Transfer Product creation."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool", "Test_Sce_Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route. The system should result in a free transfer."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Valid Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies and processes a Valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly processes a fare payment resulting from a failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen and the system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Empty Ride Balance", "Test_Sce_Description": "Verify that the system correctly identifies when a customer's ride balance is empty. The system should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Low Battery Threshold", "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Non-CLIENT Media", "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer taps a card that is not CLIENT media. The system should not respond and the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Anti-Passback Window", "Test_Sce_Description": "Verify that the system correctly identifies when a customer's Ticket is within the Anti-Passback Window. The system should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Non-Activated Ticket", "Test_Sce_Description": "Verify that the system correctly identifies when a customer's Ticket is not activated. The system should not respond and the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, {"Test Scenario 1": {"Test scenarios": "Validating Non-Adult, Non-Child Concession", "Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."}, "Test Scenario 2": {"Test scenarios": "Validating Transfer Product", "Description": "Verify that the system correctly identifies a valid transfer product on the customer's TICKET and computes the free transfer. The system should follow the Transfer Product Processing rules as per [R6]."}, "Test Scenario 3": {"Test scenarios": "Audio Messages Request", "Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level using the physical device buttons. The audio message should be played in the default language of the customer's Farecard."}, "Test Scenario 4": {"Test scenarios": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool", "Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location. The system should result in a regular ride balance fare payment and Transfer Product creation."}, "Test Scenario 5": {"Test scenarios": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool", "Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route. The system should result in a free transfer."}, "Test Scenario 6": {"Test scenarios": "Valid Child Concession", "Description": "Verify that the system correctly identifies and processes a Valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, "Test Scenario 7": {"Test scenarios": "Fare Payment Resulting from Failed Inspection", "Description": "Verify that the system correctly processes a fare payment resulting from a failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen and the system should record both the fare payment and inspection transactions."}, "Test Scenario 8": {"Test scenarios": "Empty Ride Balance", "Description": "Verify that the system correctly identifies when a customer's ride balance is empty. The system should display a declined message to the customer and the transaction should not be conducted."}, "Test Scenario 9": {"Test scenarios": "Low Battery Threshold", "Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should switch to \u201cOut of Service\u201d mode."}, "Test Scenario 10": {"Test scenarios": "Non-CLIENT Media", "Description": "Verify that the system correctly handles a situation where a customer taps a card that is not CLIENT media. The system should not respond and the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, "Test Scenario 11": {"Test scenarios": "Anti-Passback Window", "Description": "Verify that the system correctly identifies when a customer's Ticket is within the Anti-Passback Window. The system should display a declined message to the customer and the transaction should not be conducted."}, "Test Scenario 12": {"Test scenarios": "Non-Activated Ticket", "Description": "Verify that the system correctly identifies when a customer's Ticket is not activated. The system should not respond and the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Failed Inspection", "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET that has not paid a fare during inspection and allows the operator to select the payment function on the SA Tool inspection results screen."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Recording of Fare Payment and Inspection Transactions", "Test_Sce_Description": "Ensure that the SA Tool accurately records both the fare payment and inspection transactions when a fare payment is made after a failed inspection."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Notification Display after Fare Payment and Inspection", "Test_Sce_Description": "Check that the SA Tool application returns to the Tap Card screen and displays a toast notification of the corresponding inspection action after a fare payment is made following a failed inspection."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's ride balance is empty and displays a declined message to the customer, preventing the transaction from being conducted."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Low Battery Threshold during Payment", "Test_Sce_Description": "Ensure that the SA Tool correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful TICKET tap, and that it can still process the remote lists."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "Verify that the SA Tool does not respond when a customer taps a card that is not CLIENT media, and that it displays the device error message 'Card Read Error' for a short period of time."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "Check that the SA Tool correctly identifies when a customer's TICKET is within the Anti-Passback Window and displays a declined message to the customer, preventing the transaction from being conducted."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "Ensure that the SA Tool correctly identifies when a customer's TICKET is not activated and displays a declined message to the customer, preventing the transaction from being conducted."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Expired Ticket", "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's TICKET is expired and displays a declined message to the customer, preventing the transaction from being conducted."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Period Pass", "Test_Sce_Description": "Ensure that the SA Tool correctly identifies when a customer's TICKET has a valid period pass and accepts the fare, updating the TICKET accordingly and displaying the successful fare payment screen."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Unreadable TICKET", "Test_Sce_Description": "Check that the SA Tool correctly identifies when a TICKET is unreadable and fails to read it correctly, preventing the transaction from being conducted."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Failed Inspection", "Description": "Verify that the SA Tool correctly identifies a customer's TICKET that has not paid a fare during inspection and allows the operator to select the payment function on the SA Tool inspection results screen."}, "Test Scenario 2": {"Test scenarios": "Recording of Fare Payment and Inspection Transactions", "Description": "Ensure that the SA Tool accurately records both the fare payment and inspection transactions when a fare payment is made after a failed inspection."}, "Test Scenario 3": {"Test scenarios": "Notification Display after Fare Payment and Inspection", "Description": "Check that the SA Tool application returns to the Tap Card screen and displays a toast notification of the corresponding inspection action after a fare payment is made following a failed inspection."}, "Test Scenario 4": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "Verify that the SA Tool correctly identifies when a customer's ride balance is empty and displays a declined message to the customer, preventing the transaction from being conducted."}, "Test Scenario 5": {"Test scenarios": "Low Battery Threshold during Payment", "Description": "Ensure that the SA Tool correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful TICKET tap, and that it can still process the remote lists."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "Verify that the SA Tool does not respond when a customer taps a card that is not CLIENT media, and that it displays the device error message 'Card Read Error' for a short period of time."}, "Test Scenario 7": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "Check that the SA Tool correctly identifies when a customer's TICKET is within the Anti-Passback Window and displays a declined message to the customer, preventing the transaction from being conducted."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "Ensure that the SA Tool correctly identifies when a customer's TICKET is not activated and displays a declined message to the customer, preventing the transaction from being conducted."}, "Test Scenario 9": {"Test scenarios": "Fare Payment with Expired Ticket", "Description": "Verify that the SA Tool correctly identifies when a customer's TICKET is expired and displays a declined message to the customer, preventing the transaction from being conducted."}, "Test Scenario 10": {"Test scenarios": "Fare Payment with Period Pass", "Description": "Ensure that the SA Tool correctly identifies when a customer's TICKET has a valid period pass and accepts the fare, updating the TICKET accordingly and displaying the successful fare payment screen."}, "Test Scenario 11": {"Test scenarios": "Fare Payment with Unreadable TICKET", "Description": "Check that the SA Tool correctly identifies when a TICKET is unreadable and fails to read it correctly, preventing the transaction from being conducted."}}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that has no ride balance remaining. The tool should detect the empty balance, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "This scenario tests the performance of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. The tool should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a card that is not CLIENT media. The tool should not respond and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that is within the Anti-Passback Window. The tool should detect the Anti-Passback violation, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a non-activated TICKET. The tool should detect the invalidity of the TICKET, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a locked farecard. The tool should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Unreadable TICKET", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with an unreadable TICKET. The tool should detect the TICKET but fail to read it, indicate to the operator that the TICKET is unreadable, and log the error for troubleshooting."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that has a valid non-adult, non-child concession. The tool should process the fare payment accordingly."}, {"Test Scenario 1": {"Test scenarios": "Fare Payment with Empty Ride Balance", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that has no ride balance remaining. The tool should detect the empty balance, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 2": {"Test scenarios": "Fare Payment with Low Battery", "Description": "This scenario tests the performance of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. The tool should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."}, "Test Scenario 3": {"Test scenarios": "Fare Payment with Non-CLIENT Media", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a card that is not CLIENT media. The tool should not respond and display a 'Card Read Error' message."}, "Test Scenario 4": {"Test scenarios": "Fare Payment within Anti-Passback Window", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that is within the Anti-Passback Window. The tool should detect the Anti-Passback violation, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 5": {"Test scenarios": "Fare Payment with Non-Activated Ticket", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a non-activated TICKET. The tool should detect the invalidity of the TICKET, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."}, "Test Scenario 6": {"Test scenarios": "Fare Payment with Locked Farecard", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a locked farecard. The tool should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, "Test Scenario 7": {"Test scenarios": "Fare Payment with Unreadable TICKET", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with an unreadable TICKET. The tool should detect the TICKET but fail to read it, indicate to the operator that the TICKET is unreadable, and log the error for troubleshooting."}, "Test Scenario 8": {"Test scenarios": "Fare Payment with Non-Adult, Non-Child Concession", "Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that has a valid non-adult, non-child concession. The tool should process the fare payment accordingly."}}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Low Battery Threshold Test", "Test_Sce_Description": "This scenario tests the functionality of the application when the battery level reaches the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Card Read Error Test", "Test_Sce_Description": "This scenario tests the application's response when a card that is not CLIENT media is tapped. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Anti-Passback Window Test", "Test_Sce_Description": "This scenario tests the application's response when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Non-Activated Ticket Test", "Test_Sce_Description": "This scenario tests the application's response when a customer taps a non-activated TICKET. The application should detect that the TICKET is not activated and display an appropriate error message."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Performance Test", "Test_Sce_Description": "This scenario tests the performance of the application under different conditions such as low battery, high traffic, etc. The application should perform efficiently and without any lag or delay."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Security Test", "Test_Sce_Description": "This scenario tests the security features of the application. The application should securely handle all transactions and customer data. Any attempts to breach the security should be detected and prevented."}, {"Test Scenario 1": {"Test scenarios": "Low Battery Threshold Test", "Description": "This scenario tests the functionality of the application when the battery level reaches the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, "Test Scenario 2": {"Test scenarios": "Card Read Error Test", "Description": "This scenario tests the application's response when a card that is not CLIENT media is tapped. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, "Test Scenario 3": {"Test scenarios": "Anti-Passback Window Test", "Description": "This scenario tests the application's response when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, "Test Scenario 4": {"Test scenarios": "Non-Activated Ticket Test", "Description": "This scenario tests the application's response when a customer taps a non-activated TICKET. The application should detect that the TICKET is not activated and display an appropriate error message."}, "Test Scenario 5": {"Test scenarios": "Performance Test", "Description": "This scenario tests the performance of the application under different conditions such as low battery, high traffic, etc. The application should perform efficiently and without any lag or delay."}, "Test Scenario 6": {"Test scenarios": "Security Test", "Description": "This scenario tests the security features of the application. The application should securely handle all transactions and customer data. Any attempts to breach the security should be detected and prevented."}}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Non-CLIENT Media Card", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Empty Ride Balance", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that has no ride balance. The system should detect the empty ride balance, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Low Battery Threshold", "Test_Sce_Description": "This scenario is to validate the system's response when the device battery goes below the low battery threshold during a successful ticket tap. The system should switch to 'Out of Service' mode after processing the fare payment."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Locked Farecard", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a locked farecard. The system should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Unreadable TICKET", "Test_Sce_Description": "This scenario is to validate the system's response when it detects a TICKET but fails to read it correctly. The system should indicate to the operator that the TICKET is unreadable."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Non-Adult, Non-Child Concession", "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a valid non-adult, non-child concession tries to make a fare payment. The system should process the fare payment accordingly."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Failed Inspection", "Test_Sce_Description": "This scenario is to validate the system's response when an operator inspects a customer\u2019s TICKET and determines that they have not paid a fare. The system should allow the operator to select the payment function on the inspection results screen and record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment within Anti-Passback Window", "Test_Sce_Description": "This scenario is to validate the system's response when a customer\u2019s TICKET is within the Anti-Passback Window. The system should detect that the TICKET fails the Anti-Passback checks, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a non-activated ticket. The system should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, detect that farecard is in overdraft, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Validating Fare Payment with Valid Child Concession", "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a valid child concession tries to make a fare payment. The system should find the valid child concession, display the successful child fare payment screen, and play the successful fare payment audio tone for child concession."}, {"Test Scenario 1": {"Test scenarios": "Validating Fare Payment with Non-CLIENT Media Card", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."}, "Test Scenario 2": {"Test scenarios": "Validating Fare Payment with Empty Ride Balance", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that has no ride balance. The system should detect the empty ride balance, display a declined message, and not conduct the transaction."}, "Test Scenario 3": {"Test scenarios": "Validating Fare Payment with Low Battery Threshold", "Description": "This scenario is to validate the system's response when the device battery goes below the low battery threshold during a successful ticket tap. The system should switch to 'Out of Service' mode after processing the fare payment."}, "Test Scenario 4": {"Test scenarios": "Validating Fare Payment with Locked Farecard", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a locked farecard. The system should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."}, "Test Scenario 5": {"Test scenarios": "Validating Fare Payment with Unreadable TICKET", "Description": "This scenario is to validate the system's response when it detects a TICKET but fails to read it correctly. The system should indicate to the operator that the TICKET is unreadable."}, "Test Scenario 6": {"Test scenarios": "Validating Fare Payment with Non-Adult, Non-Child Concession", "Description": "This scenario is to validate the system's response when a customer with a valid non-adult, non-child concession tries to make a fare payment. The system should process the fare payment accordingly."}, "Test Scenario 7": {"Test scenarios": "Validating Fare Payment with Failed Inspection", "Description": "This scenario is to validate the system's response when an operator inspects a customer\u2019s TICKET and determines that they have not paid a fare. The system should allow the operator to select the payment function on the inspection results screen and record both the fare payment and inspection transactions."}, "Test Scenario 8": {"Test scenarios": "Validating Fare Payment within Anti-Passback Window", "Description": "This scenario is to validate the system's response when a customer\u2019s TICKET is within the Anti-Passback Window. The system should detect that the TICKET fails the Anti-Passback checks, display a declined message, and not conduct the transaction."}, "Test Scenario 9": {"Test scenarios": "Validating Fare Payment with Non-Activated Ticket", "Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a non-activated ticket. The system should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, detect that farecard is in overdraft, display a declined message, and not conduct the transaction."}, "Test Scenario 10": {"Test scenarios": "Validating Fare Payment with Valid Child Concession", "Description": "This scenario is to validate the system's response when a customer with a valid child concession tries to make a fare payment. The system should find the valid child concession, display the successful child fare payment screen, and play the successful fare payment audio tone for child concession."}}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Anti-Passback Window Check", "Test_Sce_Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Timeout Functionality", "Test_Sce_Description": "Verify that the system correctly returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the ticket being within the Anti-Passback Window."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Ticket Validation", "Test_Sce_Description": "Verify that the system correctly validates the ticket during the Anti-Passback Window check. The system should correctly identify the ticket and its status."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Audio Tone Functionality", "Test_Sce_Description": "Verify that the system plays the correct declined audio tone when a transaction is declined due to the ticket being within the Anti-Passback Window."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Exception Flow - Unreadable Ticket", "Test_Sce_Description": "Verify that the system correctly identifies an unreadable ticket during the Anti-Passback Window check and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Exception Flow - Low Battery Threshold", "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the battery goes below the low battery threshold during a successful ticket tap. The system should still be able to process the remote lists."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Alternate Flow - Valid Child Concession", "Test_Sce_Description": "Verify that the system correctly identifies a ticket with a Valid Child concession during the Anti-Passback Window check and processes the fare payment accordingly. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Alternate Flow - Failed Inspection", "Test_Sce_Description": "Verify that the system correctly identifies a ticket that has not paid a fare during an inspection and processes the fare payment accordingly. The system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Performance - Multiple Transactions", "Test_Sce_Description": "Verify that the system can handle multiple transactions simultaneously without any performance degradation. The system should be able to process all transactions correctly and within the specified time frame."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Scnario": "Security - Unauthorized Access", "Test_Sce_Description": "Verify that the system prevents unauthorized access to the SA Tool application. Only operators who are signed-in to the SA Tool application in the revenue mode should be able to access the application."}, {"Test Scenario 1": {"Test scenarios": "Anti-Passback Window Check", "Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."}, "Test Scenario 2": {"Test scenarios": "Timeout Functionality", "Description": "Verify that the system correctly returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the ticket being within the Anti-Passback Window."}, "Test Scenario 3": {"Test scenarios": "Ticket Validation", "Description": "Verify that the system correctly validates the ticket during the Anti-Passback Window check. The system should correctly identify the ticket and its status."}, "Test Scenario 4": {"Test scenarios": "Audio Tone Functionality", "Description": "Verify that the system plays the correct declined audio tone when a transaction is declined due to the ticket being within the Anti-Passback Window."}, 