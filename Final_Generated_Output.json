[
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product with Lower Premium Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance Test for Fare Payment",
        "Test_Sce_Description": "Verify that the system is able to handle multiple fare payments simultaneously without any performance degradation."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security Test for Fare Payment",
        "Test_Sce_Description": "Verify that the system securely processes fare payments and does not expose any sensitive customer information during the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment on SA Tool with Premium Service Class and Valid Regular Service Transfer Product",
        "Test_Sce_Description": "Verify that the fare payment is successfully made on the SA Tool when the Service Class is Premium or Special Event, Farecard has a valid Regular Service Transfer Product and the tap is within Transfer Window. The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse and this should be communicated back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window",
        "Test_Sce_Description": "Verify that the fare payment is successfully made on the SA Tool when the Farecard has reached off peak Daily Cap Limit, Farecard has not reached Peak Daily Cap limit and Farecard is out of transfer window. The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse and this should be communicated back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare",
        "Test_Sce_Description": "Verify that a fare upgrade occurs when a tap on a premium service route/location is made after previously riding on a Special Event service route within the transfer window. The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse and this should be communicated back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "Verify that a free transfer occurs when a tap on a premium service route/location is made after previously riding on a Special Event service route within the transfer window. The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse and this should be communicated back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Valid Non-Adult Concession",
        "Test_Sce_Description": "Verify that the fare payment is successfully made on the SA Tool when the customer\u2019s Farecard has a Valid Non-Adult concession. The SA Tool should compute and deduct the Upgrade fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "Verify that the fare payment is successfully made on the SA Tool when the customer\u2019s Farecard has a Valid Child concession. The SA Tool should deduct the correct Child Concession fare and display the successful Child fare payment screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the fare payment is successfully made on the SA Tool when the operator inspects a customer\u2019s farecard and determines that they have not paid a fare. The operator should be able to select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after previously reaching off peak daily cap (outside the transfer window). The system should also ensure that the farecard has not reached the Peak Daily Cap limit."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The system should also ensure that the farecard has a valid Special Event Transfer Product."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s Farecard has a Valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the correct Child Concession fare from the ePurse balance when a fare payment is made and the customer\u2019s Farecard has a Valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should also record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame, ensuring that the system performance is not compromised during peak hours or high transaction volumes."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure, ensuring that customer\u2019s ePurse balance and concession information are not compromised during the transaction. The system should also ensure that the fare payment information is securely stored and cannot be accessed by unauthorized users."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "This scenario will validate if the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling ePurse balance less than fare amount",
        "Test_Sce_Description": "This scenario will test how the SA Tool handles situations where the customer's ePurse balance is less than the fare amount. The tool should put the Farecard into overdraft (negative balance)."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing valid transfer product within Intra-agency Transfer window",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing valid transfer product within Inter-agency Transfer window",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product from other transit agency and computes the fare based on the transfer product and the transfer agreement between the transit agencies."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling Autoload Threshold",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing Farecard on the Action or Load Value List",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window",
        "Test_Sce_Description": "This scenario will test how the SA Tool handles fare payment during Peak hours after the Farecard has reached off peak Daily Cap Limit and is out of transfer window. The tool should compute the fare and deduct the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) and results in a fare upgrade."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) and results in a free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult Concession on Farecard",
        "Test_Sce_Description": "This scenario will validate if the SA Tool correctly identifies and processes a Farecard with a Valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Temporal Class Supplement Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the device displays an HMI reflecting the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Autoload Enabled Farecard Transaction",
        "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance and the Fare is deducted from the Farecard E-Purse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Default Trip Override",
        "Test_Sce_Description": "Verify that when a Farecard without a Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on and provides appropriate feedback to the Cardholder of a successful transaction and that the Default Trip was overridden."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Farecard Validation Failure",
        "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device provides the cardholder with the appropriate feedback without updating the Farecard and logs the error in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that when a blocked Farecard is tapped on a device, the right to travel is not conferred, the device provides the appropriate feedback to the Cardholder and logs the error in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Max Travel Duration Exceeded",
        "Test_Sce_Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment, deducts the value from the Farecard E-Purse and opens a new trip."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality, presents Anti-Collision HMI to customer and logs the error in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Non-Activated Farecard",
        "Test_Sce_Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful, the device provides feedback to the Cardholder of an unsuccessful transaction and logs the error in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides feedback to the Cardholder of an unsuccessful transaction and logs the error in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Farecard Autoload Threshold Crossing",
        "Test_Sce_Description": "Test the functionality of the system when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold. The system should detect that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, which triggers the Autoload amount to be added to the Farecard. The Device should deduct the Fare from the Farecard E-Purse balance and provide appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the autoload was successful."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Farecard Autoload Threshold Not Crossing",
        "Test_Sce_Description": "Test the functionality of the system when a Farecard with Autoload Enabled is tapped on a device and the Fare amount does not cross the Auto-load threshold. The system should not trigger the Autoload amount to be added to the Farecard. The Device should deduct the Fare from the Farecard E-Purse balance and provide appropriate feedback to the Cardholder of a successful transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Farecard Autoload Threshold Crossing Performance",
        "Test_Sce_Description": "Test the performance of the system when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold. The system should process the transaction and update the Farecard balance within the acceptable time frame."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Farecard Autoload Threshold Crossing Security",
        "Test_Sce_Description": "Test the security of the system when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold. The system should securely process the transaction and update the Farecard balance without exposing sensitive cardholder information."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Farecard Validation Failure at Tap-On",
        "Test_Sce_Description": "Test the functionality of the system when a Farecard fails validation checks at Tap-On. The system should provide appropriate feedback to the Cardholder and prevent the transaction from proceeding."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Farecard Validation Failure at Tap-On Performance",
        "Test_Sce_Description": "Test the performance of the system when a Farecard fails validation checks at Tap-On. The system should process the validation checks and provide feedback to the Cardholder within the acceptable time frame."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Farecard Validation Failure at Tap-On Security",
        "Test_Sce_Description": "Test the security of the system when a Farecard fails validation checks at Tap-On. The system should securely process the validation checks and provide feedback to the Cardholder without exposing sensitive cardholder information."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Full Fare-by-Zone transaction processing",
        "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Override Default O/D",
        "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on. The customer should be able to request the override of a Default Trip by interacting with the Device."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Eligibility for capping discount",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list and complete the fare processing. ATS should calculate the capping discount and apply to the fare calculation."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Eligibility for multiple capping discounts",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS should take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Device offline and customer eligible for capping discount",
        "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services. The tap should then be rated in ATS. Capping rules should follow use-case logic outlined in ticketing use cases."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media fails ODA check",
        "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Farecard is blocked",
        "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. The Device should provide the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. The Device should determine that the Tap-On Time + Max Travel Duration < Current Time and Auto-settle the Underpayment and deduct the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple NFC media are presented to the device at one time",
        "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. The Device should block all user functionality, presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Tap a non-activated Farecard on an SA Tool",
        "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs",
        "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device should provide the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Non-Revenue farecard in training mode",
        "Test_Sce_Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode and displays a declined HMI when the Non-Revenue card is tapped in the revenue mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard tap during Temporal Class Supplement",
        "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the device displays an HMI reflecting the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard with Autoload Enabled",
        "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Farecard has the Autoload amount automatically added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard without Default O/D",
        "Test_Sce_Description": "Verify that when a Farecard without a Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Audio Messages Request",
        "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard Validation Failure",
        "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the system handles the exception appropriately."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Period Pass with Higher Fare Value",
        "Test_Sce_Description": "Verify that when a Farecard with a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value is used, the ATS computes and deducts the Upgrade fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Period Pass with Lower Fare Value",
        "Test_Sce_Description": "Verify that when a Farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used, the ATS identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Limited Period Pass",
        "Test_Sce_Description": "Verify that when a Farecard with a valid Limited Period Pass and the current time is within the limits of the product is used, the system accepts the fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Farecard",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that when a Farecard with a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the system accepts the fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after reaching the off peak daily cap limit and outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window and the premium fare is higher than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product with Lower Premium Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and allows a free transfer when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window and the premium fare is lower than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid non-adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Processing",
        "Test_Sce_Description": "Verify that the system processes the fare payment within the acceptable time limit and does not cause any delay or lag in the system."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security of Fare Payment Processing",
        "Test_Sce_Description": "Verify that the system securely processes the fare payment and does not expose any sensitive customer information during the process."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Premium Service Route with Higher Fare than Special Event",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare difference when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The system should recognize the higher fare of the premium service and charge the customer accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Deduction Communication",
        "Test_Sce_Description": "Verify that the fare deduction made by the ATS is correctly communicated back to the SA Tool. The SA Tool should accurately display the deducted amount."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Transfer Print Status Display",
        "Test_Sce_Description": "Verify that the SA Tool correctly sets the POP Print Flag to 0 and accurately displays the transfer print status when the farecard is queried."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Peak Hour Fare Payment after Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare when a customer taps during peak hours after previously reaching the off peak daily cap, outside of the transfer window. The system should recognize that the farecard has not reached the Peak Daily Cap limit and charge the customer accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Premium Service Route with Lower Fare than Special Event",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The system should recognize the lower fare of the premium service and not charge the customer for the transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Valid Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare when a customer with a valid Non-Adult concession taps on the SA Tool. The system should recognize the concession and charge the customer the reduced fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare when a customer with a valid Child concession taps on the SA Tool. The system should recognize the concession and charge the customer the reduced fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare when a customer\u2019s farecard fails inspection and the operator selects the payment function on the SA Tool inspection results screen. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Verify that the system can handle a high volume of fare payments and transfers without slowing down or crashing. This can be done by simulating a large number of customers tapping their farecards on the SA Tool within a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Verify that the system securely processes fare payments and protects customer information. This can be done by checking that all transactions are encrypted and that customer data is not stored in a readable format."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid non-adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak load conditions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure and that all sensitive data is encrypted during transmission and storage."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Valid Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Registered Farecard with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's ePurse balance is less than the fare amount and puts the Farecard into overdraft."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Transaction within Intra-agency Transfer window",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Transaction within Inter-agency Transfer window",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product from another transit agency on the customer's Farecard and computes the fare based on the transfer agreement between the transit agencies."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Autoload Threshold is met",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's Farecard meets or drops below the Autoload Threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Customer\u2019s Farecard is on the Action or Load Value List",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a fare payment is made during peak hours after the off peak daily cap has been reached and the Farecard is out of the transfer window, and deducts the correct fare amount."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer taps on a premium service route/location after previously riding on a Special Event service route within the transfer window, and computes the fare upgrade."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer taps on a premium service route/location after previously riding on a Special Event service route within the transfer window, and computes the free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's Farecard has a Valid Non-Adult concession and deducts the correct concession fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Temporal Class Supplement Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the device displays an HMI reflecting the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Autoload Enabled Farecard Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Farecard has the Autoload amount automatically added to the E-Purse balance and the device deducts the Fare from the Farecard E-Purse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Override Default Trip Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on and the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the Default Trip was overridden."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Audio Messages Request during Fare-by-Zone TA",
        "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the SA Tool displays the fare payment screen to the operator and customer for the duration of the audio message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Farecard Validation Failure at Tap-On",
        "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device provides the cardholder with the appropriate feedback without updating the Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Blocked Farecard Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a blocked Farecard is tapped on a device, the right to travel is not conferred and the device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Exceeding Max Travel Duration Tap-On Transaction",
        "Test_Sce_Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment and opens a new trip."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Non-Activated Farecard Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful and the device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Card Reading Error during Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Autoload Threshold Crossing",
        "Test_Sce_Description": "Verify that when the Farecard E-Purse Balance crosses the Auto-load threshold due to the Fare, the Autoload amount is automatically added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Autoload Deduction",
        "Test_Sce_Description": "Verify that the Device correctly deducts the Fare from the Farecard E-Purse balance after the Autoload amount has been added."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Successful Transaction Feedback",
        "Test_Sce_Description": "Verify that the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to an Autoload transaction and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Autoload Threshold Not Crossed",
        "Test_Sce_Description": "Verify that if the Fare does not cause the Farecard E-Purse Balance to cross the Auto-load threshold, the Autoload amount is not added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Autoload Threshold Crossing Performance",
        "Test_Sce_Description": "Verify the performance of the system when the Autoload threshold is crossed. The system should be able to handle the transaction and update the E-Purse balance in a timely manner."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Security of Autoload Transactions",
        "Test_Sce_Description": "Verify that the Autoload transactions are secure and that the Farecard E-Purse balance is updated correctly and securely."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Exception Flow - Farecard Validation Failure",
        "Test_Sce_Description": "Verify the system's behavior when the Farecard fails validation checks at Tap-On. The system should handle this exception correctly and provide appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Alternate Flow - Default Trip Override",
        "Test_Sce_Description": "Verify the system's behavior when the Customer Overrides the Default Trip prior to tapping-off. The system should process the tap as a result tap-on and provide appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Full Fare-by-Zone transaction processing",
        "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Override default O/D on Open Payments Media",
        "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on when the customer requests the override of a Default Trip by interacting with the Device."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Capping discount eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple capping discounts eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS will take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Offline device capping discount eligibility",
        "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules will follow use-case logic outlined in ticketing use cases."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media fails ODA check",
        "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device performs the necessary validation and determines that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Farecard is blocked",
        "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. Card reader detects Farecard is blocked. Right to travel is not conferred. The Device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. Device determines that the Tap-On Time + Max Travel Duration < Current Time. Device Auto-settles the Underpayment and deducts the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple NFC media are presented to the device at one time",
        "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. Customer presents multiple NFC medias to the card reader at once. Device blocks all user functionality, presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Tap a non-activated Farecard on an SA Tool",
        "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. Device detects that the Farecard is not activated. The device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs",
        "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader)."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Non-Revenue farecard in training mode",
        "Test_Sce_Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode and if the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard with Temporal Class Supplement",
        "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the Device should contain an HMI reflecting the Temporal Class Supplement, and should process the Tap-On Transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard with Autoload Enabled",
        "Test_Sce_Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard without Default O/D",
        "Test_Sce_Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device should process the tap as a result tap-on."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Audio Messages Request",
        "Test_Sce_Description": "Verify that when a customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard Validation Checks",
        "Test_Sce_Description": "Verify that if a Farecard fails validation checks at Tap-On, the device should display an error message and should not process the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment with Period Pass",
        "Test_Sce_Description": "Verify that if a Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value, the ATS should compute and deduct the Upgrade fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment with Limited Period Pass",
        "Test_Sce_Description": "Verify that if a Farecard has a valid Limited Period Pass and the current time is within the limits of the product, the device should accept the fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment with Limited Period Pass outside of valid time",
        "Test_Sce_Description": "Verify that if a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the device should accept the fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse Balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse Balance when a fare payment is made with a premium service class farecard that has a valid Special Event Transfer Product and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse Balance when a fare payment is made with a farecard that has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse Balance when a fare payment is made with a farecard that has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse Balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse Balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Lower Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made with a premium service class farecard that has a valid Special Event Transfer Product, the tap is within the transfer window, and the premium fare is lower than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Higher Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare upgrade from the ePurse Balance when a fare payment is made with a premium service class farecard that has a valid Special Event Transfer Product, the tap is within the transfer window, and the premium fare is higher than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance of the SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay when computing and deducting fares from the ePurse Balance under various conditions and scenarios."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security of the SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool securely handles and processes fare payment transactions, ensuring that customer data is protected and that transactions are accurately recorded and reported."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the farecard has reached the off peak daily cap limit and is outside the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the Child Concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of the SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay when computing and deducting fares from the ePurse balance under various conditions such as peak hours, off peak hours, within transfer window, outside transfer window, with different service classes and transfer products."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of the SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool securely handles the customer's farecard information and ePurse balance during fare payment computations and deductions. The system should prevent unauthorized access and manipulation of the farecard data and ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Valid Regular Service Transfer Product",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a service class of Premium and the farecard has a valid Regular Service Transfer Product within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Valid Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a service class of Premium and the farecard has a valid Special Event Transfer Product within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of SA Tool during Fare Payment",
        "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay during the fare payment process, ensuring a smooth user experience."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of SA Tool during Fare Payment",
        "Test_Sce_Description": "Verify that the SA Tool securely processes fare payments, ensuring that customer data is protected and that the payment process is secure from potential threats."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of insufficient ePurse balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of valid transfer product",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Inter-agency transfer processing",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Autoload threshold processing",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Action or Load Value list processing",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of fare payment during peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of fare payment on Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of fare payment on Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of fare payment with a Valid Non-Adult Concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies and processes the fare payment when the customer's Farecard has a Valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid transfer product on the customer's TICKET. The system should compute the free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that the system correctly processes the customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location. The system should result in a regular ride balance fare payment and Transfer Product creation."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route. The system should result in a free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a Valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly processes fare payment resulting from failed inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a TICKET with no Ride Balance remaining. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should switch to \u201cOut of Service\u201d mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer taps a card that is not CLIENT media. The system should display the device error message \u201cCard Read Error\u201d."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a TICKET within the Anti-Passback Window. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a non-activated TICKET. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly handles fare payment when the ticket inspection fails. The operator should be able to select the payment function on the SA Tool inspection results screen, and the system should record both the fare payment and inspection transactions. The application should then return to the Tap Card screen with a notification of the corresponding inspection action."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly handles fare payment when the customer's ride balance is empty. The SA Tool should detect the empty Ride Balance, display a declined message to the customer, and not conduct the transaction. The SA Tool should then play the declined audio tone and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "Verify that the system correctly handles fare payment when the device's battery goes below the low battery threshold during payment. If the low battery threshold is reached before the fare payment is processed, the application should switch to 'Out of Service' mode. If the fare payment is processed before the low battery threshold is reached, the application should then switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly handles fare payment when the customer taps a card that is not CLIENT media. The SA Tool application should not respond, but the device should display the error message 'Card Read Error' for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly handles fare payment when the customer's ticket is within the Anti-Passback Window. The device should detect that the ticket fails the Anti-Passback checks, display a declined message to the customer, and not conduct the transaction. The SA Tool should then play the declined audio tone and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly handles fare payment when the customer taps a non-activated ticket. The device should detect that the ticket is not activated, display a declined message to the customer, and not conduct the transaction. The SA Tool should then play the declined audio tone and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Expired Ticket",
        "Test_Sce_Description": "Verify that the system correctly handles fare payment when the customer taps an expired ticket. The device should detect that the ticket is expired, display a declined message to the customer, and not conduct the transaction. The SA Tool should then play the declined audio tone and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Period Pass",
        "Test_Sce_Description": "Verify that the system correctly handles fare payment when the customer's ticket has a valid period pass. The device should compute that the ticket has a valid period pass, accept the fare, and update the ticket accordingly. The SA Tool should then display the successful fare payment screen, play the successful fare payment audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "Verify that the system correctly handles fare payment when the SA Tool application detects the ticket but fails to read it correctly. The application should handle this exception appropriately and not crash or hang."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer tries to make a fare payment with a TICKET that has no ride balance remaining. The SA Tool should detect the empty ride balance, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "This scenario will test the performance of the SA Tool when the device battery goes below the low battery threshold during a fare payment. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5 of the Main Use Case. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer tries to make a fare payment with a card that is not CLIENT media. The SA Tool application should not respond, but the device should display a 'Card Read Error' message for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer tries to make a fare payment with a non-activated TICKET. The SA Tool should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, detect that the farecard is in overdraft, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a farecard is locked. The SA Tool should read the Farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's TICKET is unreadable. The SA Tool NFC reader should detect the TICKET but be unable to read it, indicating to the operator that the TICKET is unreadable. If the customer taps the NFC reader again and the tap is successful, steps 4 \u2013 9 of the Main Use Case should be conducted. If the tap is unsuccessful, the SA Tool application should indicate to the operator that the TICKET is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's TICKET has a valid Non-Adult, Non-Child concession. The SA Tool should process the fare payment according to the concession rules."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Low Battery Threshold Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when the battery goes below the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Fare Payment Processing Test",
        "Test_Sce_Description": "This scenario tests the fare payment processing functionality of the application. The application should be able to process the customer's fare payment as per Step 5 if the low battery threshold is not reached before Step 5."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Out of Service Mode Test",
        "Test_Sce_Description": "This scenario tests the 'Out of Service' mode functionality of the application. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5 or after processing the customer's fare payment as per Step 5."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Card Read Error Test",
        "Test_Sce_Description": "This scenario tests the error handling functionality of the application when a card that is not CLIENT media is tapped. The application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Anti-Passback Checks Test",
        "Test_Sce_Description": "This scenario tests the Anti-Passback checks functionality of the application. The device should detect that the TICKET fails the Anti-Passback checks and the application should display a declined message to the customer. The transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Declined Message Display Test",
        "Test_Sce_Description": "This scenario tests the declined message display functionality of the application. The application should display a declined message to the customer if the TICKET fails the Anti-Passback checks. The SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Ride Balance Empty Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when the customer's ride balance is empty. The SA Tool should detect that the Ride Balance is empty and display a declined message to the customer. The transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Ticket Activation Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when the customer's Ticket is not activated. The application should be able to detect that the Ticket is not activated and handle the situation appropriately."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should display a declined message and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the low battery threshold is reached during a fare payment process. If the threshold is reached before Step 5, the application should switch to 'Out of Service' mode. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should display a declined message and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a non-activated ticket. The system should display a declined message and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a locked farecard. The system should display a declined screen and the inspection should not proceed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with an unreadable TICKET. The system should indicate to the operator that the TICKET is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a TICKET that has a valid Non-Adult, Non-Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Validating Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Timeout Functionality",
        "Test_Sce_Description": "Verify that the application returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the ticket being within the Anti-Passback Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Validating Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies a non-activated ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Performance of SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool application performs efficiently when handling multiple transactions simultaneously. The application should not crash or slow down significantly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Security of SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool application securely handles customer data during transactions. No customer data should be leaked or accessible to unauthorized users."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Handling of Expired Tickets",
        "Test_Sce_Description": "Verify that the system correctly identifies an expired ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Handling of Unreadable Tickets",
        "Test_Sce_Description": "Verify that the system correctly identifies an unreadable ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Handling of Tickets with No Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket with no ride balance and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Handling of Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the battery goes below the low battery threshold during a successful ticket tap."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Handling of Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly identifies a card that is not CLIENT media and does not respond. The device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment using a non-activated ticket. The tool should detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment using a ticket with an empty ride balance. The tool should detect that the ride balance is empty and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode. Else, the customers fare payment should be processed as per Step 5. The application should then switch to \u201cOut of Service\u201d mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media Card",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment using a non-CLIENT media card. The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The device should detect that the ticket fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment using a locked farecard. The SA Tool should read the farecard, determine that it is locked, display a declined screen to the operator and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment using an unreadable ticket. The SA Tool NFC reader should detect the ticket but be unable to read it. The SA Tool application should indicate to the operator that the ticket is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment using a ticket with a valid non-adult, non-child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a premium service class farecard that has a valid special event transfer product and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the upgrade fare from the ePurse balance when a fare payment is made with a farecard that has a valid non-adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the child concession fare from the ePurse balance when a fare payment is made with a farecard that has a valid child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance Test for Fare Payment",
        "Test_Sce_Description": "Verify that the system can handle a high volume of fare payments simultaneously without any performance degradation."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security Test for Fare Payment",
        "Test_Sce_Description": "Verify that the system securely processes fare payments and does not expose any sensitive customer information during the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Valid Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid non-adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and allows a free transfer when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window, and the premium fare is lower than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Higher Special Event Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window, and the premium fare is higher than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Verify that the system can handle a high volume of fare payments simultaneously without any degradation in performance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Verify that the system securely processes fare payments, ensuring that customer data is protected and that transactions are processed securely."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Premium Service Route with Lower Fare than Special Event",
        "Test_Sce_Description": "Verify that when a customer taps on a premium service route after previously riding on a Special Event service route (within the transfer window), the system correctly identifies this as a free transfer and does not deduct any fare from the ePurse Balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Deduction from ePurse Balance",
        "Test_Sce_Description": "Verify that the ATS correctly computes the fare and deducts the amount from the Virtual Card E-Purse. The balance in the ePurse should be updated correctly after the fare deduction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Communication with SA Tool",
        "Test_Sce_Description": "Verify that the fare deduction and updated balance are correctly communicated back to the SA Tool and displayed to the operator."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Transfer Print Status Display",
        "Test_Sce_Description": "Verify that the SA Tool sets the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Valid Non-Adult Concession Fare Deduction",
        "Test_Sce_Description": "Verify that when a customer with a valid Non-Adult concession taps on the SA Tool, the system correctly identifies the concession and deducts the corresponding fare from the ePurse Balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Peak Hour Fare Payment after Reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that when a customer taps on peak hours after previously reaching off peak daily cap (outside the transfer window), the system correctly identifies this as a fare payment and deducts the corresponding fare from the ePurse Balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Premium Service Route with Higher Fare than Special Event",
        "Test_Sce_Description": "Verify that when a customer taps on a premium service route after previously riding on a Special Event service route (within the transfer window), the system correctly identifies this as a fare upgrade and deducts the corresponding fare from the ePurse Balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Valid Child Concession Fare Deduction",
        "Test_Sce_Description": "Verify that when a customer with a valid Child concession taps on the SA Tool, the system correctly identifies the concession and deducts the corresponding fare from the ePurse Balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that when an operator inspects a customer\u2019s farecard and determines that they have not paid a fare, the operator can select the payment function on the SA Tool inspection results screen and the system correctly deducts the fare from the ePurse Balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling ePurse balance less than fare amount",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing valid transfer product within Intra-agency Transfer window",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing valid transfer product within Inter-agency Transfer window",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product from other transit agency and computes the fare based on the transfer agreement between the transit agencies within the Inter-agency Transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling Autoload Threshold",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing Farecard on the Action or Load Value List",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling fare payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap (outside the transfer window)."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route (within the transfer window)."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route (within the transfer window) and the Premium fare is lower than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling Valid Non-Adult Concession on Farecard",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Temporal Class Supplement Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the device displays an HMI reflecting the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Autoload Enabled Farecard Transaction",
        "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Farecard has the Autoload amount automatically added to the E-Purse balance and the device deducts the Fare from the Farecard E-Purse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Override Default Trip Transaction",
        "Test_Sce_Description": "Verify that when a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on and the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the Default Trip was overridden."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that when a customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Farecard Validation Failure",
        "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window and provides the appropriate feedback to the cardholder without updating the Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Blocked Farecard Transaction",
        "Test_Sce_Description": "Verify that when a Farecard is blocked, the right to travel is not conferred and the Device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Max Travel Duration Exceeded",
        "Test_Sce_Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality and presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Non-Activated Farecard Transaction",
        "Test_Sce_Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful and the device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Autoload Threshold Crossing",
        "Test_Sce_Description": "Verify that when the Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Autoload Threshold Not Crossing",
        "Test_Sce_Description": "Verify that when the Farecard with Autoload Enabled is tapped on a device and the Fare amount does not cross the Auto-load threshold, the Autoload amount is not added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Fare Deduction After Autoload",
        "Test_Sce_Description": "Verify that after the Autoload amount is added to the E-Purse balance, the Fare is deducted from the updated E-Purse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Feedback to Cardholder After Autoload",
        "Test_Sce_Description": "Verify that the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to an Autoload transaction and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Performance of Autoload Process",
        "Test_Sce_Description": "Verify the performance of the Autoload process by checking the time taken to add the Autoload amount to the E-Purse balance and deduct the Fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Security of Autoload Process",
        "Test_Sce_Description": "Verify the security of the Autoload process by ensuring that the Autoload amount is securely added to the E-Purse balance and the Fare is securely deducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Exception Flow - Farecard Validation Failure",
        "Test_Sce_Description": "Verify that when the Farecard fails validation checks at Tap-On, the device does not proceed with the Autoload process."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Alternate Flow - Farecard with No Default O/D",
        "Test_Sce_Description": "Verify that when the Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Full Fare-by-Zone transaction processing",
        "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Override Default O/D",
        "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on. The customer should be able to request the override of a Default Trip by interacting with the Device."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Capping discount eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list and complete the fare processing. ATS should calculate the capping discount and apply to the fare calculation."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple capping discounts eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS should take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Offline device capping discount",
        "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules should follow use-case logic outlined in ticketing use cases."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media fails ODA check",
        "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device should detect that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. The Card reader should detect that Farecard is blocked and the Device should provide the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Max Travel Duration Exceeded",
        "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. The Device should determine that the Tap-On Time + Max Travel Duration < Current Time and Auto-settle the Underpayment and deduct the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple NFC media presented",
        "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. The Device should block all user functionality, and present Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Non-activated Farecard",
        "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. The Device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Card reading error",
        "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device should provide the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Non-Revenue farecard in training mode",
        "Test_Sce_Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode and displays a declined HMI when the Non-Revenue card is tapped in the revenue mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard tap during Temporal Class Supplement",
        "Test_Sce_Description": "Verify that the device reflects the Temporal Class Supplement on its HMI and processes the Tap-On Transaction as a normal tap-on when a Farecard is tapped during a time period that contains an associated Temporal Class Supplement."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Autoload Enabled Farecard",
        "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Farecard has the Autoload amount automatically added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard without Default O/D",
        "Test_Sce_Description": "Verify that if a Farecard without a Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Audio Messages Request",
        "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard Validation Failure",
        "Test_Sce_Description": "Verify that the system handles the scenario where a Farecard fails validation checks at Tap-On appropriately."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Period Pass with Higher Fare Value",
        "Test_Sce_Description": "Verify that when a Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value, the ATS computes and deducts the Upgrade fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Period Pass with Lower Fare Value",
        "Test_Sce_Description": "Verify that when a Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value, the ATS identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Limited Period Pass",
        "Test_Sce_Description": "Verify that when a Farecard has a valid Limited Period Pass and the current time is within the limits of the product, the system accepts the fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that when a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the system accepts the fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a premium service class and the farecard has a valid Special Event Transfer Product and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Verify that the system is able to handle a high volume of fare payments simultaneously without any degradation in performance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Verify that the system securely processes fare payments and that sensitive customer information such as ePurse balance is not exposed during the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance Test for Fare Payment",
        "Test_Sce_Description": "Verify that the system performs efficiently when processing fare payments, ensuring that the fare is calculated and deducted from the ePurse balance within the expected time frame."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security Test for Fare Payment",
        "Test_Sce_Description": "Verify that the system securely processes fare payments, ensuring that sensitive customer information such as ePurse balance and farecard details are protected."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment on Premium Service Route with Higher Premium Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare upgrade from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment on Premium Service Route with Lower Premium Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and allows a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Valid Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the correct Child Concession fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of the SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay when computing and deducting fares from the ePurse balance, especially during peak hours."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of the SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool securely processes fare payments, ensuring that customer data is protected and that the ePurse balance is accurately updated."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of insufficient ePurse balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of valid transfer product",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Inter-agency transfer processing",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of Autoload threshold",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of Action or Load Value list",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of peak hours payment after reaching off peak daily cap",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap (outside the transfer window)."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of premium service route with transfer where the premium fare is higher than the special event fare",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route (within the transfer window)."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of premium service route with transfer where the premium fare is lower than the special event fare",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route (within the transfer window)."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid transfer product on the customer's TICKET. The system should compute the free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location, resulting in a regular ride balance fare payment and Transfer Product creation."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route, resulting in a free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a Valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly processes fare payment resulting from a failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen and the system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a TICKET with no Ride Balance remaining. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly switches to \u201cOut of Service\u201d mode when the low battery threshold is reached during a successful TICKET tap."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a card that is not CLIENT media. The system should display the device error message \u201cCard Read Error\u201d for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a TICKET within the Anti-Passback Window. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a non-activated TICKET. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Valid Transfer Product",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the free transfer when the ticket has a valid Transfer Product and the tap is within the Transfer Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a Valid Child Concession on the customer's ticket and displays the successful Child fare payment screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the SA Tool correctly records both the fare payment and inspection transactions when the operator determines that the customer has not paid a fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ride balance is empty and displays a declined message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "Verify that the SA Tool correctly switches to 'Out of Service' mode when the battery goes below the low battery threshold during payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the SA Tool correctly does not respond when the customer taps a card that is not CLIENT media."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ticket is within the Anti-Passback Window and displays a declined message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ticket is not activated and displays a declined message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Expired Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ticket is expired and displays a declined message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Period Pass",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes that the ticket has a valid period pass and accepts the fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects when the ticket is unreadable and fails to read it correctly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to pay for a fare using a TICKET with no remaining ride balance. The system should detect the empty balance, decline the transaction, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed. If the threshold is reached after the fare payment is processed, the system should complete the transaction and then switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to pay for a fare using a card that is not CLIENT media. The system should not respond to the tap, and a 'Card Read Error' message should be displayed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to pay for a fare using a TICKET that is within the Anti-Passback Window. The system should detect the Anti-Passback violation, decline the transaction, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to pay for a fare using a non-activated TICKET. The system should detect the invalid TICKET, decline the transaction, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to pay for a fare using a locked Farecard. The system should detect the locked Farecard, decline the transaction, and display a declined message to the operator."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to pay for a fare using an unreadable TICKET. The system should detect the unreadable TICKET, display an error message to the operator, and prompt the customer to tap the TICKET again. If the second tap is unsuccessful, the system should display an error message to the operator."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to pay for a fare using a TICKET with a valid concession that is neither Adult nor Child. The system should detect the valid concession and process the fare payment accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Low Battery Threshold Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when the battery level reaches the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Card Read Error Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer taps a card that is not CLIENT media. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Anti-Passback Window Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Non-Activated Ticket Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer taps a non-activated TICKET. The application should detect that the TICKET is not activated and display an appropriate error message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Empty Ride Balance Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer's ride balance is empty. The SA Tool should detect that the Ride Balance is empty and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Valid Child Concession Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer's TICKET has a Valid Child concession. The application should detect the Valid Child Concession and display the successful Child fare payment screen. The SA Tool should play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Failed Inspection Test",
        "Test_Sce_Description": "This scenario tests the application's response when the operator inspects a customer's TICKET and determines that they have not paid a fare. The operator should select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Fare Payment with Free Transfer Test",
        "Test_Sce_Description": "This scenario tests the application's response when the fare payment is being made on the FLATFARE BASED SA Tool with a valid Transfer Product within the Transfer Window. The SA Tool should compute the free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Non-CLIENT Media Card",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that has no ride balance remaining. The system should detect the empty ride balance, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "This scenario is to validate the system's response when the device battery goes below the low battery threshold during a successful ticket tap. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment processing step."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Ticket in Anti-Passback Window",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that is within the Anti-Passback Window. The system should detect the Anti-Passback check failure, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a non-activated ticket. The system should detect the invalidity of the ticket, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Locked Farecard",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a locked farecard. The system should detect the locked status of the farecard, display a declined screen, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with an unreadable ticket. The system should detect the unreadability of the ticket and indicate to the operator that the ticket is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a valid non-adult, non-child concession tries to make a fare payment. The system should process the fare payment accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Anti-Passback Window Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Declined Message Display",
        "Test_Sce_Description": "Ensure that the SA Tool application correctly displays a declined message to the customer when the transaction is not conducted due to the ticket being within the Anti-Passback Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Declined Audio Tone",
        "Test_Sce_Description": "Check that the SA Tool plays the declined audio tone when the transaction is not conducted due to the ticket being within the Anti-Passback Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Timeout Functionality",
        "Test_Sce_Description": "Verify that the app returns to the SA Tool application Tap Card screen after a configurable timeout when the transaction is not conducted due to the ticket being within the Anti-Passback Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Ticket Activation Check",
        "Test_Sce_Description": "Ensure that the system correctly identifies a non-activated ticket and declines the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Verify that the application switches to 'Out of Service' mode when the low battery threshold is reached during a successful ticket tap."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Non-CLIENT Media Card Check",
        "Test_Sce_Description": "Check that the SA Tool application does not respond and displays the 'Card Read Error' message when a customer taps a card that is not CLIENT media."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Empty Ride Balance Check",
        "Test_Sce_Description": "Ensure that the system correctly identifies a ticket with an empty ride balance and declines the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Failed Inspection Check",
        "Test_Sce_Description": "Verify that the operator can select the payment function on the SA Tool inspection results screen when a customer's ticket inspection fails."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Child Concession Check",
        "Test_Sce_Description": "Check that the system correctly identifies a ticket with a valid child concession and displays the successful child fare payment screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Validate the system's response when a customer attempts to make a fare payment using a non-activated ticket. The system should detect the invalidity of the ticket, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Test the system's behavior when a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should detect the empty balance, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "Verify the system's functionality when the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-Client Media",
        "Test_Sce_Description": "Test the system's response when a customer attempts to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Validate the system's behavior when a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should detect the violation, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "Test the system's response when a fare payment is attempted with a locked farecard. The system should detect the locked status, display a declined screen to the operator, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "Verify the system's behavior when a customer attempts to make a fare payment with an unreadable ticket. The system should detect the unreadable ticket, indicate to the operator that the ticket is unreadable, and log the error for troubleshooting."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Test the system's response when a customer attempts to make a fare payment with a ticket that has a valid non-adult, non-child concession. The system should process the fare payment accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service class route and the farecard has a valid special event transfer product."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service class route and the farecard has a valid special event transfer product."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made and the farecard has a valid non-adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made and the farecard has a valid child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Verify that the system performs efficiently when multiple fare payments are being processed simultaneously."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Verify that the system securely processes fare payments and protects customer data."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment on SA Tool with Premium Service Class",
        "Test_Sce_Description": "Verify that the fare payment is successfully made on the SA Tool when the Service Class is Premium, the Farecard has a valid Special Event Transfer Product and the Tap is within the Transfer Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Deduction from Virtual Card E-Purse",
        "Test_Sce_Description": "Verify that the ATS computes the fare correctly and deducts the appropriate amount from the Virtual Card E-Purse when a fare payment is made."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Communication of Fare Deduction to SA Tool",
        "Test_Sce_Description": "Verify that the fare deduction from the Virtual Card E-Purse is correctly communicated back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "POP Print Flag Functionality",
        "Test_Sce_Description": "Verify that the SA Tool sets the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Off Peak Daily Cap Limit Reached",
        "Test_Sce_Description": "Verify that the fare payment is successfully made on the SA Tool when the Farecard has reached the off peak Daily Cap Limit, has not reached the Peak Daily Cap limit and is out of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Valid Non-Adult Concession",
        "Test_Sce_Description": "Verify that the fare payment is successfully made on the SA Tool when the customer\u2019s Farecard has a Valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "Verify that the fare payment is successfully made on the SA Tool when the customer\u2019s Farecard has a Valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the fare payment is successfully made on the SA Tool when the operator inspects a customer\u2019s farecard and determines that they have not paid a fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of SA Tool during Peak Hours",
        "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without any lags or crashes during peak hours when the load is high."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Farecard Information",
        "Test_Sce_Description": "Verify that the farecard information is securely stored and transmitted during the fare payment process to prevent any data breaches or unauthorized access."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Premium Service Route with Lower Fare than Special Event",
        "Test_Sce_Description": "Verify that the system correctly computes the fare when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The system should recognize that the premium fare is lower than the special event fare and allow a free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Deduction from ePurse Balance",
        "Test_Sce_Description": "Verify that the system correctly deducts the fare from the customer's ePurse balance. After the fare computation, the system should deduct the amount from the virtual card ePurse and communicate this back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Transfer Window Validation",
        "Test_Sce_Description": "Verify that the system correctly validates the transfer window. If the customer taps within the transfer window after riding on a Special Event service route, the system should allow a free transfer if the premium fare is lower."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Service Class Validation",
        "Test_Sce_Description": "Verify that the system correctly identifies the service class as Premium. The system should recognize the service class from the farecard and compute the fare accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Special Event Transfer Product Validation",
        "Test_Sce_Description": "Verify that the system correctly validates the Special Event Transfer Product on the farecard. The system should recognize the valid Special Event Transfer Product and allow a free transfer if the premium fare is lower."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "POP Print Flag Functionality",
        "Test_Sce_Description": "Verify that the SA Tool correctly sets the POP Print Flag to 0. This is to ensure that the device accurately displays the transfer print status if the farecard is queried."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance during Peak Hours",
        "Test_Sce_Description": "Verify that the system performs efficiently during peak hours. The system should be able to handle high traffic and compute fares quickly and accurately."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of ePurse Balance Deduction",
        "Test_Sce_Description": "Verify that the system securely deducts the fare from the customer's ePurse balance. The system should ensure that the deduction process is secure and the customer's ePurse balance information is not compromised."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Testing ePurse balance less than fare amount",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating transfer product within Intra-agency Transfer window",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating transfer product within Inter-agency Transfer window",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product from another transit agency and computes the fare based on the transfer product and the transfer agreement between the transit agencies."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Testing Autoload Threshold",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Farecard on the Action or Load Value List",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Testing fare payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a fare payment is made during peak hours after previously reaching off peak daily cap."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route and the Premium fare is lower than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult Concession on Farecard",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies and processes a Farecard with a Valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid transfer product on the customer's TICKET and computes the free transfer. The system should follow the Transfer Product Processing rules as per [R6]."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level. The system should play the audio message in the default language of the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location. The system should result in a regular ride balance fare payment and Transfer Product creation."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route. The system should result in a free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment resulting from a failed TICKET inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies when a customer's ride balance is empty and displays a declined message to the customer. The system should not conduct the transaction and should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly switches to \u201cOut of Service\u201d mode when the low battery threshold is reached during a successful TICKET tap. If the threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode without processing the fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Non-CLIENT Media Card",
        "Test_Sce_Description": "Verify that the system correctly identifies when a customer's card is not CLIENT media. The system should not respond and should display the device error message \u201cCard Read Error\u201d for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies when a customer's Ticket is within the Anti-Passback Window and displays a declined message to the customer. The system should not conduct the transaction and should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies when a customer's Ticket is not activated. The system should not respond and should display the device error message \u201cCard Read Error\u201d for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt from a customer whose ticket has failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen, and the system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt from a customer whose ride balance is empty. The SA Tool should detect the empty ride balance, display a declined message to the customer, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the device's battery is low. If the low battery threshold is reached before the fare payment is processed, the application should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt from a customer who taps a card that is not CLIENT media. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt from a customer whose ticket is within the Anti-Passback Window. The device should detect that the ticket fails the Anti-Passback checks, display a declined message to the customer, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt from a customer who taps a non-activated ticket. The device should detect that the ticket is not activated, display a declined message to the customer, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Expired Ticket",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt from a customer who taps an expired ticket. The device should detect that the ticket is expired, display a declined message to the customer, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Period Pass",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt from a customer using a ticket with a valid period pass. The device should compute that the ticket has a valid period pass, accept the fare, and update the ticket accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt from a customer whose ticket is unreadable. The SA Tool application should detect the ticket and fail to read it correctly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a TICKET that has no ride balance remaining. The SA Tool should detect the empty ride balance, display a declined message to the customer, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "This scenario tests the performance of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a card that is not CLIENT media. The SA Tool application should not respond and a 'Card Read Error' message should be displayed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a TICKET that is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks, display a declined message to the customer, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a non-activated TICKET. The SA Tool should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, detect that the farecard is in overdraft, display a declined message to the customer, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a locked farecard. The SA Tool should read the Farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with an unreadable TICKET. The SA Tool NFC reader should detect the TICKET but be unable to read it, and the SA Tool application should indicate to the operator that the TICKET is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a TICKET that has a valid Non-Adult, Non-Child concession. The SA Tool should process the fare payment accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Card Read Error Test",
        "Test_Sce_Description": "This scenario tests the application's response when a card that is not CLIENT media is tapped. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Fare Payment and Inspection Transaction Test",
        "Test_Sce_Description": "This scenario tests the application's ability to record both the fare payment and inspection transactions when a fare payment results from a failed inspection. The SA Tool should record both transactions and return to the Tap Card screen, displaying a toast notification of the corresponding inspection action."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Child Concession Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer's TICKET has a Valid Child concession. The SA Tool should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "This scenario tests the performance of the application under different conditions such as low battery, high user load, etc. The application should perform efficiently and without any crashes or slowdowns."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "This scenario tests the security features of the application. The application should securely handle user data and transactions, and prevent unauthorized access."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that has no ride balance. The system should detect the empty ride balance, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "This scenario is to validate the system's response when the device battery goes below the low battery threshold during a successful ticket tap. The system should switch to 'Out of Service' mode after processing the fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "This scenario is to validate the system's response when the TICKET is unreadable. The system should detect the TICKET but fail to read it, and indicate to the operator that the TICKET is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Locked Farecard",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a locked farecard. The system should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Anti-Passback Window",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer's ticket is within the Anti-Passback Window. The system should detect that the ticket fails the Anti-Passback checks, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a non-activated ticket. The system should detect that the ticket is not valid at the current time, compute the value to be deducted from the e-Purse, detect that the farecard is in overdraft, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer's ticket fails the inspection. The operator should select the payment function on the SA Tool inspection results screen, and the system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a valid child concession tries to make a fare payment. The system should find the valid child concession, display the successful child fare payment screen, and play the successful fare payment audio tone for child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Anti-Passback Window Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Timeout Functionality",
        "Test_Sce_Description": "Verify that the system correctly returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the ticket being within the Anti-Passback Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Ticket Validation",
        "Test_Sce_Description": "Verify that the system correctly validates the ticket and identifies that it is within the Anti-Passback Window. The validation process should follow the order of steps as mentioned in the reference [R6]."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Performance under Load",
        "Test_Sce_Description": "Verify the system's performance when multiple tickets within the Anti-Passback Window are tapped in quick succession. The system should be able to handle the load and correctly decline all such transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Security Check",
        "Test_Sce_Description": "Verify that the system securely handles the data during the transaction process. No customer data should be at risk during the transaction process."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Exception Handling",
        "Test_Sce_Description": "Verify that the system correctly handles exceptions such as when the ticket is unreadable or when the battery goes below the low battery threshold during payment. The system should switch to 'Out of Service' mode in such cases."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Alternate Flow",
        "Test_Sce_Description": "Verify that the system correctly handles alternate flows such as when the customer's ticket is not activated. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Non-CLIENT Media Handling",
        "Test_Sce_Description": "Verify that the system correctly identifies when a customer taps a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a non-activated ticket. The system should display a declined message to the customer and the transaction should not be conducted. The system should also play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a ticket with an empty ride balance. The system should display a declined message to the customer and the transaction should not be conducted. The system should also play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-Client Media",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where the customer taps a card that is not CLIENT media. The system should not respond and a 'Card Read Error' message should be displayed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where the customer's ticket is within the Anti-Passback Window. The system should display a declined message to the customer and the transaction should not be conducted. The system should also play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where the farecard is locked. The system should display a declined screen to the operator and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where the ticket is unreadable. The system should indicate to the operator that the ticket is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "e-Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where the customer's ticket has a valid non-adult, non-child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Communication of Fare Deduction to SA Tool",
        "Test_Sce_Description": "Verify that the system correctly communicates back to the SA Tool after the fare has been computed and deducted from the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly deducts the correct Child Concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance of SA Tool during Peak Hours",
        "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay during peak hours when processing fare payments."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security of Fare Payment Transactions",
        "Test_Sce_Description": "Verify that the fare payment transactions are secure and that customer's ePurse balance and personal information are not compromised during the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a tap is made during peak hours after previously reaching off peak daily cap (outside the transfer window). The system should correctly identify that the farecard has reached off peak Daily Cap Limit, has not reached Peak Daily Cap limit and is out of transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a tap is made on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The system should correctly identify that the Service Class is Premium, the Farecard has a valid Special Event Transfer Product and the tap is within Transfer Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the Upgrade fare from the ePurse balance when the customer\u2019s Farecard has a Valid Non-Adult concession. The system should correctly identify the concession and apply the appropriate fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the Child Concession fare from the ePurse balance when the customer\u2019s Farecard has a Valid Child concession. The system should correctly identify the concession and apply the appropriate fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when the operator inspects a customer\u2019s farecard and determines that they have not paid a fare. The system should correctly record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Verify that the system can handle a high volume of fare payments simultaneously without any degradation in performance or functionality. This will ensure that the system can handle peak usage times."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Verify that the system securely processes fare payments, ensuring that customer data is protected and that the transaction is secure. This will involve testing the encryption of data and the secure transmission of data."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the service class is Premium."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product, the service class is Premium, and the Premium fare is lower than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Higher Special Event Fare",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product, the service class is Premium, and the Premium fare is higher than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame and does not cause any performance issues in the system."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure and does not expose any sensitive customer information or system data."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling ePurse balance less than fare amount",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing valid transfer product within Intra-agency Transfer window",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing valid transfer product within Inter-agency Transfer window",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product from other transit agency and computes the fare based on the transfer product and the transfer agreement between the transit agencies within the Inter-agency Transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling Autoload Threshold",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing Farecard on the Action or Load Value List",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours after previously reaching off peak daily cap (outside the transfer window) results in a fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a fare upgrade."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult Concession on Farecard",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Temporal Class Supplement Tap-On Transaction",
        "Test_Sce_Description": "Verify that the device correctly processes a Tap-On Transaction when a Farecard is tapped during a time period that contains an associated Temporal Class Supplement. The device should display an HMI reflecting the Temporal Class Supplement and process the transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Autoload Enabled Farecard Crossing Threshold",
        "Test_Sce_Description": "Verify that when a Farecard with Autoload enabled is tapped and the Fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance. The device should detect this and deduct the Fare from the Farecard E-Purse balance, then provide appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Override Default Trip with No Default O/D",
        "Test_Sce_Description": "Verify that when a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on. The device should provide appropriate feedback to the Cardholder of a successful transaction and notify the customer that the Default Trip was overridden."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Farecard Validation Failure at Tap-On",
        "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The device should provide appropriate feedback to the cardholder without updating the Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that when a blocked Farecard is tapped, the right to travel is not conferred. The device should detect that the Farecard is blocked and provide appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Exceeding Max Travel Duration",
        "Test_Sce_Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment and opens a new trip. The device should determine that the Tap-On Time + Max Travel Duration < Current Time and deduct the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality and presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Non-Activated Farecard Tap-On",
        "Test_Sce_Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold",
        "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance. The Device should detect that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, which triggers the Autoload amount to be added to the Farecard. The Device should deduct the Fare from the Farecard E-Purse balance. The right to travel is conferred to the Cardholder by updating the Farecard; accordingly, the device should provide the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the autoload was successful."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Farecard with Autoload Enabled is tapped on a device and the Fare amount does not cross the Auto-load threshold",
        "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount does not cross the Auto-load threshold, the Autoload amount should not be added to the E-Purse balance. The Device should not trigger the Autoload amount to be added to the Farecard. The Device should deduct the Fare from the Farecard E-Purse balance. The right to travel is conferred to the Cardholder by updating the Farecard; accordingly, the device should provide the appropriate feedback to the Cardholder of a successful transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Farecard with Autoload Disabled is tapped on a device and the Fare amount crosses the Auto-load threshold",
        "Test_Sce_Description": "Verify that when a Farecard with Autoload Disabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Autoload amount should not be added to the E-Purse balance. The Device should not trigger the Autoload amount to be added to the Farecard. The Device should deduct the Fare from the Farecard E-Purse balance. The right to travel is conferred to the Cardholder by updating the Farecard; accordingly, the device should provide the appropriate feedback to the Cardholder of a successful transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Farecard fails validation checks at Tap-On",
        "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device should not allow the transaction to proceed. The device should provide appropriate feedback to the Cardholder of a failed transaction. The right to travel should not be conferred to the Cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Farecard passes validation checks at Tap-On",
        "Test_Sce_Description": "Verify that when a Farecard passes validation checks at Tap-On, the device should allow the transaction to proceed. The device should provide appropriate feedback to the Cardholder of a successful transaction. The right to travel should be conferred to the Cardholder by updating the Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Full Fare-by-Zone transaction processing",
        "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction in case of a default O/D on the Farecard. This includes both tap-on and tap-off transactions. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. The default trip should use PAR as the card identifier."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Override Default O/D",
        "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on. This includes the customer requesting the override of a Default Trip by interacting with the Device and the Device HMI informing the customer that the Device is prepared to override the Default Trip."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Capping discount eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple capping discounts eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS will take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Offline device capping discount eligibility",
        "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules will follow use-case logic outlined in ticketing use cases."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media fails ODA check",
        "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device performs the necessary validation and determines that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen is provided to the cardholder. An error will be captured and logged in the background when this occurs to help with troubleshooting the issue. This error will also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The device provides the appropriate feedback to the cardholder without updating the Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Farecard is blocked",
        "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. The Card reader detects Farecard is blocked. Right to travel is not conferred. The Device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. The Device determines that the Tap-On Time + Max Travel Duration < Current Time. The Device Auto-settles the Underpayment and deducts the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple NFC media are presented to the device at one time",
        "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. The customer presents multiple NFC medias to the card reader at once. The Device blocks all user functionality, presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Tap a non-activated Farecard on an SA Tool",
        "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. The Device detects that the Farecard is not activated. The device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs",
        "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides the appropriate feedback to the cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Non-Revenue farecard in training mode",
        "Test_Sce_Description": "Verify that the SA tool accepts Non-Revenue farecard in the training mode. If the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard with Temporal Class Supplement",
        "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the Device should contain an HMI reflecting the Temporal Class Supplement, and process the Tap-On Transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard with Autoload Enabled",
        "Test_Sce_Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard without Default O/D",
        "Test_Sce_Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device should process the tap as a result tap-on."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Audio Messages Request",
        "Test_Sce_Description": "Verify that when the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard Validation Checks",
        "Test_Sce_Description": "Verify that if the Farecard fails validation checks at Tap-On, the device should display an error message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment with Period Pass",
        "Test_Sce_Description": "Verify that if the Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value, ATS should compute and deduct the Upgrade fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment with Lower Fare Value Period Pass",
        "Test_Sce_Description": "Verify that if the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value, ATS should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment with Limited Period Pass",
        "Test_Sce_Description": "Verify that if the Farecard has a valid Limited Period Pass and the current time is within the limits of the product, the device should accept the fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment with Limited Period Pass outside of valid time",
        "Test_Sce_Description": "Verify that if the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the device should accept the fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a premium service class farecard that has a valid Special Event Transfer Product and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the upgrade fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the child concession fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Verify that the system can handle a high volume of fare payments simultaneously without any degradation in performance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Verify that the system securely processes fare payments and protects customer data, including ePurse balance and farecard information."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after previously reaching the off-peak daily cap limit, and the farecard is out of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route, and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event fare",
        "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route/location after previously riding on a Special Event service route, and the tap is within the transfer window, and the premium fare is lower than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the correct Child Concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection, and the system records both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time limit, ensuring the system's performance is up to the mark."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure, and no unauthorized access or manipulation of fare payment data is possible."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window and the premium fare is higher than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product with Lower Premium Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and allows a free transfer when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window and the premium fare is lower than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid non-adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak load conditions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure and that sensitive customer data such as ePurse balance and farecard details are not exposed during the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Valid Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly deducts the Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard and plays the successful fare payment audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Registered Farecard with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Sce_Description": "Verify that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Transaction within Intra-agency Transfer window",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product and computes the free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Transaction within Inter-agency Transfer window",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product from another transit agency and computes the fare based on the transfer product and the transfer agreement between the transit agencies."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Autoload Threshold is met",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Customer\u2019s Farecard is on the Action or Load Value List",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours after previously reaching off peak daily cap (outside the transfer window) results in a fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a fare upgrade."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the customer's Farecard has a Valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Non-Adult, Non-Child Concession Fare Payment",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a fare payment from a customer's TICKET that has a valid Non-Adult, Non-Child concession. The tool should play the successful fare payment audio tone for a concession other than Adult or Child."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Transfer Product Fare Payment",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a fare payment from a customer's TICKET that has a valid transfer product. The tool should compute the free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Audio Messages Request during Fare Payment",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a fare payment from a customer's TICKET when the customer requests audio messages for the fare payment. The operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Fare Payment for Premium Service or Special Route/Location",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a fare payment from a customer's TICKET for a premium service or special route/location on FLATFARE BASED SA Tool. A Fixed Ride Ticket tap on a premium service or special route/location should result in a regular ride balance fare payment and Transfer Product creation."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Fare Payment with Fare Upgrade for Premium Service or Special Route/Location",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a fare payment from a customer's TICKET for a premium service or special event route/location after previously riding on a regular, premium, or special event route. This should result in a free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Child Concession Fare Payment",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a fare payment from a customer's TICKET that has a valid Child concession. The tool should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a fare payment from a customer's TICKET when the operator inspects a customer\u2019s TICKET and determines that they have not paid a fare. The operator should select the payment function on the SA Tool inspection results screen and the tool should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly handles a fare payment from a customer's TICKET when the ride balance is empty. The tool should detect the Ride Balance is empty and display a declined message to the customer. The transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Fare Payment during Low Battery",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly handles a fare payment from a customer's TICKET when the device battery goes below the low battery threshold during a successful TICKET tap. If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly handles a fare payment from a customer's TICKET when the customer\u2019s card is not CLIENT media. The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly handles a fare payment from a customer's TICKET when the Ticket is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and display a declined message the customer. The transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly handles a fare payment from a customer's TICKET when the Ticket is not activated. The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Failed Inspection",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET that has not paid a fare during inspection. The operator should be able to select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET with an empty ride balance. The SA Tool should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "Verify that the SA Tool correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful TICKET tap. If the low battery threshold is reached before Step 5, the application should switch to 'Out of Service' mode. If not, the customers fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's card that is not CLIENT media. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET that is within the Anti-Passback Window. The SA Tool should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET that is not activated. The SA Tool should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Expired Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET that is expired. The SA Tool should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Period Pass",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET with a valid period pass and accepts the fare. The SA Tool should update the TICKET accordingly, display the successful fare payment screen, play the successful fare payment audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET that is unreadable. The SA Tool should fail to read the TICKET correctly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a TICKET that has no ride balance remaining. The system should display a declined message to the customer and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Audio Tone for Declined Transaction",
        "Test_Sce_Description": "Verify that the system plays the correct audio tone when a transaction is declined due to insufficient ride balance. The system should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Return to Tap Card Screen",
        "Test_Sce_Description": "Verify that the system correctly returns to the Tap Card screen after a configurable timeout when a transaction is declined due to insufficient ride balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a card that is not CLIENT media. The system should not respond and a 'Card Read Error' message should be displayed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a TICKET that is within the Anti-Passback Window. The system should display a declined message to the customer and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a TICKET that is not activated. The system should display a declined message to the customer and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a locked farecard. The system should display a declined screen to the operator and the inspection should not proceed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a fare payment. The application should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a TICKET that has a valid non-adult, non-child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with an unreadable TICKET. The system should indicate to the operator that the TICKET is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Low Battery Threshold Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when the battery level reaches the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Card Read Error Test",
        "Test_Sce_Description": "This scenario tests the application's response when a card that is not CLIENT media is tapped. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Anti-Passback Window Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Non-Activated Ticket Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer taps a non-activated TICKET. The application should detect that the TICKET is not activated and display an appropriate error message to the customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "This scenario tests the performance of the application under different conditions such as low battery, high network traffic, etc. The application should perform efficiently and without any crashes or slowdowns under these conditions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "This scenario tests the security features of the application. The application should securely handle sensitive data such as customer's TICKET information and should not allow any unauthorized access."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system does not respond and displays a 'Card Read Error' message when a customer taps a card that is not CLIENT media."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system detects an empty Ride Balance, displays a declined message to the customer, and does not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "Verify that the application switches to 'Out of Service' mode when the low battery threshold is reached during a successful TICKET tap."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system detects a non-activated ticket, displays a declined message to the customer, and does not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "Verify that the system reads the Farecard, determines that it is locked, displays a declined screen to the operator, and does not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "Verify that the system detects a Valid Child Concession, displays the successful Child fare payment screen, and plays the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system allows the operator to select the payment function on the SA Tool inspection results screen when a customer\u2019s TICKET has not paid a fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system detects that the TICKET fails the Anti-Passback checks, displays a declined message to the customer, and does not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "Verify that the system detects an unreadable TICKET, indicates to the operator that the TICKET is unreadable, and allows the customer to tap on the NFC reader again."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system detects a Valid Non-Adult, Non-Child concession on the customer\u2019s TICKET."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Testing Anti-Passback Window functionality",
        "Test_Sce_Description": "This scenario will test if the system correctly identifies a TICKET that is within the Anti-Passback Window. The system should detect that the TICKET fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Testing TICKET activation status",
        "Test_Sce_Description": "This scenario will test if the system correctly identifies a non-activated TICKET. The system should detect that the TICKET is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Testing TICKET expiration status",
        "Test_Sce_Description": "This scenario will test if the system correctly identifies an expired TICKET. The system should detect that the TICKET is expired and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Testing TICKET with no Ride Balance",
        "Test_Sce_Description": "This scenario will test if the system correctly identifies a TICKET with no Ride Balance. The system should detect that the Ride Balance is empty and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Testing TICKET with Valid Child concession",
        "Test_Sce_Description": "This scenario will test if the system correctly identifies a TICKET with a Valid Child concession. The system should detect that a Valid Child Concession is found and display the successful Child fare payment screen. The SA Tool should play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Testing TICKET with non-CLIENT media",
        "Test_Sce_Description": "This scenario will test if the system correctly identifies a TICKET that is not CLIENT media. The system should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Testing TICKET with low battery threshold",
        "Test_Sce_Description": "This scenario will test if the system correctly handles a situation where the battery goes below the low battery threshold during payment. If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode. Else, the customers fare payment should be processed as per Step 5. The application should then switch to \u201cOut of Service\u201d mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Testing TICKET with valid Transfer Product",
        "Test_Sce_Description": "This scenario will test if the system correctly identifies a TICKET with a valid Transfer Product. The system should compute the free transfer and display the successful fare payment screen. The SA Tool should play the successful fare payment audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Testing TICKET with failed inspection",
        "Test_Sce_Description": "This scenario will test if the system correctly handles a situation where the operator inspects a customer\u2019s TICKET and determines that they have not paid a fare. The operator should select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Testing TICKET with valid Period Pass",
        "Test_Sce_Description": "This scenario will test if the system correctly identifies a TICKET with a valid Period Pass. The system should compute that the TICKET has a valid period pass and accepts the fare. The SA Tool should update the TICKET accordingly and display the successful fare payment screen. The SA Tool should play the successful fare payment audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies a non-activated ticket when a customer attempts to make a fare payment. The system should display a declined message and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies when a customer's ride balance is empty. The system should display a declined message and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid child concession on a customer's ticket. The system should display the successful fare payment screen and play the successful fare payment audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment resulting from a failed inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly handles a low battery threshold during a fare payment. If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly identifies when a customer taps a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies when a customer's ticket is within the Anti-Passback Window. The system should display a declined message and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "Verify that the system correctly identifies when a farecard is locked. The system should display a declined screen to the operator and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "Verify that the system correctly identifies when a TICKET is unreadable. The system should indicate to the operator that the TICKET is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies when a customer's TICKET has a valid non-adult, non-child concession. The system should process the fare payment accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the service class is Premium."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the expected time frame and does not cause any performance issues in the SA Tool."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure and does not expose any sensitive customer information or allow for any unauthorized access to the system."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Accuracy of Fare Calculation",
        "Test_Sce_Description": "Verify that the fare calculation is accurate and consistent across different fare payment scenarios."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Consistency of Fare Deduction",
        "Test_Sce_Description": "Verify that the fare deduction from the ePurse balance is consistent and accurate across different fare payment scenarios."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Handling of Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the system correctly handles scenarios where the ePurse balance is insufficient for the fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the Child Concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of the SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay when computing and deducting fares from the ePurse balance, providing free transfers, and recording transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of the SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool securely processes fare payments, protects customer information, and prevents unauthorized access."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route and the farecard is within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made and the farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made and the farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure and does not expose any sensitive customer data or system information."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Accuracy of Fare Calculation",
        "Test_Sce_Description": "Verify that the system accurately calculates the fare based on the service class, transfer product, and concession on the farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Correct Deduction of Fare from ePurse Balance",
        "Test_Sce_Description": "Verify that the system correctly deducts the calculated fare from the ePurse balance on the farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Correct Display of Fare Payment Result",
        "Test_Sce_Description": "Verify that the system correctly displays the result of the fare payment on the SA Tool."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of insufficient ePurse balance",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of valid transfer product",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Inter-agency transfer processing",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Autoload threshold processing",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly checks that the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of Action or Load Value list",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly verifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Peak hours fare payment after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Premium Service Route fare payment with Transfer where the Premium fare is higher than the Special Event fare",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Premium Service Route fare payment with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult Concession",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid transfer product on the customer's TICKET. The system should compute the free transfer and process the fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment on the FLATFARE BASED SA Tool for a premium service or special route/location. The system should not differentiate between service class for CLIENT Ticket."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment on the FLATFARE BASED SA Tool for a premium service or special event route/location after previously riding on a regular, premium, or special event route. The system should compute a free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment resulting from a failed TICKET inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies when a customer's ride balance is empty and declines the transaction. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful TICKET tap. The system should still process the fare payment if the threshold is reached before Step 5."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly identifies when a customer's card is not CLIENT media and does not respond. The device should display the error message 'Card Read Error'."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies when a customer's TICKET is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies when a customer's TICKET is not activated and declines the transaction. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Failed Inspection",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET that has not paid a fare during inspection and allows the operator to select the payment function on the SA Tool inspection results screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Recording of Fare Payment and Inspection Transactions",
        "Test_Sce_Description": "Verify that the SA Tool accurately records both the fare payment and inspection transactions when a fare payment is made after a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Notification Display after Fare Payment and Inspection",
        "Test_Sce_Description": "Verify that the SA Tool application returns to the Tap Card screen and displays a toast notification of the corresponding inspection action after a fare payment is made following a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's ride balance is empty and displays a declined message to the customer, not conducting the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Low Battery Threshold during Payment",
        "Test_Sce_Description": "Verify that the SA Tool correctly switches to 'Out of Service' mode if the low battery threshold is reached before Step 5 of the Main Use Case. If the threshold is reached after Step 5, verify that the customer's fare payment is processed before the application switches to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the SA Tool application does not respond when a customer taps a card that is not CLIENT media, and that the device error message 'Card Read Error' is displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's TICKET is within the Anti-Passback Window and displays a declined message to the customer, not conducting the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's TICKET is not activated and displays a declined message to the customer, not conducting the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Expired Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's TICKET is expired and displays a declined message to the customer, not conducting the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Period Pass",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's TICKET has a valid period pass and accepts the fare, updating the TICKET accordingly and displaying the successful fare payment screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a TICKET is unreadable and fails to read it correctly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's ride balance is empty. The system should detect the empty balance, display a declined message, not conduct the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the device's battery goes below the low battery threshold during the payment process. The system should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5, or process the fare payment and then switch to 'Out of Service' mode if the threshold is reached after Step 5."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's card is not CLIENT media. The system should not respond, but display a 'Card Read Error' message for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's ticket is within the Anti-Passback Window. The system should detect the Anti-Passback check failure, display a declined message, not conduct the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's ticket is not activated. The system should detect the invalidity of the Limited Period Pass, compute the value to be deducted from the e-Purse, detect the farecard overdraft, display a declined message, not conduct the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the farecard is locked. The system should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the TICKET is unreadable. The system should detect the TICKET, fail to read it, indicate to the operator that the TICKET is unreadable, and log the error in the background for troubleshooting."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's TICKET has a valid concession other than Adult or Child. The system should detect the concession, compute the value to be deducted from the ride balance, deduct the ride accordingly, update the TICKET, display the successful fare payment screen, play the successful fare payment audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Low Battery Threshold Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when the battery level goes below the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Fare Payment Processing Test",
        "Test_Sce_Description": "This scenario tests the fare payment processing functionality of the application. The application should be able to process the customer's fare payment as per Step 5 if the low battery threshold is not reached before Step 5."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Out of Service Mode Test",
        "Test_Sce_Description": "This scenario tests the 'Out of Service' mode functionality of the application. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5 or after processing the customer's fare payment as per Step 5."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Card Read Error Test",
        "Test_Sce_Description": "This scenario tests the error handling functionality of the application when a card that is not CLIENT media is tapped. The application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Anti-Passback Window Test",
        "Test_Sce_Description": "This scenario tests the Anti-Passback Window functionality of the application. The application should detect that the TICKET fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Declined Message Display Test",
        "Test_Sce_Description": "This scenario tests the declined message display functionality of the application. The application should display a declined message to the customer if the TICKET fails the Anti-Passback checks. The SA Tool should also play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Non-Activated Ticket Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when a non-activated TICKET is tapped. The application should detect that the TICKET is not activated and display a declined message to the customer. The transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Return to Tap Card Screen Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application to return to the Tap Card screen after a configurable timeout. The application should return to the Tap Card screen after displaying a declined message to the customer and playing the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media Card",
        "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment using a card that is not CLIENT media. The system should display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should display a declined message and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the low battery threshold is reached during a fare payment process. If the threshold is reached before Step 5, the application should switch to 'Out of Service' mode. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a non-activated ticket. The system should display a declined message and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with a locked farecard. The system should display a declined screen and the inspection should not proceed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer with a valid non-adult, non-child concession attempts to make a fare payment. The system should process the fare payment accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment with an unreadable TICKET. The system should indicate to the operator that the TICKET is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment resulting from a failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen and the system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer with a valid child concession attempts to make a fare payment. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies and responds when a customer attempts to make a fare payment within the Anti-Passback Window. The system should display a declined message and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Anti-Passback Window Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Timeout Functionality",
        "Test_Sce_Description": "Verify that the system correctly returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the ticket being within the Anti-Passback Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Validation Steps Order",
        "Test_Sce_Description": "Verify that the system follows the correct order of validation steps as per [R6] when checking the Anti-Passback Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Non-Activated Ticket Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a non-activated ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Expired Ticket Check",
        "Test_Sce_Description": "Verify that the system correctly identifies an expired ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Performance Under Low Battery",
        "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the battery goes below the low battery threshold during a successful ticket tap. The system should still be able to process the remote lists."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Non-CLIENT Media Card Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a card that is not CLIENT media and does not respond. The device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Successful Fare Payment",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment from a ticket with a valid period pass. The system should update the ticket accordingly, display the successful fare payment screen, and play the successful fare payment audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Unreadable Ticket Check",
        "Test_Sce_Description": "Verify that the system correctly identifies an unreadable ticket and fails to read it correctly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Security of Fare Payment",
        "Test_Sce_Description": "Verify that the system securely processes fare payments and updates the ticket accordingly. No unauthorized access or manipulation of ticket data should be possible."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer attempts to make a fare payment using a non-activated ticket. The tool should detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer attempts to make a fare payment using a ticket with an empty ride balance. The tool should detect that the ride balance is empty and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "Test the functionality of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. The tool should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-Client Media",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer attempts to make a fare payment using a card that is not CLIENT media. The tool should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The tool should detect that the ticket fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer attempts to make a fare payment using a locked farecard. The tool should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer attempts to make a fare payment using an unreadable ticket. The tool should detect the ticket but fail to read it, indicating to the operator that the ticket is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer attempts to make a fare payment using a ticket with a valid non-adult, non-child concession. The tool should process the fare payment accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Verify that the SA Tool application correctly detects when a Virtual Card is unreadable. The application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is successful, the application should proceed with steps 4 \u2013 7. If the tap is unsuccessful, the application should again indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child, Non-Discreet Concessions",
        "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment from a Virtual Card with a valid non-adult, non-child, non-discreet concession. The application should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment with Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment when the customer\u2019s ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS should check the online hotlist, complete the fare processing, remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly. The device should provide the appropriate feedback to the Cardholder of a successful transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment within Intra-SP Transfer Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment when the transaction is within the Intra-SP Transfer window. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card, and the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment within Inter-SP Transfer Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment when the transaction is within the Inter-SP Transfer window. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card, and the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment with Audio Messages",
        "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment when the customer requests audio messages. The operator should enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion. The SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message. The corresponding audio message should be played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the Virtual Card is unreadable",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it detects the Virtual Card but is unable to read it. The tool should indicate to the operator that the Virtual Card is unreadable. The customer will tap on the NFC reader again and if the tap is unsuccessful, the tool should again indicate that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the customer has a non-adult, non-child, non-discreet concession on their Virtual Card",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer's Virtual Card has a valid non-adult, non-child, non-discreet concession. The tool should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount. The tool should send the tap to ATS for processing, which checks the online hotlist and completes the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the transaction is within the Intra-SP Transfer window",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product and the transaction is within the Intra-SP Transfer window. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the transaction is within the Inter-SP Transfer window",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product from other service provider and the transaction is within the Inter-SP Transfer window. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the performance of the SA Tool when processing fare payments",
        "Test_Sce_Description": "This scenario will test the performance of the SA Tool when processing fare payments. The tool should be able to handle multiple fare payments simultaneously without any performance degradation."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the security of the SA Tool when processing fare payments",
        "Test_Sce_Description": "This scenario will test the security of the SA Tool when processing fare payments. The tool should securely process the fare payments without any data breaches or leaks."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Virtual Card Detection",
        "Test_Sce_Description": "Verify that the SA Tool application is able to detect the Virtual Card when it is tapped on the NFC reader. The application should indicate if the card is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Fare Payment with Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer's ePurse balance is less than the fare amount. The system should send the tap to ATS for processing, check the online hotlist, complete the fare processing, and put the card into overdraft."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Successful Transaction Feedback",
        "Test_Sce_Description": "Verify that the device provides the appropriate feedback to the Cardholder of a successful transaction. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child, Non-Discreet Concessions",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Fare Payment within Intra-SP Transfer Window",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer's Virtual Card has a valid transfer product and the transaction is within the Intra-SP Transfer window. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Fare Payment within Inter-SP Transfer Window",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer's Virtual Card has a valid transfer product from other service provider and the transaction is within the Inter-SP Transfer window. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Performance of SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool application performs well under load. The application should be able to handle multiple transactions simultaneously without any degradation in performance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Security of SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool application is secure. The application should encrypt all sensitive data, such as card information and transaction details, to protect against unauthorized access."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Test the scenario where the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer will tap on the NFC reader again. If the tap is successful, steps 4 \u2013 7 will be conducted. If the tap is unsuccessful, the SA Tool application will indicate to the operator that the CLIENT (Virtual) Card is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "ePurse balance less than fare amount",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s ePurse balance is less than the fare amount. The device sends the tap to ATS for processing. ATS checks the online hotlist and completes the fare processing. ATS removes the fare from the Virtual Card e-Purse and puts the card into overdraft."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Transaction within Intra-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product. ATS will read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This will be communicated back to the device."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Transaction within Inter-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product from other service provider. A transfer agreement between the service providers has been established. ATS will read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This will be communicated back to the device."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Customer requests Audio Messages",
        "Test_Sce_Description": "Test the scenario where the customer asks to pay for the trip with their Virtual Card and requests audio messages for fare payment. Operator enables audio mode. The operator can change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Daily Cap Reached outside of Transfer window",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, Farecard has reached Daily Cap Limit and Farecard is out of transfer window. ATS deducts no fare since the Daily Cap is reached."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool and Service Class is Premium or Special Event. ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, Service Class is Premium or Special Event, Farecard has a valid Regular Service Transfer Product and Tap is within Transfer Window. ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Testing the functionality of the Virtual Card being unreadable",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when it detects the Virtual Card but fails to read it correctly. The application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is successful, the process should continue, if not, the application should indicate that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Testing the functionality of the Virtual Card with a Valid Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Testing the functionality of the Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Testing the functionality of the Virtual Card within Intra-SP Transfer window",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Testing the functionality of the Virtual Card within Inter-SP Transfer window",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product from other service provider. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Testing the functionality of the Virtual Card when the customer requests Audio Messages",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer requests audio messages for fare payment. The operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Testing the functionality of the Virtual Card when Daily Cap Reached outside of Transfer window on SA Tool",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Farecard has reached Daily Cap Limit and is out of transfer window. ATS should deduct no fare since the Daily Cap is reached."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Testing the functionality of the Virtual Card for Premium Service or Special Route/Location on SA Tool",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the fare payment is being made on the SA Tool and the Service Class is Premium or Special Event. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Testing the functionality of the Virtual Card for Premium Service or Special Route/Location with Fare Upgrade on SA Tool",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the fare payment is being made on the SA Tool, the Service Class is Premium or Special Event, the Farecard has a valid Regular Service Transfer Product and the Tap is within Transfer Window. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Farecard is on the Action or Load Value List",
        "Test_Sce_Description": "Check if the SA Tool correctly verifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Audio Messages for Fare Payment",
        "Test_Sce_Description": "Check if the customer can request audio messages for the fare payment and if the operator can enable audio mode and adjust the volume level as per the customer's discretion."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Daily Cap Reached",
        "Test_Sce_Description": "Check if the SA Tool correctly deducts no fare when the Daily Cap is reached."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment for Premium Service or Special Route/Location",
        "Test_Sce_Description": "Check if the SA Tool correctly computes and deducts the Premium or Special Event fare when a tap on a premium service or special route/location is made."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Upgrade for Premium Service or Special Route/Location",
        "Test_Sce_Description": "Check if the SA Tool correctly computes and deducts the Upgrade fare when a tap on a premium service or special route/location is made after previously riding on a regular service route (within the transfer window)."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Check if the SA Tool correctly processes a fare payment when a tap is made on peak hours after previously reaching off peak daily cap (outside the transfer window)."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Period Pass for Higher Fare Value Service Class",
        "Test_Sce_Description": "Check if the SA Tool correctly computes and deducts the Upgrade fare when the Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Period Pass for Lower Fare Value Service Class",
        "Test_Sce_Description": "Check if the SA Tool correctly identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment when the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Limited Period Pass",
        "Test_Sce_Description": "Check if the SA Tool correctly processes the fare payment when the Farecard has a valid Limited Period Pass and the current time is within the limits of the product."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "Check if the SA Tool correctly processes the fare payment when the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should correctly identify the pass as valid and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly identify the pass as invalid for the current time, compute the fare to be deducted from the e-Purse, and allow the transaction to proceed by deducting the fare from the e-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when an anonymous farecard with an expired period pass and insufficient ePurse balance is used. The system should correctly identify the card as anonymous and the ePurse balance as insufficient, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a blocked farecard is used. The system should correctly identify the card as blocked and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard on Deny List",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard on the Deny List is used. The system should correctly identify the card as being on the Deny List, remove it from the Deny List, set it to blocked, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Low Battery Threshold",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the battery goes below the low battery threshold during a transaction. The system should be able to process the remote lists even after the battery goes below the threshold during a successful Farecard tap."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the pass as valid and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Child concession is used. The system should correctly identify the concession and display the successful Child Transit Pass fare payment screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard fails inspection. The operator should be able to select the payment function on the SA Tool inspection results screen, and the system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the time limit of the pass. The system should correctly identify the pass as valid and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the time limit of the pass but has sufficient e-Purse balance. The system should correctly identify the pass as invalid for the current time, compute the fare to be deducted from the e-Purse, and deduct the fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a customer uses an anonymous farecard with an expired period pass and insufficient ePurse balance. The system should detect the card's status and return a declined result, displaying a declined message to the customer and updating the Scratchpad accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a customer uses a blocked farecard. The system should detect the card's status and return a declined result, displaying a declined message to the customer and updating the Scratchpad accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard on Deny List",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a customer uses a farecard that is on the Deny List. The system should detect the card's status, remove it from the Deny List and set it to blocked, and return a declined result, displaying a declined message to the customer and updating the Scratchpad accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Low Battery Threshold During Payment",
        "Test_Sce_Description": "This scenario is to validate the system's handling when the battery goes below the low battery threshold during a payment transaction. The system should be able to process the remote lists even after the battery goes below the threshold."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the pass as valid and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a farecard with a valid Child concession is used. The system should correctly identify the concession and display the successful Child Transit Pass fare payment screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a fare payment results from a failed inspection. The system should record both the fare payment and inspection transactions and return to the Tap Card screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a customer uses an anonymous farecard with an expired period pass and insufficient ePurse balance. The system should detect the card's status and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a customer uses a blocked farecard. The system should detect the card's status and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Valid Limited Period Pass within time limit",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the time limit. The system should correctly deduct the fare from the pass and display a successful payment message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Valid Limited Period Pass outside time limit with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass outside the time limit but with sufficient e-Purse balance. The system should correctly deduct the fare from the e-Purse and display a successful payment message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Expired Period Pass with insufficient ePurse balance",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a virtual card with an expired Period Pass and insufficient ePurse balance. The system should display a declined message and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Blocked Virtual Card",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked virtual card. The system should display a declined message and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Virtual Card on Deny List",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a virtual card on the Deny List. The system should remove the card from the Deny List, set it to blocked, display a declined message and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Low Battery Threshold during Payment",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should still be able to process the remote lists and conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Tap Counter at Configured Limit",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the tap counter is at the configured limit. The system should display a declined message and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Unreadable Virtual Card",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the virtual card is unreadable. The system should indicate to the operator that the virtual card is unreadable and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Expired Period Pass with Sufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with an expired Period Pass but with sufficient ePurse balance. The system should correctly deduct the fare from the ePurse and display a successful payment message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Limited Period Pass within time limit",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the time limit. The system should correctly identify the pass as valid and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Limited Period Pass outside time limit with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass outside the time limit but with sufficient e-Purse balance. The system should correctly identify the pass as invalid due to time limit, compute the fare from the e-Purse balance, and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from an anonymous virtual card with an expired period pass and ePurse balance less than the fare amount. The system should correctly identify the card as anonymous, the pass as expired, and the ePurse balance as insufficient, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Blocked Virtual Card",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked virtual card. The system should correctly identify the card as blocked and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Virtual Card on Deny List",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a virtual card on the Deny List. The system should correctly identify the card as on the Deny List, remove it from the Deny List, set it to blocked, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Low Battery Threshold During Payment",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should correctly identify the low battery situation, process the remote lists, and switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked Farecard. The system should correctly identify the card as blocked and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Farecard on Hotlist",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a Farecard on the hotlist. The system should correctly identify the card as on the hotlist, update the card's status to blocked, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Non-Activated Card",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a non-activated card. The system should correctly identify the card as non-activated and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Farecard within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a Farecard within the Anti-Passback Window. The system should correctly identify the card as within the Anti-Passback Window and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the tap is within the transfer window on a Premium Service Class."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Transfer where Premium fare is lower than Special Event fare",
        "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the tap is within the transfer window on a Premium Service Route where the Premium fare is lower than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Transfer where Premium fare is higher than Special Event fare",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare upgrade from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the tap is within the transfer window on a Premium Service Route where the Premium fare is higher than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Verify that the system performs efficiently and the fare payment process is completed within the acceptable time frame."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Verify that the system securely processes the fare payment and the customer's ePurse balance and other sensitive information are not compromised."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and allows a free transfer when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window, and the premium fare is lower than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Higher Special Event Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window, and the premium fare is higher than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Performance",
        "Test_Sce_Description": "Verify that the system performs efficiently and without delay when computing and deducting fares from the ePurse balance during peak usage times."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Security",
        "Test_Sce_Description": "Verify that the system securely processes fare payments, ensuring that customer data is protected and that transactions are accurately recorded and not susceptible to fraud or manipulation."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after previously reaching off peak daily cap, outside the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route, within the transfer window, and the premium fare is higher than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product resulting in a free transfer",
        "Test_Sce_Description": "Verify that the system correctly computes and allows a free transfer when a fare payment is made on a premium service route/location after previously riding on a Special Event service route, within the transfer window, and the premium fare is lower than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of the SA Tool during fare payment",
        "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay during the fare payment process, ensuring a smooth user experience."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of the SA Tool during fare payment",
        "Test_Sce_Description": "Verify that the SA Tool securely processes fare payments, ensuring that customer data is protected and that the fare payment transaction is secure."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling ePurse balance less than fare amount",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing valid transfer product within Intra-agency Transfer window",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing valid transfer product within Inter-agency Transfer window",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product and computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies within the Inter-agency Transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling Autoload Threshold",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing Farecard on the Action or Load Value List",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours after previously reaching off peak daily cap (outside the transfer window) results in a fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a fare upgrade."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling Valid Non-Adult Concession on Farecard",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Temporal Class Supplement Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the device displays an HMI reflecting the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Autoload Enabled Farecard Crossing Threshold",
        "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance of the Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Override Default Trip with No Default O/D",
        "Test_Sce_Description": "Verify that when a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on and provides appropriate feedback to the Cardholder of a successful transaction and that the Default Trip was overridden."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Farecard Validation Failure at Tap-On",
        "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device provides the cardholder with the appropriate feedback without updating the Farecard and logs an error in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that when a blocked Farecard is tapped on a device, the right to travel is not conferred, the device provides the appropriate feedback to the Cardholder and logs an error in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Exceeding Max Travel Duration",
        "Test_Sce_Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment, opens a new trip and deducts the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality, presents Anti-Collision HMI to customer and logs an error in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Non-Activated Farecard Tap-On",
        "Test_Sce_Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful, the device provides feedback to the Cardholder of an unsuccessful transaction and logs an error in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides appropriate feedback to the Cardholder and logs an error in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Autoload Threshold Crossed",
        "Test_Sce_Description": "Verify that when the Farecard E-Purse Balance crosses the Auto-load threshold due to the Fare, the Autoload amount is automatically added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Fare Deduction",
        "Test_Sce_Description": "Verify that the Device correctly deducts the Fare from the Farecard E-Purse balance when the Autoload threshold is crossed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Feedback to Cardholder",
        "Test_Sce_Description": "Verify that the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to an Autoload transaction and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Temporal Class Supplement Processing",
        "Test_Sce_Description": "Verify that the Device correctly processes the Tap-On Transaction as a normal tap-on when the device HMI displays the Temporal Class."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Non-Revenue Farecard Acceptance",
        "Test_Sce_Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode and displays a declined HMI when the Non-Revenue card is tapped in the revenue mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Fare Payment with Fare type Discount",
        "Test_Sce_Description": "Verify that the Device correctly displays the \u201cFare Payment with Fare type Discount\u201d HMI and accounts for the concession discount in the Fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Default Trip Override",
        "Test_Sce_Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that when the customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Farecard Validation Failure",
        "Test_Sce_Description": "Verify that the system correctly handles the scenario when the Farecard fails validation checks at Tap-On."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Full Fare-by-Zone transaction processing",
        "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip should use PAR as the card identifier."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Override Default O/D",
        "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on. The customer should be able to request the override of a Default Trip by interacting with the Device."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Capping discount eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list and complete the fare processing. ATS should calculate the capping discount and apply to the fare calculation."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple capping discounts eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS should take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Offline device capping discount processing",
        "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services. The tap should then be rated in ATS. Capping rules should follow use-case logic outlined in ticketing use cases."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media fails ODA check",
        "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device should detect that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. The Card reader should detect that Farecard is blocked and the Device should provide the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Max Travel Duration Exceeded",
        "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. The Device should determine that the Tap-On Time + Max Travel Duration < Current Time and Auto-settle the Underpayment and deduct the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple NFC media presented",
        "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. The Device should block all user functionality, presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Non-activated Farecard",
        "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. The Device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Card reading error",
        "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device should provide the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Non-Revenue farecard in training mode",
        "Test_Sce_Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode. If the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Temporal Class Supplement",
        "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the Device should contain an HMI reflecting the Temporal Class Supplement, and process the Tap-On Transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Autoload Enabled Farecard",
        "Test_Sce_Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Default O/D Override",
        "Test_Sce_Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device should process the tap as a result tap-on."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Audio Messages Request",
        "Test_Sce_Description": "Verify that when the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard Validation Check",
        "Test_Sce_Description": "Verify that if the Farecard fails validation checks at Tap-On, the device should display an error message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Period Pass with Higher Fare Value",
        "Test_Sce_Description": "Verify that if the Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value, ATS should compute and deduct the Upgrade fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Period Pass with Lower Fare Value",
        "Test_Sce_Description": "Verify that if the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value, ATS should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Limited Period Pass",
        "Test_Sce_Description": "Verify that if the Farecard has a valid Limited Period Pass and the current time is within the limits of the product, the device should accept the fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that if the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the device should accept the fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment Performance",
        "Test_Sce_Description": "Verify that the system performs the fare payment transaction within the acceptable time limit, ensuring that the system's performance is not compromised."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment Security",
        "Test_Sce_Description": "Verify that the system securely processes the fare payment transaction, ensuring that the customer's ePurse balance and farecard information are not compromised."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Premium Service Route with Higher Fare than Special Event",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare difference when a customer taps on a premium service route after previously riding on a special event service route within the transfer window. The fare deducted should be the difference between the premium fare and the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Transfer Window Validation",
        "Test_Sce_Description": "Verify that the system correctly identifies whether the tap is within the transfer window. If the tap is not within the transfer window, the system should not allow the transfer and should charge the full premium fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Farecard Validity Check",
        "Test_Sce_Description": "Verify that the system correctly identifies whether the farecard has a valid special event transfer product. If the farecard does not have a valid special event transfer product, the system should not allow the transfer and should charge the full premium fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Deduction from ePurse Balance",
        "Test_Sce_Description": "Verify that the system correctly deducts the fare from the ePurse balance on the farecard. The balance on the ePurse should be reduced by the amount of the fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Communication with SA Tool",
        "Test_Sce_Description": "Verify that the system correctly communicates the fare calculation and deduction back to the SA Tool. The SA Tool should display the correct fare and remaining balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "POP Print Flag Setting",
        "Test_Sce_Description": "Verify that the SA Tool correctly sets the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance under Load",
        "Test_Sce_Description": "Verify that the system performs correctly and within acceptable time limits when multiple fare payments are being processed simultaneously."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Farecard Data",
        "Test_Sce_Description": "Verify that the system securely handles farecard data during the fare payment process. No farecard data should be exposed or accessible to unauthorized parties."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product with lower Premium fare",
        "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of the SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay when computing and deducting fares from the ePurse balance, providing free transfers, and recording transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of the SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool securely processes fare payments, protects customer information, and prevents unauthorized access."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of insufficient ePurse balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of valid transfer product",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Inter-agency transfer processing",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Autoload threshold processing",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of Farecard on the Action or Load Value List",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of fare payment during peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a fare payment is made during peak hours after previously reaching off peak daily cap."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of fare payment on Premium Service Route with Transfer",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a fare payment is made on a premium service route/location after previously riding on a Special Event service route."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of Valid Non-Adult Concession on Farecard",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid transfer product on the customer's TICKET. The system should compute the free transfer correctly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment made on the FLATFARE BASED SA Tool for a premium service or special route/location. The system should not differentiate between service class for CLIENT Ticket."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment made on the FLATFARE BASED SA Tool for a premium service or special event route/location after previously riding on a regular, premium, or special event route. The system should compute the free transfer correctly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment resulting from a failed TICKET inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies when a customer's ride balance is empty. The system should display a declined message to the customer and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a successful TICKET tap. The application should switch to \u201cOut of Service\u201d mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer taps a card that is not CLIENT media. The system should not respond and display the device error message \u201cCard Read Error\u201d."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies when a customer's TICKET is within the Anti-Passback Window. The system should display a declined message to the customer and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies when a customer's TICKET is not activated. The system should not respond and display the device error message \u201cCard Read Error\u201d."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Valid Transfer Product",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the free transfer when the ticket has a valid Transfer Product and the tap is within the Transfer Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a Valid Child Concession on the customer's ticket and displays the successful Child fare payment screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the SA Tool correctly records both the fare payment and inspection transactions when the operator determines that the customer has not paid a fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ride balance is empty and displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "Verify that the SA Tool correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful ticket tap."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the SA Tool correctly does not respond when the customer taps a card that is not CLIENT media."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ticket is within the Anti-Passback Window and displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ticket is not activated and displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Expired Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ticket is expired and displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Period Pass",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes that the ticket has a valid period pass and accepts the fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects when the ticket is unreadable and fails to read it correctly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's ride balance is empty. The system should detect the empty balance, decline the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the device's battery is below the low battery threshold. The system should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's card is not CLIENT media. The system should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's ticket is within the Anti-Passback Window. The system should detect the Anti-Passback check failure, decline the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's ticket is not activated. The system should detect the invalidity of the Limited Period Pass, compute the value to be deducted from the e-Purse, detect the overdraft, decline the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the farecard is locked. The system should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the TICKET is unreadable. The system should detect the TICKET, fail to read it, indicate to the operator that the TICKET is unreadable, and log the error for troubleshooting."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's TICKET has a valid concession other than Adult or Child. The system should process the concession accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Low Battery Threshold Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when the battery goes below the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Fare Payment Processing Test",
        "Test_Sce_Description": "This scenario tests the fare payment processing functionality of the application. The application should successfully process the customer's fare payment as per Step 5 if the low battery threshold is not reached before Step 5."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Out of Service Mode Test",
        "Test_Sce_Description": "This scenario tests the 'Out of Service' mode functionality of the application. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5 or after the customer's fare payment is processed as per Step 5."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Card Read Error Test",
        "Test_Sce_Description": "This scenario tests the error handling functionality of the application when a card that is not CLIENT media is tapped. The application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Anti-Passback Checks Test",
        "Test_Sce_Description": "This scenario tests the Anti-Passback checks functionality of the application. The device should detect that the TICKET fails the Anti-Passback checks and the application should display a declined message to the customer. The transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Declined Message Display Test",
        "Test_Sce_Description": "This scenario tests the declined message display functionality of the application. The application should display a declined message to the customer if the TICKET fails the Anti-Passback checks. The SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Non-Activated Ticket Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when a non-activated TICKET is tapped. The application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "This scenario tests the performance of the application under different battery levels. The application should perform as expected under different battery levels and should switch to 'Out of Service' mode when the battery goes below the low battery threshold."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "This scenario tests the security features of the application. The application should securely process the customer's fare payment and should securely handle errors such as 'Card Read Error'."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media Card",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should display a declined message and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Anti-Passback Window Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should display a declined message and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a non-activated ticket. The system should display a declined message and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a locked farecard. The system should display a declined screen and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with an unreadable TICKET. The system should indicate to the operator that the TICKET is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a TICKET that has a valid Non-Adult, Non-Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Anti-Passback Window Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a TICKET that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Timeout Functionality",
        "Test_Sce_Description": "Verify that the system returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the TICKET being within the Anti-Passback Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Non-Activated Ticket Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a non-activated TICKET and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Performance under Low Battery",
        "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful TICKET tap. The system should still process the fare payment if the low battery threshold is reached after Step 5 of the Main Use Case."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Non-CLIENT Media Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a card that is not CLIENT media and does not respond. The device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Expired Ticket Check",
        "Test_Sce_Description": "Verify that the system correctly identifies an expired TICKET and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Valid Period Pass Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a TICKET with a valid period pass and accepts the fare. The system should update the TICKET accordingly and display the successful fare payment screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Successful Fare Payment Audio Tone",
        "Test_Sce_Description": "Verify that the system plays the successful fare payment audio tone when a fare payment is accepted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Fare Payment from Unreadable TICKET",
        "Test_Sce_Description": "Verify that the system correctly identifies an unreadable TICKET and fails to read it correctly. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies a TICKET with an empty ride balance and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a non-activated ticket. The system should detect that the ticket is not activated, display a declined message to the customer, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should detect that the ride balance is empty, display a declined message to the customer, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-Client Media",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a card that is not client media. The system should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should detect that the ticket fails the Anti-Passback checks, display a declined message to the customer, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a locked farecard. The system should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that has a valid child concession. The system should find the valid child concession, display the successful child fare payment screen, and play the successful fare payment audio tone for child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions and return to the Tap Card screen with a toast notification of the corresponding inspection action."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with an unreadable ticket. The system should detect the ticket but fail to read it, indicate to the operator that the ticket is unreadable, and log the error for troubleshooting."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that has a valid non-adult, non-child concession. The system should find the valid concession and proceed with the fare payment process."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Farecard has reached off peak Daily Cap Limit",
        "Test_Sce_Description": "Verify that the system correctly identifies when a farecard has reached the off peak daily cap limit and prevents further fare deductions for off peak travel."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Farecard has not reached Peak Daily Cap limit",
        "Test_Sce_Description": "Verify that the system correctly identifies when a farecard has not reached the peak daily cap limit and allows fare deductions for peak travel."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Farecard is out of transfer window",
        "Test_Sce_Description": "Verify that the system correctly identifies when a farecard is out of the transfer window and does not allow free transfers."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare upgrade from the ePurse balance when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "Verify that the system correctly allows a free transfer when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window and the premium fare is lower than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Sce_Description": "Verify that the system correctly identifies when a customer's farecard has a valid non-adult concession and deducts the correct concession fare from the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Verify that the system performs efficiently and effectively under varying loads and conditions, including peak hours and off-peak hours."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Verify that the system securely handles and stores sensitive customer information, including farecard data and ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after previously reaching the off peak daily cap, outside the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Valid Regular Service Transfer Product",
        "Test_Sce_Description": "Check if the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a service class of Premium or Special Event, and the farecard has a valid Regular Service Transfer Product, within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Valid Special Event Transfer Product",
        "Test_Sce_Description": "Ensure that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a service class of Premium, and the farecard has a valid Special Event Transfer Product, within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Validate that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Confirm that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare",
        "Test_Sce_Description": "Check if the system correctly computes and provides a free transfer when a fare payment is made with a service class of Premium, and the farecard has a valid Special Event Transfer Product, within the transfer window, and the Premium fare is lower than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Higher Special Event Fare",
        "Test_Sce_Description": "Ensure that the system correctly computes and deducts the fare upgrade from the ePurse balance when a fare payment is made with a service class of Premium, and the farecard has a valid Special Event Transfer Product, within the transfer window, and the Premium fare is higher than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of the SA Tool",
        "Test_Sce_Description": "Validate the performance of the SA Tool by checking the response time when computing and deducting fares, and when communicating back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of the SA Tool",
        "Test_Sce_Description": "Ensure that the SA Tool securely handles customer\u2019s farecard information and ePurse balance during fare payment transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Premium Service Route with Lower Fare than Special Event",
        "Test_Sce_Description": "Verify that when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window, a free transfer is computed and deducted from the ePurse Balance. Ensure that the SA Tool sets the POP Print Flag to 0 and accurately displays the transfer print status if the farecard is queried."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak Hours after Reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that when a customer taps on peak hours after previously reaching off peak daily cap and is outside the transfer window, a fare payment is computed and deducted from the ePurse Balance. Ensure that the SA Tool sets the POP Print Flag to 0 and accurately displays the transfer print status if the farecard is queried."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Premium Service Route with Higher Fare than Special Event",
        "Test_Sce_Description": "Verify that when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window, a fare upgrade is computed and deducted from the ePurse Balance. Ensure that the SA Tool sets the POP Print Flag to 0 and accurately displays the transfer print status if the farecard is queried."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Valid Non-Adult Concession Fare Payment",
        "Test_Sce_Description": "Verify that when a customer with a valid Non-Adult concession taps, the SA Tool computes and deducts the Upgrade fare. Ensure that the SA Tool sets the POP Print Flag to 0 and accurately displays the transfer print status if the farecard is queried."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Valid Child Concession Fare Payment",
        "Test_Sce_Description": "Verify that when a customer with a valid Child concession taps, the SA Tool computes and deducts the correct Child Concession fare. Ensure that the SA Tool sets the POP Print Flag to 0 and accurately displays the transfer print status if the farecard is queried."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that when an operator inspects a customer\u2019s farecard and determines that they have not paid a fare, the operator can select the payment function on the SA Tool inspection results screen and the SA Tool records both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Verify the system's performance under a significant load. Check the response time of the fare payment process and ensure it is within acceptable limits."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Verify that all data transmissions between the SA Tool and the farecard are secure and encrypted. Ensure that customer's ePurse Balance and other sensitive data are not exposed during the fare payment process."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of insufficient ePurse balance",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of valid transfer product",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Inter-agency transfer processing",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Autoload threshold processing",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly checks that the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of Action or Load Value List",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly verifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of fare payment during peak hours after reaching off peak daily cap",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a fare payment is made during peak hours after previously reaching off peak daily cap."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of fare payment on premium service route with transfer where the premium fare is higher than the special event fare",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a fare payment is made on a premium service route/location after previously riding on a Special Event service route."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of fare payment on premium service route with transfer where the premium fare is lower than the special event fare",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the premium fare is lower than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of fare payment with valid non-adult concession",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and processes a fare payment when the customer's Farecard has a valid non-adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a ticket with a valid non-adult, non-child concession. The system should play the successful fare payment audio tone for a concession other than Adult or Child."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a ticket with a valid transfer product. The system should compute the free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level. The system should play the corresponding audio message in the default language of the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a ticket tap on a premium service or special route/location. The system should not differentiate between service class for CLIENT Ticket."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route. The system should compute the free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a ticket with a valid child concession. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment resulting from a failed inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a ticket with no ride balance remaining. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer taps a card that is not CLIENT media. The system should not respond, but the device error message 'Card Read Error' should be displayed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a ticket within the Anti-Passback Window. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a non-activated ticket. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Validating Fare Payment with Failed Inspection",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made after a failed inspection. The operator inspects a customer\u2019s TICKET and determines that they have not paid a fare. The operator then selects the payment function on the SA Tool inspection results screen. The SA Tool should record both the fare payment and inspection transactions and return to the Tap Card screen with a toast notification of the corresponding inspection action."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Performance of SA Tool during Failed Inspection",
        "Test_Sce_Description": "This scenario tests the performance of the SA Tool during a fare payment resulting from a failed inspection. The tool should be able to handle the fare payment process smoothly without any lag or delay. The time taken to process the fare payment and display the toast notification should be within acceptable limits."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Security of Fare Payment with Failed Inspection",
        "Test_Sce_Description": "This scenario tests the security aspects of the SA Tool during a fare payment resulting from a failed inspection. The tool should securely record the fare payment and inspection transactions without any data leakage or security breach. The customer's TICKET information should be securely handled during the entire process."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Handling Unreadable TICKET during Fare Payment",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it detects an unreadable TICKET during a fare payment. The tool should be able to detect the unreadable TICKET and fail to read it correctly. The SA Tool should display an appropriate error message and not proceed with the fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Performance of SA Tool with Unreadable TICKET",
        "Test_Sce_Description": "This scenario tests the performance of the SA Tool when it encounters an unreadable TICKET during a fare payment. The tool should be able to detect the unreadable TICKET quickly and display the error message without any delay. The time taken to detect the unreadable TICKET and display the error message should be within acceptable limits."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Security with Unreadable TICKET during Fare Payment",
        "Test_Sce_Description": "This scenario tests the security aspects of the SA Tool when it encounters an unreadable TICKET during a fare payment. The tool should securely handle the unreadable TICKET without any data leakage or security breach. The error message displayed should not reveal any sensitive information about the TICKET or the customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's ride balance is empty. The system should detect the empty balance, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the device's battery is below the low battery threshold. The system should switch to 'Out of Service' mode if the threshold is reached before the payment processing step."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's ticket is within the Anti-Passback Window. The system should detect the Anti-Passback check failure, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's ticket is not activated. The system should detect the invalidity of the ticket, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the farecard is locked. The system should read the farecard, determine that it is locked, display a declined screen, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the TICKET is unreadable. The system should detect the TICKET but fail to read it, indicate to the operator that the TICKET is unreadable, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment attempt when the customer's TICKET has a valid non-adult, non-child concession. The system should detect the concession, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Low Battery Threshold Test",
        "Test_Sce_Description": "This scenario will test the functionality of the application when the battery level goes below the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Fare Payment Processing Test",
        "Test_Sce_Description": "This scenario will test the fare payment processing functionality of the application. The application should be able to successfully process the customer's fare payment as per Step 5 in the Main Use Case, provided the low battery threshold is not reached before this step."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Card Read Error Test",
        "Test_Sce_Description": "This scenario will test the application's response when a customer taps a card that is not CLIENT media. The application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Anti-Passback Window Test",
        "Test_Sce_Description": "This scenario will test the application's functionality when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and the application should display a declined message to the customer. The transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Ticket Activation Test",
        "Test_Sce_Description": "This scenario will test the application's functionality when a customer taps a non-activated TICKET. The application should be able to detect that the TICKET is not activated and respond accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "This scenario will test the performance of the application under different conditions such as low battery, during fare payment processing, when a card read error occurs, etc. The application should perform efficiently and without any delays or crashes under all these conditions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "This scenario will test the security features of the application. The application should be able to securely process fare payments, handle card read errors, and manage TICKET activations without any security breaches or data leaks."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Non-CLIENT Media Card",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that has an empty ride balance. The system should detect the empty ride balance, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "This scenario is to validate the system's response when the device's battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Ticket in Anti-Passback Window",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that is within the Anti-Passback Window. The system should detect the Anti-Passback check failure, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a non-activated ticket. The system should detect the invalidity of the ticket, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Locked Farecard",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a locked farecard. The system should detect the locked farecard, display a declined message, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with an unreadable TICKET. The system should detect the unreadable TICKET, display an error message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Valid Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a valid non-adult, non-child concession tries to make a fare payment. The system should detect the concession, calculate the fare accordingly, and conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Anti-Passback Window Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Timeout Functionality",
        "Test_Sce_Description": "Verify that the system correctly returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the ticket being within the Anti-Passback Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Ticket Validation",
        "Test_Sce_Description": "Verify that the system correctly validates the ticket during the Anti-Passback Window check. The system should correctly identify the ticket and its status."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Audio Tone Functionality",
        "Test_Sce_Description": "Verify that the system plays the correct declined audio tone when a transaction is declined due to the ticket being within the Anti-Passback Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Exception Flow - Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful ticket tap. The system should process the fare payment if the threshold is reached after Step 5 of the Main Use Case."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Exception Flow - Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly identifies a card that is not CLIENT media and does not respond. The device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Alternate Flow - Unreadable Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies an unreadable ticket and fails to read it correctly. The system should handle this exception appropriately."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Alternate Flow - Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket with a Valid Child concession and processes the fare payment accordingly. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Alternate Flow - Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where an operator inspects a customer's ticket and determines that they have not paid a fare. The system should allow the operator to select the payment function on the SA Tool inspection results screen and process the fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Performance - Multiple Transactions",
        "Test_Sce_Description": "Verify that the system can handle multiple transactions in a short period of time without any performance degradation. The system should be able to process each transaction quickly and accurately."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Security - Unauthorized Access",
        "Test_Sce_Description": "Verify that the system prevents unauthorized access to the SA Tool application. Only operators who are signed-in to the SA Tool application in the revenue mode should be able to accept fare payments."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a non-activated ticket. The system should detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should detect that the ride balance is empty and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-Client Media",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a card that is not client media. The system should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should detect that the ticket fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a locked farecard. The system should detect that the farecard is locked and display a declined screen to the operator. The inspection should not proceed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a ticket that has a valid non-adult, non-child concession. The system should detect the valid concession and proceed with the fare payment process."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with an unreadable ticket. The system should detect that the ticket is unreadable and indicate to the operator that the ticket is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a ticket that has a valid child concession. The system should detect the valid child concession and display the successful child fare payment screen. The SA Tool should play the successful fare payment audio tone for child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions and return to the Tap Card screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Verify that the SA Tool application correctly detects and handles the scenario when the Virtual Card is unreadable. The application should indicate to the operator that the Virtual Card is unreadable and prompt the customer to tap again. If the second tap is also unsuccessful, the application should again indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child, Non-Discreet Concessions",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card that has a valid non-adult, non-child, non-discreet concession. The application should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment with Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card with an ePurse balance less than the fare amount. The application should send the tap to ATS for processing, which should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment within Intra-SP Transfer Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card within the Intra-SP Transfer window. The application should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment within Inter-SP Transfer Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card within the Inter-SP Transfer window. The application should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment with Expired Period Pass and Sufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card with an expired period pass and an ePurse balance more than the fare amount. The application should detect that the Period Pass has expired, compute the value to be deducted from the e-Purse, and deduct the fare accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card with an expired period pass and an ePurse balance less than the fare amount. The application should detect that the Period Pass has expired, compute the value to be deducted from the e-Purse, and deduct the fare accordingly. The Virtual Card should be put into overdraft."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment with Inter-SP Transfer and Valid Period Pass",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card with a valid inter-agency transfer product and a valid period pass. The application should read that the Virtual Card contains a valid inter-agency transfer product and has a valid period pass. The right to travel should be conferred to the Cardholder by updating the Virtual Card."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment with Audio Messages Request",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card when the customer requests audio messages for fare payment. The operator should be able to enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the Virtual Card is unreadable",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it detects a Virtual Card but is unable to read it. The tool should indicate to the operator that the Virtual Card is unreadable. The customer will then tap on the NFC reader again. If the tap is successful, the transaction should proceed. If the tap is unsuccessful, the tool should again indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the customer has a non-adult, non-child, non-discreet concession",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer's Virtual Card has a valid non-adult, non-child, non-discreet concession. The tool should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount. The tool should send the tap to ATS for processing. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The tool should then confer the right to travel to the Cardholder by updating the Virtual Card accordingly and provide the appropriate feedback to the Cardholder of a successful transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the transaction is within the Intra-SP Transfer window",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product and the transaction is within the Intra-SP Transfer window. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The tool should then confer the right to travel to the Cardholder by updating the Virtual Card and provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the transaction is within the Inter-SP Transfer window",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product from other service provider and the transaction is within the Inter-SP Transfer window. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The tool should then confer the right to travel to the Cardholder by updating the Virtual Card and provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the performance of the SA Tool when processing transactions",
        "Test_Sce_Description": "This scenario will test the performance of the SA Tool when processing transactions. The tool should be able to handle multiple transactions simultaneously without any decrease in performance or functionality."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the security of the SA Tool when processing transactions",
        "Test_Sce_Description": "This scenario will test the security of the SA Tool when processing transactions. The tool should securely process all transactions, ensuring that all customer data is protected and that all transactions are processed correctly and securely."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Virtual Card Detection",
        "Test_Sce_Description": "Verify that the SA Tool application is able to detect the Virtual Card when it is tapped on the NFC reader. The application should indicate if the card is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Fare Payment with Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer's ePurse balance is less than the fare amount. The system should remove the fare from the Virtual Card e-Purse and put the card into overdraft."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Successful Transaction Feedback",
        "Test_Sce_Description": "Verify that the system provides the appropriate feedback to the Cardholder of a successful transaction. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Unsuccessful Card Tap",
        "Test_Sce_Description": "Verify that the system correctly handles an unsuccessful card tap. If the tap is unsuccessful, the SA Tool application should indicate to the operator that the CLIENT (Virtual) Card is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Transaction within Intra-SP Transfer window",
        "Test_Sce_Description": "Verify that the system correctly handles a transaction within the Intra-SP Transfer window. The system should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Transaction within Inter-SP Transfer window",
        "Test_Sce_Description": "Verify that the system correctly handles a transaction within the Inter-SP Transfer window. The system should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Payment by e-Purse",
        "Test_Sce_Description": "Verify that the system correctly handles a payment by e-Purse. The system should deduct the balance from the e-purse and use it as a payment means for the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Insufficient e-Purse Balance",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the e-Purse balance is insufficient. A notification should inform the operator that the e-Purse balance cannot cover the price."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Split Payments",
        "Test_Sce_Description": "Verify that the system correctly handles split payments. If the operator has edited the amount to pay, the system should check if the payment amount is more than the total shopping cart amount."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Test the scenario where the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer will tap on the NFC reader again. If the tap is successful, steps 4 \u2013 7 will be conducted. If the tap is unsuccessful, the SA Tool application will indicate to the operator that the CLIENT (Virtual) Card is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "ePurse balance less than fare amount",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s ePurse balance is less than the fare amount. The device sends the tap to ATS for processing. ATS checks the online hotlist and completes the fare processing. ATS removes the fare from the Virtual Card e-Purse and puts the card into overdraft."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Transaction within Intra-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product. ATS will read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This will be communicated back to the device."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Transaction within Inter-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product from other service provider. ATS will read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This will be communicated back to the device."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Customer requests Audio Messages",
        "Test_Sce_Description": "Test the scenario where the customer asks to pay for the trip with their Virtual Card and requests audio messages for fare payment. Operator enables audio mode. The operator can change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Daily Cap Reached outside of Transfer window",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, Farecard has reached Daily Cap Limit and Farecard is out of transfer window. ATS deducts no fare since the Daily Cap is reached."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool and Service Class is Premium or Special Event. ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, Service Class is Premium or Special Event, Farecard has a valid Regular Service Transfer Product and Tap is within Transfer Window. ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Testing Virtual Card Readability",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application in detecting and reading the Virtual Card. The test will involve presenting a Virtual Card to the NFC reader and verifying if the application can successfully read it. In case of failure, the application should indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Testing Fare Payment with Non-Adult, Non-Child, Non-Discreet Concessions",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application in processing fare payment from a Virtual Card with a valid Non-Adult, Non-Child, non-discreet concession. The test will involve presenting such a Virtual Card to the NFC reader and verifying if the application can successfully process the fare payment and display the appropriate screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Testing Fare Payment with Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application in processing fare payment from a Virtual Card with an ePurse balance less than the fare amount. The test will involve presenting such a Virtual Card to the NFC reader and verifying if the application can successfully process the fare payment by putting the card into overdraft and providing the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Testing Fare Payment within Intra-SP Transfer Window",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application in processing fare payment from a Virtual Card within the Intra-SP Transfer window. The test will involve presenting such a Virtual Card to the NFC reader and verifying if the application can successfully process the fare payment by deducting $0 from the Virtual Card E-Purse and providing the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Testing Fare Payment within Inter-SP Transfer Window",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application in processing fare payment from a Virtual Card within the Inter-SP Transfer window. The test will involve presenting such a Virtual Card to the NFC reader and verifying if the application can successfully process the fare payment by deducting $0 from the Virtual Card E-Purse and providing the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Testing Audio Messages Request",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application in processing a customer's request for audio messages for fare payment. The test will involve a customer asking to pay for the trip with their Virtual Card and requesting audio messages, and verifying if the operator can successfully enable audio mode and the application can play the corresponding audio message in the default language of the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Testing Fare Payment with Daily Cap Reached",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application in processing fare payment from a Farecard that has reached the Daily Cap Limit and is out of transfer window. The test will involve presenting such a Farecard to the NFC reader and verifying if the application can successfully process the fare payment by deducting no fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Testing Fare Payment for Premium Service or Special Route/Location",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application in processing fare payment from a Virtual Card for a premium service or special route/location. The test will involve presenting such a Virtual Card to the NFC reader and verifying if the application can successfully process the fare payment by computing the fare and deducting the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Testing Fare Upgrade for Premium Service or Special Route/Location",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application in processing a fare upgrade from a Farecard for a premium service or special event route/location after previously riding on a regular service route (within the transfer window). The test will involve presenting such a Farecard to the NFC reader and verifying if the application can successfully process the fare upgrade."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Farecard is on the Action or Load Value List",
        "Test_Sce_Description": "The system should be able to verify that the Farecard is on the Action or Load Value List and update the Farecard accordingly. This is to ensure that the Farecard is valid and can be used for fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Audio Messages for Fare Payment",
        "Test_Sce_Description": "The system should be able to play audio messages for the fare payment when the customer requests it. The audio messages should be played in the default language of the Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Daily Cap Reached",
        "Test_Sce_Description": "The system should not deduct any fare when the Daily Cap is reached. This is to ensure that the customer is not charged more than the daily cap limit."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment for Premium Service or Special Route/Location",
        "Test_Sce_Description": "The system should be able to compute and deduct the Premium or Special Event fare when the service class is Premium or Special Event. This is to ensure that the correct fare is charged for the premium service or special event."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Upgrade for Premium Service or Special Route/Location",
        "Test_Sce_Description": "The system should be able to compute and deduct the Upgrade fare when the customer taps on a premium service or special event route/location after previously riding on a regular service route. This is to ensure that the correct fare upgrade is charged."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "The system should be able to charge a fare payment during peak hours after the customer has previously reached the off peak daily cap. This is to ensure that the correct fare is charged during peak hours."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Period Pass for Higher Fare Value Service Class",
        "Test_Sce_Description": "The system should be able to compute and deduct the Upgrade fare when the Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Period Pass for Lower Fare Value Service Class",
        "Test_Sce_Description": "The system should be able to accept the period pass fare payment when the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Limited Period Pass",
        "Test_Sce_Description": "The system should be able to accept the fare payment when the Farecard has a valid Limited Period Pass and the current time is within the limits of the product."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "The system should be able to deduct the fare from the e-Purse balance when the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should correctly identify the validity of the pass and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly identify the invalidity of the pass due to time limit, compute the fare to be deducted from the e-Purse and deduct the fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when an anonymous farecard with an expired period pass and insufficient ePurse balance is used. The system should correctly identify the expired pass and insufficient balance, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a blocked farecard is used. The system should correctly identify the blocked farecard and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard on Deny List",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard on the Deny List is used. The system should correctly identify the farecard on the Deny List, remove it from the list, set it to blocked and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Low Battery Threshold during Payment",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the battery goes below the low battery threshold during a payment. The system should be able to process the remote lists even after the battery goes below the threshold during a successful Farecard tap."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the validity of the pass and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Child concession is used. The system should correctly identify the Child concession and display the successful Child Transit Pass fare payment screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard fails inspection. The operator should be able to select the payment function on the SA Tool inspection results screen and the system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the time limit of the pass. The system should successfully accept the fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the time limit of the pass but has sufficient e-Purse balance to cover the transaction. The system should successfully deduct the fare from the e-Purse and accept the fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with an anonymous farecard with an expired period pass and ePurse balance less than the fare amount attempts to make a fare payment. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a blocked farecard attempts to make a fare payment. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard on the Deny List",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a farecard on the Deny List attempts to make a fare payment. The system should remove the card from the Deny List, set it to blocked, decline the transaction, and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Low Battery Threshold during Payment",
        "Test_Sce_Description": "This scenario is to validate the system's performance when the battery goes below the low battery threshold during a fare payment. The system should be able to process the remote lists even after the battery goes below the threshold."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should successfully accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a farecard with a valid Child concession attempts to make a fare payment. The system should display the successful Child Transit Pass fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the system's response when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Valid Limited Period Pass within time limit",
        "Test_Sce_Description": "Verify that the system accepts fare payment from a virtual card with a valid Limited Period Pass within the time limit. The system should correctly deduct the fare from the pass and display a successful payment message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Valid Limited Period Pass outside time limit with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that the system accepts fare payment from a virtual card with a valid Limited Period Pass outside the time limit but with sufficient e-Purse balance. The system should correctly deduct the fare from the e-Purse and display a successful payment message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Expired Period Pass with insufficient ePurse balance",
        "Test_Sce_Description": "Verify that the system declines fare payment from a virtual card with an expired Period Pass and insufficient ePurse balance. The system should display a declined message and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Blocked Virtual Card",
        "Test_Sce_Description": "Verify that the system declines fare payment from a blocked virtual card. The system should display a declined message and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Virtual Card on Deny List",
        "Test_Sce_Description": "Verify that the system declines fare payment from a virtual card on the Deny List. The system should remove the card from the Deny List, set it to blocked, display a declined message and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Low Battery Threshold during Payment",
        "Test_Sce_Description": "Verify that the system handles a situation where the battery goes below the low battery threshold during payment. The system should be able to process the remote lists even after the battery goes below the threshold during a successful Farecard tap."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Tap Counter at Configured Limit",
        "Test_Sce_Description": "Verify that the system handles a situation where the tap counter is at the configured limit. The system should display a declined message and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Unreadable Virtual Card",
        "Test_Sce_Description": "Verify that the system handles a situation where the Virtual Card is unreadable. The system should indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Expired Period Pass with Sufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the system accepts fare payment from a virtual card with an expired Period Pass but with sufficient ePurse balance. The system should correctly deduct the fare from the ePurse and display a successful payment message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Valid Limited Period Pass within time limit",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the time limit. The system should correctly identify the pass as valid and deduct the fare from the pass balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Valid Limited Period Pass outside time limit with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass outside the time limit but with a sufficient e-Purse balance. The system should correctly identify the pass as invalid due to the time limit, and deduct the fare from the e-Purse balance instead."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Expired Period Pass with insufficient ePurse balance",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from an anonymous virtual card with an expired Period Pass and an ePurse balance less than the fare amount. The system should correctly identify the pass as expired and the ePurse balance as insufficient, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Blocked Virtual Card",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked virtual card. The system should correctly identify the card as blocked and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Virtual Card on Deny List",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a virtual card on the Deny List. The system should correctly identify the card as being on the Deny List, remove it from the list, set it to blocked, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Low Battery during Payment",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should be able to process the remote lists even after the battery goes below the threshold, and then switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Non-Farecard Tap",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer taps a card that is not a Farecard. The system should display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Farecard within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a Farecard within the Anti-Passback Window. The system should correctly identify the card as being within the Anti-Passback Window and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Non-Activated Card Tap",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer taps a non-activated card. The system should display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the service class is Premium."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance Test for Fare Payment",
        "Test_Sce_Description": "Verify that the system can handle a high volume of fare payments simultaneously without any degradation in performance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security Test for Fare Payment",
        "Test_Sce_Description": "Verify that the system securely processes fare payments, ensuring that sensitive customer data is not compromised."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Transfer Window",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Off Peak Daily Cap Limit",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has reached the off peak daily cap limit."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame and does not cause any delays or disruptions in the service."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure and does not expose any sensitive customer information or allow any unauthorized access to the system."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Valid Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid non-adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak loads."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure and that all sensitive data is encrypted. Unauthorized access to the fare payment process should be prevented."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard. The tool should also play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling ePurse balance less than fare amount",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly handles the situation when the customer's ePurse balance is less than the fare amount. The tool should put the Farecard into overdraft (negative balance)."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing valid transfer product within Intra-agency Transfer window",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a valid transfer product within the Intra-agency Transfer window. The tool should compute the free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing valid transfer product within Inter-agency Transfer window",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a valid transfer product within the Inter-agency Transfer window. The tool should compute the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies, and deduct the appropriate fare, if applicable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling Autoload Threshold",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly handles the situation when the customer's Farecard meets or drops below Autoload Threshold. The tool should check that the ePurse balance (after deducting the travel fare) is under the Autoload threshold and add the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing Farecard on the Action or Load Value List",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a Farecard that is on the Action or Load Value list. The tool should verify that the Farecard is on the list and update the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly handles a fare payment made during Peak hours after the Farecard has reached off peak Daily Cap Limit and is out of transfer window. The tool should compute the fare and deduct the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The tool should compute the fare and deduct the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly processes a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The tool should compute the fare and deduct the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult Concession on Farecard",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and processes a Farecard with a Valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Deny list functionality when device is offline",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Declined tap sent to ATS",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the declined tap is sent to ATS. This should happen even when the device is offline."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Multiple NFC media presented to the device",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Device in Out-of-Service state",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state, it does not detect the media when a customer attempts to tap their Open Payments Media on the card reader. The device should remain in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Error handling on the device",
        "Test_Sce_Description": "Verify that when an error has occurred on the device that does not cover the exception cases above, the device records the tap and provides the Declined \u2013 See Customer Service Screen to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Anti-passback functionality when device is online",
        "Test_Sce_Description": "Verify that when a cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window and the device is online, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Anti-passback functionality when device is offline",
        "Test_Sce_Description": "Verify that when a cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window and the device is offline, the device should handle this scenario appropriately. The specific behavior will depend on the system's offline anti-passback logic."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Multiple NFC media presented to the device",
        "Test_Sce_Description": "This scenario will test the functionality of the device when multiple NFC media are presented at once. The device should block all user functionality and present an Anti-Collision toast message to the customer. An error should be captured and logged in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Non-activated Farecard tapped on the device",
        "Test_Sce_Description": "This scenario will test the functionality of the device when a non-activated Farecard is tapped. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction. An error should be captured and logged in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Card reading error occurs",
        "Test_Sce_Description": "This scenario will test the functionality of the device when a Card reading error occurs. The device should not provide any feedback and screen remains \u201cIn-Service\u201d display. An error should be captured and logged in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Card write error occurs",
        "Test_Sce_Description": "This scenario will test the functionality of the device when a Card write error occurs. The device should not provide any feedback and screen remains \u201cIn-Service\u201d display. The device should delete the transaction information. An error should be captured and logged in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Device in Out-of-Service state",
        "Test_Sce_Description": "This scenario will test the functionality of the device when it is in Out-of-Service state. The device should display the appropriate \u2018Out-of-Service\u2019 display to customers."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Virtual Card Media tapped when device is in Out-of-Service state",
        "Test_Sce_Description": "This scenario will test the functionality of the device when a Virtual Card Media is tapped while the device is in Out-of-Service state. The device should not detect the media and remain in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Customer attempts to tap-on immediately after tapping-off at the same station",
        "Test_Sce_Description": "This scenario will test the functionality of the device when a customer attempts to tap-on immediately after tapping-off at the same station. The device should provide the cardholder with the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Customer attempts to tap-on immediately after tapping-off at the same station and the device is offline",
        "Test_Sce_Description": "This scenario will test the functionality of the device when a customer attempts to tap-on immediately after tapping-off at the same station and the device is offline. The device should provide the cardholder with the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Error has occurred on the device",
        "Test_Sce_Description": "This scenario will test the functionality of the device when an error has occurred that does not cover the exception cases above. The device should record the tap and provide the cardholder with the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Virtual Card has insufficient E-Purse to cover the Tap-On Fare",
        "Test_Sce_Description": "This scenario will test the functionality of the device when a Virtual Card has insufficient E-Purse to cover the Tap-On Fare. The device should provide the cardholder with the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Open Payments Media tap when SA Tool is in Out-of-Service state",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader. The expected outcome is that the device will not detect the media and will remain in the Out-of-Service state."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Open Payments Media tap when SA Tool is configured for Farecard reversals only",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is configured for only farecard reversals and a customer attempts to tap their Open Payments Media on the card reader. The expected outcome is that the device will display an error message indicating that it is only available for Farecard reversals."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Open Payments Media tap not on the approved media list while the device is in Pilot mode",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Pilot mode and a customer attempts to tap an Open Payments Media that is not on the approved media list. The expected outcome is that the device will check the approved media list and if the media is not found, it will display a 'Declined \u2013 Not Accepted, Tap Farecard' screen to the cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Open Payments Media tap when the media is on the BIN Blocking List",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Open Payments Media is on the BIN Blocking List. The expected outcome is that the device will check its local BIN Blocking list and if the card's BIN is found to be on the list, it will play a decline audio tone and display a 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing fare payment reversal with Interac Card while Interac is disabled on SA Tool",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to reverse fare payment with an Interac Card while Interac is disabled on the tool. The expected outcome is that the device will determine that the media tapped is not supported and will display an error message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing fare payment reversal with Open Payment Card while Open Payments are disabled on SA Tool",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to reverse fare payment with an Open Payment Card while Open Payments are disabled on the tool. The expected outcome is that the device will determine that the media tapped is not supported and will display an error message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing fare payment reversal with Open Payment Card while corresponding payment method / card brand is disabled on SA Tool",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to reverse fare payment with an Open Payment Card while the corresponding payment method / card brand is disabled on the tool. The expected outcome is that the device will determine that the media tapped is not supported and will display an error message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Testing the error logging functionality when an error occurs",
        "Test_Sce_Description": "This scenario will test if the system correctly logs the error when an error occurs on the device. The error should be captured and logged in the background to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Testing the response when a Virtual Card\u2019s E-Purse balance is insufficient",
        "Test_Sce_Description": "This scenario will test if the system correctly responds when a Virtual Card\u2019s E-Purse balance is less than that of the Tap-On Fare. The device should send the tap to ATS which should return a response that the virtual card does not have a sufficient E-Purse balance to cover the tap-on fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Testing the response when Virtual Card Media is on the Online Hotlist",
        "Test_Sce_Description": "This scenario will test if the system correctly responds when the Virtual Card media is on the online hotlist. The device should send the tap to ATS and return a response that the media is on the online hotlist. The right to travel should not be conferred."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Testing the response when Virtual Card Media is on the Online Hotlist but the scratchpad does not indicate blocked",
        "Test_Sce_Description": "This scenario will test if the system correctly responds when the Virtual Card media is on the online hotlist but the scratchpad does not indicate blocked. The device should send the tap to ATS for processing. ATS should check the online hotlist and confirm that the virtual card is on the online hotlist. ATS should send the rejected tap back to the device via API. The device should update the scratchpad with the blocked status and send a notification to ATS that it has done so."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Testing the response when Virtual Card Media is on the local hotlist and device is offline",
        "Test_Sce_Description": "This scenario will test if the system correctly responds when the Virtual Card Media is on the local hotlist and the device is offline. The device should record the tap and the Declined \u2013 Please Contact Customer Service screen should be provided to the cardholder. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Testing the response when an Open Payments media not on the approved media list is tapped on the device in Pilot mode",
        "Test_Sce_Description": "This scenario will test if the system correctly responds when an Open Payments media that is not on the approved media list is tapped on the device in Pilot mode. The device should check the approved media list. If the media is not found on the approved media list, the Declined \u2013 Not Accepted, Tap Farecard screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Testing the response when Customer\u2019s Open Payments Media is on the BIN Blocking List",
        "Test_Sce_Description": "This scenario will test if the system correctly responds when the Customer\u2019s Open Payments Media is on the BIN Blocking List. The device should check its local BIN Blocking list. The card\u2019s BIN should be found to be on the BIN Blocking List. The device should play the decline audio tone and display the Declined \u2013 Try Another Card (BIN Blocked) screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Testing the response when Customer is travelling with an Interac Card, and ATS returns a decline response due to Media In Debt",
        "Test_Sce_Description": "This scenario will test if the system correctly responds when the Customer is travelling with an Interac Card, and ATS returns a decline response due to Media In Debt. The device should send the tap to ATS and return a response that the Interac media is on the deny list. The right to travel should not be conferred."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Testing the response when Customer is travelling with an Interac Card, device is offline, and Interac media is on the local deny list due to Media In Debt",
        "Test_Sce_Description": "This scenario will test if the system correctly responds when the Customer is travelling with an Interac Card, the device is offline, and the Interac media is on the local deny list due to Media In Debt. The device should check the local deny list. The media should be on the local deny list due to reason Media in Debt. The right to travel should not be conferred."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Testing the response when Customer taps Interac Card while Interac is disabled on SA Tool",
        "Test_Sce_Description": "This scenario will test if the system correctly responds when the Customer taps the Interac Card while Interac is disabled on SA Tool. The device should detect the Interac media. The device should determine that the media tapped is not supported and display an error message. The right to travel should not be conferred. A transaction should not be recorded."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Testing the response when Customer taps Open Payment Card while Open Payments are disabled on SA Tool",
        "Test_Sce_Description": "This scenario will test if the system correctly responds when the Customer taps Open Payment Card while Open Payments are disabled on SA Tool. The device should detect the Open Payment Card. The device should determine that the media tapped is not supported and display an error message. The right to travel should not be conferred. A transaction should not be recorded."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Open Payments Media on Deny List",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Open Payments Media on Local Deny List and Device Offline",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Multiple NFC Media Presented at Once",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Tap Open Payments Media when Device is Out-of-Service",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Error Occurred on Device",
        "Test_Sce_Description": "Verify that when an error has occurred on the device that does not cover the exception cases above, the device records the tap and the Declined \u2013 See Customer Service Screen is provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Tap Open Payments Media Not on Approved List in Beta Mode",
        "Test_Sce_Description": "Verify that when a customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Tap-on Immediately After Tapping-off at Same Station (Online)",
        "Test_Sce_Description": "Verify that when a customer taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "Open Payments",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Tap-on Immediately After Tapping-off at Same Station (Offline)",
        "Test_Sce_Description": "Verify that when a customer taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window and the device is offline, the device should not detect the tap and remain in the offline state. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after reaching the off peak daily cap and outside of the transfer window. The system should correctly identify the farecard's status, compute the fare based on peak hour rates, and deduct the amount from the ePurse balance. The transaction should be communicated back to the SA Tool and the fare payment should be successfully completed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Valid Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid non-adult concession on the farecard and computes and deducts the correct fare from the ePurse balance. The system should correctly identify the concession, compute the fare based on the concession rates, and deduct the amount from the ePurse balance. The fare payment should be successfully completed and the SA Tool should display the successful fare payment screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment on Premium Service Route with Transfer where Premium fare is higher than Special Event fare",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window. The system should correctly identify the farecard's status, compute the fare based on the premium service rates, and deduct the amount from the ePurse balance. The fare payment should be successfully completed and the SA Tool should display the successful fare payment screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment on Premium Service Route with Transfer where Premium fare is lower than Special Event fare",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window. The system should correctly identify the farecard's status, compute the fare based on the premium service rates, and deduct the amount from the ePurse balance. The fare payment should be successfully completed and the SA Tool should display the successful fare payment screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid child concession on the farecard and computes and deducts the correct fare from the ePurse balance. The system should correctly identify the concession, compute the fare based on the concession rates, and deduct the amount from the ePurse balance. The fare payment should be successfully completed and the SA Tool should display the successful fare payment screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should correctly identify the farecard's status, compute the fare based on the appropriate rates, and deduct the amount from the ePurse balance. The fare payment and inspection transactions should be recorded and the SA Tool should return to the Tap Card screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid non-adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak load conditions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure and that all sensitive data is encrypted during transmission and storage."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product with lower fare",
        "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the Child Concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of the SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay when computing and deducting fares from the ePurse balance under various conditions such as peak hours, off peak hours, within transfer window, outside transfer window, with different service classes and transfer products."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of the SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool securely handles the customer's farecard information and ePurse balance during fare payment computations and deductions. The system should not expose any sensitive customer information during these transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of insufficient ePurse balance",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly handles the situation when the customer's ePurse balance is less than the fare amount. The tool should put the Farecard into overdraft (negative balance)."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of valid transfer product within Intra-agency Transfer window",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of valid transfer product within Inter-agency Transfer window",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product from other transit agency and computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of Autoload Threshold",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of Farecard on the Action or Load Value List",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours after previously reaching off peak daily cap (outside the transfer window) results in a fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of fare payment on Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a fare upgrade."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of fare payment on Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of fare payment with a Valid Non-Adult Concession on the Farecard",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and processes the fare payment when the customer's Farecard has a Valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Temporal Class Supplement Tap-On Transaction",
        "Test_Sce_Description": "Verify that the device correctly processes a Tap-On Transaction when a Farecard is tapped during a time period that contains an associated Temporal Class Supplement. The device should reflect the Temporal Class Supplement on the HMI and process the transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Autoload Enabled Farecard Crossing Threshold",
        "Test_Sce_Description": "Verify that when a Farecard with Autoload enabled is tapped and the Fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance. The device should detect this and deduct the Fare from the Farecard E-Purse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Override Default Trip with No Default O/D",
        "Test_Sce_Description": "Verify that when a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on. The device should provide feedback to the Cardholder of a successful transaction and notify the customer that the Default Trip was overridden."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Farecard Validation Failure at Tap-On",
        "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device provides the cardholder with the appropriate feedback without updating the Farecard. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that when a blocked Farecard is tapped, the right to travel is not conferred. The device should detect that the Farecard is blocked and provide the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Exceeding Max Travel Duration",
        "Test_Sce_Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment and opens a new trip. The device should determine this and deduct the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality and presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Non-Activated Farecard Tap-On",
        "Test_Sce_Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Autoload Threshold Crossed",
        "Test_Sce_Description": "Verify that when the Farecard E-Purse Balance crosses the Auto-load threshold due to the Fare, the Autoload amount is automatically added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Fare Deduction",
        "Test_Sce_Description": "Verify that the Device correctly deducts the Fare from the Farecard E-Purse balance when the Autoload threshold is crossed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Feedback to Cardholder",
        "Test_Sce_Description": "Verify that the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to an Autoload transaction and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Temporal Class Supplement Processing",
        "Test_Sce_Description": "Verify that the Device correctly processes the Tap-On Transaction as a normal tap-on when the device HMI displays the Temporal Class."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Non-Revenue Farecard Acceptance",
        "Test_Sce_Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode and displays a declined HMI when the Non-Revenue card is tapped in the revenue mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Fare Payment with Fare type Discount",
        "Test_Sce_Description": "Verify that the Device correctly displays the \u201cFare Payment with Fare type Discount\u201d HMI and accounts for the concession discount in the Fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Default Trip Override",
        "Test_Sce_Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Farecard Validation Failure",
        "Test_Sce_Description": "Verify that the system correctly handles the scenario when the Farecard fails validation checks at Tap-On."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that when the customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Performance of Autoload Process",
        "Test_Sce_Description": "Verify that the Autoload process is completed within the acceptable time frame when the Farecard E-Purse Balance crosses the Auto-load threshold."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Security of Autoload Process",
        "Test_Sce_Description": "Verify that the Autoload process is secure and does not expose any sensitive cardholder information."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Full Fare-by-Zone transaction processing",
        "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Override of Default Trip",
        "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on when the customer requests the override of a Default Trip by interacting with the Device."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Capping discount eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple capping discounts eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS will take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Offline device capping discount processing",
        "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules will follow use-case logic outlined in ticketing use cases."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media fails ODA check",
        "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device performs the necessary validation and determines that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. Card reader detects Farecard is blocked. Right to travel is not conferred and the Device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Max Travel Duration Exceedance",
        "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. Device determines that the Tap-On Time + Max Travel Duration < Current Time. Device Auto-settles the Underpayment and deducts the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple NFC media presentation",
        "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. Customer presents multiple NFC medias to the card reader at once. Device blocks all user functionality, presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Non-activated Farecard",
        "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. Device detects that the Farecard is not activated. The device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Card reading error",
        "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides the appropriate feedback to the cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Non-Revenue farecard in training mode",
        "Test_Sce_Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode. If the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard with Temporal Class Supplement",
        "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the Device should contain an HMI reflecting the Temporal Class Supplement, and process the Tap-On Transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard with Autoload Enabled",
        "Test_Sce_Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard without Default O/D",
        "Test_Sce_Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device should process the tap as a result tap-on."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Audio Messages Request",
        "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard Validation Checks",
        "Test_Sce_Description": "Verify that if a Farecard fails validation checks at Tap-On, the system should handle this exception flow appropriately."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment with Period Pass",
        "Test_Sce_Description": "Verify that when a Farecard with a valid Period Pass is used for fare payment, the system should correctly compute and deduct the Upgrade fare if the Service class fare value is lower than the current route/location Service Class fare value."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment with Limited Period Pass",
        "Test_Sce_Description": "Verify that when a Farecard with a valid Limited Period Pass is used for fare payment, the system should correctly accept the period pass fare payment if the time at tap is occurring within the time limit of the Limited Period Pass Product."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment with Limited Period Pass outside of valid time",
        "Test_Sce_Description": "Verify that when a Farecard with a valid Limited Period Pass is used for fare payment, the system should correctly deduct the fare from the e-Purse balance if the time at tap is occurring outside of the time limit of the Limited Period Pass Product."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window, and the premium fare is lower than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid non-adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame and does not cause any performance issues in the system."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure and does not expose any sensitive customer information or system data."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Premium Service Route with Higher Fare",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes and deducts the fare when a customer taps on a premium service route/location after previously riding on a Special Event service route within the transfer window. The fare for the premium service should be higher than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Transfer Window Validation",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies whether the tap is within the transfer window. If the tap is not within the transfer window, the fare should not be deducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Valid Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies whether the farecard has a valid Special Event Transfer Product. If the farecard does not have a valid Special Event Transfer Product, the fare should not be deducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Service Class Validation",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies the service class as Premium. If the service class is not identified as Premium, the fare should not be deducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Deduction from Virtual Card E-Purse",
        "Test_Sce_Description": "Verify that the SA Tool correctly deducts the fare from the Virtual Card E-Purse. The balance in the E-Purse should be reduced by the amount of the fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Communication with SA Tool",
        "Test_Sce_Description": "Verify that the ATS correctly communicates the fare deduction back to the SA Tool. The SA Tool should display the updated balance in the E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "POP Print Flag Setting",
        "Test_Sce_Description": "Verify that the SA Tool correctly sets the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Verify that the SA Tool performs the fare deduction and updates the E-Purse balance within the acceptable time limit."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Verify that the SA Tool securely processes the fare payment and does not expose any sensitive customer information during the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after previously reaching off peak daily cap (outside the transfer window). The system should correctly identify that the farecard has reached off peak Daily Cap Limit, has not reached Peak Daily Cap limit and is out of transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare upgrade from the ePurse balance when a tap is made on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The system should correctly identify that the Service Class is Premium, the Farecard has a valid Special Event Transfer Product and the Tap is within Transfer Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "Verify that the system correctly computes and allows a free transfer when a tap is made on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The system should correctly identify that the Service Class is Premium, the Farecard has a valid Special Event Transfer Product and the Tap is within Transfer Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Valid Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the Upgrade fare from the ePurse balance when the customer\u2019s Farecard has a Valid Non-Adult concession. The system should correctly identify the concession and apply the correct fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the correct Child Concession fare from the ePurse balance when the customer\u2019s Farecard has a Valid Child concession. The system should correctly identify the concession and apply the correct fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when the operator inspects a customer\u2019s farecard and determines that they have not paid a fare. The system should correctly record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Verify that the system performs efficiently under load. The system should be able to handle multiple fare payments simultaneously without any degradation in performance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Verify that the system securely handles all transactions and customer data. The system should encrypt all sensitive data and should not allow unauthorized access."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of insufficient ePurse balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of valid transfer product",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Inter-agency transfer processing",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Autoload threshold processing",
        "Test_Sce_Description": "Verify that the SA Tool correctly checks that the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of Action or Load Value list",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Peak hours fare payment after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Premium Service Route fare payment with Transfer where the Premium fare is higher than the Special Event fare",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Premium Service Route fare payment with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Valid Non-Adult Concession processing",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Processing Valid Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid transfer product on the customer's TICKET and computes the free transfer. The system should follow the Transfer Product Processing rules as per [R6]."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that the system correctly processes the customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion. The audio message should be played in the default language of the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location, resulting in a regular ride balance fare payment and Transfer Product creation. The device should not differentiate between service class for CLIENT Ticket."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route, resulting in a free transfer. The device should not differentiate between service class for CLIENT Ticket."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a Valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly processes fare payment resulting from a failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies when the customer's ride balance is empty. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The application should switch to \u201cOut of Service\u201d mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer's card is not CLIENT media. The system should display the device error message \u201cCard Read Error\u201d."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies when the customer's TICKET is within the Anti-Passback Window. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies when the customer's TICKET is not activated. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Valid Transfer Product",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the free transfer when the ticket has a valid Transfer Product and the tap is within the Transfer Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a Valid Child Concession on the customer's ticket and successfully completes the fare payment, displaying the correct screen and playing the correct audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that when an operator determines a customer has not paid a fare, the SA Tool correctly records both the fare payment and inspection transactions after the operator selects the payment function."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that when a customer's ride balance is empty, the SA Tool correctly detects this, declines the transaction, and displays the correct message and audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "Verify that when the device battery goes below the low battery threshold during a successful ticket tap, the application correctly switches to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that when a customer taps a card that is not CLIENT media, the SA Tool application does not respond and correctly displays the 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that when a customer's ticket is within the Anti-Passback Window, the SA Tool correctly detects this, declines the transaction, and displays the correct message and audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that when a customer taps a non-activated ticket, the SA Tool correctly detects this, declines the transaction, and displays the correct message and audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Expired Ticket",
        "Test_Sce_Description": "Verify that when a customer taps an expired ticket, the SA Tool correctly detects this, declines the transaction, and displays the correct message and audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Period Pass",
        "Test_Sce_Description": "Verify that when a customer's ticket has a valid period pass, the SA Tool correctly computes the fare, updates the ticket, and displays the successful fare payment screen and audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "Verify that when the SA Tool application detects a ticket and fails to read it correctly, the correct error handling processes are followed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that has no ride balance remaining. The SA Tool should detect the empty ride balance, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "This scenario tests the performance of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5 of the Main Use Case. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a card that is not CLIENT media. The SA Tool should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that is within the Anti-Passback Window. The SA Tool should detect the Anti-Passback violation, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a non-activated TICKET. The SA Tool should detect the invalidity of the TICKET, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a locked Farecard. The SA Tool should read the Farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with an unreadable TICKET. The SA Tool should detect the TICKET but fail to read it, indicate to the operator that the TICKET is unreadable, and log the error for troubleshooting."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that has a valid concession other than Adult or Child. The specific functionality to be tested will depend on the specific concession type."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Low Battery Threshold Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when the battery level reaches the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Fare Payment Processing Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when processing a fare payment. The application should correctly compute the fare payment and update the customer's balance accordingly. If the customer's balance is insufficient, the application should display a declined message and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Card Read Error Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when a card that is not CLIENT media is tapped. The application should not respond and a 'Card Read Error' message should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Anti-Passback Window Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Non-Activated Ticket Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when a non-activated TICKET is tapped. The application should detect that the TICKET is not activated and display a declined message to the customer. The transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "This scenario tests the performance of the application under various conditions such as high load, low battery, and poor network connectivity. The application should maintain its functionality and performance under these conditions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "This scenario tests the security features of the application such as data encryption, user authentication, and secure payment processing. The application should protect the user's data and prevent unauthorized access."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment using a card that is not CLIENT media. The SA Tool should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment with a ticket that has an empty ride balance. The SA Tool should detect the empty ride balance, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. The application should switch to 'Out of Service' mode after processing the fare payment if the low battery threshold is reached."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Anti-Passback Window",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The SA Tool should detect the Anti-Passback check failure, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment with a non-activated ticket. The SA Tool should detect the invalidity of the ticket, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Locked Farecard",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment with a locked farecard. The SA Tool should detect the locked farecard, display a declined message, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment with an unreadable TICKET. The SA Tool should detect the unreadable TICKET, display an error message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that has a valid non-adult, non-child concession. The SA Tool should detect the concession, display a successful fare payment screen, and conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Anti-Passback Window Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Timeout Functionality",
        "Test_Sce_Description": "Verify that the system correctly returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the ticket being within the Anti-Passback Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Ticket Validation Process",
        "Test_Sce_Description": "Verify that the system correctly performs all necessary validation checks when a ticket is tapped on the NFC card reader. This includes checking if the ticket is within the Anti-Passback Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Audio Tone Functionality",
        "Test_Sce_Description": "Verify that the system plays the correct audio tone (declined) when a transaction is declined due to the ticket being within the Anti-Passback Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Non-Activated Ticket Handling",
        "Test_Sce_Description": "Verify that the system correctly identifies a non-activated ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Expired Ticket Handling",
        "Test_Sce_Description": "Verify that the system correctly identifies an expired ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Period Pass Validation",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket with a valid period pass and accepts the fare. The system should display a successful fare payment screen and play a successful fare payment audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Ticket Update Process",
        "Test_Sce_Description": "Verify that the system correctly updates the ticket information after a successful fare payment using a period pass."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Low Battery Threshold Handling",
        "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the battery goes below the low battery threshold during a successful ticket tap."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Non-CLIENT Media Handling",
        "Test_Sce_Description": "Verify that the system correctly identifies a card that is not CLIENT media and does not respond. The device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a non-activated ticket. The system should display a declined message, not conduct the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a ticket with an empty ride balance. The system should display a declined message, not conduct the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a card that is not CLIENT media. The system should not respond, but display a 'Card Read Error' message for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should display a declined message, not conduct the transaction, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a locked farecard. The system should display a declined screen to the operator and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using an unreadable ticket. The system should indicate to the operator that the ticket is unreadable. If the customer taps the NFC reader again and the tap is successful, the system should proceed with steps 4-9. If the tap is unsuccessful, the system should indicate to the operator that the ticket is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a ticket with a valid non-adult, non-child concession. The system should process the fare payment accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service class and the farecard has a valid special event transfer product and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made and the farecard has a valid special event transfer product and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the farecard has a valid non-adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the farecard has a valid child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance of Fare Payment",
        "Test_Sce_Description": "Verify that the system performs the fare payment process within the acceptable time limit under varying loads."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security of Fare Payment",
        "Test_Sce_Description": "Verify that the system securely processes the fare payment and does not expose any sensitive information during the process."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Premium Service Route with Higher Fare",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The premium fare should be higher than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Deduction Communication",
        "Test_Sce_Description": "Verify that the fare deduction is correctly communicated back to the SA Tool after the ATS computes and deducts the fare from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Transfer Print Status Display",
        "Test_Sce_Description": "Verify that the SA Tool sets the POP Print Flag to 0 and accurately displays the transfer print status if the farecard is queried."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Peak Hour Fare Payment after Off Peak Cap",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a customer taps during peak hours after previously reaching off peak daily cap outside the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Premium Service Route with Lower Fare",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The premium fare should be lower than the Special Event fare, resulting in a free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Non-Adult Concession Fare Payment",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid Non-Adult concession on the customer's Farecard and deducts the appropriate fare from the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Child Concession Fare Payment",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid Child concession on the customer's Farecard and deducts the appropriate fare from the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment after Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment after the operator determines that the customer has not paid a fare during an inspection. The SA Tool should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Verify that the system performs efficiently under high load, such as during peak hours when multiple fare payments are being processed simultaneously."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Verify that the system securely processes fare payments, ensuring that customer data is protected and that unauthorized access is prevented."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Premium Service Route with Transfer where Premium fare is higher than Special Event fare",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare upgrade from the ePurse balance when a tap is made on a premium service route after previously riding on a Special Event service route within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Premium Service Route with Transfer where Premium fare is lower than Special Event fare",
        "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a tap is made on a premium service route after previously riding on a Special Event service route within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Valid Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when the customer's farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the Child Concession fare from the ePurse balance when the customer's farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when the operator determines that the customer has not paid a fare during inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of the SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay when computing and deducting fares from the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of the SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool securely processes fare payments and protects customer's ePurse balance and personal information."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Inter-agency transfer processing",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies, and deducts the appropriate fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Autoload threshold processing",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold, and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Action or Load Value list processing",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the customer's Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Premium Service Route fare payment with valid Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid transfer product on the customer's TICKET and computes the free transfer. The system should follow the Transfer Product Processing rules as per [R6]."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion. The audio message should be played in the default language of the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment resulting from a failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a TICKET with no Ride Balance remaining. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should switch to \u201cOut of Service\u201d mode if the low battery threshold is reached before Step 5. Else, the customers fare payment should be processed as per Step 5 and then the application should switch to \u201cOut of Service\u201d mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer taps a card that is not CLIENT media. The system should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a TICKET that is within the Anti-Passback Window. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a non-activated TICKET. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a Valid Child Concession on the customer's ticket and displays the successful Child fare payment screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the SA Tool correctly records both the fare payment and inspection transactions when the operator determines that the customer has not paid a fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ride balance is empty and displays a declined message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "Verify that the SA Tool correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful ticket tap."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the SA Tool correctly displays a 'Card Read Error' message when the customer's card is not CLIENT media."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ticket is within the Anti-Passback Window and displays a declined message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ticket is not activated and displays a declined message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Expired Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects when the customer's ticket is expired and displays a declined message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Period Pass",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes that the ticket has a valid period pass and accepts the fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects when the ticket is unreadable and fails to read it correctly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "This scenario tests the performance of the SA Tool when the device battery goes below the low battery threshold during a fare payment. The SA Tool should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed. If the threshold is reached after the fare payment is processed, the application should complete the transaction and then switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a locked farecard. The SA Tool should read the farecard, detect that it is locked, display a declined screen to the operator, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a valid Non-Adult, Non-Child concession attempts to make a fare payment. The SA Tool should process the concession accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Low Battery Threshold Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when the battery level goes below the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Card Read Error Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer taps a card that is not CLIENT media. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Anti-Passback Window Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Non-Activated Ticket Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer taps a non-activated TICKET. The application should detect that the TICKET is not activated and display an error message to the customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Empty Ride Balance Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer's ride balance is empty. The SA Tool should detect that the Ride Balance is empty and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Valid Child Concession Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer's TICKET has a Valid Child concession. A Valid Child Concession should be found and the SA Tool should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Failed Inspection Test",
        "Test_Sce_Description": "This scenario tests the application's response when the operator inspects a customer's TICKET and determines that they have not paid a fare. The operator should select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Non-CLIENT Media Card",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that has an empty ride balance. The system should detect the empty ride balance, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "This scenario is to validate the system's response when the device's battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Locked Farecard",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a locked farecard. The system should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with an unreadable TICKET. The system should detect the TICKET but fail to read it, and indicate to the operator that the TICKET is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a valid non-adult, non-child concession tries to make a fare payment. The system should process the fare payment accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with TICKET in Anti-Passback Window",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a TICKET that is within the Anti-Passback Window. The system should detect that the TICKET fails the Anti-Passback checks, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Non-Activated TICKET",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a non-activated TICKET. The system should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, detect that the farecard is in overdraft, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment after a failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen, and the system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a valid child concession tries to make a fare payment. The system should find the valid child concession, display the successful child fare payment screen, and play the successful fare payment audio tone for child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Timeout Functionality",
        "Test_Sce_Description": "Verify that the system returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the ticket being within the Anti-Passback Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Ticket Validation",
        "Test_Sce_Description": "Verify that the system correctly validates the ticket during the Anti-Passback Window check. The system should correctly identify the ticket status and decline the transaction if it is within the Anti-Passback Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Audio Tone Functionality",
        "Test_Sce_Description": "Verify that the system plays the correct declined audio tone when a transaction is declined due to the ticket being within the Anti-Passback Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Exception Flow - Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful ticket tap. The system should process the fare payment if the threshold is reached after Step 5 and then switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Exception Flow - Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly identifies a non-CLIENT media card and does not respond to the tap. The device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Alternate Flow - Unreadable Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies an unreadable ticket and fails to read it correctly. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Alternate Flow - Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies a non-activated ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Performance - Multiple Transactions",
        "Test_Sce_Description": "Verify that the system can handle multiple transactions in quick succession without any performance degradation. The system should correctly process each transaction and display the appropriate messages."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Security - Unauthorized Access",
        "Test_Sce_Description": "Verify that the system prevents unauthorized access to the SA Tool application. Only operators who are signed-in to the application in the revenue mode should be able to access the payment function."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a non-activated ticket. The system should detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should detect that the ride balance is empty and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media Card",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should detect that the ticket fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a locked farecard. The system should read the farecard, determine that it is locked, display a declined screen to the operator and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with an unreadable ticket. The system should detect the ticket but fail to read it, indicating to the operator that the ticket is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a ticket that has a valid non-adult, non-child concession. The system should process the fare payment accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Verify that the SA Tool application correctly detects and handles a situation where the Virtual Card is unreadable. The application should indicate to the operator that the Virtual Card is unreadable and prompt the customer to tap on the NFC reader again."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Successful Tap After Unreadable Card",
        "Test_Sce_Description": "Verify that if the customer taps the NFC reader again after an unreadable card error, the application correctly reads the card and proceeds with steps 4-7 of the main use case."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Unsuccessful Tap After Unreadable Card",
        "Test_Sce_Description": "Verify that if the customer taps the NFC reader again after an unreadable card error and the tap is still unsuccessful, the application correctly indicates to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Non-Adult, Non-Child, Non-Discreet Concessions",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the customer's Virtual Card has a valid non-adult, non-child, non-discreet concession. The application should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "ePurse Balance Less Than Fare Amount",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the customer's ePurse balance is less than the fare amount. The application should send the tap to ATS for processing, which should remove the fare from the Virtual Card e-Purse and put the card into overdraft."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Valid Intra-SP Transfer Product",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the customer's Virtual Card has a valid intra-agency transfer product. The application should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Valid Inter-SP Transfer Product",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the customer's Virtual Card has a valid inter-agency transfer product. The application should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Expired Period Pass with Sufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the customer's Virtual Card has an expired period pass and the ePurse balance is more than the fare amount. The application should detect that the Period Pass has expired, compute the value to be deducted from the e-Purse, and deduct the fare accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Expired Period Pass with Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the customer's Virtual Card has an expired period pass and the ePurse balance is less than the fare amount. The application should detect that the Period Pass has expired, compute the value to be deducted from the e-Purse, and deduct the fare accordingly, putting the Virtual Card into overdraft."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Customer Requests Audio Messages",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the customer requests audio messages for fare payment. The operator should be able to enable audio mode and adjust the volume level using the physical device buttons at the customer's discretion."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the Virtual Card is unreadable",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it detects a Virtual Card but is unable to read it. The test will verify if the SA Tool application correctly indicates to the operator that the Virtual Card is unreadable. The test will also check if the customer can tap on the NFC reader again and if the SA Tool application correctly indicates to the operator that the CLIENT (Virtual) Card is unreadable when the tap is unsuccessful."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the customer has a concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The test will verify if the SA Tool shows the successful fare payment screen for non-adult concession, plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount. The test will verify if the device sends the tap to ATS for processing, if ATS checks the online hotlist and completes the fare processing, if ATS removes the fare from the Virtual Card e-Purse and puts the card into overdraft, and if the right to travel is conferred to the Cardholder by updating the Virtual Card accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the transaction is within Intra-SP Transfer window",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product. The test will verify if ATS reads that the Virtual Card contains a valid intra-agency transfer product and deducts $0 from the Virtual Card E-Purse, and if this is communicated back to the device."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the transaction is within Inter-SP Transfer window",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product from other service provider. The test will verify if ATS reads that the Virtual Card contains a valid inter-agency transfer product and deducts $0 from the Virtual Card E-Purse, and if this is communicated back to the device."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the customer requests Audio Messages",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer requests Audio Messages. The test will verify if the SA Tool plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Test the scenario where the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer will tap on the NFC reader again. If the tap is unsuccessful, the SA Tool application should indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "Test the scenario where the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "ePurse Balance Less Than the Fare Amount",
        "Test_Sce_Description": "Test the scenario where the customer's ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly. The device should provide the appropriate feedback to the Cardholder of a successful transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Transaction within Intra-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer's Virtual Card has a valid transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card, the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Transaction within Inter-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer's Virtual Card has a valid transfer product from other service provider and a transfer agreement between the service providers has been established. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card; the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Payment by e-Purse",
        "Test_Sce_Description": "Test the scenario where the customer wants to pay with their e-purse balance. The operator should place the customer\u2019s Farecard on the NFC card reader and select to pay by e-Purse. The SA Tool should automatically detect the Farecard and initiate the identification checks. If the Farecard is valid, not on the hotlist, and has at least a minimum balance needed for payment, then the SA Tool should populate the full payment amount and the operator should have the option to edit if the customer is making a split payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Test the scenario where the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is successful, the fare payment process should continue. If the tap is unsuccessful, the application should again indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "ePurse balance less than fare amount",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly. The device should provide the appropriate feedback to the Cardholder of a successful transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Transaction within Intra-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card, the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Transaction within Inter-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product from other service provider and a transfer agreement between the service providers has been established. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card; the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Customer requests Audio Messages",
        "Test_Sce_Description": "Test the scenario where the customer asks to pay for the trip with their Virtual Card and requests audio messages for fare payment. The operator should enable audio mode and can change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case. The SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message. Corresponding audio message should be played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Daily Cap Reached outside of Transfer window",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, Farecard has reached Daily Cap Limit and Farecard is out of transfer window. ATS should deduct no fare since the Daily Cap is reached."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool and Service Class is Premium or Special Event. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, Service Class is Premium or Special Event, Farecard has a valid Regular Service Transfer Product and Tap is within Transfer Window. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Test the scenario where the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is unsuccessful, the application should indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "ePurse balance less than fare amount",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly. The device should provide the appropriate feedback to the Cardholder of a successful transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Transaction within Intra-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card, the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Transaction within Inter-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product from other service provider and a transfer agreement between the service providers has been established. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card; the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Customer requests Audio Messages",
        "Test_Sce_Description": "Test the scenario where the customer asks to pay for the trip with their Virtual Card and requests audio messages for fare payment. The operator should enable audio mode and change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case. The SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message. Corresponding audio message should be played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Daily Cap Reached outside of Transfer window",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, the Farecard has reached Daily Cap Limit and is out of transfer window. ATS should deduct no fare since the Daily Cap is reached."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool and the Service Class is Premium or Special Event. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, the Service Class is Premium or Special Event, the Farecard has a valid Regular Service Transfer Product and the tap is within Transfer Window. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Farecard is on the Action or Load Value List",
        "Test_Sce_Description": "Check if the SA Tool correctly identifies and updates a Farecard that is on the Action or Load Value List. The tool should be able to verify the Farecard's status and update it accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Audio Messages for Fare Payment",
        "Test_Sce_Description": "Ensure that when a customer requests audio messages for fare payment, the SA Tool correctly enables audio mode and plays the corresponding audio message in the default language of the Farecard. The volume level should be adjustable and return to the device default after the use case is completed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Daily Cap Reached",
        "Test_Sce_Description": "Check if the SA Tool correctly identifies a Farecard that has reached its Daily Cap Limit and is out of the transfer window. The tool should not deduct any fare in this case."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment for Premium Service or Special Route/Location",
        "Test_Sce_Description": "Ensure that the SA Tool correctly computes and deducts the Premium or Special Event fare when a tap on a premium service or special route/location is made. A Transfer Product creation for the Premium Service or special event Class should also occur."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Upgrade for Premium Service or Special Route/Location",
        "Test_Sce_Description": "Check if the SA Tool correctly computes and deducts the Upgrade fare when a tap on a premium service or special event route/location is made after previously riding on a regular service route (within the transfer window). The SA Tool should also set the POP Print Flag to 0 to ensure accurate display of the transfer print status."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Ensure that the SA Tool correctly identifies a Farecard that has reached off peak Daily Cap Limit, has not reached Peak Daily Cap limit, and is out of transfer window. The tool should process a fare payment in this case."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Period Pass for Higher Fare Value Service Class",
        "Test_Sce_Description": "Check if the SA Tool correctly computes and deducts the Upgrade fare when a Farecard with a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value is used."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Period Pass for Lower Fare Value Service Class",
        "Test_Sce_Description": "Ensure that the SA Tool correctly identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment when a Farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Limited Period Pass",
        "Test_Sce_Description": "Check if the SA Tool correctly identifies a Farecard with a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product. The tool should process the fare payment in this case."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "Ensure that the SA Tool correctly identifies a Farecard with a valid Limited Period Pass product on it and the time at tap is occurring outside of the time limit of the Limited Period Pass Product. The tool should process the fare payment using the e-Purse balance in this case."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass product is used within the time limit of the product. The system should correctly identify the validity of the pass and allow the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass product is used outside the time limit of the product but has sufficient e-Purse balance. The system should correctly identify the invalidity of the pass, compute the value to be deducted from the e-Purse, and deduct the fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a customer with an anonymous farecard with an expired period pass and ePurse balance less than the fare amount tries to make a transaction. The system should correctly identify the situation and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a customer with a blocked farecard tries to make a transaction. The system should correctly identify the blocked farecard and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard on the Deny List",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a customer with a farecard on the Deny List tries to make a transaction. The system should correctly identify the farecard on the Deny List, remove it from the list, set it to blocked, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Low Battery Threshold during Payment",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the battery goes below the low battery threshold during a successful Farecard tap. The system should correctly handle the situation and process the remote lists even after the battery goes below the threshold."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Period Pass with Higher Fare Value",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the situation and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a customer with a farecard with a Valid Child concession tries to make a transaction. The system should correctly identify the concession and display the successful Child Transit Pass fare payment screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a fare payment results from a failed inspection. The system should correctly handle the situation, record both the fare payment and inspection transactions, and return to the Tap Card screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Performance Testing",
        "Test_Sce_Description": "This scenario is to validate the performance of the system under different loads and stress conditions. The system should be able to handle multiple transactions simultaneously without any degradation in performance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Security Testing",
        "Test_Sce_Description": "This scenario is to validate the security features of the system. The system should be able to securely handle transactions, protect customer data, and prevent unauthorized access."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should correctly identify the validity of the pass and allow the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly compute the value to be deducted from the e-Purse and deduct the fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with an anonymous farecard with an expired period pass and insufficient ePurse balance attempts to make a transaction. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a blocked farecard attempts to make a transaction. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard on Deny List",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a farecard on the Deny List attempts to make a transaction. The system should remove the card from the Deny List, set it to blocked, decline the transaction, and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Low Battery Threshold",
        "Test_Sce_Description": "This scenario is to validate the system's performance when the battery goes below the low battery threshold during a transaction. The system should be able to process the remote lists even after the battery goes below the threshold."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the validity of the pass and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a farecard with a Valid Child concession attempts to make a transaction. The system should display the successful Child Transit Pass fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the system's response when a farecard fails inspection. The system should record both the fare payment and inspection transactions and display a toast notification of the corresponding inspection action."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product. The system should successfully deduct the fare from the farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring outside of the time limit of the Limited Period Pass Product but the farecard has sufficient e-Purse balance to cover the transaction. The system should successfully deduct the fare from the e-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the customer has an expired period pass, ePurse balance is less than the fare amount and the customer has an anonymous Virtual Card. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Blocked Virtual Card",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the customer\u2019s Farecard is blocked. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Virtual Card on the Deny List",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the customer\u2019s Virtual Card is on the Deny List. The system should remove the card from the Deny List, set it to blocked, decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Low Battery Threshold during Payment",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the low battery threshold is high enough that the remote lists can be processed even after the SA Tool battery goes below the low battery threshold during a successful Farecard tap. The system should successfully process the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Tap Counter at the Configured Limit",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the tap counter is at the configured limit. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Unreadable Virtual Card",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the SA Tool application detects the Virtual Card and fails to read it correctly. The system should indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Virtual Card with Sufficient ePurse Balance and an Expired Period Pass",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the customer\u2019s Virtual Card has an expired period pass and the customer\u2019s ePurse balance is more than the fare amount. The system should successfully deduct the fare from the e-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the valid time limit. The system should correctly identify the pass as valid and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass outside the valid time limit but with sufficient e-Purse balance. The system should correctly identify the pass as invalid due to the time limit, compute the fare to be deducted from the e-Purse, and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from an anonymous virtual card with an expired period pass and ePurse balance less than the fare amount. The system should correctly identify the card as anonymous, the pass as expired, and the ePurse balance as insufficient, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Blocked Virtual Card",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked virtual card. The system should correctly identify the card as blocked and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Virtual Card on Deny List",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a virtual card on the Deny List. The system should correctly identify the card as being on the Deny List, remove it from the list, set it to blocked, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Low Battery during Payment",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should be able to process the remote lists even after the battery goes below the threshold during a successful Farecard tap."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked Farecard. The system should correctly identify the Farecard as blocked and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Farecard on Hotlist",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a Farecard on the hotlist. The system should correctly identify the Farecard as being on the hotlist, update its status to blocked, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Non-Farecard Tap",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer taps a card that is not a Farecard. The system should display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Farecard within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a Farecard within the Anti-Passback Window. The system should correctly identify the Farecard as being within the Anti-Passback Window and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Non-Activated Card",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a non-activated card. The system should correctly identify the card as not activated and not on the action list available on the device, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a premium service class and the farecard has a valid special event transfer product."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a special event transfer product and the farecard is within the transfer window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made with a valid non-adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made with a valid child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance Test for Fare Payment",
        "Test_Sce_Description": "Verify that the system can handle a high volume of fare payments simultaneously without any performance degradation."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security Test for Fare Payment",
        "Test_Sce_Description": "Verify that the system securely processes fare payments and that sensitive customer data is not exposed during the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the special event fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of the SA Tool during Fare Payment",
        "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay during the fare payment process, including the computation and deduction of fares from the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of the SA Tool during Fare Payment",
        "Test_Sce_Description": "Verify that the SA Tool securely processes fare payments, ensuring that customer data is protected and that the ePurse balance is accurately updated."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Premium Service Route with Lower Fare than Special Event",
        "Test_Sce_Description": "Verify that when a customer taps on a premium service route after previously riding on a Special Event service route (within the transfer window), the system correctly identifies this as a free transfer and does not deduct any fare from the ePurse Balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Deduction from ePurse Balance",
        "Test_Sce_Description": "Verify that the ATS correctly computes the fare and deducts the amount from the Virtual Card E-Purse. The deducted amount should be equal to the fare for the premium service route."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Communication with SA Tool",
        "Test_Sce_Description": "Verify that the fare deduction and the remaining balance are correctly communicated back to the SA Tool and displayed to the user."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Transfer Print Status Display",
        "Test_Sce_Description": "Verify that the SA Tool sets the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Valid Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid Special Event Transfer Product on the Farecard and allows the free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Transfer Window Validation",
        "Test_Sce_Description": "Verify that the system correctly identifies that the tap is within the Transfer Window and allows the free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Verify that the system can handle multiple fare payments simultaneously without any performance degradation."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Verify that the system securely handles the fare payment transaction and does not expose any sensitive customer information."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet Concessions",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a valid Non-Adult, Non-Child, Non-discreet concession is found. The tool should correctly deduct the concession from the fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount. The tool should correctly put the Farecard into overdraft."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing Intra-agency Transfer",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a valid transfer product is found. The tool should correctly compute the free transfer."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing Inter-agency Transfer",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a valid transfer product from another transit agency is found. The tool should correctly compute the fare based on the transfer product and the agreement between the transit agencies."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling Autoload Threshold",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the Autoload threshold is met or dropped below. The tool should correctly add the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing Action or Load Value List",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the Farecard is on the Action or Load Value list. The tool should correctly verify the Farecard and update it accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling Premium or Special Event Service Class",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the fare payment is being made on a Premium or Special Event service class. The tool should correctly compute the fare and deduct it from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made during peak hours after previously reaching off peak daily cap. The tool should correctly compute the fare and deduct it from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a tap on a premium service route/location after previously riding on a Special Event service route. The tool should correctly compute the fare and deduct it from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a tap on a premium service route/location after previously riding on a Special Event service route. The tool should correctly compute the fare and deduct it from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult Concession",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a valid Non-Adult concession is found on the Farecard. The tool should correctly validate the concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Open Payments Media on Deny List",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Open Payments Media on Local Deny List and Device Offline",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Multiple NFC Media Presented at Once",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Device in Out-of-Service State",
        "Test_Sce_Description": "Verify that when the device is in an Out-of-Service state, the Not In Service Screen is provided to the cardholder and the device does not detect the media. The device should remain in the Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Error Occurred on Device",
        "Test_Sce_Description": "Verify that when an error has occurred on the device that does not cover the exception cases above, the device records the tap. The Declined \u2013 See Customer Service Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Open Payments Media Not on Approved List in Beta Mode",
        "Test_Sce_Description": "Verify that when a customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Anti-passback Functionality",
        "Test_Sce_Description": "Verify that when a customer attempts to tap-on immediately after tapping-off at the same station and the device is online, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Anti-passback Functionality Offline",
        "Test_Sce_Description": "Verify that when a customer attempts to tap-on immediately after tapping-off at the same station and the device is offline, the device should not allow the tap and should provide the appropriate feedback to the cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Multiple NFC media presented at once",
        "Test_Sce_Description": "This scenario tests the functionality of the device when multiple NFC media are presented to the card reader at once. The expected outcome is that the device blocks all user functionality and presents an Anti-Collision toast message to the customer. An error should be captured and logged in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Non-activated Farecard",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a non-activated Farecard is tapped on the device. The expected outcome is that the transaction is unsuccessful and the device provides feedback to the Cardholder of an unsuccessful transaction due to inactive farecard. An error should be captured and logged in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Card reading error",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs. The expected outcome is that the device will not provide any feedback and screen remains \u201cIn-Service\u201d display. An error should be captured and logged in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Card write error",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard is tapped on an SA Tool and a card write error occurs. The expected outcome is that the device will not provide any feedback and screen remains \u201cIn-Service\u201d display. The device should delete the transaction information. An error should be captured and logged in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Out-of-Service state",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard is tapped on an SA Tool that is in Out-of-Service state. The expected outcome is that the device displays the Not in Service screen to the cardholder and does not detect the media."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Tap-on immediately after tapping-off",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-off anti-passback Window. The expected outcome is that the device sends the tap to ATS which returns a response that the cardholder has already tapped on at the same station and is within the Tap-off anti-passback Window."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Error occurred",
        "Test_Sce_Description": "This scenario tests the functionality of the device when an error has occurred on the device that does not cover the exception cases. The expected outcome is that the device records the tap and provides the Declined \u2013 See Customer Service Screen to the cardholder. An error should be captured and logged in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Insufficient E-Purse",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a Virtual Card has insufficient E-Purse to cover the Tap-On Fare. The expected outcome is that the device records the tap and provides the Declined \u2013 See Customer Service Screen to the cardholder. An error should be captured and logged in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Out-of-Service state",
        "Test_Sce_Description": "Verify that when the SA Tool is in Out-of-Service state, it does not detect the Open Payments Media when a customer attempts to tap their card on the reader. The device should remain in the Out-of-Service state."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Farecard reversal configuration",
        "Test_Sce_Description": "Verify that when the SA Tool is configured for Farecard reversals only, it provides an error message 'Only Available for Farecard' when a customer attempts to tap their Open Payments Media on the card reader."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing approved media list in Pilot mode",
        "Test_Sce_Description": "Verify that when the device is in Pilot mode and a customer attempts to tap an Open Payments media not on the approved media list, the device checks the approved media list and provides a 'Declined \u2013 Not Accepted, Tap Farecard' screen to the cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing BIN Blocking List",
        "Test_Sce_Description": "Verify that when a customer\u2019s Open Payments Media is on the BIN Blocking List, the device checks its local BIN Blocking list, plays the decline audio tone and displays the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Interac Card reversal with Interac disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Interac Card while Interac is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message. The fare payment reversal should not be recorded."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Open Payment Card reversal with Open Payments disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while Open Payments are disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message. The fare payment reversal should not be recorded."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Open Payment Card reversal with corresponding payment method / card brand disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while corresponding payment method / card brand is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message. The fare payment reversal should not be recorded."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Standby State",
        "Test_Sce_Description": "Verify that when the SA Tool is in Standby state, the screen is turned off and the device disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Revenue Mode",
        "Test_Sce_Description": "Verify that in Revenue Mode, the SA Tool operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Training Mode",
        "Test_Sce_Description": "Verify that in Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Error Occurrence on Device",
        "Test_Sce_Description": "Validate that the device correctly records the tap and displays the 'Declined \u2013 See Customer Service Screen' to the cardholder when an error occurs. Also, verify that the error is captured and logged in the background and in the SOTI logs for troubleshooting."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Insufficient E-Purse Balance",
        "Test_Sce_Description": "Verify that the device sends the tap to ATS and returns a response that the virtual card does not have a sufficient E-Purse balance to cover the tap-on fare. Also, ensure that the 'Declined \u2013 Insufficient E-Purse Balance' message is displayed to the cardholder and the error is logged."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Virtual Card Media on Online Hotlist",
        "Test_Sce_Description": "Check that the device sends the tap to ATS and returns a response that the media is on the online hotlist. Also, validate that the 'Declined \u2013 Blocked Screen' is displayed to the cardholder and the blocking parameter on the Virtual Card Scratchpad is enabled."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Virtual Card Media on Online Hotlist with Unblocked Scratchpad",
        "Test_Sce_Description": "Ensure that the device sends the tap to ATS, ATS checks the online hotlist and confirms that the virtual card is on the online hotlist. Verify that the device updates the scratchpad with the blocked status and sends a notification to ATS."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Virtual Card Media on Local Hotlist and Device Offline",
        "Test_Sce_Description": "Validate that the device records the tap and displays the 'Declined \u2013 Please Contact Customer Service' screen to the cardholder when the device is offline and the Virtual Card Media is on the local hotlist."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Open Payments Media Not on Approved List",
        "Test_Sce_Description": "Check that the device checks the approved media list and if the media is not found, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is displayed to the cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Open Payments Media on BIN Blocking List",
        "Test_Sce_Description": "Ensure that the device checks its local BIN Blocking list and if the card\u2019s BIN is found to be on the BIN Blocking List, the 'Declined \u2013 Try Another Card (BIN Blocked)' screen is displayed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Interac Card in Debt",
        "Test_Sce_Description": "Verify that the device sends the tap to ATS and returns a response that the Interac media is on the deny list. Also, ensure that the 'Declined \u2013 Tap Again (in X Seconds)' screen is displayed to the cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Interac Card in Debt with Device Offline",
        "Test_Sce_Description": "Check that the device checks the local deny list when offline and if the media is on the local deny list due to reason Media in Debt, the 'Declined \u2013 Tap Again (in X Seconds)' screen is displayed to the cardholder."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Interac Card Tapped while Interac is Disabled",
        "Test_Sce_Description": "Ensure that the device detects the Interac media and determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Open Payment Card Tapped while Open Payments are Disabled",
        "Test_Sce_Description": "Verify that the device detects the Open Payment Card and determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Open Payments Media on Deny List",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Open Payments Media on Local Deny List and Device Offline",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Multiple NFC Media Presented at Once",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Tap Open Payments Media when Device is Out-of-Service",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Error Occurred on Device",
        "Test_Sce_Description": "Verify that when an error has occurred on the device that does not cover the exception cases above, the device records the tap and the Declined \u2013 See Customer Service Screen is provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Tap Open Payments Media Not on Approved List in Beta Mode",
        "Test_Sce_Description": "Verify that when a customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Tap-on Immediately After Tapping-off at Same Station (Online)",
        "Test_Sce_Description": "Verify that when a cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Tap-on Immediately After Tapping-off at Same Station (Offline)",
        "Test_Sce_Description": "Verify that when a cardholder taps-on again at an SA Tool after just tapping-off at the same station and the device is offline, the device should not allow the tap and should provide appropriate feedback to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should correctly identify the validity of the pass and allow the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly identify the invalidity of the pass and deduct the fare from the e-Purse balance."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a customer has an anonymous farecard with an expired period pass and insufficient ePurse balance. The system should correctly identify the situation and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a customer's farecard is blocked. The system should correctly identify the blocked card and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard on Deny List",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a customer's farecard is on the Deny List. The system should correctly identify the card on the Deny List, remove it from the list, set it to blocked, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Low Battery Threshold during Payment",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where the battery goes below the low battery threshold during payment. The system should be able to process the remote lists even after the battery goes below the threshold."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the validity of the pass and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a customer's farecard has a valid Child concession. The system should correctly identify the concession and display the successful Child Transit Pass fare payment screen."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a fare payment results from a failed inspection. The system should correctly record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly identify the invalidity of the pass due to time limit, calculate the fare to be deducted from the e-Purse and allow the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when an anonymous farecard with an expired period pass and insufficient ePurse balance is used. The system should correctly identify the expired pass and insufficient balance, decline the transaction and display a declined message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a blocked farecard is used. The system should correctly identify the blocked status of the farecard, decline the transaction and display a declined message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard on Deny List",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard on the Deny List is used. The system should correctly identify the farecard's status, remove it from the Deny List, set it to blocked, decline the transaction and display a declined message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Low Battery Threshold During Payment",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the battery goes below the low battery threshold during a payment. The system should correctly process the remote lists even after the battery goes below the threshold during a successful Farecard tap."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Child concession is used. The system should correctly identify the concession, display the successful Child Transit Pass fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a fare payment results from a failed inspection. The system should correctly record both the fare payment and inspection transactions and display a toast notification of the corresponding inspection action."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Valid Limited Period Pass within time limit",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the time limit. The system should detect the validity of the pass and complete the transaction successfully."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Valid Limited Period Pass outside time limit with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass outside the time limit but with sufficient e-Purse balance. The system should detect the invalidity of the pass due to time limit, compute the fare to be deducted from the e-Purse, and complete the transaction successfully."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Expired Period Pass with insufficient ePurse balance",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a virtual card with an expired Period Pass and insufficient ePurse balance. The system should detect the expired pass and insufficient balance, and return a declined result."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Blocked Virtual Card",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked virtual card. The system should detect the blocked status of the card and return a declined result."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Virtual Card on Deny List",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a virtual card on the Deny List. The system should detect the card's status on the Deny List, remove it from the list, set it to blocked, and return a declined result."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should still be able to process the remote lists even after the battery goes below the threshold."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Tap Counter at Limit",
        "Test_Sce_Description": "Verify that the system correctly declines a transaction when the tap counter is at the limit. The system should detect the limit, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Unreadable Virtual Card",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the virtual card is unreadable. The system should detect the unreadable card and indicate to the operator that the card is unreadable."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Expired Period Pass with Sufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with an expired Period Pass but with sufficient ePurse balance. The system should detect the expired pass, compute the fare to be deducted from the ePurse, and complete the transaction successfully."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Valid Limited Period Pass within time limit",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the time limit. The system should recognize the pass as valid and allow the transaction to proceed without deducting any amount from the e-Purse."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Valid Limited Period Pass outside time limit with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that the system correctly handles fare payment from a virtual card with a valid Limited Period Pass that is outside the time limit but has a sufficient e-Purse balance. The system should recognize that the pass is not valid at the current time, compute the fare to be deducted from the e-Purse, and deduct the fare."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Expired Period Pass with insufficient ePurse balance",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from an anonymous virtual card with an expired Period Pass and an ePurse balance less than the fare amount. The system should detect the card's status and insufficient balance, and return a declined result."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Blocked Virtual Card",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked virtual card. The system should detect the card's blocked status and return a declined result."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Virtual Card on Deny List",
        "Test_Sce_Description": "Verify that the system correctly handles fare payment from a virtual card on the Deny List. The system should detect the card's status, remove it from the Deny List, set it to blocked, and return a declined result."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Low Battery Threshold during Payment",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should be able to process the remote lists even after the battery goes below the threshold during a successful Farecard tap."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked Farecard. The system should detect the card's blocked status and return a declined result."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Farecard on Hotlist",
        "Test_Sce_Description": "Verify that the system correctly handles fare payment from a Farecard on the hotlist. The system should detect the card's status, update it to blocked, and return a declined result."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Non-activated Card",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer taps a non-activated card. The system should display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Farecard within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a Farecard within the Anti-Passback Window. The system should detect the card's status and return a declined result."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Virtual Card is Blocked",
        "Test_Sce_Description": "Verify that when a customer's virtual card is blocked, the transaction is declined and an appropriate declined message is displayed to the customer. The SA Tool should also play a declined audio tone and update the Scratchpad accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Virtual Card is on the Deny List",
        "Test_Sce_Description": "Verify that when a customer's virtual card is on the Deny List, the card is removed from the Deny List and set to blocked. The transaction should be declined and an appropriate declined message should be displayed to the customer. The SA Tool should also play a declined audio tone and update the Scratchpad accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Verify that when the low battery threshold is reached during a transaction, the application switches to 'Out of Service' mode. If the low battery threshold is reached before Step 5, the customers fare payment should not be processed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Card is not a Farecard",
        "Test_Sce_Description": "Verify that when a customer taps a card that is not a Farecard, the SA Tool application does not respond and the device error message 'Card Read Error' is displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Card is within the Anti-Passback Window",
        "Test_Sce_Description": "Verify that when a customer's card is within the Anti-Passback Window, the transaction is declined and an appropriate declined message is displayed to the customer. The SA Tool should also play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled",
        "Test_Sce_Description": "Verify that when the Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled, the right to travel is not conferred and the device does not know a tap is attempted and will have no action."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Tap counter is greater than the allowable offline taps",
        "Test_Sce_Description": "Verify that when the tap counter is greater than the allowable offline taps, the offline device will reject the tap and the rider will not be permitted entry. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "E-Ticket holder scans QR Code against the SA Tool reader and the SA Tool is Offline",
        "Test_Sce_Description": "Verify that when an E-Ticket holder scans QR Code against the SA Tool reader and the SA Tool is Offline, the call to the Bytemark backend will fail and be unable to retrieve details regarding the E-Ticket. The result should be cached in an offline database to be uploaded to Bytemark API when connection is resumed."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader",
        "Test_Sce_Description": "Verify that when an E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader, the device returns the appropriate feedback, and the right to travel is not conferred."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Anonymous Farecard with Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the SA Tool application correctly identifies an anonymous Farecard with an ePurse balance less than the fare amount, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Check that the SA Tool application correctly identifies a blocked Farecard, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Farecard on the Hotlist",
        "Test_Sce_Description": "Ensure that the SA Tool application correctly identifies a Farecard on the hotlist, updates the card\u2019s status to blocked, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Verify that the application correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful Farecard tap."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Non-Farecard Tap",
        "Test_Sce_Description": "Check that the SA Tool correctly displays the 'Card Read Error' toast message when a non-Farecard is tapped."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Farecard within the Anti-Passback Window",
        "Test_Sce_Description": "Ensure that the device correctly detects that the Farecard fails the Anti-Passback checks, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Non-Activated Card Tap",
        "Test_Sce_Description": "Verify that the device correctly detects that the Farecard is not activated, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Limited Period Pass Outside of Valid Time",
        "Test_Sce_Description": "Check that the SA Tool correctly detects that the Limited Period Pass is not valid at the current time, computes the value to be deducted from the e-Purse, detects that farecard is in overdraft, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Locked Farecard",
        "Test_Sce_Description": "Ensure that the SA Tool correctly reads the Farecard and determines that it is locked, displays a declined screen to the operator and does not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Low Battery Threshold Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when the battery level goes below the low battery threshold during a successful Farecard tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Farecard Tap Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when a customer taps a card that is not a Farecard. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Anti-Passback Window Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when a customer's card is within the Anti-Passback Window. The ATS should detect that the Farecard fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Blocked Virtual Card Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when a customer's Virtual Card is blocked. The SA Tool application should read Scratchpad and detect that the Farecard is blocked. The SA Tool application should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Deny List Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when a customer's Virtual Card is on the Deny List. The device should read the Scratchpad and detect the Virtual Card is on the local Deny List. The SA Tool application should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone and the Scratchpad should be updated accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "This scenario tests the performance of the application under different conditions such as low battery, blocked card, card on the deny list, etc. The application should perform as expected under all these conditions without any lag or delay."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "This scenario tests the security features of the application. The application should securely handle all transactions and should not allow any unauthorized access or transactions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Unreadable Card",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer taps a Virtual Card that is unreadable. The SA Tool should detect the Virtual Card but fail to read it correctly, indicating to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer with a Valid Non-Adult, Non-Child, non-discreet concessions taps their Virtual Card. The SA Tool should show the successful fare payment screen for non-adult concession, and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Insufficient ePurse Balance",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer with an ePurse balance less than the fare amount taps their Virtual Card. The ATS should check the online hotlist, complete the fare processing, remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Intra-SP Transfer window",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer with a valid transfer product taps their Virtual Card. The ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Inter-SP Transfer window",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer with a valid transfer product from other service provider taps their Virtual Card. The ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Incorrect Farecard Type",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer taps a Farecard that is the incorrect Farecard type for the Mode. The SA Tool should read the Farecard information, check the Farecard Type, and notify the operator of the incorrect Farecard Type."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Non-Farecard tapped",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer taps a Non-Farecard. The SA Tool should identify the card to be a non-Farecard and display an error pop up message."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Blocked/Hotlisted Farecard",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer taps a blocked Farecard. The SA Tool should detect that the Farecard is blocked and display the Farecard query screen indicating that the Farecard has been blocked."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Ineligible Products",
        "Test_Sce_Description": "Test the functionality of the SA Tool when the shopping cart has ineligible products. The device should display an error confirming that one or more of the products are not available for sale."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Accepting Fare Payment from a Virtual Card - ATS failure to load products",
        "Test_Sce_Description": "Test the functionality of the SA Tool when ATS is unable to load products to the customer\u2019s account. The SA Tool should inform the operator that the products purchased were not added to the user\u2019s account."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Farecard Fails Anti-Passback Checks",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it detects that the Farecard fails the Anti-Passback checks. The expected outcome is that the SA Tool application will display a declined message to the customer and the transaction is not conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Successful Fare Payment from a Virtual Card",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is successfully made from a Virtual Card. The expected outcome is that the SA Tool displays the successful fare payment screen and plays the successful payment audio tone."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Fare Payment from a Virtual Card with Audio Messages",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer requests audio messages for fare payment. The expected outcome is that the SA Tool displays the fare payment screen to the operator and customer for the duration of the audio message and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Farecard is Not Activated",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it detects that the Farecard is not activated. The expected outcome is that the SA Tool application will display a declined message to the customer and the transaction is not conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Limited Period Pass Outside of Valid Time",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it detects that the Limited Period Pass is not valid at the current time and the farecard is in overdraft. The expected outcome is that the SA Tool application will display a declined message to the customer and the transaction is not conducted."
    },
    {
        "Function_Flow_Name": "Fare Payment",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Farecard is Locked",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it reads the Farecard and determines that it is locked. The expected outcome is that the device displays a declined screen to the operator and does not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service class and the farecard has a valid special event transfer product and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid special event transfer product and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid non-adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Verify that the system performs efficiently and effectively under varying loads and conditions, including peak hours and off-peak hours."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Verify that the system securely handles all transactions and data, including fare payments and ePurse balances, and that it prevents unauthorized access and data breaches."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid non-adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and allows a free transfer when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window, and the premium fare is lower than the special event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Performance",
        "Test_Sce_Description": "Verify that the system performs efficiently when computing and deducting the fare from the ePurse balance during peak usage times."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Security",
        "Test_Sce_Description": "Verify that the system securely processes fare payments, ensuring that customer data is protected and that the fare is correctly deducted from the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and valid Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the special event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and valid Special Event Transfer Product with lower fare",
        "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the special event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak load conditions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure and that sensitive customer data such as ePurse balance and farecard details are not exposed during the process."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of insufficient ePurse balance",
        "Test_Sce_Description": "This scenario is to test how the SA Tool handles a situation where the customer's ePurse balance is less than the fare amount. The tool should put the Farecard into overdraft (negative balance)."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of valid transfer product within Intra-agency Transfer window",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of valid transfer product within Inter-agency Transfer window",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product from other transit agency and computes the fare based on the transfer product and the transfer agreement between the transit agencies."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of Autoload Threshold",
        "Test_Sce_Description": "This scenario is to test how the SA Tool handles a situation where the customer's Farecard meets or drops below Autoload Threshold. The tool should add the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of Farecard on the Action or Load Value List",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a Farecard on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window",
        "Test_Sce_Description": "This scenario is to test how the SA Tool handles a situation where a fare payment is made during Peak hours after previously reaching off peak daily cap (outside the transfer window). The tool should compute the fare and deduct the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) and results in a fare upgrade."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) and results in a free transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of Valid Non-Adult Concession on Farecard",
        "Test_Sce_Description": "This scenario is to test how the SA Tool handles a situation where the customer's Farecard has a Valid Non-Adult concession. The tool should correctly identify and process the concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Temporal Class Supplement Tap-On Transaction",
        "Test_Sce_Description": "Verify that the device correctly processes a Tap-On transaction when the Farecard is tapped during a time period that contains an associated Temporal Class Supplement. The device should display an HMI reflecting the Temporal Class Supplement and process the transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Autoload Enabled Farecard Crossing Threshold",
        "Test_Sce_Description": "Verify that when a Farecard with Autoload enabled is tapped and the Fare amount crosses the Auto-load threshold, the Farecard automatically adds the Autoload amount to the E-Purse balance. The device should detect this, deduct the Fare from the Farecard E-Purse balance, and provide appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Override Default Trip with No Default O/D",
        "Test_Sce_Description": "Verify that when a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on. The device should provide appropriate feedback to the Cardholder of a successful transaction and notify the customer that the Default Trip was overridden."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Farecard Validation Failure at Tap-On",
        "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The device should provide appropriate feedback to the cardholder without updating the Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that when a blocked Farecard is tapped, the right to travel is not conferred. The device should detect that the Farecard is blocked and provide appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Exceeding Max Travel Duration",
        "Test_Sce_Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment and opens a new trip. The device should determine that the Tap-On Time + Max Travel Duration < Current Time, auto-settle the Underpayment, and deduct the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality and presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Non-Activated Farecard Tap-On",
        "Test_Sce_Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Autoload Threshold Crossed",
        "Test_Sce_Description": "Verify that when the Farecard E-Purse Balance crosses the Auto-load threshold due to the Fare, the Autoload amount is automatically added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Autoload Threshold Not Crossed",
        "Test_Sce_Description": "Verify that when the Farecard E-Purse Balance does not cross the Auto-load threshold due to the Fare, the Autoload amount is not added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Fare Deduction",
        "Test_Sce_Description": "Verify that the Device correctly deducts the Fare from the Farecard E-Purse balance when the Farecard is tapped on the device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Feedback on Successful Transaction",
        "Test_Sce_Description": "Verify that the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to an Autoload transaction and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Feedback on Unsuccessful Transaction",
        "Test_Sce_Description": "Verify that the device provides the appropriate feedback to the Cardholder of an unsuccessful transaction and does not update the Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Performance under Load",
        "Test_Sce_Description": "Verify the system's performance when multiple Farecards are tapped on the device simultaneously, ensuring that the system can handle high traffic."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Security of Farecard Data",
        "Test_Sce_Description": "Verify that the Farecard data is securely transmitted and stored, ensuring that no unauthorized access or data leakage occurs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Exception Flow - Farecard Validation Failure",
        "Test_Sce_Description": "Verify that the system handles the exception correctly when the Farecard fails validation checks at Tap-On, providing appropriate feedback to the Cardholder and not updating the Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Alternate Flow - Default Trip Override",
        "Test_Sce_Description": "Verify that the system correctly processes the tap as a result tap-on when the Farecard with no Default O/D is tapped on while the device is in Override mode, providing appropriate feedback to the Cardholder and updating the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Full Fare-by-Zone transaction processing",
        "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Override Default O/D",
        "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and process the tap as a regular tap-on when the customer requests the override of a Default Trip by interacting with the Device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Capping discount eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple capping discounts eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS will take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Offline device capping discount eligibility",
        "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules will follow use-case logic outlined in ticketing use cases."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media fails ODA check",
        "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device performs the necessary validation and determines that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen is provided to the cardholder. An error will be captured and logged in the background when this occurs to help with troubleshooting the issue. This error will also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Farecard is blocked",
        "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. Card reader detects Farecard is blocked. Right to travel is not conferred. The Device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. Device determines that the Tap-On Time + Max Travel Duration < Current Time. Device Auto-settles the Underpayment and deducts the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple NFC media are presented to the device at one time",
        "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. Customer presents multiple NFC medias to the card reader at once. Device blocks all user functionality, presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Tap a non-activated Farecard on an SA Tool",
        "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. Device detects that the Farecard is not activated. The device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs",
        "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Non-Revenue farecard in training mode",
        "Test_Sce_Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode and if the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard tap during Temporal Class Supplement",
        "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the Device should contain an HMI reflecting the Temporal Class Supplement, and process the Tap-On Transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard with Autoload Enabled",
        "Test_Sce_Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard without Default O/D",
        "Test_Sce_Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device should process the tap as a result tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Audio Messages request",
        "Test_Sce_Description": "Verify that when the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard validation checks at Tap-On",
        "Test_Sce_Description": "Verify that if the Farecard fails validation checks at Tap-On, the system should handle this exception flow appropriately."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment from a Virtual Card using Period Pass",
        "Test_Sce_Description": "Verify that when a Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value, the ATS should compute and deduct the Upgrade fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment from a Virtual Card using Period Pass with lower fare value",
        "Test_Sce_Description": "Verify that when a Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value, the ATS should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment from a Virtual Card using Limited Period Pass",
        "Test_Sce_Description": "Verify that when a Farecard has a valid Limited Period Pass and the current time is within the limits of the product, the system should accept the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment from a Virtual Card using Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that when a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the system should accept the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a premium service class farecard that has a valid Special Event Transfer Product and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the upgrade fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the child concession fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the system processes the fare payment within the acceptable time limit and does not cause any delay or inconvenience to the user."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the system securely processes the fare payment and does not expose any sensitive user information during the process."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Accuracy of Fare Calculation",
        "Test_Sce_Description": "Verify that the system accurately calculates the fare based on the service class, transfer product, and concession type of the farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Correct Deduction of Fare from ePurse Balance",
        "Test_Sce_Description": "Verify that the system correctly deducts the calculated fare from the ePurse balance and updates the balance accurately."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Handling of Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the system correctly handles the scenario when the ePurse balance is insufficient to cover the calculated fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Premium Service Route with Higher Fare",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The fare for the premium service route should be higher than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Transfer Window Validation",
        "Test_Sce_Description": "Verify that the system correctly identifies whether the tap is within the transfer window. If the tap is not within the transfer window, the system should not allow a fare upgrade."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Valid Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly identifies whether the farecard has a valid Special Event Transfer Product. If the farecard does not have a valid Special Event Transfer Product, the system should not allow a fare upgrade."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Service Class Validation",
        "Test_Sce_Description": "Verify that the system correctly identifies the service class as Premium. If the service class is not identified as Premium, the system should not allow a fare upgrade."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Deduction from ePurse Balance",
        "Test_Sce_Description": "Verify that the system correctly deducts the fare from the ePurse balance. The deducted amount should be equal to the fare for the premium service route."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Communication with SA Tool",
        "Test_Sce_Description": "Verify that the system correctly communicates the fare deduction back to the SA Tool. The SA Tool should display the updated ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "POP Print Flag Setting",
        "Test_Sce_Description": "Verify that the system correctly sets the POP Print Flag to 0. This is to ensure that the device accurately displays the transfer print status if the farecard is queried."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Verify that the system performs the fare calculation and deduction within an acceptable time frame. The system should not lag or freeze during this process."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Verify that the system securely processes the fare payment. The customer's ePurse balance and other sensitive information should be encrypted and protected from unauthorized access."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off-peak daily cap has been reached and the farecard is outside the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product with lower Premium fare",
        "Test_Sce_Description": "Verify that the system correctly calculates and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure and that all sensitive data is encrypted during transmission and storage."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of insufficient ePurse balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of valid transfer product",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Inter-agency transfer processing",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of Autoload threshold",
        "Test_Sce_Description": "Verify that the SA Tool correctly checks that the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of Action or Load Value list",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of fare payment during peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of fare upgrade on premium service route",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of free transfer on premium service route",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route and the premium fare is lower than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of Valid Non-Adult concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid transfer product on the customer's TICKET and computes the free transfer. The system should follow the Transfer Product Processing rules as per [R6]."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level using the physical device buttons. The audio message should be played in the default language of the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location. The system should result in a regular ride balance fare payment and Transfer Product creation."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route. The system should result in a free transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a Valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment resulting from a failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen and the system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies when a customer's ride balance is empty. The system should display a declined message to the customer and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should switch to \u201cOut of Service\u201d mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer taps a card that is not CLIENT media. The system should not respond and the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies when a customer's Ticket is within the Anti-Passback Window. The system should display a declined message to the customer and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies when a customer's Ticket is not activated. The system should not respond and the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Failed Inspection",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET that has not paid a fare during inspection and allows the operator to select the payment function on the SA Tool inspection results screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Recording of Fare Payment and Inspection Transactions",
        "Test_Sce_Description": "Ensure that the SA Tool accurately records both the fare payment and inspection transactions when a fare payment is made after a failed inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Notification Display after Fare Payment and Inspection",
        "Test_Sce_Description": "Check that the SA Tool application returns to the Tap Card screen and displays a toast notification of the corresponding inspection action after a fare payment is made following a failed inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's ride balance is empty and displays a declined message to the customer, preventing the transaction from being conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Low Battery Threshold during Payment",
        "Test_Sce_Description": "Ensure that the SA Tool correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful TICKET tap, and that it can still process the remote lists."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the SA Tool does not respond when a customer taps a card that is not CLIENT media, and that it displays the device error message 'Card Read Error' for a short period of time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Check that the SA Tool correctly identifies when a customer's TICKET is within the Anti-Passback Window and displays a declined message to the customer, preventing the transaction from being conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Ensure that the SA Tool correctly identifies when a customer's TICKET is not activated and displays a declined message to the customer, preventing the transaction from being conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Expired Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's TICKET is expired and displays a declined message to the customer, preventing the transaction from being conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Period Pass",
        "Test_Sce_Description": "Ensure that the SA Tool correctly identifies when a customer's TICKET has a valid period pass and accepts the fare, updating the TICKET accordingly and displaying the successful fare payment screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "Check that the SA Tool correctly identifies when a TICKET is unreadable and fails to read it correctly, preventing the transaction from being conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that has no ride balance remaining. The tool should detect the empty balance, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "This scenario tests the performance of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. The tool should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a card that is not CLIENT media. The tool should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that is within the Anti-Passback Window. The tool should detect the Anti-Passback violation, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a non-activated TICKET. The tool should detect the invalidity of the TICKET, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a locked farecard. The tool should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with an unreadable TICKET. The tool should detect the TICKET but fail to read it, indicate to the operator that the TICKET is unreadable, and log the error for troubleshooting."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that has a valid non-adult, non-child concession. The tool should process the fare payment accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Low Battery Threshold Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when the battery level reaches the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Card Read Error Test",
        "Test_Sce_Description": "This scenario tests the application's response when a card that is not CLIENT media is tapped. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Anti-Passback Window Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Non-Activated Ticket Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer taps a non-activated TICKET. The application should detect that the TICKET is not activated and display an appropriate error message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "This scenario tests the performance of the application under different conditions such as low battery, high traffic, etc. The application should perform efficiently and without any lag or delay."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "This scenario tests the security features of the application. The application should securely handle all transactions and customer data. Any attempts to breach the security should be detected and prevented."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Non-CLIENT Media Card",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that has no ride balance. The system should detect the empty ride balance, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "This scenario is to validate the system's response when the device battery goes below the low battery threshold during a successful ticket tap. The system should switch to 'Out of Service' mode after processing the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Locked Farecard",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a locked farecard. The system should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "This scenario is to validate the system's response when it detects a TICKET but fails to read it correctly. The system should indicate to the operator that the TICKET is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a valid non-adult, non-child concession tries to make a fare payment. The system should process the fare payment accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the system's response when an operator inspects a customer\u2019s TICKET and determines that they have not paid a fare. The system should allow the operator to select the payment function on the inspection results screen and record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer\u2019s TICKET is within the Anti-Passback Window. The system should detect that the TICKET fails the Anti-Passback checks, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a non-activated ticket. The system should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, detect that farecard is in overdraft, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a valid child concession tries to make a fare payment. The system should find the valid child concession, display the successful child fare payment screen, and play the successful fare payment audio tone for child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Anti-Passback Window Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Timeout Functionality",
        "Test_Sce_Description": "Verify that the system correctly returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the ticket being within the Anti-Passback Window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Ticket Validation",
        "Test_Sce_Description": "Verify that the system correctly validates the ticket during the Anti-Passback Window check. The system should correctly identify the ticket and its status."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Audio Tone Functionality",
        "Test_Sce_Description": "Verify that the system plays the correct declined audio tone when a transaction is declined due to the ticket being within the Anti-Passback Window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Exception Flow - Unreadable Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies an unreadable ticket during the Anti-Passback Window check and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Exception Flow - Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the battery goes below the low battery threshold during a successful ticket tap. The system should still be able to process the remote lists."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Alternate Flow - Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket with a Valid Child concession during the Anti-Passback Window check and processes the fare payment accordingly. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Alternate Flow - Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket that has not paid a fare during an inspection and processes the fare payment accordingly. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Performance - Multiple Transactions",
        "Test_Sce_Description": "Verify that the system can handle multiple transactions simultaneously without any performance degradation. The system should be able to process all transactions correctly and within the specified time frame."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Security - Unauthorized Access",
        "Test_Sce_Description": "Verify that the system prevents unauthorized access to the SA Tool application. Only operators who are signed-in to the SA Tool application in the revenue mode should be able to access the application."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a non-activated ticket. The system should detect that the ticket is not activated, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a ticket with an empty ride balance. The system should detect that the ride balance is empty, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed. If the threshold is reached after the fare payment is processed, the system should complete the transaction and then switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a card that is not CLIENT media. The system should not respond to the tap, but should display a 'Card Read Error' message for a short period of time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should detect that the ticket fails the Anti-Passback checks, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a locked farecard. The system should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a ticket with a valid non-adult, non-child concession. The system should process the fare payment according to the concession rules."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using an unreadable ticket. The system should detect the ticket but be unable to read it, indicate to the operator that the ticket is unreadable, and prompt the customer to tap the NFC reader again."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Communication of Fare Deduction to SA Tool",
        "Test_Sce_Description": "Verify that the system correctly communicates the fare deduction back to the SA Tool after the fare has been computed and deducted from the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly deducts the correct Child Concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance of SA Tool during Peak Hours",
        "Test_Sce_Description": "Verify that the SA Tool performs efficiently and without delay during peak hours when processing fare payments."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security of Fare Payment Transactions",
        "Test_Sce_Description": "Verify that the fare payment transactions are secure and that customer's ePurse balance and farecard information are not compromised during the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window",
        "Test_Sce_Description": "Verify that the fare payment is correctly computed and deducted from the ePurse balance when a tap is made during peak hours after previously reaching off peak daily cap, outside the transfer window. The farecard should have reached off peak Daily Cap Limit, not reached Peak Daily Cap limit and be out of transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and valid Regular Service Transfer Product",
        "Test_Sce_Description": "Verify that the fare payment is correctly computed and deducted from the ePurse balance when a tap is made with a farecard having a valid Regular Service Transfer Product and the Service Class is Premium or Special Event. The tap should be within the Transfer Window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and valid Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the fare payment is correctly computed and deducted from the ePurse balance when a tap is made with a farecard having a valid Special Event Transfer Product and the Service Class is Premium. The tap should be within the Transfer Window and the Premium fare should be higher than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and valid Special Event Transfer Product with lower Premium fare",
        "Test_Sce_Description": "Verify that the fare payment is correctly computed and deducted from the ePurse balance when a tap is made with a farecard having a valid Special Event Transfer Product and the Service Class is Premium. The tap should be within the Transfer Window and the Premium fare should be lower than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Valid Non-Adult Concession",
        "Test_Sce_Description": "Verify that the fare payment is correctly computed and deducted from the ePurse balance when a tap is made with a farecard having a Valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "Verify that the fare payment is correctly computed and deducted from the ePurse balance when a tap is made with a farecard having a Valid Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the fare payment is correctly computed and deducted from the ePurse balance when a tap is made after a failed inspection. The SA Tool should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of the SA Tool during Fare Payment",
        "Test_Sce_Description": "Verify that the SA Tool performs efficiently during fare payment. The response time should be within acceptable limits and there should be no crashes or hangs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of the SA Tool during Fare Payment",
        "Test_Sce_Description": "Verify that the SA Tool maintains the security of the farecard data during fare payment. There should be no unauthorized access or data leakage."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product with lower Premium fare",
        "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the correct Child Concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should also record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Verify the system's performance under load. The system should be able to handle multiple fare payments simultaneously without any degradation in performance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Verify that the system securely handles fare payment transactions. The system should encrypt sensitive data such as farecard details and ePurse balance to prevent unauthorized access."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Testing ePurse balance less than fare amount",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Intra-agency Transfer window",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product and computes the free transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Testing Inter-agency Transfer window",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Testing Autoload Threshold",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly checks that the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Testing Action or Load Value List",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly verifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Testing fare payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Testing Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Testing Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Testing Valid Non-Adult Concession",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid transfer product on the customer's TICKET. The system should compute the free transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location, resulting in a regular ride balance fare payment and Transfer Product creation."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route, resulting in a free transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment resulting from a failed TICKET inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a TICKET with no Ride Balance remaining. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The application should switch to \u201cOut of Service\u201d mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer taps a card that is not CLIENT media. The system should display the device error message \u201cCard Read Error\u201d."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a TICKET that is within the Anti-Passback Window. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a non-activated TICKET. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Validating Fare Payment with Failed Inspection",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made after a failed inspection. The operator will inspect a customer\u2019s TICKET and determine that they have not paid a fare. The operator will then select the payment function on the SA Tool inspection results screen. The SA Tool should record both the fare payment and inspection transactions and return to the Tap Card screen. A toast notification of the corresponding inspection action should be displayed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Performance of SA Tool during Failed Inspection",
        "Test_Sce_Description": "This scenario will test the performance of the SA Tool during a fare payment resulting from a failed inspection. The system's response time will be measured from the moment the operator selects the payment function on the SA Tool inspection results screen to the moment the SA Tool records both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Security of SA Tool during Failed Inspection",
        "Test_Sce_Description": "This scenario will test the security of the SA Tool during a fare payment resulting from a failed inspection. The system should securely record both the fare payment and inspection transactions without any data leakage or unauthorized access."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Exception Flow for TICKET with no Ride Balance",
        "Test_Sce_Description": "This scenario will test the exception flow when a customer\u2019s ride balance is empty. The SA Tool should detect the Ride Balance is empty and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Alternate Flow for Unreadable TICKET",
        "Test_Sce_Description": "This scenario will test the alternate flow when the SA Tool application detects the TICKET and fails to read it correctly. The system should handle this exception gracefully and provide appropriate feedback to the operator and the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a TICKET that has no ride balance remaining. The system should detect the empty ride balance, display a declined message to the customer, play a declined audio tone, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a TICKET that is within the Anti-Passback Window. The system should detect the Anti-Passback violation, display a declined message to the customer, play a declined audio tone, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a non-activated TICKET. The system should detect the invalidity of the TICKET, display a declined message to the customer, play a declined audio tone, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a locked farecard. The system should detect the locked status of the farecard, display a declined message to the operator, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with an unreadable TICKET. The system should detect the unreadable TICKET, indicate to the operator that the TICKET is unreadable, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer attempts to make a fare payment with a TICKET that has a valid non-adult, non-child concession. The system should detect the concession, display a declined message to the customer, play a declined audio tone, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Low Battery Threshold Fare Payment",
        "Test_Sce_Description": "Verify that the application switches to 'Out of Service' mode when the low battery threshold is reached before Step 5 of the Main Use Case. If the threshold is not reached, the customer's fare payment should be processed as per Step 5."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the SA Tool detects when the Ride Balance is empty and displays a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the SA Tool application does not respond when a customer taps a card that is not CLIENT media. The device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the device detects when the TICKET fails the Anti-Passback checks. The SA Tool application should display a declined message to the customer and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the SA Tool application detects when a customer taps a non-activated Ticket. The application should display a declined message to the customer and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Performance under Low Battery Conditions",
        "Test_Sce_Description": "Verify that the application can process remote lists even when the SA Tool device battery goes below the low battery threshold during a successful TICKET tap."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Security of Fare Payment Transactions",
        "Test_Sce_Description": "Verify that the SA Tool records both the fare payment and inspection transactions securely and accurately. The application should return to the Tap Card screen and display a toast notification of the corresponding inspection action."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Handling of Invalid Card Types",
        "Test_Sce_Description": "Verify that the SA Tool application handles invalid card types correctly. When a customer taps a card that is not a Farecard or CLIENT media, the application should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that has an empty ride balance. The system should detect the empty ride balance, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "This scenario is to validate the system's response when the device battery goes below the low battery threshold during a successful TICKET tap. The system should switch to 'Out of Service' mode after processing the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a non-activated ticket. The system should detect the invalidity of the ticket, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Locked Farecard",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a locked farecard. The system should detect the locked farecard, display a declined screen, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with an unreadable TICKET. The system should detect the unreadable TICKET, indicate to the operator that the TICKET is unreadable, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a valid non-adult, non-child concession tries to make a fare payment. The system should detect the concession, display the successful fare payment screen, and play the successful fare payment audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment after a failed inspection. The system should record both the fare payment and inspection transactions, and display a toast notification of the corresponding inspection action."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment within the Anti-Passback Window. The system should detect the Anti-Passback check failure, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a valid child concession tries to make a fare payment. The system should detect the concession, display the successful fare payment screen, and play the successful fare payment audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Ticket Validation Process",
        "Test_Sce_Description": "Verify that the system correctly performs all necessary validation checks (including Anti-Passback checks) when a ticket is tapped on the NFC card reader."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Non-Activated Ticket Handling",
        "Test_Sce_Description": "Verify that the system correctly identifies a non-activated ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Expired Ticket Handling",
        "Test_Sce_Description": "Verify that the system correctly identifies an expired ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Performance Under Low Battery",
        "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful ticket tap. The system should still process the fare payment if the threshold is reached after Step 5 of the Main Use Case."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Non-CLIENT Media Handling",
        "Test_Sce_Description": "Verify that the system correctly identifies when a customer taps a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Security of Fare Payment",
        "Test_Sce_Description": "Verify that the system securely processes fare payments and updates the ticket accordingly. The system should not allow unauthorized access to ticket information or payment details."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Successful Fare Payment",
        "Test_Sce_Description": "Verify that the system correctly processes a successful fare payment from a ticket with a valid period pass. The system should display the successful fare payment screen and play the successful fare payment audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Handling of Unreadable Tickets",
        "Test_Sce_Description": "Verify that the system correctly identifies when a ticket is unreadable and fails to read it correctly. The system should display an error message to the operator."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a non-activated ticket. The tool should detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a ticket that has an empty ride balance. The tool should detect that the ride balance is empty and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. The tool should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a card that is not CLIENT media. The tool should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The tool should detect that the ticket fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a locked farecard. The tool should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with an unreadable ticket. The tool should detect the ticket but fail to read it, and indicate to the operator that the ticket is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a ticket that has a valid non-adult, non-child concession. The tool should process the fare payment accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Verify that the SA Tool application correctly detects when a Virtual Card is unreadable. The application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is successful, the application should proceed with steps 4 \u2013 7. If the tap is unsuccessful, the application should again indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child, Non-Discreet Concessions",
        "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment from a Virtual Card with a valid non-adult, non-child, non-discreet concession. The application should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment with Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment from a Virtual Card with an ePurse balance less than the fare amount. The application should send the tap to ATS for processing, which should check the online hotlist, complete the fare processing, remove the fare from the Virtual Card e-Purse, and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment within Intra-SP Transfer Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment from a Virtual Card within the Intra-SP Transfer window. The application should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment within Inter-SP Transfer Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment from a Virtual Card within the Inter-SP Transfer window. The application should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment with Expired Period Pass and Sufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment from a Virtual Card with an expired period pass and an ePurse balance more than the fare amount. The application should detect that the Period Pass has expired, compute the value to be deducted from the e-Purse, and deduct the fare accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment from a Virtual Card with an expired period pass and an ePurse balance less than the fare amount. The application should detect that the Period Pass has expired, compute the value to be deducted from the e-Purse, and deduct the fare accordingly. The Virtual Card should be put into overdraft."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment with Audio Messages",
        "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment from a Virtual Card when the customer requests audio messages. The operator should enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion. The SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message, and the corresponding audio message should be played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when a Virtual Card is unreadable",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it detects a Virtual Card but fails to read it correctly. The test will involve tapping the Virtual Card on the NFC reader and observing the response of the SA Tool. The expected outcome is that the SA Tool will indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when a Virtual Card has a non-adult, non-child, non-discreet concession",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a Virtual Card has a valid non-adult, non-child, non-discreet concession. The test will involve tapping the Virtual Card on the NFC reader and observing the response of the SA Tool. The expected outcome is that the SA Tool will show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when a Virtual Card has a positive ePurse balance less than the fare amount",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a Virtual Card has a positive ePurse balance that is less than the fare amount. The test will involve tapping the Virtual Card on the NFC reader and observing the response of the SA Tool. The expected outcome is that the SA Tool will put the card into overdraft and provide the appropriate feedback to the Cardholder of a successful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when a Virtual Card transaction is within the Intra-SP Transfer window",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a Virtual Card transaction is within the Intra-SP Transfer window. The test will involve tapping the Virtual Card on the NFC reader and observing the response of the SA Tool. The expected outcome is that the SA Tool will read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when a Virtual Card transaction is within the Inter-SP Transfer window",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a Virtual Card transaction is within the Inter-SP Transfer window. The test will involve tapping the Virtual Card on the NFC reader and observing the response of the SA Tool. The expected outcome is that the SA Tool will read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the performance of the SA Tool when processing fare payments",
        "Test_Sce_Description": "This scenario will test the performance of the SA Tool when processing fare payments. The test will involve timing how long it takes for the SA Tool to process a fare payment from a Virtual Card. The expected outcome is that the SA Tool will process the fare payment within the specified time limit."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the security of the SA Tool when processing fare payments",
        "Test_Sce_Description": "This scenario will test the security of the SA Tool when processing fare payments. The test will involve attempting to use a Virtual Card with a negative ePurse balance to pay for a fare. The expected outcome is that the SA Tool will reject the transaction and provide the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Virtual Card Readability",
        "Test_Sce_Description": "Verify that the SA Tool application can detect and read the Virtual Card correctly. If the card is unreadable, the application should indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Successful Tap on NFC Reader",
        "Test_Sce_Description": "Verify that when the customer taps the Virtual Card on the NFC reader, the tap is successful and the application proceeds to steps 4 \u2013 7. If the tap is unsuccessful, the application should indicate to the operator that the CLIENT (Virtual) Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "Verify that the SA Tool can successfully process fare payment for a customer with a Valid Non-Adult, Non-Child, non-discreet concession on their Virtual Card. The application should display the successful fare payment screen for non-adult concession and play the successful fare payment audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Fare Payment with Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the SA Tool can process fare payment when the customer\u2019s ePurse balance is less than the fare amount. The ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The device should provide the appropriate feedback to the Cardholder of a successful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Fare Payment within Intra-SP Transfer window",
        "Test_Sce_Description": "Verify that the SA Tool can process fare payment when the customer\u2019s Virtual Card has a valid transfer product. The ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. The device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Fare Payment within Inter-SP Transfer window",
        "Test_Sce_Description": "Verify that the SA Tool can process fare payment when the customer\u2019s Virtual Card has a valid transfer product from other service provider. The ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. The device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Payment by e-Purse",
        "Test_Sce_Description": "Verify that the SA Tool can process payment via e-Purse. The application should read the Farecard information, check for the Farecard serial number and if the Farecard is on the hotlist. If the card is valid, not on the hotlist, and has at least a minimum balance needed for payment, then the SA Tool should populate the full payment amount. If the e-purse balance is insufficient, a notification should inform the operator that the e-Purse balance cannot cover the price."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Split Payment",
        "Test_Sce_Description": "Verify that the SA Tool can process split payment. If the operator has edited the amount to pay, the SA Tool should check if the payment amount is more than the total shopping cart amount and show an error message if it is. The operator should be able to try again with another payment method."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Transaction Success",
        "Test_Sce_Description": "Verify that upon successful transaction, the SA Tool displays the option to print a customer receipt, return to main menu and prints the customer receipt."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Test the scenario where the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer will tap on the NFC reader again. If the tap is successful, steps 4 \u2013 7 will be conducted. If the tap is unsuccessful, the SA Tool application will indicate to the operator that the CLIENT (Virtual) Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "ePurse balance less than fare amount",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s ePurse balance is less than the fare amount. The device sends the tap to ATS for processing. ATS checks the online hotlist and completes the fare processing. ATS removes the fare from the Virtual Card e-Purse and puts the card into overdraft."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Transaction within Intra-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product. ATS will read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This will be communicated back to the device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Transaction within Inter-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product from other service provider. ATS will read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This will be communicated back to the device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Customer requests Audio Messages",
        "Test_Sce_Description": "Test the scenario where the customer asks to pay for the trip with their Virtual Card and requests audio messages for fare payment. Operator enables audio mode. The operator can change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Daily Cap Reached outside of Transfer window",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, Farecard has reached Daily Cap Limit and Farecard is out of transfer window. ATS deducts no fare since the Daily Cap is reached."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool and Service Class is Premium or Special Event. ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, Service Class is Premium or Special Event, Farecard has a valid Regular Service Transfer Product and Tap is within Transfer Window. ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Verify that the SA Tool application correctly detects and handles the situation when the Virtual Card is unreadable. The application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is still unsuccessful, the application should again indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card with a valid Non-Adult, Non-Child, non-discreet concession. The application should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "ePurse Balance Less Than the Fare Amount",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card when the customer\u2019s ePurse balance is less than the fare amount. The ATS should check the online hotlist, complete the fare processing, remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Transaction within Intra-SP Transfer window",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card when the transaction is within the Intra-SP Transfer window. The ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Transaction within Inter-SP Transfer window",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card when the transaction is within the Inter-SP Transfer window. The ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Customer requests Audio Messages",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card when the customer requests audio messages for fare payment. The operator should enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Daily Cap Reached outside of Transfer window",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card when the farecard has reached Daily Cap Limit and is out of transfer window. The ATS should deduct no fare since the Daily Cap is reached."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card when the service class is Premium or Special Event. The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card when the service class is Premium or Special Event and the farecard has a valid Regular Service Transfer Product within the Transfer Window. The ATS should compute the fare upgrade and deduct the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Farecard is on the Action or Load Value List",
        "Test_Sce_Description": "This scenario is to verify that the SA Tool checks if the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Audio Messages for Fare Payment",
        "Test_Sce_Description": "This scenario is to verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Daily Cap Reached",
        "Test_Sce_Description": "This scenario is to verify that when a Farecard has reached the Daily Cap Limit and is out of the transfer window, the SA Tool deducts no fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment for Premium Service or Special Route/Location",
        "Test_Sce_Description": "This scenario is to verify that when a tap on a premium service or special route/location is made, the SA Tool computes and deducts the Premium or Special Event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Upgrade for Premium Service or Special Route/Location",
        "Test_Sce_Description": "This scenario is to verify that when a tap on a premium service or special event route/location is made after previously riding on a regular service route (within the transfer window), the SA Tool computes and deducts the Upgrade fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "This scenario is to verify that when a tap on peak hours is made after previously reaching off peak daily cap (outside the transfer window), a fare payment is made."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Period Pass for Higher Fare Value Service Class",
        "Test_Sce_Description": "This scenario is to verify that when a Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value, the ATS computes and deducts the Upgrade fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Period Pass for Lower Fare Value Service Class",
        "Test_Sce_Description": "This scenario is to verify that when a Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value, the ATS identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Limited Period Pass",
        "Test_Sce_Description": "This scenario is to verify that when a Farecard has a valid Limited Period Pass and the current time is within the limits of the product, the fare payment is accepted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to verify that when a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the fare payment is accepted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should correctly identify the validity of the pass and allow the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly identify the invalidity of the pass, compute the fare to be deducted from the e-Purse, and allow the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when an anonymous farecard with an expired period pass and insufficient ePurse balance is used. The system should correctly identify the situation and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a blocked farecard is used. The system should correctly identify the status of the farecard and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard on Deny List",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard on the Deny List is used. The system should correctly identify the status of the farecard, remove it from the Deny List, set it to blocked, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Low Battery Threshold during Payment",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the battery goes below the low battery threshold during a successful Farecard tap. The system should correctly process the remote lists even after the battery goes below the threshold."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the situation and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a Valid Child concession is used. The system should correctly identify the concession and display the successful Child Transit Pass fare payment screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a fare payment results from a failed inspection. The system should correctly record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should correctly identify the validity of the pass and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly identify the invalidity of the pass due to time limit, compute the fare to be deducted from the e-Purse and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when an anonymous farecard with an expired period pass and insufficient ePurse balance is used. The system should correctly identify the invalidity of the pass and insufficient balance, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a blocked farecard is used. The system should correctly identify the blocked status of the farecard and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard on Deny List",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard on the Deny List is used. The system should correctly identify the farecard's status, remove it from the Deny List, set it to blocked, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Low Battery Threshold During Payment",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the battery goes below the low battery threshold during payment. The system should be able to process the remote lists even after the battery goes below the threshold during a successful Farecard tap."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass of higher service class fare value is used. The system should correctly identify the validity of the pass and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Child concession is used. The system should correctly identify the concession and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard fails inspection. The system should correctly record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the time limit of the pass. The system should successfully accept the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the time limit of the pass but has sufficient e-Purse balance. The system should deduct the fare from the e-Purse and accept the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when an anonymous farecard with an expired period pass and insufficient ePurse balance is used. The system should decline the transaction and display a declined message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a blocked farecard is used. The system should decline the transaction and display a declined message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Farecard on Deny List",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard on the Deny List is used. The system should remove the card from the Deny List, set it to blocked, decline the transaction, and display a declined message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Low Battery Threshold During Payment",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the battery goes below the low battery threshold during payment. The system should still be able to process the remote lists and complete the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Tap Counter at Configured Limit",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the tap counter is at the configured limit. The system should decline the transaction and display a declined message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Unreadable Virtual Card",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when an unreadable Virtual Card is used. The system should indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Virtual Card with Expired Period Pass and Sufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a Virtual Card with an expired period pass and sufficient ePurse balance is used. The system should deduct the fare from the ePurse and accept the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Fare Payment with Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to test if the fare payment is successfully accepted when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Fare Payment with Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to test if the fare payment is successfully accepted when the farecard has a valid Limited Period Pass product on it, the time at tap is occurring outside of the time limit of the Limited Period Pass Product, but the farecard has sufficient e-Purse balance to cover the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Fare Payment with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to test if the fare payment is declined when the customer has an expired period pass, the customer\u2019s ePurse balance is less than the fare amount, and the customer has an anonymous Virtual Card."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Fare Payment with Blocked Virtual Card",
        "Test_Sce_Description": "This scenario is to test if the fare payment is declined when the customer\u2019s Farecard is blocked."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Fare Payment with Virtual Card on Deny List",
        "Test_Sce_Description": "This scenario is to test if the fare payment is declined when the customer\u2019s Virtual Card is on the Deny List."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Fare Payment with Low Battery",
        "Test_Sce_Description": "This scenario is to test if the fare payment is processed successfully when the low battery threshold is high enough that the remote lists can be processed even after the SA Tool battery goes below the low battery threshold during a successful Farecard tap."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Fare Payment with Blocked Farecard",
        "Test_Sce_Description": "This scenario is to test if the fare payment is declined when the customer\u2019s Farecard is blocked."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Fare Payment with Farecard on Hotlist",
        "Test_Sce_Description": "This scenario is to test if the fare payment is declined when the customer\u2019s Farecard is on the hotlist."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Fare Payment with Non-Activated Card",
        "Test_Sce_Description": "This scenario is to test if the fare payment is declined when the customer\u2019s card is not activated and not on the action list available on the device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "This scenario is to test if the fare payment is declined when the customer\u2019s card is within the Anti-Passback Window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Valid Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made with a farecard that has a valid non-adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment on Premium Service Route with Transfer where Premium fare is higher than Special Event fare",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare upgrade from the ePurse balance when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment on Premium Service Route with Transfer where Premium fare is lower than Special Event fare",
        "Test_Sce_Description": "Verify that the system correctly computes and allows a free transfer when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made with a farecard that has a valid child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak load conditions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure and that sensitive data such as ePurse balance and farecard details are encrypted during transmission and storage."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a special event service route and the farecard is within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid non-adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame and does not cause any performance issues in the system."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure and does not expose any sensitive customer information or allow any unauthorized access."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Accuracy of Fare Calculation",
        "Test_Sce_Description": "Verify that the fare calculation is accurate based on the service class, transfer product, and concession on the farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Correct Deduction from ePurse Balance",
        "Test_Sce_Description": "Verify that the correct amount is deducted from the ePurse balance after the fare payment is made."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Correct Display of Fare Payment Result",
        "Test_Sce_Description": "Verify that the result of the fare payment is correctly displayed on the SA Tool."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Premium Service Route with Lower Fare than Special Event",
        "Test_Sce_Description": "Verify that the system correctly calculates the fare when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The system should recognize that the premium fare is lower than the special event fare and allow a free transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Deduction from ePurse Balance",
        "Test_Sce_Description": "Verify that the system correctly deducts the fare from the customer's ePurse balance when a fare payment is made. The system should accurately compute the fare based on the service class and transfer status, and deduct the correct amount from the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Transfer Window Validation",
        "Test_Sce_Description": "Verify that the system correctly identifies whether the tap is within the transfer window. If the tap is outside the transfer window, the system should not allow a free transfer and should instead charge the regular fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Farecard with Valid Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly identifies a farecard with a valid Special Event Transfer Product. The system should recognize the special event transfer product and calculate the fare accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Peak Hour Fare Payment after Reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly calculates the fare when a customer taps during peak hours after previously reaching the off peak daily cap. The system should recognize that the farecard has reached the off peak daily cap and charge the peak hour fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates the fare when a customer with a valid non-adult concession makes a fare payment. The system should recognize the non-adult concession and deduct the concession fare from the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates the fare when a customer with a valid child concession makes a fare payment. The system should recognize the child concession and deduct the child concession fare from the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment resulting from a failed inspection. The system should record both the fare payment and inspection transactions, and return to the Tap Card screen with a notification of the corresponding inspection action."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Verify that the system performs well under load. The system should be able to handle multiple fare payments simultaneously without any degradation in performance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Verify that the system securely handles customer data. The system should encrypt sensitive data such as ePurse balance and farecard details to prevent unauthorized access."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "This scenario will validate if the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of insufficient ePurse balance",
        "Test_Sce_Description": "This scenario will test how the SA Tool handles a situation where the customer's ePurse balance is less than the fare amount. The tool should put the Farecard into overdraft (negative balance)."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of valid transfer product within Intra-agency Transfer window",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of valid transfer product within Inter-agency Transfer window",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product from another transit agency and computes the fare based on the transfer product and the transfer agreement between the transit agencies."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of Autoload Threshold",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of Farecard on the Action or Load Value List",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window",
        "Test_Sce_Description": "This scenario will test how the SA Tool handles a fare payment made during peak hours after the Farecard has reached the off peak Daily Cap Limit and is out of the transfer window. The tool should compute the fare and deduct the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of fare payment on Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a customer taps on a premium service route/location after previously riding on a Special Event service route within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of fare payment on Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a customer taps on a premium service route/location after previously riding on a Special Event service route within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of fare payment for a customer with a Valid Non-Adult Concession on their Farecard",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies and processes a fare payment from a customer who has a Valid Non-Adult concession on their Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Open Payments Media on Deny List",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Open Payments Media on Local Deny List and Device Offline",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Multiple NFC Media Presented Simultaneously",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Open Payments Media Tap in Out-of-Service State",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Error Occurrence During Tap",
        "Test_Sce_Description": "Verify that when an error occurs on the device that does not cover the exception cases, the device records the tap and the Declined \u2013 See Customer Service Screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Tap-on Immediately After Tapping-off at the Same Station",
        "Test_Sce_Description": "Verify that when a customer attempts to tap-on immediately after tapping-off at the same station and the device is online, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Performance of Device in Offline Mode",
        "Test_Sce_Description": "Verify the performance of the device when it is offline. Check the response time of the device when it checks the local deny list and returns a response that the media is denied."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Security of Denied Media Information",
        "Test_Sce_Description": "Verify the security measures in place to protect the information of denied media. Check if the information is encrypted and if unauthorized access is prevented."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Multiple NFC media presented at once",
        "Test_Sce_Description": "This scenario tests the functionality of the device when multiple NFC media are presented to the card reader at the same time. The device should block all user functionality and present an Anti-Collision toast message to the customer. An error should be captured and logged in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Non-activated Farecard tapped on SA Tool",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a non-activated Farecard is tapped on the device. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction due to inactive farecard. An error should be captured and logged in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Card reading error occurs",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs. The device should not provide any feedback and screen remains \u201cIn-Service\u201d display. An error should be captured and logged in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Card write error occurs",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard is tapped on an SA Tool and a card write error occurs. The device should not provide any feedback and screen remains \u201cIn-Service\u201d display. The device should delete the transaction information. An error should be captured and logged in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Farecard tapped when SA Tool is in Out-of-Service state",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard is tapped on an SA Tool while the device is in Out-of-Service state. The device should not detect the media and remain in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Virtual Card Media tapped when SA Tool is in Out-of-Service state",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a Virtual Card Media is tapped on the card reader while the device is in Out-of-Service state. The device should not detect the media and remain in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Customer attempts to tap-on immediately after tapping-off at the same station",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-off anti-passback Window. The device should provide the cardholder with the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Customer attempts to tap-on immediately after tapping-off at the same station and the device is offline",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool tap-off anti-passback Window and the device is offline. The device should provide the cardholder with the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Error has occurred on the device",
        "Test_Sce_Description": "This scenario tests the functionality of the device when an error has occurred on the device that does not cover the exception cases above. The device should record the tap and provide the cardholder with the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Virtual Card has insufficient E-Purse to cover the Tap-On Fare",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a Virtual Card has insufficient E-Purse to cover the Tap-On Fare. The device should record the tap and provide the cardholder with the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Open Payments Media tap when SA Tool is in Out-of-Service state",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader. The expected outcome is that the device will not detect the media and will remain in Out-of-Service state."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Farecard reversals only configuration",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is configured for only farecard reversals. The expected outcome is that when a customer attempts to tap their Open Payments Media on the card reader, the 'Only Available for Farecard' error message is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Open Payments media not on the approved media list",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to tap an Open Payments media not on the approved media list while the device is in Pilot mode. The expected outcome is that the device checks the approved media list and if the media is not found, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Open Payments Media on the BIN Blocking List",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer\u2019s Open Payments Media is on the BIN Blocking List. The expected outcome is that the device checks its local BIN Blocking list and if the card\u2019s BIN is found to be on the BIN Blocking List, the device plays the decline audio tone and displays the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing fare payment reversal with Interac Card while Interac is disabled",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to reverse fare payment with Interac Card while Interac is disabled on SA Tool. The expected outcome is that the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing fare payment reversal with Open Payment Card while Open Payments are disabled",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to reverse fare payment with Open Payment Card while Open Payments are disabled on SA Tool. The expected outcome is that the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing fare payment reversal with Open Payment Card while corresponding payment method / card brand is disabled",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to reverse fare payment with Open Payment Card while corresponding payment method / card brand is disabled on SA Tool. The expected outcome is that the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing SA Tool in Standby State",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in Standby state. The expected outcome is that the screen is turned off and the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing SA Tool in Revenue Mode",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in Revenue Mode. The expected outcome is that the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing SA Tool in Training Mode",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in Training Mode. The expected outcome is that the operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Error Occurrence on Device",
        "Test_Sce_Description": "Verify that the device correctly records and logs the error when an exception occurs that is not covered by the above cases. Check if the error is correctly captured in the SOTI logs and the Declined \u2013 See Customer Service Screen is correctly provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Insufficient E-Purse Balance",
        "Test_Sce_Description": "Verify that the device correctly sends the tap to ATS and receives a response indicating that the virtual card does not have a sufficient E-Purse balance to cover the tap-on fare. Check if the Declined \u2013 Insufficient E-Purse Balance screen is correctly provided to the cardholder and the error is correctly logged in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Virtual Card on Online Hotlist",
        "Test_Sce_Description": "Verify that the device correctly sends the tap to ATS and receives a response indicating that the virtual card is on the online hotlist. Check if the Declined \u2013 Blocked Screen is correctly provided to the cardholder and the device correctly updates the blocking parameter on the Virtual Card Scratchpad."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Virtual Card on Local Hotlist",
        "Test_Sce_Description": "Verify that the device correctly records the tap and provides the Declined \u2013 Please Contact Customer Service screen to the cardholder when the virtual card is on the local hotlist. Check if the declined tap is correctly sent to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Open Payments Media Not on Approved List",
        "Test_Sce_Description": "Verify that the device correctly checks the approved media list and provides the Declined \u2013 Not Accepted, Tap Farecard screen to the cardholder if the media is not on the approved list. Check if the declined tap is correctly sent to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Open Payments Media on BIN Blocking List",
        "Test_Sce_Description": "Verify that the device correctly checks its local BIN Blocking list and provides the Declined \u2013 Try Another Card (BIN Blocked) screen to the cardholder if the card\u2019s BIN is on the BIN Blocking List. Check if the decline is correctly sent to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Interac Card in Debt",
        "Test_Sce_Description": "Verify that the device correctly sends the tap to ATS and receives a response indicating that the Interac media is on the deny list. Check if the Declined \u2013 Tap Again (in X Seconds) screen (Interac \u2013 Trying to Pay Unpaid Fares) screen is correctly provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Interac Card Disabled on SA Tool",
        "Test_Sce_Description": "Verify that the device correctly detects the Interac media and determines that the media tapped is not supported. Check if the device correctly displays an error message and does not record a transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Open Payment Card Disabled on SA Tool",
        "Test_Sce_Description": "Verify that the device correctly detects the Open Payment Card and determines that the media tapped is not supported. Check if the device correctly displays an error message and does not record a transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Open Payments Media on Deny List",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Open Payments Media on Local Deny List and Device Offline",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Multiple NFC Media Presented Simultaneously",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Device in Out-of-Service State",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state, the Not In Service Screen is provided to the cardholder and the device does not detect the media. The device should remain in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Error Occurred on Device",
        "Test_Sce_Description": "Verify that when an error has occurred on the device that does not cover the exception cases above, the device records the tap. The Declined \u2013 See Customer Service Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Open Payments Media Not on Approved List in Beta Mode",
        "Test_Sce_Description": "Verify that when a customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Anti-passback Online",
        "Test_Sce_Description": "Verify that when a customer attempts to tap-on immediately after tapping-off at the same station and the device is online, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Anti-passback Offline",
        "Test_Sce_Description": "Verify that when a customer attempts to tap-on immediately after tapping-off at the same station and the device is offline, the device should not detect the tap and remain in the offline state. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should correctly identify the pass as valid and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly identify the pass as invalid for the current time, compute the fare to be deducted from the e-Purse, and deduct the fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a customer with an anonymous farecard, an expired period pass, and an ePurse balance less than the fare amount attempts to make a transaction. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a customer with a blocked farecard attempts to make a transaction. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard on Deny List",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a customer with a farecard on the Deny List attempts to make a transaction. The system should remove the card from the Deny List, set it to blocked, decline the transaction, and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Low Battery Threshold During Payment",
        "Test_Sce_Description": "This scenario is to validate the system's handling when the battery goes below the low battery threshold during a payment transaction. The system should be able to process the remote lists even after the battery goes below the threshold."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the pass as valid and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a customer with a farecard with a Valid Child concession attempts to make a transaction. The system should display the successful Child Transit Pass fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a fare payment results from a failed inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Fare Payment with Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the fare payment process when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product. The system should successfully deduct the fare from the pass."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Fare Payment with Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the fare payment process when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring outside of the time limit of the Limited Period Pass Product but the farecard has sufficient e-Purse balance to cover the transaction. The system should successfully deduct the fare from the e-Purse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Fare Payment with Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount",
        "Test_Sce_Description": "This scenario is to validate the fare payment process when the customer has an expired period pass, the ePurse balance is less than the fare amount and the customer has an anonymous Virtual Card. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Fare Payment with Blocked Virtual Card",
        "Test_Sce_Description": "This scenario is to validate the fare payment process when the customer\u2019s Farecard is blocked. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Fare Payment with Virtual Card on the Deny List",
        "Test_Sce_Description": "This scenario is to validate the fare payment process when the customer\u2019s Virtual Card is on the Deny List. The system should remove the card from the Deny List, set it to blocked, decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Fare Payment with low battery threshold during payment",
        "Test_Sce_Description": "This scenario is to validate the fare payment process when the low battery threshold is high enough that the remote lists can be processed even after the SA Tool battery goes below the low battery threshold during a successful Farecard tap. The system should successfully process the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Fare Payment with Valid Child Concession on Farecard",
        "Test_Sce_Description": "This scenario is to validate the fare payment process when the customer\u2019s Farecard has a Valid Child concession. The system should successfully process the transaction and display the successful Child Transit Pass fare payment screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the fare payment process when the operator inspects a customer\u2019s farecard and determines that they have not paid a fare. The system should successfully process the transaction and record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Fare Payment with Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount",
        "Test_Sce_Description": "This scenario is to validate the fare payment process when the customer has an expired period pass, the ePurse balance is less than the fare amount and the customer has an anonymous Farecard. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Fare Payment with Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the fare payment process when the customer\u2019s Farecard is blocked. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the time limit of the pass. The system should successfully deduct the fare from the pass."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the time limit of the pass but has sufficient e-Purse balance. The system should successfully deduct the fare from the e-Purse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a customer has an anonymous farecard with an expired period pass and ePurse balance less than the fare amount. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Blocked Virtual Card",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a customer's virtual card is blocked. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Virtual Card on Deny List",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a customer's virtual card is on the Deny List. The system should remove the card from the Deny List, set it to blocked, decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Low Battery Threshold During Payment",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where the battery goes below the low battery threshold during payment. The system should still be able to process the remote lists and complete the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Tap Counter at Configured Limit",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where the tap counter is at the configured limit. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Unreadable Virtual Card",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where the virtual card is unreadable. The system should indicate to the operator that the virtual card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Virtual Card with Expired Period Pass and Sufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a customer's virtual card has an expired period pass but the ePurse balance is more than the fare amount. The system should successfully deduct the fare from the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario will test the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should successfully accept the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario will test the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should deduct the fare from the e-Purse and accept the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario will test the system's ability to handle a situation where the customer has an anonymous farecard with an expired period pass and insufficient ePurse balance. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario will test the system's ability to handle a situation where the customer's farecard is blocked. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Farecard on Deny List",
        "Test_Sce_Description": "This scenario will test the system's ability to handle a situation where the customer's farecard is on the Deny List. The system should remove the card from the Deny List, set it to blocked, decline the transaction, and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Low Battery Threshold during Payment",
        "Test_Sce_Description": "This scenario will test the system's ability to handle a situation where the battery goes below the low battery threshold during payment. The system should be able to process the remote lists even after the battery goes below the threshold."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Non-Activated Card",
        "Test_Sce_Description": "This scenario will test the system's ability to handle a situation where the customer's card is not activated. The system should display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Farecard within Anti-Passback Window",
        "Test_Sce_Description": "This scenario will test the system's ability to handle a situation where the customer's farecard is within the Anti-Passback Window. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Virtual Card is Blocked",
        "Test_Sce_Description": "Verify that when a customer's virtual card is blocked, the transaction is declined and the SA Tool displays a declined message to the customer. The SA Tool should also play a declined audio tone and update the Scratchpad accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Virtual Card is on the Deny List",
        "Test_Sce_Description": "Verify that when a customer's virtual card is on the Deny List, the transaction is declined and the SA Tool displays a declined message to the customer. The SA Tool should also play a declined audio tone and update the Scratchpad accordingly. The ATS should remove the card from the Deny List and set it to blocked."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Low Battery Threshold during Payment",
        "Test_Sce_Description": "Verify that when the low battery threshold is reached during a successful Farecard tap, the application switches to \u201cOut of Service\u201d mode. If the low battery threshold is reached before Step 5, the application switches to \u201cOut of Service\u201d mode. Else, the customers fare payment is processed as per Step 5."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Customer taps a card that is not a Farecard",
        "Test_Sce_Description": "Verify that when a customer taps a card that is not a Farecard, the SA Tool application does not respond, but the device error message \u201cCard Read Error\u201d is displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Sce_Description": "Verify that when a customer\u2019s card is within the Anti-Passback Window, the transaction is declined and the SA Tool displays a declined message to the customer. The SA Tool should also play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled",
        "Test_Sce_Description": "Verify that when the Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled, the right to travel is not conferred. The device should not know a tap is attempted and will have no action."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps",
        "Test_Sce_Description": "Verify that when the Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps, the right to travel is not conferred. The device should check the tap counter and if the tap counter limit has been reached, the offline device should reject the tap and the rider will not be permitted entry."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "E-Ticket holder scans QR Code against the SA Tool reader and the SA Tool is Offline",
        "Test_Sce_Description": "Verify that when an E-Ticket holder scans QR Code against the SA Tool reader and the SA Tool is Offline, the device returns the appropriate feedback, and the right to travel is not conferred. The result should be cached in an offline database to be uploaded to Bytemark API when connection is resumed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader",
        "Test_Sce_Description": "Verify that when an E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader, the device returns the appropriate feedback, and the right to travel is not conferred. The result should be cached in an offline database to be uploaded to Bytemark API when connection is resumed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Anonymous Farecard with Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the SA Tool application correctly identifies an anonymous Farecard with an ePurse balance less than the fare amount, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that the SA Tool application correctly identifies a blocked Farecard, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Farecard on the Hotlist",
        "Test_Sce_Description": "Verify that the SA Tool application correctly identifies a Farecard on the hotlist, updates the card\u2019s status to blocked, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Verify that the application correctly switches to 'Out of Service' mode if the low battery threshold is reached before Step 5 of the Main Use Case. If the threshold is reached after Step 5, verify that the customer's fare payment is processed before the application switches to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Non-Farecard Tap",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a non-Farecard tap, displays the 'Card Read Error' toast message for a short period of time, and does not proceed with the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Farecard within the Anti-Passback Window",
        "Test_Sce_Description": "Verify that the device correctly identifies a Farecard within the Anti-Passback Window, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Non-Activated Card Tap",
        "Test_Sce_Description": "Verify that the device correctly identifies a non-activated Farecard, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Limited Period Pass Outside of Valid Time",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid Limited Period Pass tapped outside of its valid time, computes the value to be deducted from the e-Purse, identifies that the Farecard is in overdraft, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Locked Farecard",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a locked Farecard, displays a declined screen to the operator, and does not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Low Battery Threshold Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when the battery level goes below the low battery threshold during a successful Farecard tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Farecard Tap Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when a customer taps a card that is not a Farecard. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Anti-Passback Window Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when a customer's card is within the Anti-Passback Window. The application should detect that the Farecard fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Blocked Virtual Card Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when a customer's Virtual Card is blocked. The SA Tool application should read the Scratchpad, detect that the Farecard is blocked, display a declined message to the customer, and not conduct the transaction. The SA Tool should also play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Deny List Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when a customer's Virtual Card is on the Deny List. The device should read the Scratchpad, detect that the Virtual Card is on the local Deny List, display a declined message to the customer, and not conduct the transaction. The SA Tool should also play the declined audio tone and update the Scratchpad accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "This scenario tests the performance of the application under different battery levels, especially when the battery level goes below the low battery threshold during a successful Farecard tap. The application's response time and processing speed should be measured and compared with the expected performance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "This scenario tests the security features of the application, such as the handling of blocked Virtual Cards and Virtual Cards on the Deny List. The application should correctly identify these cards and prevent transactions from being conducted. The application should also securely update the Scratchpad and handle error messages."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Verify the system's behavior when the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is unsuccessful, the application should again indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "Verify the system's behavior when the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "ePurse Balance Less Than the Fare Amount",
        "Test_Sce_Description": "Verify the system's behavior when the customer\u2019s ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Transaction within Intra-SP Transfer window",
        "Test_Sce_Description": "Verify the system's behavior when the customer\u2019s Virtual Card has a valid transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card, the device provides the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Transaction within Inter-SP Transfer window",
        "Test_Sce_Description": "Verify the system's behavior when the customer\u2019s Virtual Card has a valid transfer product from other service provider. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card; the device provides the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Incorrect Farecard Type",
        "Test_Sce_Description": "Verify the system's behavior when the Farecard tapped is the incorrect Farecard type for the Mode. The SA Tool application should identify the Farecard Type to be incorrect for the mode the operator is currently operating in and notify the operator of the incorrect Farecard Type."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Non-Farecard tapped to the reader",
        "Test_Sce_Description": "Verify the system's behavior when the card tapped to reader is a Non-Farecard. The SA Tool application should identify the card to be a non-Farecard and display an error pop up message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Failure to read Virtual Card",
        "Test_Sce_Description": "Verify the system's behavior when the SA Tool application detects the Virtual Card and fails to read it correctly. The NFC reader should detect the Virtual Card but be unable to read it. The SA Tool application should indicate to the operator that the Virtual Card read has failed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Non-Virtual Card tapped to the reader",
        "Test_Sce_Description": "Verify the system's behavior when the card tapped to reader is a Non-Virtual Card. The SA Tool application should identify the card to be a non-Virtual Card and display an error pop up message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Sce_Description": "Verify the system's behavior when the customer\u2019s Farecard is blocked. The SA Tool application should detect that the Farecard is blocked and display the Farecard query screen indicating that the Farecard has been blocked. The operator should not be able to take any further actions on the Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Ineligible Products",
        "Test_Sce_Description": "Verify the system's behavior when the SA Tool shopping cart has ineligible products. The device should display an error confirming that one or more of the products are not available for sale. The operator should remove the ineligible products from cart and reattempt the shopping flow."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "ATS failure to load products",
        "Test_Sce_Description": "Verify the system's behavior when the ATS is unable to load products to the customer\u2019s account. The SA Tool should inform the operator that the products purchased were not added to the user\u2019s account. The Operator may attempt the checkout again or provide the customer a refund if the customer paid with cash."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Fare Payment with Active Virtual Card",
        "Test_Sce_Description": "Verify that the system allows fare payment when the customer's Virtual Card is active. The system should display a successful fare payment screen and play a successful payment audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Fare Payment with Inactive Virtual Card",
        "Test_Sce_Description": "Verify that the system does not allow fare payment when the customer's Virtual Card is inactive. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Fare Payment with Virtual Card in Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system does not allow fare payment when the customer's Virtual Card is within the Anti-Passback Window. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Fare Payment with Virtual Card outside Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system allows fare payment when the customer's Virtual Card is outside the Anti-Passback Window. The system should display a successful fare payment screen and play a successful payment audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Fare Payment with Virtual Card on Deny List",
        "Test_Sce_Description": "Verify that the system does not allow fare payment when the customer's Virtual Card is on the local Deny List. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Fare Payment with Virtual Card not on Deny List",
        "Test_Sce_Description": "Verify that the system allows fare payment when the customer's Virtual Card is not on the local Deny List. The system should display a successful fare payment screen and play a successful payment audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Fare Payment with Virtual Card exceeding Offline Tap Counter limit",
        "Test_Sce_Description": "Verify that the system does not allow fare payment when the customer's Virtual Card exceeds the Offline Tap Counter limit. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Fare Payment with Virtual Card within Offline Tap Counter limit",
        "Test_Sce_Description": "Verify that the system allows fare payment when the customer's Virtual Card is within the Offline Tap Counter limit. The system should display a successful fare payment screen and play a successful payment audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Fare Payment with Locked Virtual Card",
        "Test_Sce_Description": "Verify that the system does not allow fare payment when the customer's Virtual Card is locked. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Fare Payment with Unlocked Virtual Card",
        "Test_Sce_Description": "Verify that the system allows fare payment when the customer's Virtual Card is unlocked. The system should display a successful fare payment screen and play a successful payment audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Fare Payment with Virtual Card in Overdraft",
        "Test_Sce_Description": "Verify that the system does not allow fare payment when the customer's Virtual Card is in overdraft. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Fare Payment with Virtual Card not in Overdraft",
        "Test_Sce_Description": "Verify that the system allows fare payment when the customer's Virtual Card is not in overdraft. The system should display a successful fare payment screen and play a successful payment audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Fare Payment with Virtual Card during Offline Mode",
        "Test_Sce_Description": "Verify that the system allows fare payment when the SA Tool is offline. The system should store the fare/pay request to be uploaded to ATS when the device comes back online."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Fare Payment with Virtual Card during Online Mode",
        "Test_Sce_Description": "Verify that the system allows fare payment when the SA Tool is online. The system should display a successful fare payment screen and play a successful payment audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Fare Payment with Virtual Card with Audio Messages Requested",
        "Test_Sce_Description": "Verify that the system plays the corresponding audio message in the default language of the customer's Farecard when the customer requests audio messages for fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Incorrect Farecard Type",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when an incorrect Farecard type is tapped. The SA Tool should be able to identify the incorrect Farecard type and notify the operator. The use case should terminate after the notification."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Non-Farecard Tapped",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a non-Farecard is tapped. The SA Tool should be able to identify the non-Farecard and display an error pop-up message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Failure to Read Virtual Card",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it fails to read a Virtual Card. The SA Tool should indicate to the operator that the Virtual Card read has failed. The operator should be able to close the error prompt and tap the card to try again."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Non-Virtual Card Tapped",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a non-Virtual Card is tapped. The SA Tool should be able to identify the non-Virtual Card and display an error pop-up message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a blocked Farecard is tapped. The SA Tool should be able to detect that the Farecard is blocked and display the Farecard query screen indicating that the Farecard has been blocked."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Virtual Card \u2013 Ineligible Products",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the shopping cart has ineligible products. The device should display an error confirming that one or more of the products are not available for sale."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "ATS Failure to Load Products",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when ATS fails to load products to the customer\u2019s account. The SA Tool should inform the operator that the products purchased were not added to the user\u2019s account."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Farecard is Blocked",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a blocked Farecard is tapped. The card reader should detect that the Farecard is blocked and the right to travel should not be conferred."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the time since tap-on exceeds the Max Travel Duration. The Device should auto-settle the Underpayment and open a new trip."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Multiple NFC Media Presented",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when multiple NFC media are presented to the device at one time. The device should block all user functionality and present Anti-Collision HMI to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Tap a Non-Activated Farecard",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a non-activated Farecard is tapped. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a card reading error occurs. The device should capture and log the error in the background to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Incorrect Farecard Type",
        "Test_Sce_Description": "Verify that the SA Tool application correctly identifies and notifies the operator when the Farecard type is incorrect for the current mode of operation. This should be tested for both Revenue and Non-Revenue Farecards in both Revenue and Training Modes."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Non-Farecard Tapped to Reader",
        "Test_Sce_Description": "Verify that the SA Tool application correctly identifies when a non-Farecard is tapped to the reader and displays an appropriate error pop up message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Failure to Read Virtual Card",
        "Test_Sce_Description": "Verify that the SA Tool application correctly detects when it fails to read a Virtual Card and provides appropriate feedback to the operator. The operator should be able to attempt to tap the card again and if unsuccessful, the error prompt should reappear."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Non-Virtual Card Tapped to Reader",
        "Test_Sce_Description": "Verify that the SA Tool application correctly identifies when a non-Virtual Card is tapped to the reader and displays an appropriate error pop up message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Sce_Description": "Verify that the SA Tool application correctly detects when a Farecard is blocked and displays the Farecard query screen indicating that the Farecard has been blocked. The operator should not be able to take any further actions on the Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Virtual Card \u2013 Ineligible Products",
        "Test_Sce_Description": "Verify that the SA Tool application correctly identifies when products added to the card are now ineligible for purchase. This should be tested for scenarios where products become ineligible before and after payment has been made."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "ATS Failure to Load Products",
        "Test_Sce_Description": "Verify that the SA Tool application correctly informs the operator when ATS is unable to load products to the customer\u2019s account after proceeding through checkout. The operator should be able to attempt the checkout again or provide the customer a refund if the customer paid with cash."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Farecard Tapped-Off at Same Location",
        "Test_Sce_Description": "Verify that the device correctly detects when the Farecard is tapped-off at the same location where tap-on occurred and provides appropriate feedback to the cardholder without updating the Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that the device correctly detects when a Farecard is blocked and does not confer the right to travel. The device should provide appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "Verify that the device correctly determines when the time since tap-on exceeds the Max Travel Duration, auto-settles the Underpayment and opens a new trip."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Multiple NFC Media Presented",
        "Test_Sce_Description": "Verify that the device correctly blocks all fare payment functionality when multiple NFC media are presented to the device at one time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Non-Activated Farecard Tapped",
        "Test_Sce_Description": "Verify that the device correctly detects when a non-activated Farecard is tapped and provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "Verify that the device correctly detects when a card reading error occurs (e.g. Farecard is immediately removed from the card reader) and provides appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Unreadable Virtual Card",
        "Test_Sce_Description": "Test the functionality when the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer will tap on the NFC reader again. If the tap is unsuccessful, the SA Tool application should indicate to the operator that the CLIENT (Virtual) Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "Test the functionality when the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "ePurse balance is less than the fare amount",
        "Test_Sce_Description": "Test the functionality when the customer\u2019s ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Transaction is within Intra-SP Transfer window",
        "Test_Sce_Description": "Test the functionality when the customer\u2019s Virtual Card has a valid transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Transaction is within Inter-SP Transfer window",
        "Test_Sce_Description": "Test the functionality when the customer\u2019s Virtual Card has a valid transfer product from other service provider. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Virtual Card Media fails the Card Authentication check",
        "Test_Sce_Description": "Test the functionality when the Virtual Card Media fails the Card Authentication check. The device should return the appropriate feedback. The Declined \u2013 Contact CLIENT Customer Service screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Multiple NFC media are presented to the device at one time",
        "Test_Sce_Description": "Test the functionality when multiple NFC media are presented to the device at one time. The device should block all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Device is in Out-of-Service state",
        "Test_Sce_Description": "Test the functionality when the device is in Out-of-Service state. The device should display the Not in Service screen to the cardholder. Customer attempts to tap their Virtual Card Media on the card reader. The device should not detect the media."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "An error has occurred on the device",
        "Test_Sce_Description": "Test the functionality when an error has occurred on the device that does not cover the exception cases above. The device should record the tap. The Declined \u2013 See Customer Service Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Virtual Card Media is on the local hotlist and device is offline",
        "Test_Sce_Description": "Test the functionality when the Virtual Card Media is on the local hotlist. The device should check the local hotlist and return a response that the media is denied. The right to travel should not be conferred. The Declined \u2013 Blocked Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Virtual Card Media\u2019s blocked parameter on the scratchpad is enabled",
        "Test_Sce_Description": "Test the functionality when the Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled. The device should check the blocked parameter and return a response that the media is denied. The right to travel should not be conferred. The Declined \u2013 Blocked Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Default Trip Success",
        "Test_Sce_Description": "Verify that when a Virtual Card with a default trip is tapped at either the origin or destination station, the device correctly processes the tap and displays the default trip success screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Default Trip Override",
        "Test_Sce_Description": "Verify that when a customer requests to override a default trip on a Virtual Card, the device correctly processes the request and displays the Override Successful screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card No Default Trip Override",
        "Test_Sce_Description": "Verify that when a customer requests to override a default trip on a Virtual Card that does not have a default trip, the device correctly processes the request and displays the E-Purse Tap On Screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Scratchpad Update",
        "Test_Sce_Description": "Verify that when a Virtual Card in good standing needs a scratchpad update, the device correctly processes the tap, updates the scratchpad, and displays the Virtual Card E-Purse Flat Fare Accepted Screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Authentication Failure",
        "Test_Sce_Description": "Verify that when a Virtual Card fails the Card Authentication check, the device correctly processes the failure and displays the Declined \u2013 Failed Card Authentication Check screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Already Tapped-On Online",
        "Test_Sce_Description": "Verify that when a Virtual Card is tapped-on again at the same station within the anti-passback window and both devices are online, the device correctly processes the tap and displays the Declined \u2013 Already Tapped Screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Already Tapped-On Offline",
        "Test_Sce_Description": "Verify that when a Virtual Card is tapped-on again at the same station within the anti-passback window and the device is offline, the device correctly processes the tap and displays the Declined \u2013 Already Tapped Screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at once, the device correctly blocks all fare payment functionality and displays the Anti-Collision Error Screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Tap in Out-of-Service State",
        "Test_Sce_Description": "Verify that when a Virtual Card is tapped while the device is in an Out-of-Service state, the device correctly processes the tap and displays the appropriate error message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Scnario": "Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled",
        "Test_Sce_Description": "Verify that when the Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled, the right to travel is not conferred. The device should check the local hotlist and not find the Virtual Card. The device should also check the Virtual Card Scratchpad and determine the card blocked parameter is set to true."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Scnario": "Declined \u2013 Blocked Screen is provided to the cardholder",
        "Test_Sce_Description": "Verify that when the right to travel is not conferred due to the Virtual Card being blocked, the Declined \u2013 Blocked Screen is provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Scnario": "Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled",
        "Test_Sce_Description": "Verify that when the Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled, the right to travel is not conferred. If the Virtual Card Media is blocked in the wallet, there should not be an interaction with the device on an attempted tap. The device should not know a tap is attempted and should have no action."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Scnario": "Tap counter is greater than the allowable offline taps",
        "Test_Sce_Description": "Verify that when the tap counter is greater than the allowable offline taps, the right to travel is not conferred. The device should check the tap counter and if the tap counter limit has been reached, the offline device should reject the tap and the rider should not be permitted entry. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Scnario": "Accepting Fare Payment from the E-Ticket",
        "Test_Sce_Description": "Verify that the operator can accept a fare payment from an e-Ticket. The operator should press the button on the side of the device to enable the barcode scanner. The E-Ticket holder should scan the QR Code on their E-Ticket against the SA tool\u2019s barcode reader to validate the Ticket in Fare Payment Mode. The device should perform a check to ensure that the E-Ticket meets timestamp window requirements and is not on the deny list. The device should call the Bytemark API and receive a response that the E-Ticket is valid for travel."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Scnario": "E-Ticket holder scans QR Code against the SA Tool reader and the SA Tool is Offline",
        "Test_Sce_Description": "Verify that when the E-Ticket holder scans the QR Code against the SA Tool reader and the SA Tool is Offline, the device returns the appropriate feedback, and the right to travel is not conferred. As the device is offline, the call to the Bytemark backend should fail and be unable to retrieve details regarding the E-Ticket. The result should be cached in an offline database to be uploaded to Bytemark API when connection is resumed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Scnario": "E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader",
        "Test_Sce_Description": "Verify that when the E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader, the device should be able to read and validate the Group QR Code. The device should provide the appropriate feedback to the user of a successful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "ATS failure to load products",
        "Test_Sce_Description": "This scenario tests the exception flow when ATS fails to load products onto a customer\u2019s account after checkout. The operator should be informed that the products purchased were not added to the user\u2019s account. The operator should have the option to attempt the checkout again or provide the customer a refund if the customer paid with cash."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "SVC / VC Shopping Cart",
        "Test_Sce_Description": "This scenario tests the exception flow when the shopping cart includes both SVC and VC products. The device should not allow both SVC and VC products in the shopping cart at the same time. If the cart has ineligible products, the Operator should receive an error providing them the option to clear the cart."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "ECP is disabled and Customer\u2019s Artemis device is locked or asleep",
        "Test_Sce_Description": "This scenario tests the exception flow when the user\u2019s device is locked or asleep and ECP is disabled for the users Virtual Card. The Virtual card media should not be detected and the screen should remain the same. Artemis device should prompt user to provide authentication."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is disabled",
        "Test_Sce_Description": "This scenario tests the exception flow when the user\u2019s mobile device is in Power Reserve mode and ECP is disabled on the mobile device for the users Virtual Card. The Virtual card media should not be detected and the screen should remain the same. Artemis device should prompt user to charge their device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "Virtual Card Media fails the Card Authentication check",
        "Test_Sce_Description": "This scenario tests the exception flow when the Virtual Card Media fails the Card Authentication check. The device should perform the necessary validation and determine that the Virtual Card Media is unable to pass the checks. The Declined \u2013 Contact CLIENT Customer Service screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "Multiple NFC media are presented to the device at one time",
        "Test_Sce_Description": "This scenario tests the exception flow when multiple NFC media are presented to the device at one time. The device should block all fare payment functionality and the Anti-Collision Error Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "Tap-off a Virtual Card Media when SA Tool is in Out-of-Service state",
        "Test_Sce_Description": "This scenario tests the exception flow when the device is in Out-of-Service state. The device should display the Not in Service screen to the cardholder and should not detect the media."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "Tap-off and an error has occurred",
        "Test_Sce_Description": "This scenario tests the exception flow when an error has occurred on the device that does not cover the exception cases above. The device should record the tap and the Declined \u2013 See Customer Service Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "Tap-off and Virtual Card Media is on the local hotlist and device is offline",
        "Test_Sce_Description": "This scenario tests the exception flow when the Virtual Card Media is on the local hotlist and the device is offline. The device should check the local hotlist and return a response that the media is denied. The right to travel should not be conferred and the Declined \u2013 Blocked Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "Tap-off and Virtual Card Media\u2019s blocked parameter on the scratchpad is enabled",
        "Test_Sce_Description": "This scenario tests the exception flow when the Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled. The device should not allow the cardholder to travel and the Declined \u2013 Blocked Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "ATS Failure to Load Products",
        "Test_Sce_Description": "This scenario will test the system's response when ATS fails to load products onto a customer\u2019s account after checkout. The test will verify if the SA Tool informs the operator that the products purchased were not added to the user\u2019s account and if the operator can attempt the checkout again or provide the customer a refund if the customer paid with cash."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "SVC / VC Shopping Cart Validation",
        "Test_Sce_Description": "This scenario will test the system's ability to validate the shopping cart contents. The test will verify if the system correctly identifies when the cart has ineligible products and provides the operator with an error and the option to clear the cart. It will also test if the system correctly removes SVC products when a VC is tapped and vice versa."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "ECP Disabled and Artemis Device Locked",
        "Test_Sce_Description": "This scenario will test the system's response when the customer\u2019s Artemis device has ECP disabled and the device is locked or asleep. The test will verify if the system correctly identifies this condition and prompts the user to provide authentication for their Virtual Card media on their Artemis device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "Artemis Device in Power Reserve Mode",
        "Test_Sce_Description": "This scenario will test the system's response when the customer\u2019s Artemis device is in Power Reserve mode and ECP is disabled. The test will verify if the system correctly identifies this condition and prompts the user to charge their device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "Device Offline and Not Connected to ATS",
        "Test_Sce_Description": "This scenario will test the system's response when the device is offline and not connected to Accenture Ticketing Services. The test will verify if the device checks the local deny list if the media is on the local deny list and if the latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "Open Payments Media Fails ODA Check",
        "Test_Sce_Description": "This scenario will test the system's response when an Open Payments Media fails the ODA check. The test will verify if the device returns the appropriate feedback and if the Declined \u2013 Failed ODA Check Screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "This scenario will test the system's response when an Open Payments Media fails the Expiry Check. The test will verify if the device returns the appropriate feedback and if the Declined \u2013 Card Expired Screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "Open Payments Media Already Tapped-On Using an Online Device",
        "Test_Sce_Description": "This scenario will test the system's response when the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window, whereby the initial device and secondary device(s) tapped on were all online. The test will verify if the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "Open Payments Media Already Tapped-On Using an Offline Device",
        "Test_Sce_Description": "This scenario will test the system's response when the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window whereby the initial device tapped, and secondary device(s) is the same device and is offline. The test will verify if the device accepts the tap and checks the latent transaction processor on the same device for a previous tap within the anti-passback window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "Open Payments Media on the ATS Deny List and the SA Tool is Online",
        "Test_Sce_Description": "This scenario will test the system's response when the Open Payments Media is on the deny list and the SA Tool is online. The test will verify if the system correctly identifies this condition and provides the appropriate feedback to the operator."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Load or Action Transaction Processing",
        "Test_Sce_Description": "Verify that the device correctly processes the Load or Action Transaction before continuing with the validation Use Case. This includes checking that the device correctly updates the Farecard and provides the appropriate feedback to the Cardholder of a successful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Valid Transfer Product Processing",
        "Test_Sce_Description": "Verify that the device correctly processes a Farecard that contains a valid transfer product. This includes checking that the Tap-On Fare and Underpayment Value are correctly reduced to account for the Transfer Discount."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Default O/D Processing",
        "Test_Sce_Description": "Verify that the device correctly processes a Farecard that contains a Default O/D. This includes checking that the device correctly deducts the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Default Trip Override",
        "Test_Sce_Description": "Verify that the device correctly processes a Farecard when the customer requests to override the Default Trip. This includes checking that the device correctly updates the Farecard and provides the appropriate feedback to the Cardholder of a successful transaction and that the Default Trip was Overridden."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Underpayment Processing",
        "Test_Sce_Description": "Verify that the device correctly processes a Farecard that contains an Underpayment from a previous trip. This includes checking that the device correctly deducts the Underpayment Value from the Farecard E-Purse and clears the underpayment field before performing the Fare Validation."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Non-Revenue Farecard Processing",
        "Test_Sce_Description": "Verify that the device correctly processes a Non-Revenue Farecard. This includes checking that the device only accepts Non-Revenue farecard in the training mode and displays a declined HMI in the revenue mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Temporal Class Supplement Processing",
        "Test_Sce_Description": "Verify that the device correctly processes a Farecard that is tapped on a device during a time period that contains an associated Temporal Class Supplement. This includes checking that the ATS correctly computes the fare and deducts the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Peak Hour Fare Processing",
        "Test_Sce_Description": "Verify that the device correctly processes a Farecard that is tapped on during peak hours after previously reaching off peak daily cap. This includes checking that the ATS correctly computes the fare and deducts the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Premium Service Route Fare Processing",
        "Test_Sce_Description": "Verify that the device correctly processes a Farecard that is tapped on a premium service route/location after previously riding on a Special Event service route. This includes checking that the ATS correctly computes the fare and deducts the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Non-Adult Concession Fare Processing",
        "Test_Sce_Description": "Verify that the device correctly processes a Farecard that has a Valid Non-Adult concession. This includes checking that the ATS correctly computes the fare and deducts the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Full Fare-by-Zone transaction processing",
        "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Override of Default Trip",
        "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on when the customer requests the override of a Default Trip by interacting with the Device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Capping discount eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Multiple capping discounts eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS will take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Offline device capping discount eligibility",
        "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules will follow use-case logic outlined in ticketing use cases."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Open Payments Media fails ODA check",
        "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device performs the necessary validation and determines that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen is provided to the cardholder. An error will be captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Farecard is blocked",
        "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. Card reader detects Farecard is blocked. Right to travel is not conferred. The Device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. Device determines that the Tap-On Time + Max Travel Duration < Current Time. Device Auto-settles the Underpayment and deducts the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Multiple NFC media are presented to the device at one time",
        "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. Customer presents multiple NFC medias to the card reader at once. Device blocks all user functionality, presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Tap a non-activated Farecard on an SA Tool",
        "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. Device detects that the Farecard is not activated. The device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs",
        "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Fare-by-Zone transaction with default O/D",
        "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Override default O/D on Open Payments Media",
        "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on. The customer should be able to request the override of a Default Trip by interacting with the Device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Eligibility for capping discount",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list and complete the fare processing. ATS should calculate the capping discount and apply to the fare calculation."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Eligibility for multiple capping discounts",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list and complete the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS should take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Device offline during capping discount eligibility",
        "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services. The tap should then be rated in ATS. Capping rules should follow use-case logic outlined in ticketing use cases."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media fails ODA check",
        "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device should detect that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Farecard is blocked",
        "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. The Card reader should detect that Farecard is blocked. The Device should provide the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. The Device should determine that the Tap-On Time + Max Travel Duration < Current Time. The Device should Auto-settle the Underpayment and deduct the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple NFC media are presented to the device at one time",
        "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. The customer should present multiple NFC medias to the card reader at once. The Device should block all user functionality, presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Tap a non-activated Farecard on an SA Tool",
        "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. The Device should detect that the Farecard is not activated. The device should provide feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs",
        "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device should provide feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains Underpayment from a previous trip",
        "Test_Scnario": "Farecard Mismatch Detection",
        "Test_Sce_Description": "Verify that the system correctly identifies when the Farecard tapped during the write tap does not match the Farecard tapped during the identification tap. This can be tested by intentionally presenting a different Farecard during the write tap and checking if the system displays an error message and prompts the operator to tap the correct card."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains Underpayment from a previous trip",
        "Test_Scnario": "Underpayment Detection",
        "Test_Sce_Description": "Verify that the system correctly identifies when a customer's Farecard is in underpayment. This can be tested by presenting a Farecard with an underpayment and checking if the system detects the underpayment amount during the identification tap."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains Underpayment from a previous trip",
        "Test_Scnario": "Underpayment Handling",
        "Test_Sce_Description": "Verify that the system correctly handles underpayment scenarios. This can be tested by going through the steps of the Main Use Case with a Farecard in underpayment and checking if the system correctly calculates the amount to be loaded onto the card, displays the Underpayment Full Screen Alert, and allows the operator to waive the underpayment amount."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains Underpayment from a previous trip",
        "Test_Scnario": "Underpayment Handling with Fee",
        "Test_Sce_Description": "Verify that the system correctly handles underpayment scenarios when the TA has configured an underpayment fee. This can be tested by going through the steps of the Main Use Case with a Farecard in underpayment and a configured underpayment fee, and checking if the system correctly adds the fee to the shopping cart and calculates the amount to be loaded onto the card."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains Underpayment from a previous trip",
        "Test_Scnario": "Overdraft Handling",
        "Test_Sce_Description": "Verify that the system correctly handles overdraft scenarios. This can be tested by presenting a Farecard with a negative balance and performing a load, and checking if the system correctly performs two loads - one to bring the Farecard balance to 0, and a second to load the rest."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains Underpayment from a previous trip",
        "Test_Scnario": "Performance of Underpayment Handling",
        "Test_Sce_Description": "Verify that the system performs underpayment handling within acceptable time limits. This can be tested by measuring the time it takes for the system to detect underpayment, calculate the amount to be loaded onto the card, and complete the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard contains Underpayment from a previous trip",
        "Test_Scnario": "Security of Underpayment Handling",
        "Test_Sce_Description": "Verify that the system securely handles underpayment scenarios. This can be tested by checking if the system encrypts sensitive data such as Farecard information and transaction details, and if it requires authentication for actions such as waiving the underpayment amount."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Non-Revenue Farecard Tapped in Training Mode",
        "Test_Sce_Description": "Verify that the SA tool accepts the Non-Revenue farecard when it is tapped in the training mode. The tool should not display a declined HMI when the card is tapped in the revenue mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Temporal Class Supplement Display",
        "Test_Sce_Description": "Verify that the device displays an HMI reflecting the Temporal Class Supplement when a farecard is tapped during a time period that contains an associated Temporal Class Supplement. The device should process the Tap-On Transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Autoload Enabled Farecard",
        "Test_Sce_Description": "Verify that when a farecard with Autoload enabled is tapped on a device and the fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Override Default Trip",
        "Test_Sce_Description": "Verify that if a farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Farecard Validation Failure",
        "Test_Sce_Description": "Verify that if a farecard fails validation checks at Tap-On, the device provides the cardholder with the appropriate feedback without updating the Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that if a farecard is blocked, the right to travel is not conferred and the device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Exceeding Max Travel Duration",
        "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Non-Activated Farecard",
        "Test_Sce_Description": "Verify that if a non-activated Farecard is tapped on the device, the transaction is unsuccessful."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Temporal Class Supplement Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the device correctly reflects the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Autoload Enabled Farecard Transaction",
        "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Farecard correctly has the Autoload amount automatically added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Default Trip Override",
        "Test_Sce_Description": "Verify that when a Farecard without a Default O/D is tapped on while the device is in Override mode, the device correctly processes the tap as a result tap-on and provides the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the Default Trip was overridden."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator correctly enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Farecard Validation Failure",
        "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device correctly provides the appropriate feedback to the cardholder without updating the Farecard and logs the error in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that when a blocked Farecard is tapped on a device, the right to travel is not conferred and the device correctly provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Max Travel Duration Exceeded",
        "Test_Sce_Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device correctly auto-settles the Underpayment and opens a new trip."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device correctly blocks all fare payment functionality and presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Non-Activated Farecard",
        "Test_Sce_Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful and the device correctly provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Tickets",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device correctly handles the error and logs it in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a premium service class and the farecard has a valid Special Event Transfer Product and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Lower Premium Fare than Special Event Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the correct Child Concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame and does not cause any delays or disruptions to the user."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure and that all customer information and transaction details are encrypted and protected from unauthorized access."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a farecard is tapped during peak hours after previously reaching the off-peak daily cap limit. The farecard should not have reached the peak daily cap limit and should be outside the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a farecard with a valid Special Event Transfer Product is tapped on a premium service route. The fare payment should be made on the SA Tool, the service class should be premium, and the tap should be within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event fare",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a farecard with a valid Special Event Transfer Product is tapped on a premium service route where the premium fare is lower than the special event fare. The fare payment should be made on the SA Tool, the service class should be premium, and the tap should be within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a farecard with a valid Non-Adult concession is tapped. The fare payment should be made on the SA Tool."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a farecard with a valid Child concession is tapped. The fare payment should be made on the SA Tool."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a farecard is tapped as a result of a failed inspection. The fare payment should be made on the SA Tool."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Verify that the system can handle a high volume of fare payments simultaneously without any degradation in performance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Verify that the system securely processes fare payments, ensuring that sensitive customer data is protected and that unauthorized access is prevented."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the fare payment is correctly computed and deducted from the ePurse balance when a tap is made during peak hours after previously reaching the off peak daily cap, outside the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the fare payment is correctly computed and deducted from the ePurse balance when a tap is made on a premium service route/location after previously riding on a Special Event service route, within the transfer window, and the premium fare is higher than the special event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product with lower fare",
        "Test_Sce_Description": "Verify that the fare payment is correctly computed and deducted from the ePurse balance when a tap is made on a premium service route/location after previously riding on a Special Event service route, within the transfer window, and the premium fare is lower than the special event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the fare payment is correctly computed and deducted from the ePurse balance when the customer's farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the fare payment is correctly computed and deducted from the ePurse balance when the customer's farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the fare payment is correctly computed and deducted from the ePurse balance when the operator inspects a customer\u2019s farecard and determines that they have not paid a fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of the SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool is able to handle multiple fare payments simultaneously without any performance degradation."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of the SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool is secure and does not expose any sensitive customer information during the fare payment process."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of ePurse balance less than fare amount",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of valid transfer product",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Inter-agency transfer processing",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Autoload threshold processing",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly checks that the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of Farecard on the Action or Load Value list",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of fare payment during peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of fare payment on Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of fare payment on Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of fare payment with a Valid Non-Adult Concession",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and processes a fare payment when the customer's Farecard has a Valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Temporal Class Supplement Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the device correctly displays an HMI reflecting the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Autoload Enabled Farecard Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Farecard correctly has the Autoload amount automatically added to the E-Purse balance and the device deducts the Fare from the Farecard E-Purse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Default Trip Override Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a Farecard with no Default O/D is tapped on while the device is in Override mode, the device correctly processes the tap as a result tap-on and provides the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the Default Trip was overridden."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Audio Messages Request during Fare-by-Zone TA Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard and requests Audio Messages, the operator correctly enables audio mode and the SA Tool displays the fare payment screen to the operator and customer for the duration of the audio message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Farecard Validation Failure at Tap-On",
        "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device correctly provides the appropriate feedback to the cardholder without updating the Farecard and logs the error in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Blocked Farecard Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a blocked Farecard is tapped on a device, the right to travel is not conferred and the device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Max Travel Duration Exceeded Tap-On Transaction",
        "Test_Sce_Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device correctly auto-settles the Underpayment and opens a new trip."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device correctly blocks all fare payment functionality and presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Non-Activated Farecard Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful and the device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Card Reading Error during Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device correctly handles the error and logs it in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Autoload Threshold Crossed",
        "Test_Sce_Description": "Test the functionality of the device when a Farecard with Autoload Enabled is tapped and the Fare amount crosses the Auto-load threshold. The device should detect that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, which triggers the Autoload amount to be added to the Farecard. The device should then deduct the Fare from the Farecard E-Purse balance and provide the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the autoload was successful."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Autoload Threshold Not Crossed",
        "Test_Sce_Description": "Test the functionality of the device when a Farecard with Autoload Enabled is tapped and the Fare amount does not cross the Auto-load threshold. The device should not trigger the Autoload amount to be added to the Farecard and should only deduct the Fare from the Farecard E-Purse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Autoload Threshold Crossed with Insufficient Funds",
        "Test_Sce_Description": "Test the functionality of the device when a Farecard with Autoload Enabled is tapped and the Fare amount crosses the Auto-load threshold but there are insufficient funds in the E-Purse balance. The device should display an error message indicating insufficient funds."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Test the performance of the device when processing multiple Farecards with Autoload Enabled that cross the Auto-load threshold. The device should be able to handle multiple transactions simultaneously without any delay or error."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Test the security of the device by attempting to manipulate the Autoload threshold or the E-Purse balance. The device should have robust security measures in place to prevent any unauthorized access or manipulation."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Exception Flow Test",
        "Test_Sce_Description": "Test the exception flow of the device when a Farecard fails validation checks at Tap-On. The device should display an appropriate error message and prevent the transaction from proceeding."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Alternate Flow Test",
        "Test_Sce_Description": "Test the alternate flow of the device when a Farecard with no Default O/D is tapped on while the device is in Override mode. The device should process the tap as a result tap-on and provide the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the Default Trip was overridden."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Full Fare-by-Zone transaction processing",
        "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Override default O/D",
        "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and process the tap as a regular tap-on when the customer requests the override of a Default Trip by interacting with the Device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Eligibility for capping discount",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Eligibility for multiple capping discounts",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS will take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Device offline and customer eligible for capping discount",
        "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules will follow use-case logic outlined in ticketing use cases."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media fails ODA check",
        "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device performs the necessary validation and determines that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen is provided to the cardholder. An error will be captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Farecard is blocked",
        "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. Card reader detects Farecard is blocked. Right to travel is not conferred. The Device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. Device determines that the Tap-On Time + Max Travel Duration < Current Time. Device Auto-settles the Underpayment and deducts the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple NFC media are presented to the device at one time",
        "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. Customer presents multiple NFC medias to the card reader at once. Device blocks all user functionality, presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Tap a non-activated Farecard on an SA Tool",
        "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. Device detects that the Farecard is not activated. The device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs",
        "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Non-Revenue farecard in training mode",
        "Test_Sce_Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode and if the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard tap during Temporal Class Supplement",
        "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the Device should contain an HMI reflecting the Temporal Class Supplement, and process the Tap-On Transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard with Autoload Enabled",
        "Test_Sce_Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard without Default O/D",
        "Test_Sce_Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device should process the tap as a result tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Audio Messages request",
        "Test_Sce_Description": "Verify that when the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard validation checks at Tap-On",
        "Test_Sce_Description": "Verify that if the Farecard fails validation checks at Tap-On, the device should display an error message and not process the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass",
        "Test_Sce_Description": "Verify that if the Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value, the ATS should compute and deduct the Upgrade fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass with lower fare value",
        "Test_Sce_Description": "Verify that if the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value, the ATS should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Limited Period Pass",
        "Test_Sce_Description": "Verify that if the Farecard has a valid Limited Period Pass and the current time is within the limits of the product, the device should process the transaction as normal."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that if the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the device should process the transaction as normal."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event fare",
        "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window, and the premium fare is lower than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the correct Child Concession fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak load conditions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure and that all sensitive data is encrypted during transmission and storage."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the system processes the fare payment within the acceptable time limit and does not cause any delay or inconvenience to the user."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the system securely processes the fare payment and does not expose any sensitive user information during the process."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare",
        "Test_Sce_Description": "Verify that the system correctly calculates and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid Non-Adult concession on the farecard, calculates the upgrade fare, and deducts it from the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid Child concession on the farecard, calculates the correct Child concession fare, and deducts it from the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame, ensuring that the system's performance is up to the mark."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure and that all transactions are encrypted to prevent any potential security breaches."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "This scenario will validate if the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of ePurse balance less than fare amount",
        "Test_Sce_Description": "This scenario will test how the SA Tool handles situations where the customer's ePurse balance is less than the fare amount. The tool should put the Farecard into overdraft (negative balance)."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of valid transfer product within Intra-agency Transfer window",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product and computes the free transfer within the Intra-agency Transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of valid transfer product within Inter-agency Transfer window",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product from another transit agency and computes the fare based on the transfer product and the transfer agreement between the transit agencies."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of Autoload Threshold",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of Farecard on the Action or Load Value List",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window",
        "Test_Sce_Description": "This scenario will test how the SA Tool handles fare payment during Peak hours after the Farecard has reached the off peak Daily Cap Limit and is out of transfer window. The tool should compute the fare and deduct the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a customer taps on a premium service route/location after previously riding on a Special Event service route within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a customer taps on a premium service route/location after previously riding on a Special Event service route within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of Valid Non-Adult Concession on Farecard",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid transfer product on the customer's TICKET and computes the free transfer. The system should follow the Transfer Product Processing rules as per [R6]."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion. The audio message should be played in the default language of the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location, resulting in a regular ride balance fare payment and Transfer Product creation. The device should not differentiate between service class for CLIENT Ticket."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route, resulting in a free transfer. The device should not differentiate between service class for CLIENT Ticket."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a Valid Child concession on the customer's TICKET. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment resulting from a failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a TICKET with no Ride Balance remaining. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The application should switch to \u201cOut of Service\u201d mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer taps a card that is not CLIENT media. The system should display the device error message \u201cCard Read Error\u201d."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a TICKET that is within the Anti-Passback Window. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a non-activated TICKET. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Failed Inspection",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET that has not paid a fare during inspection and allows the operator to select the payment function on the SA Tool inspection results screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Recording of Fare Payment and Inspection Transactions",
        "Test_Sce_Description": "Ensure that the SA Tool accurately records both the fare payment and inspection transactions when a fare payment is made after a failed inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Notification Display after Fare Payment and Inspection",
        "Test_Sce_Description": "Check that the SA Tool application returns to the Tap Card screen and displays a toast notification of the corresponding inspection action after the fare payment and inspection transactions are recorded."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Validate that the SA Tool correctly identifies when a customer's ride balance is empty and displays a declined message to the customer, preventing the transaction from being conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Low Battery Threshold during Payment",
        "Test_Sce_Description": "Ensure that the SA Tool switches to 'Out of Service' mode if the low battery threshold is reached before Step 5 of the Main Use Case. If the threshold is reached after Step 5, verify that the customer's fare payment is processed before the application switches to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Check that the SA Tool application does not respond and displays a 'Card Read Error' message when a customer taps a card that is not CLIENT media."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's TICKET is within the Anti-Passback Window and displays a declined message to the customer, preventing the transaction from being conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Ensure that the SA Tool correctly identifies when a customer's TICKET is not activated and displays a declined message to the customer, preventing the transaction from being conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Expired Ticket",
        "Test_Sce_Description": "Check that the SA Tool correctly identifies when a customer's TICKET is expired and displays a declined message to the customer, preventing the transaction from being conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "Validate that the SA Tool application correctly detects when a TICKET is unreadable and fails to read it correctly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a TICKET that has no ride balance remaining. The SA Tool should detect the empty ride balance, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "This scenario tests the performance of the SA Tool when the device battery goes below the low battery threshold during a fare payment. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a card that is not CLIENT media. The SA Tool should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a TICKET that is within the Anti-Passback Window. The device should detect the Anti-Passback check failure, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a non-activated TICKET. The SA Tool should detect the invalidity of the Limited Period Pass, compute the value to be deducted from the e-Purse, detect that the farecard is in overdraft, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a locked farecard. The SA Tool should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with an unreadable TICKET. The SA Tool should detect the TICKET, fail to read it, indicate to the operator that the TICKET is unreadable, and log the error in the background for troubleshooting."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a TICKET that has a valid Non-Adult, Non-Child concession. The SA Tool should process the fare payment according to the concession rules."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Low Battery Threshold Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when the battery level drops below the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Card Read Error Test",
        "Test_Sce_Description": "This scenario tests the application's response when a card that is not CLIENT media is tapped. The application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Anti-Passback Window Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and the application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Non-Activated Ticket Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer taps a non-activated TICKET. The application should display a declined message to the customer, the transaction should not be conducted, and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "This scenario tests the performance of the application under different conditions such as low battery, high network traffic, and high CPU usage. The application should maintain its functionality and performance under these conditions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "This scenario tests the security features of the application such as data encryption, user authentication, and secure communication with the ATS. The application should pass all these security tests to ensure the safety and privacy of the users' data."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Non-CLIENT Media Card",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that has an empty ride balance. The system should detect the empty balance, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "This scenario is to validate the system's response when the device's battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the threshold is reached before the fare payment is processed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Anti-Passback Window Ticket",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that is within the Anti-Passback Window. The system should detect the Anti-Passback check failure, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a non-activated ticket. The system should detect the invalidity of the ticket, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Locked Farecard",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a locked farecard. The system should detect the locked status of the farecard, display a declined screen, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with an unreadable TICKET. The system should detect the unreadability of the TICKET, indicate to the operator that the TICKET is unreadable, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Non-Adult, Non-Child Concession TICKET",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a TICKET that has a non-adult, non-child concession. The system should detect the concession type, display the appropriate fare payment screen, and conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Anti-Passback Window Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Declined Message Display",
        "Test_Sce_Description": "Ensure that the SA Tool application correctly displays a declined message to the customer when the ticket fails the Anti-Passback checks."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Declined Audio Tone",
        "Test_Sce_Description": "Check that the SA Tool plays the declined audio tone when the ticket fails the Anti-Passback checks."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Timeout Functionality",
        "Test_Sce_Description": "Verify that the app returns to the SA Tool application Tap Card screen after a configurable timeout when the ticket fails the Anti-Passback checks."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Non-Activated Ticket Check",
        "Test_Sce_Description": "Ensure that the system correctly identifies a non-activated ticket and declines the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Performance Under Load",
        "Test_Sce_Description": "Verify the system's performance when multiple tickets are being processed simultaneously. The system should be able to handle high loads without any degradation in performance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Security of Transaction Data",
        "Test_Sce_Description": "Ensure that all transaction data is securely stored and transmitted. Unauthorized access to transaction data should be prevented."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Error Handling",
        "Test_Sce_Description": "Verify that the system correctly handles errors and exceptions. In case of an error, the system should display an appropriate error message and should not crash."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "System Recovery After Failure",
        "Test_Sce_Description": "Check the system's ability to recover after a failure. After a failure, the system should be able to recover and continue processing tickets without any loss of data."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Validation of Ticket Information",
        "Test_Sce_Description": "Ensure that the system correctly validates ticket information. The system should be able to identify invalid tickets and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a non-activated ticket. The system should display a declined message to the customer and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a ticket with an empty ride balance. The system should display a declined message to the customer and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a ticket with a valid child concession. The system should display the successful fare payment screen and play the successful fare payment audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a fare payment is made as a result of a failed ticket inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a fare payment. The application should switch to 'Out of Service' mode after processing the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a non-CLIENT media. The system should display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment within the Anti-Passback Window. The system should display a declined message to the customer and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a locked farecard. The system should display a declined screen to the operator and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using an unreadable ticket. The system should indicate to the operator that the ticket is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment using a ticket with a valid non-adult, non-child concession. The system should process the fare payment accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Valid Regular Service Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Regular Service Transfer Product and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a Premium Service Class and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Special Event Transfer Product and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Verify that the system can handle a high volume of fare payments simultaneously without any degradation in performance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Verify that the system securely processes fare payments and protects customer data."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the Child Concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak load conditions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure and that all sensitive data is encrypted during transmission and storage."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Valid Regular Service Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a service class of Premium and the farecard has a valid Regular Service Transfer Product and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a service class of Premium and the farecard has a valid Special Event Transfer Product and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made and the customer\u2019s farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak loads."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure and that customer data is not compromised during the process."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of insufficient ePurse balance",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Action or Load Value list processing",
        "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly verifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid transfer product on the customer's TICKET. The system should compute the free transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location, resulting in a regular ride balance fare payment and Transfer Product creation."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route, resulting in a free transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment resulting from a failed TICKET inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a TICKET within the Anti-Passback Window. The system should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Failed Inspection",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET that has not paid a fare during inspection. The operator should be able to select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET with an empty ride balance. The SA Tool should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "Verify that the SA Tool correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful TICKET tap. If the low battery threshold is reached before Step 5, the application should switch to 'Out of Service' mode. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's card that is not CLIENT media. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET that is within the Anti-Passback Window. The SA Tool should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's non-activated TICKET. The SA Tool should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Expired Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's expired TICKET. The SA Tool should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Period Pass",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET with a valid period pass. The SA Tool should compute that the TICKET has a valid period pass and accept the fare. The SA Tool should update the TICKET accordingly, display the successful fare payment screen, play the successful fare payment audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a customer's TICKET that is unreadable. The SA Tool should detect the TICKET and fail to read it correctly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that has no ride balance remaining. The SA Tool should detect the empty ride balance, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "This scenario tests the performance of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a card that is not CLIENT media. The SA Tool should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that is within the Anti-Passback Window. The device should detect the Anti-Passback violation, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a non-activated TICKET. The SA Tool should detect the invalidity of the TICKET, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a locked farecard. The SA Tool should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with an unreadable TICKET. The SA Tool should detect the TICKET but fail to read it, indicate to the operator that the TICKET is unreadable, and log the error for troubleshooting."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a valid non-adult, non-child concession attempts to make a fare payment. The SA Tool should process the fare payment according to the concession rules."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Low Battery Threshold Test",
        "Test_Sce_Description": "This test scenario is designed to verify the functionality of the application when the battery level drops below the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Fare Payment Processing Test",
        "Test_Sce_Description": "This test scenario is designed to verify the functionality of the application when processing fare payments. The application should correctly deduct the fare from the customer's TICKET and update the balance. The transaction should be conducted successfully and the updated balance should be accurately reflected in the customer's TICKET."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Card Read Error Test",
        "Test_Sce_Description": "This test scenario is designed to verify the functionality of the application when a card that is not CLIENT media is tapped. The application should not respond and the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Anti-Passback Window Test",
        "Test_Sce_Description": "This test scenario is designed to verify the functionality of the application when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and the application should display a declined message to the customer. The transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Non-Activated Ticket Test",
        "Test_Sce_Description": "This test scenario is designed to verify the functionality of the application when a customer taps a non-activated TICKET. The application should detect that the TICKET is not activated and display a declined message to the customer. The transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "This test scenario is designed to verify the performance of the application under different conditions such as high traffic, low battery, and varying network conditions. The application should perform optimally and without any lag or delay in processing fare payments."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "This test scenario is designed to verify the security features of the application. The application should securely process fare payments and protect customer's TICKET information. Any attempts to breach the application's security should be detected and prevented."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media Card",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment using a card that is not CLIENT media. The SA Tool should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment using an unreadable TICKET. The SA Tool should detect the TICKET but fail to read it correctly, indicating to the operator that the TICKET is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer with a valid non-adult, non-child concession attempts to make a fare payment. The SA Tool should correctly identify the concession and process the fare payment accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer with an empty ride balance attempts to make a fare payment. The SA Tool should detect that the ride balance is empty and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. The application should switch to 'Out of Service' mode after processing the fare payment if the low battery threshold is reached."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment using a locked farecard. The SA Tool should read the farecard, determine that it is locked, and display a declined screen to the operator."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment within the Anti-Passback Window. The SA Tool should detect that the TICKET fails the Anti-Passback checks and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment using a non-activated ticket. The SA Tool should detect that the ticket is not valid at the current time and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made as a result of a failed inspection. The SA Tool should record both the fare payment and inspection transactions and display a toast notification of the corresponding inspection action."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer with a valid child concession attempts to make a fare payment. The SA Tool should correctly identify the concession, process the fare payment, and display the successful fare payment screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Anti-Passback Window Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Timeout Functionality",
        "Test_Sce_Description": "Verify that the system correctly returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the ticket being within the Anti-Passback window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Ticket Validation",
        "Test_Sce_Description": "Verify that the system correctly validates the ticket and identifies that it is within the Anti-Passback window. The validation process should follow the order of steps as mentioned in [R6]."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Performance under Load",
        "Test_Sce_Description": "Verify the system's performance when multiple tickets within the Anti-Passback window are tapped in quick succession. The system should be able to handle the load and correctly decline all such transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Security Check",
        "Test_Sce_Description": "Verify that the system securely handles the data during the transaction process. No customer data should be at risk during the transaction process."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Exception Handling",
        "Test_Sce_Description": "Verify that the system correctly handles exceptions such as when the ticket is unreadable or when the battery goes below the low battery threshold during payment. The system should switch to 'Out of Service' mode in such cases."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Alternate Flow Functionality",
        "Test_Sce_Description": "Verify that the system correctly handles alternate flows such as when the customer's ticket is not activated or when the customer's ticket is expired. The system should decline the transaction in such cases and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Validating Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer tries to make a fare payment using a non-activated ticket. The SA Tool should detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Performance of SA Tool with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario will test the performance of the SA Tool when a customer tries to make a fare payment using a non-activated ticket. The SA Tool should quickly detect that the ticket is not activated and display a declined message to the customer in a timely manner."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Security of SA Tool with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario will test the security of the SA Tool when a customer tries to make a fare payment using a non-activated ticket. The SA Tool should securely handle the transaction and not allow any unauthorized access or manipulation of the transaction data."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Validating Exception Flow with Empty Ride Balance",
        "Test_Sce_Description": "This scenario will test the exception flow of the SA Tool when a customer tries to make a fare payment with an empty ride balance. The SA Tool should detect the empty ride balance and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Performance of SA Tool in Exception Flow with Empty Ride Balance",
        "Test_Sce_Description": "This scenario will test the performance of the SA Tool in the exception flow when a customer tries to make a fare payment with an empty ride balance. The SA Tool should quickly detect the empty ride balance and display a declined message to the customer in a timely manner."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Security of SA Tool in Exception Flow with Empty Ride Balance",
        "Test_Sce_Description": "This scenario will test the security of the SA Tool in the exception flow when a customer tries to make a fare payment with an empty ride balance. The SA Tool should securely handle the transaction and not allow any unauthorized access or manipulation of the transaction data."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Validating Alternate Flow with Unreadable Ticket",
        "Test_Sce_Description": "This scenario will test the alternate flow of the SA Tool when a customer tries to make a fare payment with an unreadable ticket. The SA Tool should detect the unreadable ticket and indicate to the operator that the ticket is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Performance of SA Tool in Alternate Flow with Unreadable Ticket",
        "Test_Sce_Description": "This scenario will test the performance of the SA Tool in the alternate flow when a customer tries to make a fare payment with an unreadable ticket. The SA Tool should quickly detect the unreadable ticket and indicate to the operator in a timely manner."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Security of SA Tool in Alternate Flow with Unreadable Ticket",
        "Test_Sce_Description": "This scenario will test the security of the SA Tool in the alternate flow when a customer tries to make a fare payment with an unreadable ticket. The SA Tool should securely handle the transaction and not allow any unauthorized access or manipulation of the transaction data."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Verify that the SA Tool application correctly detects and handles the situation when the Virtual Card is unreadable. The application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is successful, the normal process should continue. If the tap is still unsuccessful, the application should again indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child, Non-Discreet Concessions",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card with a valid non-adult, non-child, non-discreet concession. The application should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment with Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card with an ePurse balance less than the fare amount. The application should send the tap to ATS for processing, which should check the online hotlist and complete the fare processing. The fare should be removed from the Virtual Card e-Purse and the card should be put into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment within Intra-SP Transfer Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card within the Intra-SP Transfer window. The application should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card, and the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment within Inter-SP Transfer Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card within the Inter-SP Transfer window. The application should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card, and the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment with Audio Messages",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card when the customer requests audio messages. The operator should enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion. The SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message, and the corresponding audio message should be played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Verify that the SA Tool application correctly detects and handles the situation when a customer's Virtual Card is unreadable. The application should indicate to the operator that the Virtual Card is unreadable and prompt the customer to tap again. If the tap is still unsuccessful, the application should again indicate that the card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Non-Adult, Non-Child, Non-discreet Concessions",
        "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment when a customer's Virtual Card has a valid Non-Adult, Non-Child, non-discreet concession. The application should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "ePurse Balance Less Than Fare Amount",
        "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment when a customer's ePurse balance is less than the fare amount. The application should send the tap to ATS for processing, which should check the online hotlist, complete the fare processing, remove the fare from the Virtual Card e-Purse, and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Intra-SP Transfer Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment when a transaction is within the Intra-SP Transfer window. The application should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card, and the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Inter-SP Transfer Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly processes fare payment when a transaction is within the Inter-SP Transfer window. The application should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card, and the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles a customer's request for audio messages. The application should play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Testing ePurse Balance Less Than the Fare Amount",
        "Test_Sce_Description": "This scenario will test the functionality of the system when the customer's ePurse balance is less than the fare amount. The system should be able to detect this condition and handle it appropriately, by removing the fare from the Virtual Card e-Purse and putting the card into overdraft."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Testing Successful Transaction Feedback",
        "Test_Sce_Description": "This scenario will test the system's ability to provide appropriate feedback to the Cardholder of a successful transaction. The system should update the Virtual Card accordingly and inform the Cardholder that the transaction was successful."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Testing Unreadable Virtual Card",
        "Test_Sce_Description": "This scenario will test the system's ability to handle situations where the Virtual Card is unreadable. The system should be able to detect this condition and inform the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Testing Concession Fare Payment",
        "Test_Sce_Description": "This scenario will test the system's ability to handle fare payments from customers with non-adult, non-child, non-discreet concessions. The system should be able to detect this condition and handle it appropriately, by showing the successful fare payment screen for non-adult concession and playing the successful fare payment audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Testing Intra-SP Transfer Window",
        "Test_Sce_Description": "This scenario will test the system's ability to handle transactions within the Intra-SP Transfer window. The system should be able to detect this condition and handle it appropriately, by reading that the Virtual Card contains a valid intra-agency transfer product and deducting $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Testing Inter-SP Transfer Window",
        "Test_Sce_Description": "This scenario will test the system's ability to handle transactions within the Inter-SP Transfer window. The system should be able to detect this condition and handle it appropriately, by reading that the Virtual Card contains a valid inter-agency transfer product and deducting $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Testing Performance of the System",
        "Test_Sce_Description": "This scenario will test the performance of the system under different load conditions. The system should be able to handle high volumes of transactions without any degradation in performance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Testing Security of the System",
        "Test_Sce_Description": "This scenario will test the security of the system. The system should be able to securely handle sensitive customer information and prevent unauthorized access."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Successful Fare Payment with Intra-SP Transfer",
        "Test_Sce_Description": "Verify that the system successfully processes fare payment when the customer's Virtual Card has a valid intra-agency transfer product. The system should deduct $0 from the Virtual Card E-Purse and provide appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Unsuccessful Fare Payment with Intra-SP Transfer",
        "Test_Sce_Description": "Verify that the system handles the scenario where the Virtual Card does not have a valid intra-agency transfer product. The system should not deduct any amount from the Virtual Card E-Purse and should provide appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Performance of Fare Payment with Intra-SP Transfer",
        "Test_Sce_Description": "Verify the system's performance when processing fare payments with intra-agency transfer products. The system should be able to handle multiple transactions simultaneously without any delay or errors."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Security of Fare Payment with Intra-SP Transfer",
        "Test_Sce_Description": "Verify that the system securely processes fare payments with intra-agency transfer products. The system should encrypt all transaction data to prevent unauthorized access."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Exception Handling for Intra-SP Transfer",
        "Test_Sce_Description": "Verify that the system properly handles exceptions during fare payment processing with intra-agency transfer products. The system should provide meaningful error messages and not crash or hang in case of any errors."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Alternate Flow for Intra-SP Transfer",
        "Test_Sce_Description": "Verify that the system handles alternate flows during fare payment processing with intra-agency transfer products. The system should be able to process transactions even when the Virtual Card is unreadable or has a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Test the scenario where the SA Tool application detects the Virtual Card but fails to read it correctly. The application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is successful, the fare payment process should continue. If the tap is unsuccessful, the application should again indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "ePurse Balance Less Than the Fare Amount",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Transaction within Intra-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card, and the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Transaction within Inter-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product from other service provider and a transfer agreement between the service providers has been established. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card, and the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Customer requests Audio Messages",
        "Test_Sce_Description": "Test the scenario where the customer asks to pay for the trip with their Virtual Card and requests audio messages for fare payment. The operator should enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion. The SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message, and play the corresponding audio message to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Daily Cap Reached outside of Transfer window",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, the Farecard has reached Daily Cap Limit, and the Farecard is out of transfer window. ATS should deduct no fare since the Daily Cap is reached."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool and the Service Class is Premium or Special Event. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, the Service Class is Premium or Special Event, the Farecard has a valid Regular Service Transfer Product, and the tap is within Transfer Window. ATS should compute the fare upgrade and deduct the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verifying Farecard on Action or Load Value List",
        "Test_Sce_Description": "This scenario is to verify that the SA Tool correctly identifies and updates a Farecard that is on the Action or Load Value List. The tool should be able to process the list and update the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Audio Messages for Fare Payment",
        "Test_Sce_Description": "This scenario is to verify that the SA Tool correctly plays audio messages for fare payment when requested by the customer. The audio messages should be played in the default language of the customer's Farecard and the volume level should be adjustable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Fare Payment with Daily Cap Reached",
        "Test_Sce_Description": "This scenario is to verify that the SA Tool correctly handles fare payment when the Farecard has reached its Daily Cap Limit and is out of the transfer window. The tool should not deduct any fare since the Daily Cap is reached."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Fare Payment for Premium Service or Special Route/Location",
        "Test_Sce_Description": "This scenario is to verify that the SA Tool correctly computes and deducts the Premium or Special Event fare when a tap on a premium service or special route/location is made. The tool should also create a Transfer Product for the Premium Service or special event Class."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Fare Upgrade for Premium Service or Special Route/Location",
        "Test_Sce_Description": "This scenario is to verify that the SA Tool correctly computes and deducts the Upgrade fare when a tap on a premium service or special event route/location is made after previously riding on a regular service route (within the transfer window). The tool should also set the POP Print Flag to 0 to ensure accurate display of the transfer print status."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "This scenario is to verify that the SA Tool correctly handles fare payment when a tap on peak hours is made after previously reaching off peak daily cap (outside the transfer window). The tool should deduct a fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Fare Payment with Period Pass for Higher Fare Value Service Class",
        "Test_Sce_Description": "This scenario is to verify that the SA Tool correctly computes and deducts the Upgrade fare when the Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Fare Payment with Period Pass for Lower Fare Value Service Class",
        "Test_Sce_Description": "This scenario is to verify that the SA Tool correctly identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment when the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Fare Payment with Limited Period Pass",
        "Test_Sce_Description": "This scenario is to verify that the SA Tool correctly accepts fare payment when the Farecard has a valid Limited Period Pass and the current time is within the limits of the product."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Fare Payment with Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to verify that the SA Tool correctly deducts fare payment from the e-Purse balance when the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should correctly identify the validity of the pass and allow the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly identify the invalidity of the pass due to time limit, compute the fare to be deducted from the e-Purse and deduct the fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when an anonymous farecard with an expired period pass and insufficient ePurse balance is used. The system should correctly identify the card as anonymous, detect the insufficient ePurse balance and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a blocked farecard is used. The system should correctly identify the card as blocked and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard on Deny List",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard on the Deny List is used. The system should correctly identify the card as being on the Deny List, remove it from the Deny List, set it to blocked and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Low Battery Threshold during Payment",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the battery goes below the low battery threshold during a successful Farecard tap. The system should be able to process the remote lists even after the battery goes below the threshold."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the validity of the pass and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Child concession is used. The system should correctly identify the Child concession and display the successful Child Transit Pass fare payment screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the time limit of the pass. The system should correctly identify the pass as valid and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the time limit of the pass but has sufficient e-Purse balance. The system should correctly identify the pass as invalid for the current time, compute the fare to be deducted from the e-Purse, and deduct the fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when an anonymous farecard with an expired period pass and insufficient ePurse balance is used. The system should correctly identify the card as anonymous and the ePurse balance as insufficient, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a blocked farecard is used. The system should correctly identify the card as blocked and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard on Deny List",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard on the Deny List is used. The system should correctly identify the card as being on the Deny List, remove it from the Deny List, set it to blocked, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Low Battery Threshold During Payment",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the battery goes below the low battery threshold during a payment. The system should be able to process the remote lists even after the battery goes below the threshold during a successful farecard tap."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the pass as valid and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Child concession is used. The system should correctly identify the concession as valid and display the successful Child Transit Pass fare payment screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a fare payment results from a failed inspection. The system should correctly record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the time limit of the pass. The system should successfully deduct the fare from the pass."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the time limit of the pass but has sufficient e-Purse balance. The system should successfully deduct the fare from the e-Purse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a customer has an anonymous farecard with an expired period pass and ePurse balance less than the fare amount. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Blocked Virtual Card",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a customer's virtual card is blocked. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Virtual Card on the Deny List",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a customer's virtual card is on the Deny List. The system should remove the card from the Deny List, set it to blocked, decline the transaction, and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Low Battery Threshold During Payment",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where the battery goes below the low battery threshold during payment. The system should still be able to process the remote lists even after the battery goes below the threshold."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Tap Counter at the Configured Limit",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where the tap counter is at the limit. The system should display a declined message to the customer and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Unreadable Virtual Card",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where the virtual card is unreadable. The system should indicate to the operator that the virtual card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Virtual Card with Expired Period Pass and Sufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a customer's virtual card has an expired period pass but has sufficient ePurse balance. The system should successfully deduct the fare from the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Valid Limited Period Pass within time limit",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the time limit. The system should correctly identify the pass as valid and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Valid Limited Period Pass outside time limit with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass outside the time limit but with sufficient e-Purse balance. The system should correctly identify the pass as invalid for the current time, compute the fare to be deducted from the e-Purse, and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Expired Period Pass with insufficient ePurse balance",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from an anonymous virtual card with an expired Period Pass and ePurse balance less than the fare amount. The system should correctly identify the pass as expired and the ePurse balance as insufficient, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Blocked Virtual Card",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked virtual card. The system should correctly identify the card as blocked and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Virtual Card on Deny List",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a virtual card on the Deny List. The system should correctly identify the card as being on the Deny List, remove it from the list, set it to blocked, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Low Battery Threshold during Payment",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should be able to process the remote lists even after the battery goes below the threshold during a successful Farecard tap."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Anonymous Farecard with insufficient ePurse balance",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from an anonymous Farecard with an ePurse balance less than the fare amount. The system should correctly identify the card as anonymous and the ePurse balance as insufficient, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked Farecard. The system should correctly identify the card as blocked and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Farecard on Hotlist",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a Farecard on the hotlist. The system should correctly identify the card as being on the hotlist, update the card\u2019s status to blocked, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Non-activated Card",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer taps a non-activated card. The system should display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Card within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a card within the Anti-Passback Window. The system should correctly identify the card as within the Anti-Passback Window and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a premium service class and the farecard has a valid special event transfer product and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid non-adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made with a farecard that has a valid child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance Test for Fare Payment",
        "Test_Sce_Description": "Verify that the system can handle a high volume of fare payments simultaneously without any degradation in performance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security Test for Fare Payment",
        "Test_Sce_Description": "Verify that the system securely processes fare payments and that sensitive customer data is not exposed during the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the special event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare",
        "Test_Sce_Description": "Verify that the system correctly calculates and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the special event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid non-adult concession on the farecard, calculates the upgrade fare and deducts it from the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid child concession on the farecard, calculates the child concession fare and deducts it from the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when the operator determines that a customer has not paid a fare and selects the payment function on the SA Tool inspection results screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time limit and the system does not crash or hang during the process."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure and the customer's ePurse balance and other sensitive information are not exposed during the process."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a tap is made during peak hours after previously reaching off peak daily cap (outside the transfer window). The farecard should have reached off peak Daily Cap Limit, not reached Peak Daily Cap limit and be out of transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Valid Regular Service Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a tap is made with a farecard that has a valid Regular Service Transfer Product and the Service Class is Premium or Special Event. The tap should be within the Transfer Window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Valid Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a tap is made on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The farecard should have a valid Special Event Transfer Product and the Service Class should be Premium."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the Upgrade fare when a customer with a Valid Non-Adult concession on their Farecard makes a fare payment. The SA Tool should set the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly deducts the correct Child Concession fare when a customer with a Valid Child concession on their Farecard makes a fare payment. The SA Tool should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when the operator inspects a customer\u2019s farecard and determines that they have not paid a fare. The operator should select the payment function on the SA Tool inspection results screen and the SA Tool application should return to the Tap Card screen. A toast notification should be displayed of the corresponding inspection action."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of the SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool performs efficiently under load. The tool should be able to handle multiple fare payments simultaneously without any lag or delay."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of the SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool is secure and protects the customer's ePurse balance and other sensitive information. Unauthorized access to the tool should be prevented."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard. The tool should play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling ePurse balance less than fare amount",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the customer's ePurse balance is less than the fare amount and puts the Farecard into overdraft (negative balance)."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing valid transfer product within Intra-agency Transfer window",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product and computes the free transfer. The tool should correctly process the transfer product."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing valid transfer product within Inter-agency Transfer window",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product from another transit agency and computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies. The tool should deduct the appropriate fare, if applicable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling Autoload Threshold",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing Farecard on the Action or Load Value List",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the fare payment is being made during peak hours after previously reaching off peak daily cap (outside the transfer window) and computes the fare and deducts the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) and computes the fare and deducts the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) and computes the fare and deducts the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling Valid Non-Adult Concession on Farecard",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the customer's Farecard has a Valid Non-Adult concession and processes the fare payment accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Open Payments Media on Deny List",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Open Payments Media on Local Deny List and Device Offline",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Multiple NFC Media Presented at Once",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Device in Out-of-Service State",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state, the Not In Service Screen is provided to the cardholder and the device does not detect the media. The device should remain in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Error Occurrence During Tap",
        "Test_Sce_Description": "Verify that when an error occurs on the device that does not cover the exception cases above, the device records the tap. The Declined \u2013 See Customer Service Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Open Payments Media Not on Approved List in Beta Mode",
        "Test_Sce_Description": "Verify that when a customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Anti-passback Functionality",
        "Test_Sce_Description": "Verify that when a customer attempts to tap-on immediately after tapping-off at the same station and the device is online, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Anti-passback Functionality Offline",
        "Test_Sce_Description": "Verify that when a customer attempts to tap-on immediately after tapping-off at the same station and the device is offline, the device should not allow the tap and should provide the appropriate feedback to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Multiple NFC media presented at once",
        "Test_Sce_Description": "This scenario tests the functionality of the device when multiple NFC media are presented to the card reader at the same time. The device should block all user functionality and present an Anti-Collision toast message to the customer. An error should be captured and logged in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Non-activated Farecard tapped on device",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a non-activated Farecard is tapped on it. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction due to inactive farecard. An error should be captured and logged in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Farecard reading error",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard reading error occurs. The device should not provide any feedback and screen remains \u201cIn-Service\u201d display. An error should be captured and logged in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Farecard write error",
        "Test_Sce_Description": "This scenario tests the functionality of the device when it fails to write to the Farecard. The device should not provide any feedback and screen remains \u201cIn-Service\u201d display. The device should delete the transaction information. An error should be captured and logged in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Device in Out-of-Service state",
        "Test_Sce_Description": "This scenario tests the functionality of the device when it is in Out-of-Service state. The device should display the Not in Service screen to the cardholder and not detect the media."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Tap-on immediately after tapping-off at the same station",
        "Test_Sce_Description": "This scenario tests the functionality of the device when the cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-off anti-passback Window. The device should provide the cardholder with the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Tap-on immediately after tapping-off at the same station and the device is offline",
        "Test_Sce_Description": "This scenario tests the functionality of the device when the cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool tap-off anti-passback Window and the device is offline. The device should provide the cardholder with the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Error occurred on the device",
        "Test_Sce_Description": "This scenario tests the functionality of the device when an error has occurred on the device that does not cover the exception cases above. The device should record the tap and provide the cardholder with the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Virtual Card has insufficient E-Purse to cover the Tap-On Fare",
        "Test_Sce_Description": "This scenario tests the functionality of the device when the Virtual Card has insufficient E-Purse to cover the Tap-On Fare. The device should record the tap and provide the cardholder with the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Open Payments Media tap when SA Tool is in Out-of-Service state",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader. The expected outcome is that the device will not detect the media and will remain in the Out-of-Service state."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Farecard reversals only configuration",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is configured for only farecard reversals. The expected outcome is that when a customer attempts to tap their Open Payments Media on the card reader, the 'Only Available for Farecard' error message is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Open Payments media not on the approved media list",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when an Open Payments media that is not on the approved media list is tapped on the device while the device is in Pilot mode. The expected outcome is that the 'Declined \u2013 Not Accepted, Tap Farecard' screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Open Payments Media on the BIN Blocking List",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Open Payments Media is on the BIN Blocking List. The expected outcome is that the device plays the decline audio tone and displays the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing fare payment reversal with Interac Card while Interac is disabled",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to reverse fare payment with Interac Card while Interac is disabled on SA Tool. The expected outcome is that the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing fare payment reversal with Open Payment Card while Open Payments are disabled",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to reverse fare payment with Open Payment Card while Open Payments are disabled on SA Tool. The expected outcome is that the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing fare payment reversal with Open Payment Card while corresponding payment method / card brand is disabled",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to reverse fare payment with Open Payment Card while the corresponding payment method / card brand is disabled on SA Tool. The expected outcome is that the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing SA Tool in Standby State",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Standby state. The expected outcome is that the screen is turned off and the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing SA Tool in Revenue Mode",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Revenue Mode. The expected outcome is that the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing SA Tool in Training Mode",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Training Mode. The expected outcome is that the operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Error Occurrence on Device",
        "Test_Sce_Description": "This scenario tests the functionality of the device when an error occurs that does not cover the exception cases. The device should record the tap, provide the 'Declined \u2013 See Customer Service Screen' to the cardholder, and log the error in the background and in the SOTI logs. The declined tap should then be sent to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Insufficient E-Purse Balance",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a Virtual Card\u2019s E-Purse balance is less than that of the Tap-On Fare. The device should send the tap to ATS which returns a response that the virtual card does not have a sufficient E-Purse balance to cover the tap-on fare. The 'Declined \u2013 Insufficient E-Purse Balance' should be provided to the cardholder, and the error should be logged in the background and in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Virtual Card Media on Online Hotlist",
        "Test_Sce_Description": "This scenario tests the functionality of the device when the Virtual Card media is on the online hotlist. The device should send the tap to ATS and return a response that the media is on the online hotlist. The 'Declined \u2013 Blocked Screen' should be provided to the cardholder, and the device should update the blocking parameter on the Virtual Card Scratchpad to be enabled."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Virtual Card Media on Local Hotlist",
        "Test_Sce_Description": "This scenario tests the functionality of the device when the Virtual Card media is on the local hotlist and the device is offline. The device should record the tap, provide the 'Declined \u2013 Please Contact Customer Service' screen to the cardholder, and send the declined tap to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Open Payments Media Not on Approved List",
        "Test_Sce_Description": "This scenario tests the functionality of the device when an Open Payments media that is not on the approved media list is tapped on the device. The device should check the approved media list and if the media is not found, the 'Declined \u2013 Not Accepted, Tap Farecard' screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Open Payments Media on BIN Blocking List",
        "Test_Sce_Description": "This scenario tests the functionality of the device when the Open Payments Media is on the BIN Blocking List. The device should check its local BIN Blocking list and if the card\u2019s BIN is found to be on the list, the 'Declined \u2013 Try Another Card (BIN Blocked)' screen should be displayed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Interac Card in Debt",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a customer is travelling with an Interac Card, and ATS returns a decline response due to Media In Debt. The device should send the tap to ATS and return a response that the Interac media is on the deny list. The 'Declined \u2013 Tap Again (in X Seconds)' screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Interac Card Disabled on SA Tool",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a customer taps an Interac Card while Interac is disabled on SA Tool. The device should detect the Interac media, determine that the media tapped is not supported, and display an error message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Open Payment Card Disabled on SA Tool",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a customer taps an Open Payment Card while Open Payments are disabled on SA Tool. The device should detect the Open Payment Card, determine that the media tapped is not supported, and display an error message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Open Payments Media on Deny List",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Open Payments Media on Local Deny List and Device Offline",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Multiple NFC Media Presented at Once",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Tap Open Payments Media when Device is Out-of-Service",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State. The Not In Service Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Error Occurred on Device",
        "Test_Sce_Description": "Verify that when an error has occurred on the device that does not cover the exception cases above, the device records the tap. The Declined \u2013 See Customer Service Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Tap Open Payments Media not on Approved Media List in Beta Mode",
        "Test_Sce_Description": "Verify that when a customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Tap-on Immediately After Tapping-off at Same Station (Anti-passback)",
        "Test_Sce_Description": "Verify that when a cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly identify the invalidity of the pass, compute the fare to be deducted from the e-Purse, and allow the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with an anonymous farecard, an expired period pass, and an ePurse balance less than the fare amount attempts to make a transaction. The system should decline the transaction and display an appropriate message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a blocked farecard attempts to make a transaction. The system should decline the transaction and display an appropriate message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard on Deny List",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a farecard on the Deny List attempts to make a transaction. The system should remove the card from the Deny List, set it to blocked, decline the transaction, and display an appropriate message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Low Battery Threshold During Payment",
        "Test_Sce_Description": "This scenario is to validate the system's performance when the battery goes below the low battery threshold during a successful Farecard tap. The system should be able to process the remote lists even after the battery goes below the threshold."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the validity of the pass and allow the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a farecard with a valid Child concession attempts to make a transaction. The system should display the successful Child Transit Pass fare payment screen and play the successful fare payment audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the system's response when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass within valid time",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the valid time. The system should correctly identify the pass and deduct the fare from the e-Purse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass outside the valid time but with sufficient e-Purse balance. The system should correctly identify the pass, compute the value to be deducted from the e-Purse, and deduct the fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from an anonymous virtual card with an expired period pass and ePurse balance less than the fare amount. The system should correctly identify the card, compute the balance, and return a declined result."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked virtual card. The system should correctly identify the card status and return a declined result."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a virtual card on the Deny List. The system should correctly identify the card status, remove the card from the Deny List, set it to blocked, and return a declined result."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should be able to process the remote lists even after the battery goes below the threshold."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass within valid time",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a farecard with a valid Limited Period Pass within the valid time. The system should correctly identify the pass and deduct the fare from the e-Purse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a farecard with a valid Limited Period Pass outside the valid time but with sufficient e-Purse balance. The system should correctly identify the pass, compute the value to be deducted from the e-Purse, and deduct the fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a farecard with a valid Child concession. The system should correctly identify the concession and display the successful Child Transit Pass fare payment screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a fare payment results from a failed inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from an anonymous farecard with an expired period pass and ePurse balance less than the fare amount. The system should correctly identify the card, compute the balance, and return a declined result."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer\u2019s Farecard is Blocked",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked farecard. The system should correctly identify the card status and return a declined result."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product. The system should successfully accept the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring outside of the time limit of the Limited Period Pass Product but the farecard has sufficient e-Purse balance to cover the transaction. The system should successfully deduct the fare from the e-Purse and accept the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Validating fare payment with expired period pass and insufficient ePurse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the customer has an expired period pass and the ePurse balance is less than the fare amount. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Validating fare payment with blocked Virtual Card",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the customer\u2019s Farecard is blocked. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Validating fare payment with Virtual Card on the Deny List",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the customer\u2019s Virtual Card is on the Deny List. The system should remove the card from the Deny List, set it to blocked, decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Validating fare payment when battery goes below the low battery threshold during payment",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the low battery threshold is high enough that the remote lists can be processed even after the SA Tool battery goes below the low battery threshold during a successful Farecard tap. The system should successfully process the remote lists and accept the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Validating fare payment when tap counter is at the configured limit",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the tap counter is at the configured limit. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Validating fare payment with unreadable Virtual Card",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the SA Tool application detects the Virtual Card and fails to read it correctly. The system should indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Validating fare payment with expired period pass and sufficient ePurse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the customer\u2019s Virtual Card has an expired period pass and the ePurse balance is more than the fare amount. The system should successfully deduct the fare from the e-Purse and accept the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Valid Limited Period Pass within time limit",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within its time limit. The system should correctly identify the pass as valid and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Valid Limited Period Pass outside time limit with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass outside its time limit but with sufficient e-Purse balance. The system should correctly identify the pass as invalid for the current time, compute the fare to be deducted from the e-Purse, and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Expired Period Pass and ePurse Balance Less than the Fare Amount",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from an anonymous virtual card with an expired period pass and ePurse balance less than the fare amount. The system should correctly identify the pass as expired and the ePurse balance as insufficient, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Virtual Card on the Deny List",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a virtual card on the Deny List. The system should correctly identify the card as being on the Deny List, remove it from the list, set it to blocked, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Low Battery Threshold during Payment",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should be able to process the remote lists even after the battery goes below the threshold during a successful farecard tap."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Anonymous Farecard with Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from an anonymous farecard with an ePurse balance less than the fare amount. The system should correctly identify the card as anonymous and the ePurse balance as insufficient, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked farecard. The system should correctly identify the card as blocked and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Farecard on the Hotlist",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a farecard on the hotlist. The system should correctly identify the card as being on the hotlist, update its status to blocked, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Non-activated Card",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a non-activated card. The system should correctly identify the card as not activated and not on the action list available on the device, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Card within the Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a card within the Anti-Passback Window. The system should correctly identify the card as within the Anti-Passback Window and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Virtual Card is Blocked",
        "Test_Sce_Description": "This scenario tests the functionality of the system when a customer's virtual card is blocked. The system should detect the blocked card, decline the transaction, and display a declined message to the customer. The SA Tool should also play a declined audio tone and update the Scratchpad accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Virtual Card is on the Deny List",
        "Test_Sce_Description": "This scenario tests the system's response when a customer's virtual card is on the Deny List. The system should detect the card on the Deny List, remove it from the list, set it to blocked, and decline the transaction. The SA Tool should display a declined message to the customer, play a declined audio tone, and update the Scratchpad."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Low Battery Threshold during Payment",
        "Test_Sce_Description": "This scenario tests the system's performance when the battery goes below the low battery threshold during payment. The system should be able to process the remote lists even after the battery goes below the threshold. If the threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Card is not a Farecard",
        "Test_Sce_Description": "This scenario tests the system's response when a customer taps a card that is not a Farecard. The SA Tool application should not respond, but the device should display a \u201cCard Read Error\u201d message for a short period of time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Card is within the Anti-Passback Window",
        "Test_Sce_Description": "This scenario tests the system's response when a customer's card is within the Anti-Passback Window. The system should detect that the Farecard fails the Anti-Passback checks, decline the transaction, and display a declined message to the customer. The SA Tool should also play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled",
        "Test_Sce_Description": "This scenario tests the system's response when the Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled. The system should not confer the right to travel and there should be no interaction with the device on an attempted tap."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Tap counter is greater than the allowable offline taps",
        "Test_Sce_Description": "This scenario tests the system's response when the tap counter is greater than the allowable offline taps. The system should collect offline tap details and once the device returns back online, offline taps should be sent to ATS via bulk upload. If the Virtual Media has reached its offline tap counter limit, the right to travel should not be conferred."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "E-Ticket holder scans QR Code against the SA Tool reader and the SA Tool is Offline",
        "Test_Sce_Description": "This scenario tests the system's response when an E-Ticket holder scans QR Code against the SA Tool reader and the SA Tool is Offline. The system should cache the result in an offline database to be uploaded to Bytemark API when connection is resumed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader",
        "Test_Sce_Description": "This scenario tests the system's response when an E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader. The system should validate the Group QR Code and confer the right to travel to the E-Ticket holder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Anonymous Farecard with Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the SA Tool application correctly identifies an anonymous Farecard with an ePurse balance less than the fare amount, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Check that the SA Tool application correctly identifies a blocked Farecard, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Farecard on the Hotlist",
        "Test_Sce_Description": "Ensure that the SA Tool application correctly identifies a Farecard on the hotlist, updates the card\u2019s status to blocked, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Verify that the application switches to \u201cOut of Service\u201d mode if the low battery threshold is reached before Step 5. If not, the customers fare payment is processed as per Step 5 and then the application switches to \u201cOut of Service\u201d mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Non-Farecard Tap",
        "Test_Sce_Description": "Check that the SA Tool displays the \u201cCard Read Error\u201d toast message for a short period of time when a card that is not a Farecard is tapped."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Farecard within the Anti-Passback Window",
        "Test_Sce_Description": "Ensure that the device correctly detects that the Farecard fails the Anti-Passback checks, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Non-Activated Card Tap",
        "Test_Sce_Description": "Verify that the device correctly detects that the Farecard is not activated, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Limited Period Pass outside of valid time while card is in overdraft",
        "Test_Sce_Description": "Check that the SA Tool correctly detects that the Limited Period Pass is not valid at the current time, computes the value to be deducted from the e-Purse, detects that farecard is in overdraft, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Locked Farecard",
        "Test_Sce_Description": "Ensure that the SA Tool correctly reads the Farecard and determines that it is locked, displays a declined screen to the operator and does not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Low Battery Threshold Test",
        "Test_Sce_Description": "This test scenario is designed to verify the functionality of the application when the battery goes below the low battery threshold during a successful Farecard tap. The test will check if the application switches to 'Out of Service' mode when the low battery threshold is reached before Step 5. If not, the test will verify if the customer's fare payment is processed as per Step 5 before the application switches to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Farecard Block Test",
        "Test_Sce_Description": "This test scenario is designed to verify the functionality of the application when the customer's Virtual Card is blocked. The test will check if the SA Tool application reads Scratchpad and detects that the Farecard is blocked, and if it displays a declined message to the customer and plays the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Deny List Test",
        "Test_Sce_Description": "This test scenario is designed to verify the functionality of the application when the customer's Virtual Card is on the Deny List. The test will check if the device reads the Scratchpad and detects the Virtual Card is on the local Deny List, and if it displays a declined message to the customer and plays the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Non-Farecard Test",
        "Test_Sce_Description": "This test scenario is designed to verify the functionality of the application when the customer taps a card that is not a Farecard. The test will check if the SA Tool application does not respond, and if the device error message 'Card Read Error' is displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Anti-Passback Window Test",
        "Test_Sce_Description": "This test scenario is designed to verify the functionality of the application when the customer's card is within the Anti-Passback Window. The test will check if the SA Tool application detects that the Farecard fails the Anti-Passback checks, and if it displays a declined message to the customer and plays the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "This test scenario is designed to verify the performance of the application under different conditions such as low battery, blocked Farecard, and when the Farecard is on the Deny List. The test will measure the response time of the application in these scenarios."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "This test scenario is designed to verify the security features of the application. The test will check if the application properly encrypts and protects the customer's Farecard information, and if it properly handles blocked Farecards and Farecards on the Deny List."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Test the scenario where the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer will tap on the NFC reader again. If the tap is successful, steps 4 \u2013 7 will be conducted. If the tap is unsuccessful, the SA Tool application will indicate to the operator that the CLIENT (Virtual) Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "ePurse Balance Less Than the Fare Amount",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS checks the online hotlist and completes the fare processing. ATS removes the fare from the Virtual Card e-Purse and puts the card into overdraft."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Intra-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Inter-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product from other service provider. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Incorrect Farecard Type",
        "Test_Sce_Description": "Test the scenario where the Farecard tapped is the incorrect Farecard type for the Mode. The SA Tool application should identify the Farecard Type to be incorrect for the mode the operator is currently operating in."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Non-Farecard tapped to the reader",
        "Test_Sce_Description": "Test the scenario where the Card tapped to reader is a Non-Farecard. The SA Tool application should identify the card to be a non-Farecard and displays an error pop up message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Failure to read Virtual Card",
        "Test_Sce_Description": "Test the scenario where the SA Tool application detects the Virtual Card and fails to read it correctly. The NFC reader detects the Virtual Card but is unable to read it. SA Tool application should indicate to the operator that the Virtual Card read has failed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Non-Virtual Card tapped to the reader",
        "Test_Sce_Description": "Test the scenario where the Card tapped to reader is a Non-Virtual Card. The SA Tool application should identify the card to be a non-Virtual Card and displays an error pop up message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Farecard is blocked. The SA Tool application should detect that the Farecard is blocked."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Ineligible Products",
        "Test_Sce_Description": "Test the scenario where the SA Tool shopping cart has ineligible products. The device should display an error confirming that one or more of the products are not available for sale."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "ATS failure to load products",
        "Test_Sce_Description": "Test the scenario where the ATS is unable to load products to the customer\u2019s account. The SA Tool should inform operator that the products purchased were not added to the user\u2019s account."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Testing Anti-Passback Window functionality",
        "Test_Sce_Description": "This scenario will test the functionality of the Anti-Passback Window. The test will ensure that the system correctly identifies when a customer's card is within the Anti-Passback Window and appropriately declines the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Testing Offline SA Tool functionality",
        "Test_Sce_Description": "This scenario will test the functionality of the Offline SA Tool. The test will ensure that the SA Tool can successfully accept fare payments from a Virtual Card while offline, and that it correctly stores the fare/pay request to be uploaded to ATS when the device comes back online."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Testing Virtual Card validation checks",
        "Test_Sce_Description": "This scenario will test the validation checks performed by the SA Tool on a Virtual Card. The test will ensure that the SA Tool correctly checks the card against the local Deny List, checks the Scratchpad to determine if the card status is Blocked and/or the Offline Tap Counter is exceeded, and checks the local anti-passback."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Testing successful fare payment screen and audio tone",
        "Test_Sce_Description": "This scenario will test the successful fare payment screen and audio tone. The test will ensure that the SA Tool correctly displays the successful fare payment screen and plays the successful payment audio tone when a fare payment is successful."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Testing declined message and audio tone",
        "Test_Sce_Description": "This scenario will test the declined message and audio tone. The test will ensure that the SA Tool correctly displays a declined message and plays the declined audio tone when a transaction is not conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Testing functionality when Farecard is not activated",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a Farecard is not activated. The test will ensure that the SA Tool correctly detects that the Farecard is not activated and appropriately declines the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Testing functionality when Farecard is locked",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a Farecard is locked. The test will ensure that the SA Tool correctly detects that the Farecard is locked and appropriately declines the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Testing functionality when Limited Period Pass is outside of valid time",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a Limited Period Pass is outside of its valid time. The test will ensure that the SA Tool correctly detects that the Limited Period Pass is not valid at the current time and appropriately declines the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Testing performance of SA Tool",
        "Test_Sce_Description": "This scenario will test the performance of the SA Tool. The test will ensure that the SA Tool can handle a large number of transactions in a short period of time without any performance degradation."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Testing security of SA Tool",
        "Test_Sce_Description": "This scenario will test the security of the SA Tool. The test will ensure that the SA Tool correctly encrypts all sensitive data and that it is not susceptible to common security vulnerabilities."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Incorrect Farecard Type",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when an incorrect Farecard type is tapped. The SA Tool should be able to identify the incorrect Farecard type and notify the operator. The use case should terminate after the notification."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Non-Farecard Tapped",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a non-Farecard is tapped. The SA Tool should be able to identify the card as a non-Farecard and display an error pop-up message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Failure to Read Virtual Card",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it fails to read a Virtual Card. The SA Tool should indicate to the operator that the Virtual Card read has failed. The operator should be able to close the error prompt and tap the card to try again."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Non-Virtual Card Tapped",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a non-Virtual Card is tapped. The SA Tool should be able to identify the card as a non-Virtual Card and display an error pop-up message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a blocked Farecard is tapped. The SA Tool should be able to detect that the Farecard is blocked and display the Farecard query screen indicating that the Farecard has been blocked."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Virtual Card \u2013 Ineligible Products",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it has ineligible products in the shopping cart. The device should display an error confirming that one or more of the products are not available for sale."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "ATS Failure to Load Products",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the ATS fails to load products to the customer\u2019s account. The SA Tool should inform the operator that the products purchased were not added to the user\u2019s account."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Farecard Tapped-Off at Same Location",
        "Test_Sce_Description": "This scenario will test the functionality of the device when the Farecard is tapped-off at the same location where tap-on occurred. The device should provide the cardholder with the appropriate feedback without updating the Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "This scenario will test the functionality of the device when a blocked Farecard is tapped. The device should detect that the Farecard is blocked and provide the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "This scenario will test the functionality of the device when the time since tap-on exceeds the Max Travel Duration. The device should auto-settle the Underpayment and open a new trip."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Multiple NFC Media Presented",
        "Test_Sce_Description": "This scenario will test the functionality of the device when multiple NFC media are presented at one time. The device should block all fare payment functionality and present Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Non-Activated Farecard Tapped",
        "Test_Sce_Description": "This scenario will test the functionality of the device when a non-activated Farecard is tapped. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "This scenario will test the functionality of the device when a Card reading error occurs. The device should provide feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Incorrect Farecard Type",
        "Test_Sce_Description": "Verify that the system correctly identifies and notifies the operator when the Farecard type is incorrect for the current mode. The system should terminate the use case upon detection of the incorrect Farecard type."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Non-Farecard Tapped",
        "Test_Sce_Description": "Validate that the system correctly identifies when a non-Farecard is tapped to the reader and displays an appropriate error message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Failure to Read Virtual Card",
        "Test_Sce_Description": "Ensure that the system correctly detects when it fails to read a Virtual Card and provides appropriate feedback to the operator. The operator should be able to attempt to read the card again."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Non-Virtual Card Tapped",
        "Test_Sce_Description": "Verify that the system correctly identifies when a non-Virtual Card is tapped to the reader and displays an appropriate error message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Blocked/Hotlisted Farecard",
        "Test_Sce_Description": "Validate that the system correctly detects when a Farecard is blocked and provides appropriate feedback to the operator. The operator should not be able to take any further actions on the Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Ineligible Products in Shopping Cart",
        "Test_Sce_Description": "Ensure that the system correctly identifies when ineligible products are added to the shopping cart and provides appropriate feedback to the operator. The operator should be able to remove the ineligible products and reattempt the shopping flow."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "ATS Failure to Load Products",
        "Test_Sce_Description": "Verify that the system correctly identifies when ATS fails to load products to the customer\u2019s account and provides appropriate feedback to the operator. The operator should be able to attempt the checkout again or provide the customer a refund if the customer paid with cash."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Farecard Tapped-Off at Same Location",
        "Test_Sce_Description": "Validate that the system correctly detects when the Farecard is tapped-off at the same location where tap-on occurred and provides appropriate feedback to the cardholder without updating the Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Ensure that the system correctly detects when a Farecard is blocked and does not confer the right to travel. The system should provide appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "Verify that the system correctly detects when the time since tap-on exceeds the Max Travel Duration, auto-settles the Underpayment, and opens a new trip."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Multiple NFC Media Presented",
        "Test_Sce_Description": "Validate that the system correctly blocks all fare payment functionality when multiple NFC media are presented to the device at one time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Non-Activated Farecard Tapped",
        "Test_Sce_Description": "Ensure that the system correctly detects when a non-activated Farecard is tapped on the device and provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "Verify that the system correctly detects when a Card reading error occurs (e.g. Farecard is immediately removed from the card reader) and provides appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Test the scenario where the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer will tap on the NFC reader again. If the tap is unsuccessful, the application should again indicate that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "Test the scenario where the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Fare Payment with ePurse Balance Less Than the Fare Amount",
        "Test_Sce_Description": "Test the scenario where the customer's ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS should check the online hotlist, complete the fare processing, remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Transaction within Intra-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer's Virtual Card has a valid transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card, and the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Transaction within Inter-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer's Virtual Card has a valid transfer product from other service provider. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card, and the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Virtual Card Authentication Failure",
        "Test_Sce_Description": "Test the scenario where the Virtual Card Media fails the Card Authentication check. The device should return the appropriate feedback, and the Declined \u2013 Contact CLIENT Customer Service screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Multiple NFC media presented at once",
        "Test_Sce_Description": "Test the scenario where multiple NFC media are presented to the device at one time. The device should block all fare payment functionality, and the Anti-Collision Error Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Device in Out-of-Service state",
        "Test_Sce_Description": "Test the scenario where the device is in Out-of-Service state. The device should display the Not in Service screen to the cardholder, and should not detect the media."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Error Occurrence",
        "Test_Sce_Description": "Test the scenario where an error has occurred on the device. The device should record the tap, and the Declined \u2013 See Customer Service Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Virtual Card on Local Hotlist and Device Offline",
        "Test_Sce_Description": "Test the scenario where the Virtual Card Media is on the local hotlist and the device is offline. The device should check the local hotlist and return a response that the media is denied. The right to travel should not be conferred, and the Declined \u2013 Blocked Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Virtual Card Blocked Parameter Enabled",
        "Test_Sce_Description": "Test the scenario where the Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled. The device should check the local hotlist and return a response that the media is denied. The right to travel should not be conferred, and the Declined \u2013 Blocked Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Sce_Description": "This scenario will test the functionality of the system when a virtual card with a default trip is tapped at either the origin or destination station. The system should recognize the default trip, display the default trip success screen, and confer the right to travel to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Sce_Description": "This scenario will test the functionality of the system when a virtual card with a default trip is tapped at either the origin or destination station, but the customer overrides the default trip prior to tapping on. The system should recognize the override, process the tap as a regular tap-on, and confer the right to travel to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Sce_Description": "This scenario will test the functionality of the system when a virtual card without a default trip is tapped on while the device is in Override mode. The system should process the tap as a regular tap-on and confer the right to travel to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Tap a Virtual Card on online SA Tool where card is in good standing, but scratchpad blocked parameter needs to be updated",
        "Test_Sce_Description": "This scenario will test the functionality of the system when a virtual card in good standing is tapped on an online SA Tool, but the scratchpad blocked parameter needs to be updated. The system should provide appropriate feedback to the cardholder, check and reset the tap counter, and update the Virtual Card scratchpad to remove the block parameter."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Media fails Card Authentication check",
        "Test_Sce_Description": "This scenario will test the functionality of the system when a virtual card fails the Card Authentication check. The system should provide appropriate feedback to the cardholder, capture and log an error, and send the declined tap to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Media has already tapped-on using an Online Device",
        "Test_Sce_Description": "This scenario will test the functionality of the system when a virtual card has already been tapped on using an online device. The system should provide appropriate feedback to the cardholder, capture and log an error, and send the declined tap to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Media has already tapped-on using an Offline Device (Anti-passback)",
        "Test_Sce_Description": "This scenario will test the functionality of the system when a virtual card has already been tapped on using an offline device. The system should provide appropriate feedback to the cardholder, capture and log an error, and send the declined tap to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Multiple NFC media are presented to the device at one time",
        "Test_Sce_Description": "This scenario will test the functionality of the system when multiple NFC media are presented to the device at one time. The system should block all fare payment functionality, provide appropriate feedback to the cardholder, capture and log an error, and send the declined tap to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Tap a Virtual Card Media when SA Tool is in Out-of-Service state",
        "Test_Sce_Description": "This scenario will test the functionality of the system when a virtual card is tapped on an SA Tool that is in an out-of-service state. The system should provide appropriate feedback to the cardholder, capture and log an error, and send the declined tap to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Scnario": "Check Virtual Card Media\u2019s scratchpad blocked parameter",
        "Test_Sce_Description": "Verify that the Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled. If the Virtual Card Media is blocked, the right to travel should not be conferred."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Scnario": "Check local hotlist for Virtual Card",
        "Test_Sce_Description": "Verify that the device checks the local hotlist and does not find the Virtual Card. The device should then check the Virtual Card Scratchpad and determine the card blocked parameter is set to true."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Scnario": "Check error logging",
        "Test_Sce_Description": "Verify that an error is captured and logged in the background when a card is blocked. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Scnario": "Check Virtual Card Media\u2019s mobile wallet blocked parameter",
        "Test_Sce_Description": "Verify that the Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled. If the Virtual Card Media is blocked in the wallet, there should not be an interaction with the device on an attempted tap."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Scnario": "Check tap counter for offline device",
        "Test_Sce_Description": "Verify that if the tap counter is greater than the allowable offline taps, the right to travel is not conferred. The device should check the tap counter and if the tap counter limit has been reached, the offline device should reject the tap and the rider should not be permitted entry."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Scnario": "Check E-Ticket validation",
        "Test_Sce_Description": "Verify that the E-Ticket holder can scan the QR Code on their E-Ticket against the SA tool\u2019s barcode reader to validate the Ticket in Fare Payment Mode. The device should perform a check to ensure that the E-Ticket meets timestamp window requirements and is not on the deny list."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Scnario": "Check Bytemark API call",
        "Test_Sce_Description": "Verify that the device calls the Bytemark API and receives a response that the E-Ticket is valid for travel. The first word of the label name should be used as the concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Scnario": "Check offline Bytemark API call",
        "Test_Sce_Description": "Verify that if the device is offline, the call to the Bytemark backend will fail and be unable to retrieve details regarding the E-Ticket. The result should be cached in an offline database to be uploaded to Bytemark API when connection is resumed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Scnario": "Check Group QR Code scan",
        "Test_Sce_Description": "Verify that the E-Ticket holder can scan a Group QR Code at the SA Tool Barcode Reader. The device should be able to process the Group QR Code and provide the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "ATS failure to load products",
        "Test_Sce_Description": "This scenario will test the system's response when ATS fails to load products onto a customer\u2019s account after checkout. The system should inform the operator that the products purchased were not added to the user\u2019s account. The operator should then have the option to attempt the checkout again or provide the customer a refund if the customer paid with cash."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "SVC / VC Shopping Cart",
        "Test_Sce_Description": "This scenario will test the system's response when the shopping cart includes both SVC and VC products. The system should not allow both SVC and VC products in the shopping cart at the same time. If the cart has ineligible products, the Operator should receive an error providing them the option to clear the cart."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "ECP is disabled and Customer\u2019s Artemis device is locked or asleep",
        "Test_Sce_Description": "This scenario will test the system's response when the user\u2019s device is locked or asleep and ECP is disabled for the users Virtual Card. The system should prompt the user to provide authentication for their Virtual Card media on their Artemis device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is disabled",
        "Test_Sce_Description": "This scenario will test the system's response when the user\u2019s mobile device is in Power Reserve mode and ECP is disabled on the mobile device for the users Virtual Card. The system should prompt the user to charge their device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "Virtual Card Media fails the Card Authentication check",
        "Test_Sce_Description": "This scenario will test the system's response when the Virtual Card Media fails the Card Authentication check. The system should return the appropriate feedback and the Declined \u2013 Contact CLIENT Customer Service screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "Multiple NFC media are presented to the device at one time",
        "Test_Sce_Description": "This scenario will test the system's response when multiple NFC media are presented to the device at one time. The system should block all fare payment functionality and the Anti-Collision Error Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "Tap-off a Virtual Card Media when SA Tool is in Out-of-Service state",
        "Test_Sce_Description": "This scenario will test the system's response when the device is in Out-of-Service state and a customer attempts to tap their Virtual Card Media on the card reader. The device should not detect the media and remain in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "An error has occurred",
        "Test_Sce_Description": "This scenario will test the system's response when an error has occurred on the device that does not cover the exception cases above. The system should record the tap and the Declined \u2013 See Customer Service Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "Virtual Card Media is on the local hotlist and device is offline",
        "Test_Sce_Description": "This scenario will test the system's response when the Virtual Card Media is on the local hotlist and the device is offline. The system should check the local hotlist and return a response that the media is denied. The right to travel should not be conferred and the Declined \u2013 Blocked Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "Virtual Card Media\u2019s blocked parameter on the scratchpad is enabled",
        "Test_Sce_Description": "This scenario will test the system's response when the Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled. The system should deny the right to travel and the Declined \u2013 Blocked Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "ATS Failure to Load Products",
        "Test_Sce_Description": "This scenario tests the system's response when ATS fails to load products onto a customer's account after checkout. The system should inform the operator that the products purchased were not added to the user's account. The operator should then have the option to attempt the checkout again or provide the customer a refund if the customer paid with cash."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "SVC/VC Shopping Cart Validation",
        "Test_Sce_Description": "This scenario tests the system's ability to validate the shopping cart contents. The shopping cart should only include Virtual Card or Stored Value Card Products. The system should not allow both SVC and VC products in the shopping cart at the same time. If the cart has ineligible products, the Operator should receive an error providing them the option to clear the cart."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "ECP Disabled and Artemis Device Locked or Asleep",
        "Test_Sce_Description": "This scenario tests the system's response when the customer's Artemis device is locked or asleep and ECP is disabled. The system should not detect the virtual card media and the screen should remain the same. The Artemis device should prompt the user to provide authentication."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "Artemis Device in Power Reserve Mode and ECP Disabled",
        "Test_Sce_Description": "This scenario tests the system's response when the customer's Artemis device is in Power Reserve mode and ECP is disabled. The system should not detect the virtual card media and the screen should remain the same. The Artemis device should prompt the user to charge their device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "Device Offline and Not Connected to ATS",
        "Test_Sce_Description": "This scenario tests the system's ability to handle transactions when the device is offline and not connected to ATS. The device should check the local deny list and store the tap till the device goes back online and connects to ATS. The tap should then be rated in ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "Open Payments Media Fails ODA Check",
        "Test_Sce_Description": "This scenario tests the system's ability to validate Open Payments Media. If an Open Payments Media fails the ODA check, the device should return the appropriate feedback and provide the Declined \u2013 Failed ODA Check Screen to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "This scenario tests the system's ability to validate the expiry of Open Payments Media. If an Open Payments Media fails the Expiry Check, the device should return the appropriate feedback and provide the Declined \u2013 Card Expired Screen to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "Open Payments Media Already Tapped-On Using an Online Device within Anti-Passback Window",
        "Test_Sce_Description": "This scenario tests the system's ability to handle situations where the cardholder taps-on again at the same station within the anti-passback Window. The device should provide the Declined \u2013 Already Tapped Screen to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "Open Payments Media Already Tapped-On Using an Offline Device",
        "Test_Sce_Description": "This scenario tests the system's ability to handle situations where the cardholder taps-on again at the same station within the anti-passback Window and the device is offline. The device should provide the Declined \u2013 Already Tapped Screen to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "Open Payments Media on the ATS Deny List and the SA Tool is Online",
        "Test_Sce_Description": "This scenario tests the system's ability to handle situations where the Open Payments Media is on the deny list and the SA Tool is online. The device should provide the appropriate feedback to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Load or Action Transaction Processing",
        "Test_Sce_Description": "Verify that the device processes the Load or Action Transaction prior to continuing the validation Use Case. This is to ensure that the load value or action is processed correctly before the fare validation is performed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Feedback to Cardholder",
        "Test_Sce_Description": "Verify that the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to a List Item processing. This is to ensure that the cardholder is informed about the transaction status and any list item processing."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Transfer Discount Application",
        "Test_Sce_Description": "Verify that the Tap-On Fare configured on the device as well as the Underpayment Value is reduced to account for the Transfer Discount when a valid transfer product is contained on the Farecard. This is to ensure that the transfer discount is applied correctly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Full Fare Deduction for Default O/D",
        "Test_Sce_Description": "Verify that the Device deducts the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip when a default O/D is on the Farecard. This is to ensure that the full fare is deducted correctly when a default O/D is present."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Default Trip Override",
        "Test_Sce_Description": "Verify that the Device overrides the default O/D contained on the Farecard and processes the tap as a regular tap-on when the customer requests the override of a Default Trip. This is to ensure that the default trip override function works correctly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Underpayment Deduction",
        "Test_Sce_Description": "Verify that the Device deducts the Underpayment Value from the Farecard E-Purse prior to performing the Fare Validation when the Farecard has a value contained in the Underpayment Block. This is to ensure that the underpayment value is deducted correctly before the fare validation is performed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Non-Revenue Farecard Processing",
        "Test_Sce_Description": "Verify that the device displays a declined HMI when a Non-Revenue card is tapped in the revenue mode. This is to ensure that non-revenue farecards are only accepted in the training mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Temporal Class Supplement Processing",
        "Test_Sce_Description": "Verify that the device processes the fare payment correctly when the Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement. This is to ensure that the temporal class supplement is taken into account during fare payment processing."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the device computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap (outside the transfer window). This is to ensure that the fare payment is processed correctly in this scenario."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Fare Payment on Premium Service Route with Transfer",
        "Test_Sce_Description": "Verify that the device computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route (within the transfer window). This is to ensure that the fare payment is processed correctly in this scenario."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Fare-by-Zone transaction processing",
        "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Override default O/D",
        "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and process the tap as a regular tap-on when the customer requests the override of a Default Trip by interacting with the Device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Capping discount eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Multiple capping discounts eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS will take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Offline device capping discount eligibility",
        "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules will follow use-case logic outlined in ticketing use cases."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Open Payments Media fails ODA check",
        "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device performs the necessary validation and determines that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Farecard is blocked",
        "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. Card reader detects Farecard is blocked. Right to travel is not conferred. The Device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. Device determines that the Tap-On Time + Max Travel Duration < Current Time. Device Auto-settles the Underpayment and deducts the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Multiple NFC media are presented to the device at one time",
        "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. Customer presents multiple NFC medias to the card reader at once. Device blocks all user functionality, presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Tap a non-activated Farecard on an SA Tool",
        "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. Device detects that the Farecard is not activated. The device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs",
        "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Default O/D Fare-by-Zone Transaction Processing",
        "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. The default trip should use PAR as the card identifier."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Override Default O/D on Open Payments Media",
        "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on when the customer requests the override of a Default Trip by interacting with the Device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Capping Discount Eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list and complete the fare processing. ATS should calculate the capping discount and apply to the fare calculation."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple Capping Discounts Eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list and complete the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS should take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Offline Device Capping Discount Processing",
        "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services. The tap should then be rated in ATS. Capping rules should follow use-case logic outlined in ticketing use cases."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media Fails ODA Check",
        "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device should detect that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Blocked Farecard Processing",
        "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. The Card reader should detect that Farecard is blocked. The Device should provide the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Max Travel Duration Exceeded",
        "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. The Device should determine that the Tap-On Time + Max Travel Duration < Current Time and Auto-settle the Underpayment and deduct the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. The Device should block all user functionality, presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Non-Activated Farecard Processing",
        "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. The Device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device should provide the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains Underpayment from a previous trip",
        "Test_Scnario": "Farecard Tapped Does Not Match",
        "Test_Sce_Description": "This scenario tests the functionality of the system when the Farecard tapped during the write tap does not match the Farecard tapped during the identification tap. The system should display an error message and prompt the operator to tap the correct card in order to proceed. The operator should also have the option to cancel the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains Underpayment from a previous trip",
        "Test_Scnario": "Underpayment Handling",
        "Test_Sce_Description": "This scenario tests the system's ability to handle underpayment situations. The system should detect the underpayment amount during the identification tap. The operator should be able to inform the customer about the underpayment and determine whether the customer has missed a tap off or just tapped on. The system should also allow the operator to waive the underpayment amount and issue a credit voucher."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains Underpayment from a previous trip",
        "Test_Scnario": "Underpayment Handling with Fee",
        "Test_Sce_Description": "This scenario tests the system's ability to handle underpayment situations where the TA charges a fee for underpayment. The system should add an 'underpayment fee' line item to the shopping cart. The operator should have the option to waive the fee. The system should also allow the operator to issue a credit voucher if the underpayment amount is waived."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains Underpayment from a previous trip",
        "Test_Scnario": "Overdraft Handling",
        "Test_Sce_Description": "This scenario tests the system's ability to handle situations where the Farecard is in overdraft. The system should perform two loads - one to bring the Farecard balance to 0, and a second to load the rest. The operator should not have to reverse to a negative balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains Underpayment from a previous trip",
        "Test_Scnario": "Performance of the System",
        "Test_Sce_Description": "This scenario tests the performance of the system in handling different situations like underpayment, overdraft, and mismatched Farecard taps. The system should be able to handle these situations efficiently without any delays or crashes."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard contains Underpayment from a previous trip",
        "Test_Scnario": "Security of the System",
        "Test_Sce_Description": "This scenario tests the security of the system. The system should securely handle all transactions and customer information. There should be no data leaks or unauthorized access to the system."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Non-Revenue Farecard Tapped in Training Mode",
        "Test_Sce_Description": "Validate that the SA tool accepts a Non-Revenue farecard when tapped in the training mode. The tool should process the transaction successfully without any errors."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Non-Revenue Farecard Tapped in Revenue Mode",
        "Test_Sce_Description": "Validate that the SA tool declines a Non-Revenue farecard when tapped in the revenue mode. The tool should display a declined HMI."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Temporal Class Supplement Tap-On",
        "Test_Sce_Description": "Validate that the device reflects the Temporal Class Supplement when a farecard is tapped during a time period that contains an associated Temporal Class Supplement. The device should process the Tap-On Transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Autoload Enabled Farecard Tap-On",
        "Test_Sce_Description": "Validate that when a farecard with Autoload enabled is tapped on a device and the fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Override Default Trip Tap-On",
        "Test_Sce_Description": "Validate that when a farecard without a Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Validate that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Farecard Validation Failure",
        "Test_Sce_Description": "Validate that when a farecard fails validation checks at Tap-On, the device provides the cardholder with the appropriate feedback without updating the Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Blocked Farecard Tap-On",
        "Test_Sce_Description": "Validate that when a blocked farecard is tapped on the device, the right to travel is not conferred and the device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Max Travel Duration Exceeded",
        "Test_Sce_Description": "Validate that when the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment and opens a new trip."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Validate that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality and presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Non-Activated Farecard Tap-On",
        "Test_Sce_Description": "Validate that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful and the device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "Validate that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Temporal Class Supplement Tap-On Transaction",
        "Test_Sce_Description": "Verify that the device correctly processes a Tap-On Transaction when a Farecard is tapped during a time period that contains an associated Temporal Class Supplement. The device should display an HMI reflecting the Temporal Class Supplement and process the transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Autoload Enabled Farecard Tap-On Transaction",
        "Test_Sce_Description": "Verify that the device correctly processes a Tap-On Transaction when a Farecard with Autoload Enabled is tapped and the Fare amount crosses the Auto-load threshold. The device should detect that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, triggering the Autoload amount to be added to the Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Default Trip Override Tap-On Transaction",
        "Test_Sce_Description": "Verify that the device correctly processes a Tap-On Transaction when a Farecard without a Default O/D is tapped while the device is in Override mode. The device should process the tap as a result tap-on and provide appropriate feedback to the Cardholder of a successful transaction and that the Default Trip was overridden."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Audio Messages Request during Fare-by-Zone TA Tap-On",
        "Test_Sce_Description": "Verify that the device correctly processes a Tap-On Transaction when a Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard and requests Audio Messages. The operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Farecard Validation Failure at Tap-On",
        "Test_Sce_Description": "Verify that the device correctly handles a scenario where a Farecard fails validation checks at Tap-On. The device should detect that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window, and provide appropriate feedback to the cardholder without updating the Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Blocked Farecard Tap-On Transaction",
        "Test_Sce_Description": "Verify that the device correctly handles a scenario where a blocked Farecard is tapped. The device should detect that the Farecard is blocked and not confer the right to travel to the Cardholder, providing appropriate feedback."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Max Travel Duration Exceeded at Tap-On",
        "Test_Sce_Description": "Verify that the device correctly handles a scenario where the time since tap-on exceeds the Max Travel Duration. The device should auto-settle the Underpayment and open a new trip."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Multiple NFC Media Presented at Once",
        "Test_Sce_Description": "Verify that the device correctly handles a scenario where multiple NFC media are presented to the device at one time. The device should block all fare payment functionality and present Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Non-Activated Farecard Tap-On Transaction",
        "Test_Sce_Description": "Verify that the device correctly handles a scenario where a non-activated Farecard is tapped on the device. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Card Reading Error at Tap-On",
        "Test_Sce_Description": "Verify that the device correctly handles a scenario where a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader)."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Verify that the SA Tool application correctly detects when a Virtual Card is unreadable. The application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is unsuccessful, the application should again indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Successful Tap After Unreadable Card",
        "Test_Sce_Description": "Verify that if the customer taps the NFC reader again after an unreadable card error and the tap is successful, steps 4 \u2013 7 of the Main Use Case are conducted correctly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Non-Adult, Non-Child, Non-Discreet Concessions",
        "Test_Sce_Description": "Verify that the SA Tool correctly processes a fare payment from a Virtual Card with a valid Non-Adult, Non-Child, non-discreet concession. The SA Tool should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "ePurse Balance Less Than Fare Amount",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer\u2019s ePurse balance is less than the fare amount. The ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly. The device should provide the appropriate feedback to the Cardholder of a successful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Valid Intra-SP Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment from a Virtual Card with a valid intra-agency transfer product. The ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card, and the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Valid Inter-SP Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment from a Virtual Card with a valid inter-agency transfer product. The ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card, and the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Expired Period Pass",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer\u2019s Virtual Card has an expired period pass. The ATS should detect that the Period Pass has expired, compute the value to be deducted from the e-Purse, and deduct the fare accordingly. If enabled, loyalty should be taken into account in the fare calculation."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "ePurse Balance Less Than Fare Amount with Expired Period Pass",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer\u2019s ePurse balance is less than the fare amount and the Virtual Card has an expired period pass. The ATS should detect that the Period Pass has expired, compute the value to be deducted from the e-Purse, and deduct the fare accordingly. The Virtual Card should be put into overdraft (negative balance)."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer requests audio messages for fare payment. The operator should enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion. The SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message. The corresponding audio message should be played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when a Virtual Card is unreadable",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it detects a Virtual Card but is unable to read it. The test will verify that the SA Tool application correctly indicates to the operator that the Virtual Card is unreadable. The test will also verify that the customer can tap on the NFC reader again and if the tap is successful, steps 4 \u2013 7 are conducted. If the tap is unsuccessful, the test will verify that the SA Tool application correctly indicates to the operator that the CLIENT (Virtual) Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when a customer has a concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The test will verify that the SA Tool correctly shows the successful fare payment screen for non-adult concession, plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when a customer has a registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's ePurse balance is less than the fare amount. The test will verify that the device sends the tap to ATS for processing, ATS checks the online hotlist and completes the fare processing, ATS removes the fare from the Virtual Card e-Purse and puts the card into overdraft. The test will also verify that the right to travel is conferred to the Cardholder by updating the Virtual Card accordingly and the device provides the appropriate feedback to the Cardholder of a successful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when a transaction is within Intra-SP Transfer window",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's Virtual Card has a valid transfer product. The test will verify that ATS correctly reads that the Virtual Card contains a valid intra-agency transfer product and deducts $0 from the Virtual Card E-Purse. The test will also verify that the right to travel is conferred to the Cardholder by updating the Virtual Card, the device provides the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when a transaction is within Inter-SP Transfer window",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's Virtual Card has a valid transfer product from other service provider and a transfer agreement between the service providers has been established. The test will verify that ATS correctly reads that the Virtual Card contains a valid inter-agency transfer product and deducts $0 from the Virtual Card E-Purse. The test will also verify that the right to travel is conferred to the Cardholder by updating the Virtual Card; the device provides the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when a customer requests Audio Messages",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer requests Audio Messages. The test will verify that the SA Tool correctly plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Virtual Card Detection",
        "Test_Sce_Description": "Verify that the SA Tool application is able to detect the Virtual Card when it is tapped on the NFC reader. The application should indicate if the card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Successful Tap",
        "Test_Sce_Description": "Verify that when the customer taps the Virtual Card on the NFC reader again, the application is able to read it successfully and proceed with steps 4 \u2013 7."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Unsuccessful Tap",
        "Test_Sce_Description": "Verify that when the customer taps the Virtual Card on the NFC reader again and it is unsuccessful, the application indicates to the operator that the CLIENT (Virtual) Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Non-Adult Concession Fare Payment",
        "Test_Sce_Description": "Verify that the SA Tool shows the successful fare payment screen for non-adult concession, plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "ePurse Balance Less Than Fare Amount",
        "Test_Sce_Description": "Verify that when the customer\u2019s ePurse balance is less than the fare amount, the device sends the tap to ATS for processing, checks the online hotlist, completes the fare processing, removes the fare from the Virtual Card e-Purse and puts the card into overdraft."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Successful Transaction Feedback",
        "Test_Sce_Description": "Verify that the right to travel is conferred to the Cardholder by updating the Virtual Card accordingly and the device provides the appropriate feedback to the Cardholder of a successful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Valid Intra-SP Transfer",
        "Test_Sce_Description": "Verify that when the Virtual Card contains a valid intra-agency transfer product, ATS deducts $0 from the Virtual Card E-Purse and this is communicated back to the device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Valid Inter-SP Transfer",
        "Test_Sce_Description": "Verify that when the Virtual Card contains a valid inter-agency transfer product, ATS deducts $0 from the Virtual Card E-Purse and this is communicated back to the device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Successful Transaction with Transfer",
        "Test_Sce_Description": "Verify that the right to travel is conferred to the Cardholder by updating the Virtual Card and the device provides the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Payment by e-Purse",
        "Test_Sce_Description": "Verify that when the customer wants to pay with their e-purse balance, the operator places the customer\u2019s Farecard on the NFC card reader and selects to pay by e-Purse. The SA Tool should automatically detect the Farecard and initiate the identification checks."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Insufficient e-Purse Balance",
        "Test_Sce_Description": "Verify that when the e-purse balance is insufficient, a notification informs the operator that the e-Purse balance cannot cover the price. The operator should be able to select to cancel the transaction or choose another mode of payment, including split payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Successful e-Purse Payment",
        "Test_Sce_Description": "Verify that the SA Tool deducts the balance from the e-purse and uses it as a payment means for the transaction. Upon successful transaction, the SA Tool should display the option to print a customer receipt, return to main menu."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Test the scenario where the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer will tap on the NFC reader again. If the tap is successful, steps 4 \u2013 7 will be conducted. If the tap is unsuccessful, the SA Tool application will indicate to the operator that the CLIENT (Virtual) Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "ePurse balance less than fare amount",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s ePurse balance is less than the fare amount. The device sends the tap to ATS for processing. ATS checks the online hotlist and completes the fare processing. ATS removes the fare from the Virtual Card e-Purse and puts the card into overdraft. The right to travel is conferred to the Cardholder by updating the Virtual Card accordingly. The device provides the appropriate feedback to the Cardholder of a successful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Transaction within Intra-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product. ATS will read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This will be communicated back to the device. The right to travel is conferred to the Cardholder by updating the Virtual Card, the device provides the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Transaction within Inter-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product from other service provider. A transfer agreement between the service providers has been established. ATS will read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This will be communicated back to the device. The right to travel is conferred to the Cardholder by updating the Virtual Card; the device provides the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Customer requests Audio Messages",
        "Test_Sce_Description": "Test the scenario where the customer asks to pay for the trip with their Virtual Card and requests audio messages for fare payment. Operator enables audio mode. The operator can change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case. While the volume is being adjusted, a volume adjustment bar will appear, and timeout automatically, to indicate the volume level. The volume will return to the device default after the use case is completed. The physical buttons will only support changing the audio messaging volume when accessibility mode is enabled."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Daily Cap Reached outside of Transfer window",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, Farecard has reached Daily Cap Limit and Farecard is out of transfer window. ATS deducts no fare since the Daily Cap is reached."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool and Service Class is Premium or Special Event. ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, Service Class is Premium or Special Event, Farecard has a valid Regular Service Transfer Product and Tap is within Transfer Window. ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Test the scenario where the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer will tap on the NFC reader again. If the tap is successful, steps 4 \u2013 7 will be conducted. If the tap is unsuccessful, the SA Tool application will indicate to the operator that the CLIENT (Virtual) Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "ePurse balance is less than the fare amount",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s ePurse balance is less than the fare amount. The device sends the tap to ATS for processing. ATS checks the online hotlist and completes the fare processing. ATS removes the fare from the Virtual Card e-Purse and puts the card into overdraft."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Transaction is within Intra-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product. ATS will read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. This will be communicated back to the device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Transaction is within Inter-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product from other service provider. A transfer agreement between the service providers has been established. ATS will read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This will be communicated back to the device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Customer requests Audio Messages",
        "Test_Sce_Description": "Test the scenario where the customer asks to pay for the trip with their Virtual Card and requests audio messages for fare payment. Operator enables audio mode. The operator can change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Daily Cap Reached outside of Transfer window on SA Tool",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, Farecard has reached Daily Cap Limit and Farecard is out of transfer window. ATS deducts no fare since the Daily Cap is reached."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location on SA Tool",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool and Service Class is Premium or Special Event. ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on SA Tool",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, Service Class is Premium or Special Event, Farecard has a valid Regular Service Transfer Product and Tap is within Transfer Window. ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Farecard is on the Action or Load Value List",
        "Test_Sce_Description": "Check if the SA Tool correctly identifies and updates the Farecard that is on the Action or Load Value List."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Audio Messages for Fare Payment",
        "Test_Sce_Description": "Check if the customer can request and receive audio messages for fare payment. The audio messages should be played in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Daily Cap Reached",
        "Test_Sce_Description": "Check if the SA Tool correctly identifies that the Farecard has reached the Daily Cap Limit and deducts no fare for the payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment for Premium Service or Special Route/Location",
        "Test_Sce_Description": "Check if the SA Tool correctly computes and deducts the Premium or Special Event fare when a tap on a premium service or special route/location is made."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Upgrade for Premium Service or Special Route/Location",
        "Test_Sce_Description": "Check if the SA Tool correctly computes and deducts the Upgrade fare when a tap on a premium service or special event route/location is made after previously riding on a regular service route (within the transfer window)."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Check if the SA Tool correctly identifies that the Farecard has reached off peak Daily Cap Limit but not the Peak Daily Cap limit and allows fare payment during peak hours."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Period Pass for Higher Fare Value Service Class",
        "Test_Sce_Description": "Check if the SA Tool correctly computes and deducts the Upgrade fare when the Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Period Pass for Lower Fare Value Service Class",
        "Test_Sce_Description": "Check if the SA Tool correctly identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment when the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Limited Period Pass",
        "Test_Sce_Description": "Check if the SA Tool correctly identifies that the Farecard has a valid Limited Period Pass and the current time is within the limits of the product and allows fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "Check if the SA Tool correctly identifies that the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction and allows fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Incorrect Farecard Type",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when an incorrect Farecard type is tapped. The tool should be able to identify the incorrect Farecard type and notify the operator. The test will verify if the use case terminates as expected."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Non-Farecard Tapped",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Non-Farecard is tapped. The tool should be able to identify the card as a non-Farecard and display an error pop-up message. The test will verify if the error message is displayed correctly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Failure to Read Virtual Card",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it fails to read a Virtual Card. The tool should be able to detect the Virtual Card but fail to read it, and indicate to the operator that the Virtual Card read has failed. The test will verify if the error prompt is displayed and if the operator can attempt to tap the card again."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Non-Virtual Card Tapped",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Non-Virtual Card is tapped. The tool should be able to identify the card as a non-Virtual Card and display an error pop-up message. The test will verify if the error message is displayed correctly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a blocked Farecard is tapped. The tool should be able to detect that the Farecard is blocked and display the Farecard query screen indicating that the Farecard has been blocked. The test will verify if the operator is unable to take any further actions on the Farecard and if the operator can exit and return to the SA Tool application home screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Virtual Card \u2013 Ineligible Products",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the shopping cart has ineligible products. The tool should be able to detect the ineligible products and display an error confirming that one or more of the products are not available for sale. The test will verify if the operator can remove the ineligible products from the cart and reattempt the shopping flow."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "ATS Failure to Load Products",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when ATS fails to load products. The tool should be able to inform the operator that the products purchased were not added to the user\u2019s account. The test will verify if the operator can attempt the checkout again or provide the customer a refund if the customer paid with cash."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Farecard is Blocked",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a blocked Farecard is tapped. The tool should be able to detect that the Farecard is blocked and not confer the right to travel. The test will verify if the device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the time since tap-on exceeds the Max Travel Duration. The tool should be able to auto-settle the Underpayment and open a new trip. The test will verify if the device deducts the value from the Farecard E-Purse and if a new trip is opened."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Multiple NFC Media Presented",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when multiple NFC media are presented to the device at one time. The tool should be able to block all fare payment functionality and present Anti-Collision HMI to the customer. The test will verify if all user functionality is blocked and if the Anti-Collision HMI is presented to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Tap a Non-Activated Farecard",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a non-activated Farecard is tapped. The tool should be able to detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction. The test will verify if the feedback is provided correctly to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Tap a Farecard and Card Reading Error Occurs",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Farecard is tapped and a card reading error occurs. The tool should be able to detect the card reading error and provide feedback to the Cardholder of an unsuccessful transaction. The test will verify if the feedback is provided correctly to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Incorrect Farecard Type",
        "Test_Sce_Description": "Verify that the SA Tool application correctly identifies and notifies the operator when the Farecard Type is incorrect for the mode the operator is currently operating in. This should terminate the use case."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Non-Farecard Tapped to the Reader",
        "Test_Sce_Description": "Verify that the SA Tool application correctly identifies when a non-Farecard is tapped to the reader and displays an appropriate error pop-up message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Failure to Read Virtual Card",
        "Test_Sce_Description": "Verify that the SA Tool application correctly detects when it fails to read a Virtual Card and provides appropriate feedback to the operator. The operator should be able to attempt to tap the card again."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Non-Virtual Card Tapped to the Reader",
        "Test_Sce_Description": "Verify that the SA Tool application correctly identifies when a non-Virtual Card is tapped to the reader and displays an appropriate error pop-up message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Sce_Description": "Verify that the SA Tool application correctly detects when a Farecard is blocked and displays the Farecard query screen indicating that the Farecard has been blocked. The operator should not be able to take any further actions on the Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Virtual Card \u2013 Ineligible Products",
        "Test_Sce_Description": "Verify that the SA Tool application correctly identifies when products added to the card are now ineligible for purchase and provides appropriate feedback to the operator. The operator should be able to remove the ineligible products from the cart and reattempt the shopping flow."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "ATS Failure to Load Products",
        "Test_Sce_Description": "Verify that the SA Tool application correctly identifies when ATS is unable to load products to the customer\u2019s account and provides appropriate feedback to the operator. The operator should be able to attempt the checkout again or provide the customer a refund if the customer paid with cash."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Farecard is Blocked",
        "Test_Sce_Description": "Verify that the device correctly detects when a Farecard is blocked and does not confer the right to travel. The device should provide appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "Verify that the device correctly determines when the time since tap-on exceeds the Max Travel Duration and auto-settles the Underpayment, opening a new trip."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Multiple NFC Media Presented to the Device",
        "Test_Sce_Description": "Verify that the device correctly blocks all user functionality and presents Anti-Collision HMI to the customer when multiple NFC media are presented to the device at one time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Tap a Non-Activated Farecard on an SA Tool",
        "Test_Sce_Description": "Verify that the device correctly detects when a non-activated Farecard is tapped and provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Tap a Farecard on an SA Tool and Card Reading Error Occurs",
        "Test_Sce_Description": "Verify that the device correctly detects when a Card reading error occurs (e.g. Farecard is immediately removed from the card reader) and provides appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Failure to read customer\u2019s Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the Virtual Card is unreadable",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it detects the Virtual Card but is unable to read it. The test will verify if the SA Tool application indicates to the operator that the Virtual Card is unreadable. The customer will tap on the NFC reader again and the test will check if the SA Tool application indicates to the operator that the CLIENT (Virtual) Card is unreadable if the tap is unsuccessful."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Failure to read customer\u2019s Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the customer has a non-adult, non-child, non-discreet concession on their Virtual Card",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a valid non-adult, non-child, non-discreet concession. The test will verify if the SA Tool shows the successful fare payment screen for non-adult concession and plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Failure to read customer\u2019s Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount. The test will verify if the device sends the tap to ATS for processing, checks the online hotlist, completes the fare processing, removes the fare from the Virtual Card e-Purse and puts the card into overdraft. The test will also check if the right to travel is conferred to the Cardholder by updating the Virtual Card accordingly and if the device provides the appropriate feedback to the Cardholder of a successful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Failure to read customer\u2019s Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the transaction is within the Intra-SP Transfer window",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product and the transaction is within the Intra-SP Transfer window. The test will verify if ATS reads that the Virtual Card contains a valid intra-agency transfer product and deducts $0 from the Virtual Card E-Purse. The test will also check if the right to travel is conferred to the Cardholder by updating the Virtual Card and if the device provides the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Failure to read customer\u2019s Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the transaction is within the Inter-SP Transfer window",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product from another service provider and the transaction is within the Inter-SP Transfer window. The test will verify if ATS reads that the Virtual Card contains a valid inter-agency transfer product and deducts $0 from the Virtual Card E-Purse. The test will also check if the right to travel is conferred to the Cardholder by updating the Virtual Card and if the device provides the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Failure to read customer\u2019s Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when multiple NFC media are presented to the device at one time",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when multiple NFC media are presented to the device at one time. The test will verify if the device blocks all fare payment functionality and if the Anti-Collision Error Screen is provided to the cardholder. The test will also check if the declined tap is sent to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Failure to read customer\u2019s Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the device is in Out-of-Service state",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the device is in Out-of-Service state. The test will verify if the device displays the Not in Service screen to the cardholder and if the device does not detect the media when the customer attempts to tap their Virtual Card Media on the card reader."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Failure to read customer\u2019s Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when an error has occurred",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when an error has occurred on the device. The test will verify if the device records the tap and if the Declined \u2013 See Customer Service Screen is provided to the cardholder. The test will also check if the declined tap is sent to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Failure to read customer\u2019s Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the Virtual Card Media is on the local hotlist and the device is offline",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Virtual Card Media is on the local hotlist and the device is offline. The test will verify if the device checks the local hotlist and returns a response that the media is denied, if the right to travel is not conferred, if the Declined \u2013 Blocked Screen is provided to the cardholder, if the Device updates the blocking parameter on the Virtual Card Scratchpad to be enabled, and if the device removes the Virtual Card from the hotlist."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Failure to read customer\u2019s Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when the Virtual Card Media\u2019s blocked parameter on the scratchpad is enabled",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled. The test will verify if the device checks the blocked parameter on the scratchpad and returns a response that the media is denied, if the right to travel is not conferred, if the Declined \u2013 Blocked Screen is provided to the cardholder, if the Device updates the blocking parameter on the Virtual Card Scratchpad to be enabled, and if the device removes the Virtual Card from the hotlist."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Default Trip Tap-On",
        "Test_Sce_Description": "Verify that when a Virtual Card with a default trip is tapped on at either the origin or destination station, the device correctly identifies the tap as associated with the default trip and displays the default trip success screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Default Trip Override",
        "Test_Sce_Description": "Verify that when a customer requests to override a default trip on a Virtual Card and then taps on at either the origin or destination station, the device correctly overrides the default trip and processes the tap as a regular tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card No Default Trip Override",
        "Test_Sce_Description": "Verify that when a customer requests to override a default trip on a Virtual Card that does not contain a default trip and then taps on, the device correctly processes the tap as a regular tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Scratchpad Block Update",
        "Test_Sce_Description": "Verify that when a Virtual Card in good standing but with a scratchpad block parameter is tapped on, the device correctly updates the scratchpad to remove the block parameter and provides the appropriate feedback to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Authentication Failure",
        "Test_Sce_Description": "Verify that when a Virtual Card fails the Card Authentication check, the device correctly identifies the failure, provides the appropriate feedback to the cardholder, and sends the declined tap to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Double Tap-On Online",
        "Test_Sce_Description": "Verify that when a Virtual Card is tapped on again at the same station within the anti-passback window and both devices are online, the device correctly identifies the double tap and provides the appropriate feedback to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Double Tap-On Offline",
        "Test_Sce_Description": "Verify that when a Virtual Card is tapped on again at the same station within the anti-passback window and the device is offline, the device correctly stores the tap details for later reconciliation and provides the appropriate feedback to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device correctly blocks all fare payment functionality and provides the appropriate feedback to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Tap-On in Out-of-Service State",
        "Test_Sce_Description": "Verify that when a Virtual Card is tapped on while the device is in an out-of-service state, the device correctly handles the tap and provides the appropriate feedback to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer\u2019s Farecard is blocked \u2013 Virtual Card",
        "Test_Scnario": "Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled",
        "Test_Sce_Description": "Verify that when the Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled, the right to travel is not conferred. The device should check the local hotlist and not find the Virtual Card. The device should also check the Virtual Card Scratchpad and determine the card blocked parameter is set to true. The Declined \u2013 Blocked Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer\u2019s Farecard is blocked \u2013 Virtual Card",
        "Test_Scnario": "Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled",
        "Test_Sce_Description": "Verify that when the Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled, the right to travel is not conferred. If the Virtual Card Media is blocked in the wallet, there should not be an interaction with the device on an attempted tap. The device should not know a tap is attempted and will have no action."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer\u2019s Farecard is blocked \u2013 Virtual Card",
        "Test_Scnario": "Tap counter is greater than the allowable offline taps",
        "Test_Sce_Description": "Verify that when the tap counter is greater than the allowable offline taps, the right to travel is not conferred. The device should check the local hotlist and not find the Virtual Card. The device should also check the Virtual Card Scratchpad and determine the card blocked parameter is set to true. The Declined \u2013 Blocked Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer\u2019s Farecard is blocked \u2013 Virtual Card",
        "Test_Scnario": "Customer\u2019s Virtual Card is blocked",
        "Test_Sce_Description": "Verify that when the customer\u2019s Virtual Card is blocked, the right to travel is not conferred. The device should send the transaction to ATS for processing. ATS should detect the card is blocked and return a declined result back to the SA Tool. The SA Tool application should display a declined message to the customer. The transaction should not be conducted. The SA Tool should play the declined audio tone. The Scratchpad should be updated accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer\u2019s Farecard is blocked \u2013 Virtual Card",
        "Test_Scnario": "Customer\u2019s Virtual Card is on the Deny List",
        "Test_Sce_Description": "Verify that when the customer\u2019s Virtual Card is on the Deny List, the right to travel is not conferred. The device should send the transaction to ATS for processing. ATS should detect the card is on the Deny List and remove the card from the Deny List and set it to blocked. ATS should return a declined result back to the SA Tool. The SA Tool application should display a declined message to the customer. The transaction should not be conducted. The SA Tool should play the declined audio tone. The Scratchpad should be updated accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer\u2019s Farecard is blocked \u2013 Virtual Card",
        "Test_Scnario": "Battery goes below the low battery threshold during payment",
        "Test_Sce_Description": "Verify that when the low battery threshold is high enough that the remote lists can be processed even after the SA Tool battery goes below the low battery threshold during a successful Farecard tap. If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode. Else, the customers fare payment should be processed as per Step 5. The application should then switch to \u201cOut of Service\u201d mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer\u2019s Farecard is blocked \u2013 Virtual Card",
        "Test_Scnario": "Customer taps a card that is not a Farecard",
        "Test_Sce_Description": "Verify that when the customer\u2019s card is not a Farecard, the SA Tool application does not respond, but the device error message \u201cCard Read Error\u201d is displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "Customer\u2019s Farecard is blocked \u2013 Virtual Card",
        "Test_Scnario": "Customer\u2019s card is within the Anti-Passback Window",
        "Test_Sce_Description": "Verify that when the customer\u2019s card is within the Anti-Passback Window, the right to travel is not conferred. ATS should detect that the Farecard fails the Anti-Passback checks. The SA Tool application should display a declined message the customer. The transaction should not be conducted. The SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "SA Tool shopping cart has ineligible products",
        "Test_Scnario": "Required fields not filled out or not valid",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the operator attempts to proceed to the next screen or proceed to payment without entering required information. The tool should check whether all the required fields have valid information and if not, it should display screen validation rules to prompt the operator to input the correct information."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "SA Tool shopping cart has ineligible products",
        "Test_Scnario": "Purchase multiple items",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer indicates that they would like to conduct other purchases in the same transaction. The operator should be able to return to the SA Tool application Sales screen and select the additional product(s) the customer would like to purchase. The tool should add the additional products to the shopping cart."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "SA Tool shopping cart has ineligible products",
        "Test_Scnario": "Refund multiple items",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer requests to refund multiple products where refund criteria have been met. The operator should be able to complete one transaction before starting the next and confirm the reversal. The tool should update the Farecard balance, remove the products and update the transaction history as applicable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "SA Tool shopping cart has ineligible products",
        "Test_Scnario": "ATS failure to load products",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when ATS is unable to load products onto a customer\u2019s account. The tool should inform the operator that the products purchased were not added to the user\u2019s account. The operator should be able to attempt the checkout again or provide the customer a refund if the customer paid with cash."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "SA Tool shopping cart has ineligible products",
        "Test_Scnario": "SVC / VC Shopping Cart",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the device must have either SVC or VC products in the shopping cart and cannot have both SVC and VC products in the shopping cart at the same time. If the cart has ineligible products, the Operator should receive an error providing them the option to clear the cart."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "SA Tool shopping cart has ineligible products",
        "Test_Scnario": "ECP is disabled and Customer\u2019s Artemis device is locked or asleep",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the user\u2019s device is locked or asleep and ECP is disabled for the users Virtual Card. The tool should not detect the virtual card media and the screen should remain the same. The Artemis device should prompt the user to provide authentication."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "SA Tool shopping cart has ineligible products",
        "Test_Scnario": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is disabled",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the user\u2019s mobile device is in Power Reserve mode and ECP is disabled on the mobile device for the users Virtual Card. The tool should not detect the virtual card media and the screen should remain the same. The Artemis device should prompt the user to charge their device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "ATS failed to load",
        "Test_Scnario": "ATS failure to load products",
        "Test_Sce_Description": "This scenario tests the functionality of the system when ATS fails to load products onto a customer\u2019s account. The operator should be informed that the products purchased were not added to the user\u2019s account. The operator should have the option to attempt the checkout again or provide the customer a refund if the customer paid with cash."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "ATS failed to load",
        "Test_Scnario": "SVC / VC Shopping Cart",
        "Test_Sce_Description": "This scenario tests the functionality of the shopping cart. The cart should only include Virtual Card or Stored Value Card Products. The device should not allow both SVC and VC products in the shopping cart at the same time. If the cart has ineligible products, the Operator should receive an error providing them the option to clear the cart."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "ATS failed to load",
        "Test_Scnario": "ECP is disabled and Customer\u2019s Artemis device is locked or asleep",
        "Test_Sce_Description": "This scenario tests the functionality of the system when the user\u2019s device is locked or asleep and ECP is disabled for the users Virtual Card. The system should prompt the user to provide authentication for their Virtual Card media on their Artemis device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "ATS failed to load",
        "Test_Scnario": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is disabled",
        "Test_Sce_Description": "This scenario tests the functionality of the system when the user\u2019s mobile device is in Power Reserve mode and ECP is disabled on the mobile device for the users Virtual Card. The system should prompt the user to charge their device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "ATS failed to load",
        "Test_Scnario": "Device is offline and not connected to Accenture Ticketing Services",
        "Test_Sce_Description": "This scenario tests the functionality of the system when the device is offline and not connected to ATS. The device should check the local deny list if the media is on the local deny list. The latent transaction processor should store the tap till the device goes back online and connects to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "ATS failed to load",
        "Test_Scnario": "Open Payments Media fails ODA check",
        "Test_Sce_Description": "This scenario tests the functionality of the system when an Open Payments Media fails the ODA check. The device should return the appropriate feedback and the Declined \u2013 Failed ODA Check Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "ATS failed to load",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "This scenario tests the functionality of the system when an Open Payments Media fails the Expiry Check. The device should return the appropriate feedback and the Declined \u2013 Card Expired Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "ATS failed to load",
        "Test_Scnario": "Open Payments Media has already tapped-on using an Online Device within Anti-Passback Window",
        "Test_Sce_Description": "This scenario tests the functionality of the system when the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window. The device should provide the cardholder with the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "ATS failed to load",
        "Test_Scnario": "Open Payments Media has already tapped-on using an Offline Device",
        "Test_Sce_Description": "This scenario tests the functionality of the system when the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window and the device is offline. The device should provide the cardholder with the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "Virtual Card",
        "Use_Case_Name": "ATS failed to load",
        "Test_Scnario": "Open Payments Media is on the ATS deny list and the SA Tool is online",
        "Test_Sce_Description": "This scenario tests the functionality of the system when the Open Payments Media is on the deny list and the SA Tool is online. The device should return the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the expected time frame, ensuring that the system's performance is up to standard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure, ensuring that customer's farecard and ePurse balance information is protected."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the system processes the fare payment within the acceptable time frame without any delays or crashes."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the system securely processes the fare payment, ensuring that the customer's ePurse balance and other sensitive information are not compromised."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Premium Service Route with Lower Fare than Special Event",
        "Test_Sce_Description": "Verify that the system correctly computes the fare when a customer taps on a premium service route/location after previously riding on a Special Event service route within the transfer window. The system should recognize this as a free transfer and not deduct any additional fare from the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Deduction from ePurse Balance",
        "Test_Sce_Description": "Verify that the system correctly deducts the computed fare from the ePurse balance on the farecard. The remaining balance should be accurately reflected in the system."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Communication with SA Tool",
        "Test_Sce_Description": "Verify that the system correctly communicates the fare computation and deduction back to the SA Tool. The SA Tool should display the correct remaining balance and fare payment status."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Transfer Print Status Display",
        "Test_Sce_Description": "Verify that the SA Tool accurately displays the transfer print status when the POP Print Flag is set to 0. The status should reflect whether a transfer print is required or not."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Valid Non-Adult Concession Fare Deduction",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare when a customer with a valid Non-Adult concession taps on a premium service route. The remaining balance should be accurately reflected in the system."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Peak Hour Fare Payment after Reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare when a customer taps during peak hours after previously reaching the off peak daily cap. The system should recognize that the farecard is out of the transfer window and the remaining balance should be accurately reflected in the system."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Premium Service Route with Higher Fare than Special Event",
        "Test_Sce_Description": "Verify that the system correctly computes the fare when a customer taps on a premium service route/location after previously riding on a Special Event service route within the transfer window. The system should recognize this as a fare upgrade and deduct the additional fare from the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Valid Child Concession Fare Deduction",
        "Test_Sce_Description": "Verify that the system correctly deducts the child concession fare when a customer with a valid Child concession taps on a premium service route. The remaining balance should be accurately reflected in the system."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection. The SA Tool should return to the Tap Card screen and display a toast notification of the corresponding inspection action."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Valid Non-Adult Concession Deduction",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies and deducts the Non-Adult, Non-Child, Non-discreet Concession from the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Successful Fare Payment Audio Tone",
        "Test_Sce_Description": "Verify that the SA Tool plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Overdraft Farecard Handling",
        "Test_Sce_Description": "Verify that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Intra-agency Transfer Processing",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product and computes the free transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Inter-agency Transfer Processing",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Autoload Threshold Processing",
        "Test_Sce_Description": "Verify that the SA Tool correctly checks that the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Action or Load Value List Processing",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Peak Hour Fare Deduction",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse during peak hours after previously reaching off peak daily cap (outside the transfer window)."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Premium Service Fare Upgrade",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a customer taps on a premium service route/location after previously riding on a Special Event service route (within the transfer window)."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Premium Service Free Transfer",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a customer taps on a premium service route/location after previously riding on a Special Event service route (within the transfer window) and the premium fare is lower than the Special Event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Temporal Class Supplement Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the device correctly reflects the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Autoload Enabled Farecard Crossing Threshold",
        "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance and the Fare is deducted from the Farecard E-Purse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Override Default Trip with No Default O/D",
        "Test_Sce_Description": "Verify that when a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on and the Default Trip is overridden."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Farecard Validation Failure at Tap-On",
        "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window, and provides the appropriate feedback to the cardholder without updating the Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that when a blocked Farecard is tapped on a device, the right to travel is not conferred and the device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Exceeding Max Travel Duration",
        "Test_Sce_Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment, opens a new trip and deducts the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality and presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Non-Activated Farecard Tap-On",
        "Test_Sce_Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful and the device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold",
        "Test_Sce_Description": "This scenario will test the functionality of the device when a Farecard with Autoload Enabled is tapped and the Fare amount crosses the Auto-load threshold. The device should detect that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, which triggers the Autoload amount to be added to the Farecard. The device should then deduct the Fare from the Farecard E-Purse balance and provide the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the autoload was successful."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Performance of the device when Farecard with Autoload Enabled is tapped",
        "Test_Sce_Description": "This scenario will test the performance of the device when a Farecard with Autoload Enabled is tapped and the Fare amount crosses the Auto-load threshold. The device should process the transaction quickly and efficiently without any lag or delay."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Security of the device when Farecard with Autoload Enabled is tapped",
        "Test_Sce_Description": "This scenario will test the security of the device when a Farecard with Autoload Enabled is tapped and the Fare amount crosses the Auto-load threshold. The device should securely process the transaction without any data breaches or security threats."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Exception flow when Farecard with Autoload Enabled is tapped",
        "Test_Sce_Description": "This scenario will test the exception flow of the device when a Farecard with Autoload Enabled is tapped and the Fare amount crosses the Auto-load threshold. The device should handle any exceptions or errors gracefully and provide the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Alternate flow when Farecard with Autoload Enabled is tapped",
        "Test_Sce_Description": "This scenario will test the alternate flow of the device when a Farecard with Autoload Enabled is tapped and the Fare amount crosses the Auto-load threshold. The device should handle any alternate scenarios or conditions effectively and provide the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Full Fare-by-Zone transaction processing",
        "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Override Default Trip",
        "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on when the customer requests the override of a Default Trip by interacting with the Device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Capping Discount Eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list and complete the fare processing. ATS should calculate the capping discount and apply to the fare calculation."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple Capping Discounts Eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS should take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Offline Device Capping Discount",
        "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules should follow use-case logic outlined in ticketing use cases."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media Fails ODA Check",
        "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device should detect that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. The Card reader should detect that Farecard is blocked and the Device should provide the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Max Travel Duration Exceeded",
        "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. The Device should determine that the Tap-On Time + Max Travel Duration < Current Time and Auto-settle the Underpayment and deduct the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple NFC Media Presented",
        "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. The Device should block all user functionality, present Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Non-Activated Farecard",
        "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. The Device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device should provide the appropriate feedback to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Non-Revenue farecard in training mode",
        "Test_Sce_Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode. If the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard tap during Temporal Class Supplement",
        "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the Device should contain an HMI reflecting the Temporal Class Supplement, and process the Tap-On Transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard with Autoload Enabled",
        "Test_Sce_Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard without Default O/D",
        "Test_Sce_Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device should process the tap as a result tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Audio Messages request",
        "Test_Sce_Description": "Verify that when the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard validation checks at Tap-On",
        "Test_Sce_Description": "Verify that if a Farecard fails validation checks at Tap-On, the system should handle this exception appropriately."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment with Period Pass",
        "Test_Sce_Description": "Verify that when a Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value, ATS computes and deducts the Upgrade fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment with Period Pass and lower fare value",
        "Test_Sce_Description": "Verify that when a Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value, ATS identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment with Limited Period Pass",
        "Test_Sce_Description": "Verify that when a Farecard has a valid Limited Period Pass and the current time is within the limits of the product, the system should accept the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment with Limited Period Pass outside of valid time",
        "Test_Sce_Description": "Verify that when a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the system should accept the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window and the premium fare is higher than the special event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product with Lower Premium Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window and the premium fare is lower than the special event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid non-adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance Test for Fare Payment",
        "Test_Sce_Description": "Verify that the system is able to handle multiple fare payments simultaneously without any performance degradation."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security Test for Fare Payment",
        "Test_Sce_Description": "Verify that the system securely processes fare payments and does not expose any sensitive customer information during the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Verify fare computation and deduction for Premium Service Class",
        "Test_Sce_Description": "Ensure that the ATS correctly computes the fare and deducts the amount from the Virtual Card E-Purse when the Service Class is Premium and the Farecard has a valid Special Event Transfer Product and the tap is within the Transfer Window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Verify communication back to SA Tool",
        "Test_Sce_Description": "Ensure that the fare computation and deduction information is correctly communicated back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Verify POP Print Flag setting",
        "Test_Sce_Description": "Ensure that the SA Tool sets the POP Print Flag to 0 to accurately display the transfer print status if the farecard is queried."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Verify fare computation and deduction during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Ensure that the ATS correctly computes the fare and deducts the amount from the Virtual Card E-Purse when the Farecard has reached off peak Daily Cap Limit, has not reached Peak Daily Cap limit and is out of transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Verify fare computation and deduction for Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare",
        "Test_Sce_Description": "Ensure that the ATS correctly computes the fare and deducts the amount from the Virtual Card E-Purse when the Service Class is Premium, the Farecard has a valid Special Event Transfer Product and the tap is within the Transfer Window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Verify fare computation and deduction for Valid Non-Adult Concession",
        "Test_Sce_Description": "Ensure that the SA Tool correctly computes and deducts the Upgrade fare when the Customer\u2019s Farecard has a Valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Verify fare computation and deduction for Valid Child Concession",
        "Test_Sce_Description": "Ensure that the SA Tool correctly deducts the correct Child Concession fare when a valid Child Concession is found."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Verify fare payment and inspection transactions recording",
        "Test_Sce_Description": "Ensure that the SA Tool correctly records both the fare payment and inspection transactions when the operator inspects a customer\u2019s farecard and determines that they have not paid a fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Verify successful fare payment audio tone for Child concession",
        "Test_Sce_Description": "Ensure that the SA Tool plays the successful fare payment audio tone for Child concession when a valid Child Concession is found and the correct Child Concession fare is deducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Verify successful Child fare payment screen display",
        "Test_Sce_Description": "Ensure that the SA Tool displays the successful Child fare payment screen when a valid Child Concession is found and the correct Child Concession fare is deducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Premium Service Route with Lower Fare than Special Event",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment on a premium service route where the premium fare is lower than the special event fare. The system should recognize the farecard's valid special event transfer product and that the tap is within the transfer window. The system should then compute the fare, deduct the amount from the virtual card e-purse, and communicate this back to the SA tool."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Deduction from ePurse Balance",
        "Test_Sce_Description": "Verify that the system correctly deducts the fare from the ePurse balance. The system should compute the fare based on the service class and the farecard's valid special event transfer product. The deducted amount should be accurately reflected in the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Transfer Window Validation",
        "Test_Sce_Description": "Verify that the system correctly validates whether the tap is within the transfer window. If the tap is not within the transfer window, the system should not allow the fare payment to proceed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Special Event Transfer Product Validation",
        "Test_Sce_Description": "Verify that the system correctly validates the farecard's special event transfer product. If the farecard does not have a valid special event transfer product, the system should not allow the fare payment to proceed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Verify that the system can handle a high volume of fare payments simultaneously without any degradation in performance. The system should be able to process multiple fare payments concurrently and return the correct results in a timely manner."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Verify that the system securely processes fare payments. The system should encrypt sensitive data such as ePurse balance and farecard details to prevent unauthorized access. The system should also have measures in place to prevent fare evasion and fraud."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Exception Flow Test",
        "Test_Sce_Description": "Verify that the system correctly handles exceptions such as insufficient ePurse balance or invalid farecard. The system should display appropriate error messages and guide the user to resolve the issue."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Alternate Flow Test",
        "Test_Sce_Description": "Verify that the system correctly handles alternate flows such as fare payment during peak hours or when the farecard has reached the daily cap limit. The system should compute the fare based on the applicable rules and deduct the amount from the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of insufficient ePurse balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of valid transfer product",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Inter-agency transfer processing",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Autoload threshold processing",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of Action or Load Value list",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of premium service route with transfer",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of Non-Adult concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Non-Adult, Non-Child Concession Fare Payment",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer with a valid Non-Adult, Non-Child concession ticket attempts to make a fare payment. The tool should successfully process the payment and play the appropriate audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Transfer Product Fare Payment",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer with a valid transfer product attempts to make a fare payment. The tool should successfully compute the free transfer and process the payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Audio Messages Request",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer requests audio messages for the fare payment. The tool should successfully enable audio mode, adjust the volume level as per customer's discretion, and play the corresponding audio message in the default language of the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Premium Service Fare Payment on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment for a premium service or special route/location on the FLATFARE BASED SA Tool. The tool should successfully process the regular ride balance fare payment and create a Transfer Product."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Fare Payment with Fare Upgrade on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment for a premium service or special event route/location with a fare upgrade on the FLATFARE BASED SA Tool. The tool should successfully compute the free transfer and process the payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Child Concession Fare Payment",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer with a valid Child concession ticket attempts to make a fare payment. The tool should successfully process the payment and play the appropriate audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a fare payment is made as a result of a failed ticket inspection. The tool should successfully process the payment and record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer with an empty ride balance attempts to make a fare payment. The tool should display a declined message to the customer and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Fare Payment with Low Battery",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the device battery goes below the low battery threshold during a fare payment. The tool should switch to 'Out of Service' mode after processing the fare payment if the low battery threshold is reached."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment with a card that is not CLIENT media. The tool should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The tool should display a declined message to the customer and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer attempts to make a fare payment with a non-activated ticket. The tool should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Valid Transfer Product",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the free transfer when the ticket has a valid Transfer Product and the tap is within the Transfer Window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a Valid Child Concession on the customer's ticket and successfully completes the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the SA Tool correctly records both the fare payment and inspection transactions when the operator determines that the customer has not paid a fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the customer's ride balance is empty and declines the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "Verify that the SA Tool correctly switches to 'Out of Service' mode when the battery goes below the low battery threshold during payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the customer's card is not CLIENT media and does not respond to the tap."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the customer's ticket is within the Anti-Passback Window and declines the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the customer's ticket is not activated and declines the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Expired Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the customer's ticket is expired and declines the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Period Pass",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the customer's ticket has a valid period pass and accepts the fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when the ticket is unreadable and fails to read it correctly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that has an empty ride balance. The tool should detect the empty balance, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "This scenario tests the performance of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. The tool should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5 of the Main Use Case. If the threshold is reached after Step 5, the fare payment should be processed before switching to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a card that is not CLIENT media. The tool should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that is within the Anti-Passback Window. The tool should detect the Anti-Passback violation, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a non-activated TICKET. The tool should detect the invalidity of the TICKET, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a locked farecard. The tool should read the farecard, detect that it is locked, display a declined screen, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with an unreadable TICKET. The tool should detect the TICKET but fail to read it, indicate to the operator that the TICKET is unreadable, and log the error for troubleshooting."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a TICKET that has a valid non-adult, non-child concession. The tool should process the fare payment according to the concession rules."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Low Battery Threshold Fare Payment",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Card Read Error",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a card that is not CLIENT media. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Anti-Passback Window Check",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Non-Activated Ticket Tap",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a non-activated Ticket. The SA Tool should detect that the TICKET is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Empty Ride Balance",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's ride balance is empty. The SA Tool should detect that the Ride Balance is empty and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Valid Child Concession",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's TICKET has a Valid Child concession. The SA Tool should detect the Valid Child Concession and display the successful Child fare payment screen. The SA Tool should also play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Failed Inspection Fare Payment",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment results from a failed inspection. The operator should inspect a customer's TICKET and determine that they have not paid a fare. The operator should then select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Non-CLIENT Media Card",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that has no ride balance remaining. The system should detect the empty ride balance, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "This scenario is to validate the system's response when the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Anti-Passback Window",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a ticket that is within the Anti-Passback Window. The system should detect the Anti-Passback check failure, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a non-activated ticket. The system should detect the invalidity of the ticket, display a declined message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Locked Farecard",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with a locked farecard. The system should detect the locked farecard, display a declined message, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to make a fare payment with an unreadable TICKET. The system should detect the unreadable TICKET, display an error message, and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Fare Payment with Valid Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a valid non-adult, non-child concession tries to make a fare payment. The system should detect the concession, calculate the fare accordingly, and conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Anti-Passback Window Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a TICKET that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Timeout Functionality",
        "Test_Sce_Description": "Verify that the system correctly returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined due to the TICKET being within the Anti-Passback Window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Non-Activated Ticket Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a non-activated TICKET and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Performance under Low Battery",
        "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the battery goes below the low battery threshold during a successful TICKET tap. The system should still be able to process remote lists even after the battery goes below the threshold."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Non-CLIENT Media Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a card that is not CLIENT media and does not respond to the tap. The device should display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Expired Ticket Check",
        "Test_Sce_Description": "Verify that the system correctly identifies an expired TICKET and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Security of Fare Payment",
        "Test_Sce_Description": "Verify that the fare payment process is secure and that the customer's TICKET information is not compromised during the transaction. The system should encrypt the TICKET information during the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Performance of Fare Payment",
        "Test_Sce_Description": "Verify that the system can handle multiple fare payments simultaneously without any performance issues. The system should not slow down or crash when multiple fare payments are being processed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a non-activated ticket. The system should display a declined message to the customer and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should display a declined message to the customer and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer with a valid child concession attempts to make a fare payment. The system should display the successful fare payment screen and play the successful fare payment audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a fare payment is made as a result of a failed ticket inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Ticket within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The system should display a declined message to the customer and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode after processing the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with a locked farecard. The system should display a declined screen to the operator and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer attempts to make a fare payment with an unreadable ticket. The system should indicate to the operator that the ticket is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a customer with a valid non-adult, non-child concession attempts to make a fare payment. The system should process the fare payment accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window. The system should correctly update the SA Tool with the transaction details."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window. The system should correctly update the SA Tool with the transaction details."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the special event fare. The system should correctly update the SA Tool with the transaction details."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid non-adult concession. The system should correctly update the SA Tool with the transaction details."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid child concession. The system should correctly update the SA Tool with the transaction details and play the successful fare payment audio tone for child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should correctly update the SA Tool with the transaction details and record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance Test for Fare Payment",
        "Test_Sce_Description": "Verify that the system can handle a high volume of fare payments simultaneously without any degradation in performance. The system should be able to process all transactions within the acceptable time frame."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security Test for Fare Payment",
        "Test_Sce_Description": "Verify that the system securely processes all fare payments and protects customer data. The system should not expose any sensitive information during the transaction process."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a tap is made during peak hours after the off-peak daily cap has been reached and the farecard is outside the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Valid Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a tap is made on a premium service route/location after previously riding on a Special Event service route and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when the customer's farecard has a valid non-adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid child concession, computes and deducts the correct child concession fare from the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when the operator selects the payment function on the SA Tool inspection results screen after determining that the customer has not paid a fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame, ensuring that the system's performance is up to the mark."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure and that all customer data is encrypted and protected from potential security threats."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Premium Service Route with Lower Fare than Special Event",
        "Test_Sce_Description": "Verify that the system correctly calculates the fare when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The system should recognize that the premium fare is lower than the special event fare and allow a free transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Deduction from ePurse Balance",
        "Test_Sce_Description": "Verify that the system correctly deducts the fare from the customer's ePurse balance when they tap on a premium service route after previously riding on a Special Event service route within the transfer window. The system should deduct the correct fare based on the lower premium fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Transfer Window Validation",
        "Test_Sce_Description": "Verify that the system correctly identifies whether the customer's tap is within the transfer window when they tap on a premium service route after previously riding on a Special Event service route. The system should only allow a free transfer if the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Special Event Transfer Product Validation",
        "Test_Sce_Description": "Verify that the system correctly identifies whether the customer's farecard has a valid Special Event Transfer Product when they tap on a premium service route. The system should only allow a free transfer if the farecard has a valid Special Event Transfer Product."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Service Class Validation",
        "Test_Sce_Description": "Verify that the system correctly identifies the service class when a customer taps on a premium service route after previously riding on a Special Event service route. The system should recognize the service class as Premium."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Communication to SA Tool",
        "Test_Sce_Description": "Verify that the system correctly communicates the fare payment back to the SA Tool after deducting the fare from the customer's ePurse balance. The SA Tool should display the correct fare payment information."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "POP Print Flag Setting",
        "Test_Sce_Description": "Verify that the SA Tool correctly sets the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried. The system should not print a proof of payment receipt."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Verify that the system performs efficiently when processing fare payments from a farecard using ePurse balance on a premium service route with transfer where the premium fare is lower than the special event fare. The system should process the transaction within the acceptable time frame."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Verify that the system securely processes fare payments from a farecard using ePurse balance on a premium service route with transfer where the premium fare is lower than the special event fare. The system should encrypt all sensitive data during the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Testing ePurse balance less than fare amount",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating intra-agency transfer window",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies a valid transfer product and computes the free transfer within the intra-agency transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Testing inter-agency transfer window",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies within the inter-agency transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Testing Autoload threshold",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Testing Action or Load Value list",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies when the customer's Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Testing fare payment during peak hours after reaching off peak daily cap",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours after previously reaching off peak daily cap (outside the transfer window)."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Testing premium service route with transfer where the premium fare is higher than the special event fare",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window)."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Testing premium service route with transfer where the premium fare is lower than the special event fare",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window)."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Testing valid Non-Adult concession",
        "Test_Sce_Description": "This scenario will test if the SA Tool correctly identifies and processes a valid Non-Adult concession on the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Non-Adult, Non-Child Concession Fare Payment",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer with a valid Non-Adult, Non-Child concession ticket attempts to pay for a ride. The tool should successfully process the fare payment and play the appropriate audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Transfer Product Fare Payment",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer with a valid transfer product attempts to pay for a ride. The tool should compute the free transfer and successfully process the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Audio Messages Request",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer requests audio messages for the fare payment. The tool should enable audio mode, adjust the volume level as per customer's discretion, and play the corresponding audio message in the default language of the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Premium Service Fare Payment on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer with a Fixed Ride Ticket taps on a premium service or special route/location. The tool should process a regular ride balance fare payment and create a Transfer Product."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Fare Payment with Fare Upgrade on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer taps on a premium service or special event route/location after previously riding on a regular, premium, or special event route. The tool should compute a free transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Child Concession Fare Payment",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer with a valid Child concession ticket attempts to pay for a ride. The tool should successfully process the fare payment and play the appropriate audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's ticket fails inspection and the operator selects the payment function. The tool should process the fare payment and record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer with an empty ride balance attempts to pay for a ride. The tool should display a declined message and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Fare Payment with Low Battery",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the device battery goes below the low battery threshold during a successful ticket tap. The application should switch to 'Out of Service' mode after processing the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer taps a card that is not CLIENT media. The tool should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's ticket is within the Anti-Passback Window. The tool should display a declined message and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer taps a non-activated ticket. The tool should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid Child Concession on the customer's ticket and successfully processes the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the SA Tool correctly processes a fare payment after the operator determines that the customer has not paid a fare during an inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's ride balance is empty and declines the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment during Low Battery",
        "Test_Sce_Description": "Verify that the SA Tool correctly switches to 'Out of Service' mode when the battery goes below the low battery threshold during a fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's card is not CLIENT media and does not respond to the tap."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's ticket is within the Anti-Passback Window and declines the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's ticket is not activated and declines the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Expired Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's ticket is expired and declines the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Period Pass",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's ticket has a valid period pass and accepts the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a ticket is unreadable and fails to read it correctly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a TICKET that has no ride balance remaining. The tool should detect the empty balance, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "This scenario tests the performance of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. The tool should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a card that is not CLIENT media. The tool should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a TICKET that is within the Anti-Passback Window. The tool should detect the Anti-Passback violation, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a non-activated TICKET. The tool should detect the invalidity of the TICKET, display a declined message, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a locked farecard. The tool should read the farecard, determine that it is locked, display a declined screen, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with an unreadable TICKET. The tool should detect the TICKET but fail to read it, indicate to the operator that the TICKET is unreadable, and log the error for troubleshooting."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a TICKET that has a valid non-adult, non-child concession. The tool should process the fare payment accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Low Battery Threshold Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when the battery level drops below the low battery threshold during a successful TICKET tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Card Read Error Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer taps a card that is not CLIENT media. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Anti-Passback Window Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer's TICKET is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Non-Activated Ticket Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer taps a non-activated TICKET. The SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Empty Ride Balance Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer's ride balance is empty. The SA Tool should detect that the Ride Balance is empty and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Valid Child Concession Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer's TICKET has a Valid Child concession. A Valid Child Concession should be found and the SA Tool should display the successful Child fare payment screen. The SA Tool should play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Failed Inspection Test",
        "Test_Sce_Description": "This scenario tests the application's response when the operator inspects a customer's TICKET and determines that they have not paid a fare. The operator should select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "This scenario tests the performance of the application under different conditions such as low battery, high traffic, and varying network conditions. The application should maintain its functionality and performance under these conditions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "This scenario tests the security features of the application such as data encryption, user authentication, and secure transactions. The application should pass all the security tests to ensure the safety and privacy of the users."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Validate the system's response when a customer attempts to make a fare payment using a card that is not CLIENT media. The system should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Validate the system's response when a customer attempts to make a fare payment with a ticket that has an empty ride balance. The system should detect the empty balance, decline the transaction, and display a declined message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "Validate the system's response when the device battery goes below the low battery threshold during a fare payment. The system should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Validate the system's response when a customer attempts to make a fare payment with a non-activated ticket. The system should detect the invalidity of the ticket, decline the transaction, and display a declined message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "Validate the system's response when a customer attempts to make a fare payment with a locked farecard. The system should detect the locked status of the farecard, decline the transaction, and display a declined message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "Validate the system's response when a customer with a valid child concession attempts to make a fare payment. The system should detect the valid child concession, process the transaction, and display a successful fare payment screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Validate the system's response when a fare payment is made as a result of a failed ticket inspection. The system should record both the fare payment and inspection transactions and display a toast notification of the corresponding inspection action."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Validate the system's response when a customer attempts to make a fare payment within the Anti-Passback Window. The system should detect the Anti-Passback violation, decline the transaction, and display a declined message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "Validate the system's response when a customer attempts to make a fare payment with an unreadable TICKET. The system should detect the unreadable TICKET, indicate to the operator that the TICKET is unreadable, and log the error for troubleshooting."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Validate the system's response when a customer with a valid non-adult, non-child concession attempts to make a fare payment. The system should detect the valid concession, process the transaction, and display a successful fare payment screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Anti-Passback Window Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Timeout Functionality",
        "Test_Sce_Description": "Verify that the system correctly returns to the SA Tool application Tap Card screen after a configurable timeout when a transaction is declined."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Ticket Activation Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a non-activated ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Ticket Expiry Check",
        "Test_Sce_Description": "Verify that the system correctly identifies an expired ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Period Pass Validation",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket with a valid period pass and accepts the fare. The system should display a successful fare payment screen and play a successful fare payment audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Ticket Update after Successful Payment",
        "Test_Sce_Description": "Verify that the system correctly updates the ticket information after a successful fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Unreadable Ticket Handling",
        "Test_Sce_Description": "Verify that the system correctly handles an unreadable ticket. The system should fail to read the ticket correctly and display an appropriate error message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Low Battery Threshold Handling",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during payment. The system should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Non-CLIENT Media Handling",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer taps a card that is not CLIENT media. The system should display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Empty Ride Balance Handling",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where a customer's ride balance is empty. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a non-activated ticket. The tool should detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a ticket that has an empty ride balance. The tool should detect that the ride balance is empty and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. If the low battery threshold is reached before the fare payment is processed, the application should switch to \u201cOut of Service\u201d mode. If the fare payment is processed before the low battery threshold is reached, the application should then switch to \u201cOut of Service\u201d mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media Card",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a card that is not CLIENT media. The tool should not respond and the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a ticket that is within the Anti-Passback Window. The tool should detect that the ticket fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Locked Farecard",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a locked farecard. The tool should read the farecard, determine that it is locked, display a declined screen to the operator, and not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a valid non-adult, non-child concession attempts to make a fare payment. The tool should detect the concession and process the fare payment accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Scnario": "Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with an unreadable ticket. The tool should detect the ticket but fail to read it, indicating to the operator that the ticket is unreadable. If the customer taps the NFC reader again and the tap is successful, the tool should proceed with the fare payment. If the tap is unsuccessful, the tool should indicate to the operator that the ticket is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Verify that the SA Tool application correctly detects and handles the scenario when the Virtual Card is unreadable. The application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is successful, the fare payment process should continue. If the tap is still unsuccessful, the application should again indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child, Non-Discreet Concessions",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card that has a valid Non-Adult, Non-Child, non-discreet concession. The application should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment with Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card with an ePurse balance that is less than the fare amount. The application should send the tap to ATS for processing, which should then remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment within Intra-SP Transfer Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card within the Intra-SP Transfer window. The application should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card, and the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Fare Payment within Inter-SP Transfer Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles fare payment from a Virtual Card within the Inter-SP Transfer window. The application should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card, and the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion. The SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message, and the corresponding audio message should be played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the detection of unreadable Virtual Card",
        "Test_Sce_Description": "This scenario is to test whether the SA Tool application correctly detects and indicates when a Virtual Card is unreadable. The customer will tap the Virtual Card on the NFC reader and the application should indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the fare payment with non-adult concession",
        "Test_Sce_Description": "This scenario is to test whether the SA Tool correctly processes fare payment from a Virtual Card with a valid non-adult, non-child, non-discreet concession. The application should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the fare payment with insufficient ePurse balance",
        "Test_Sce_Description": "This scenario is to test whether the SA Tool correctly processes fare payment from a Virtual Card with an ePurse balance less than the fare amount. The application should send the tap to ATS for processing, and ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the fare payment within Intra-SP Transfer window",
        "Test_Sce_Description": "This scenario is to test whether the SA Tool correctly processes fare payment from a Virtual Card within the Intra-SP Transfer window. The application should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the fare payment within Inter-SP Transfer window",
        "Test_Sce_Description": "This scenario is to test whether the SA Tool correctly processes fare payment from a Virtual Card within the Inter-SP Transfer window. The application should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the fare payment with Autoload Threshold met",
        "Test_Sce_Description": "This scenario is to test whether the SA Tool correctly processes fare payment from a Farecard when the Autoload Threshold is met. The application should check that the ePurse balance (after deducting the travel fare) is under the Autoload threshold and add the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the fare payment with Farecard on the Action or Load Value List",
        "Test_Sce_Description": "This scenario is to test whether the SA Tool correctly processes fare payment from a Farecard that is on the Action or Load Value list. The application should verify that the Farecard is on the Action or Load Value List and update the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the fare payment with customer requesting Audio Messages",
        "Test_Sce_Description": "This scenario is to test whether the SA Tool correctly processes fare payment from a Farecard when the customer requests Audio Messages. The application should play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Testing ePurse Balance Less Than the Fare Amount",
        "Test_Sce_Description": "This scenario tests the functionality of the system when the customer's ePurse balance is less than the fare amount. The system should be able to detect this condition and handle it appropriately, by removing the fare from the Virtual Card e-Purse and putting the card into overdraft."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Testing Successful Transaction Feedback",
        "Test_Sce_Description": "This scenario tests the system's ability to provide appropriate feedback to the Cardholder of a successful transaction. The system should update the Virtual Card accordingly and inform the Cardholder that the transaction was successful."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Testing Unreadable Virtual Card",
        "Test_Sce_Description": "This scenario tests the system's ability to handle situations where the Virtual Card is unreadable. The system should be able to detect this condition and inform the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Testing Concession Other Than Adult, Child, or Discreet Concessions",
        "Test_Sce_Description": "This scenario tests the system's ability to handle situations where the customer has a concession other than Adult, Child, or Discreet Concessions on their Virtual Card. The system should be able to detect this condition and handle it appropriately."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Testing Transaction within Intra-SP Transfer Window",
        "Test_Sce_Description": "This scenario tests the system's ability to handle transactions within the Intra-SP Transfer window. The system should be able to detect this condition and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Testing Transaction within Inter-SP Transfer Window",
        "Test_Sce_Description": "This scenario tests the system's ability to handle transactions within the Inter-SP Transfer window. The system should be able to detect this condition and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Testing Performance of the System",
        "Test_Sce_Description": "This scenario tests the performance of the system under different conditions. The system should be able to handle multiple transactions simultaneously without any degradation in performance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Testing Security of the System",
        "Test_Sce_Description": "This scenario tests the security of the system. The system should be able to securely handle transactions and protect the customer's information."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Verify that the SA Tool application correctly detects and indicates when a Virtual Card is unreadable. The customer should be prompted to tap the NFC reader again. If the tap is unsuccessful, the application should again indicate that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies and processes a Virtual Card with a Valid Non-Adult, Non-Child, non-discreet concession. The successful fare payment screen for non-adult concession should be displayed and the corresponding audio tone should be played."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "ePurse Balance Less Than Fare Amount",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer's ePurse balance is less than the fare amount. The ATS should process the fare, put the card into overdraft, and provide appropriate feedback to the Cardholder of a successful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Transaction within Intra-SP Transfer window",
        "Test_Sce_Description": "Verify that the system correctly processes a transaction within the Intra-SP Transfer window. The ATS should recognize the valid transfer product on the Virtual Card, deduct $0 from the ePurse, and provide appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Transaction within Inter-SP Transfer window",
        "Test_Sce_Description": "Verify that the system correctly processes a transaction within the Inter-SP Transfer window. The ATS should recognize the valid transfer product from another service provider on the Virtual Card, deduct $0 from the ePurse, and provide appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Customer requests Audio Messages",
        "Test_Sce_Description": "Verify that the system correctly handles a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion. The audio message should be played in the default language of the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Daily Cap Reached outside of Transfer window",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the Farecard has reached the Daily Cap Limit and is out of the transfer window. The ATS should deduct no fare since the Daily Cap is reached."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment for a premium service or special event fare amount and creates a Transfer Product for the Premium Service or special event Class. The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade",
        "Test_Sce_Description": "Verify that the system correctly processes a fare upgrade for a premium service or special event route/location after previously riding on a regular service route (within the transfer window). The ATS should compute the fare upgrade and deduct the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Test the scenario where the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer will tap on the NFC reader again. If the tap is successful, steps 4 \u2013 7 will be conducted. If the tap is unsuccessful, the SA Tool application will indicate to the operator that the CLIENT (Virtual) Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "ePurse balance is less than the fare amount",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s ePurse balance is less than the fare amount. The device sends the tap to ATS for processing. ATS checks the online hotlist and completes the fare processing. ATS removes the fare from the Virtual Card e-Purse and puts the card into overdraft."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Transaction is within Intra-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product. ATS will read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Transaction is within Inter-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product from other service provider. A transfer agreement between the service providers has been established. ATS will read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Customer requests Audio Messages",
        "Test_Sce_Description": "Test the scenario where the customer asks to pay for the trip with their Virtual Card and requests audio messages for fare payment. Operator enables audio mode. The operator can change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Daily Cap Reached outside of Transfer window on SA Tool",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, Farecard has reached Daily Cap Limit and Farecard is out of transfer window. ATS deducts no fare since the Daily Cap is reached."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location on SA Tool",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool and Service Class is Premium or Special Event. ATS will compute the fare and deduct the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on SA Tool",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, Service Class is Premium or Special Event, Farecard has a valid Regular Service Transfer Product and Tap is within Transfer Window. ATS will compute the fare and deduct the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Farecard is on the Action or Load Value List",
        "Test_Sce_Description": "Check if the SA Tool correctly identifies and updates the Farecard that is on the Action or Load Value List."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Audio Messages for Fare Payment",
        "Test_Sce_Description": "Check if the SA Tool correctly plays the audio messages for fare payment when requested by the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Audio Mode Enablement",
        "Test_Sce_Description": "Check if the operator can successfully enable the audio mode and adjust the volume level using the physical device buttons."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Daily Cap Reached",
        "Test_Sce_Description": "Check if the SA Tool correctly identifies that the Farecard has reached the Daily Cap Limit and deducts no fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment for Premium Service or Special Route/Location",
        "Test_Sce_Description": "Check if the SA Tool correctly computes and deducts the Premium or Special Event fare when a tap on a premium service or special route/location is made."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Upgrade for Premium Service or Special Route/Location",
        "Test_Sce_Description": "Check if the SA Tool correctly computes and deducts the Upgrade fare when a tap on a premium service or special event route/location is made after previously riding on a regular service route."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Check if the SA Tool correctly identifies that the Farecard has reached off peak Daily Cap Limit and has not reached Peak Daily Cap limit, and processes a fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Period Pass for Higher Fare Value Service Class",
        "Test_Sce_Description": "Check if the SA Tool correctly computes and deducts the Upgrade fare when the Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Period Pass for Lower Fare Value Service Class",
        "Test_Sce_Description": "Check if the SA Tool correctly identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment when the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Limited Period Pass",
        "Test_Sce_Description": "Check if the SA Tool correctly identifies that the Farecard has a valid Limited Period Pass and the current time is within the limits of the product, and processes a fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "Check if the SA Tool correctly identifies that the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, and processes a fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should correctly identify the pass as valid and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly identify the pass as invalid, compute the fare to be deducted from the e-Purse, and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a customer with an anonymous farecard with an expired period pass and insufficient ePurse balance attempts to make a transaction. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a customer with a blocked farecard attempts to make a transaction. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard on Deny List",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a customer with a farecard on the Deny List attempts to make a transaction. The system should remove the card from the Deny List, set it to blocked, decline the transaction, and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Low Battery Threshold During Payment",
        "Test_Sce_Description": "This scenario is to validate the system's handling when the battery goes below the low battery threshold during a successful farecard tap. The system should be able to process the remote lists even after the battery goes below the threshold."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the pass as valid and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a customer with a farecard with a valid Child concession attempts to make a transaction. The system should display the successful Child Transit Pass fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a farecard fails inspection. The operator should be able to select the payment function on the inspection results screen, and the system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should correctly identify the pass as valid and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly identify the pass as invalid for the current time, compute the fare to be deducted from the e-Purse, and allow the transaction to proceed by deducting the fare from the e-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when an anonymous farecard with an expired period pass and insufficient ePurse balance is used. The system should correctly identify the card as anonymous and the ePurse balance as insufficient, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a blocked farecard is used. The system should correctly identify the card as blocked and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard on Deny List",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard on the Deny List is used. The system should correctly identify the card as being on the Deny List, remove it from the Deny List, set it to blocked, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Low Battery Scenario",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the battery goes below the low battery threshold during a transaction. The system should be able to process the remote lists even after the battery goes below the threshold during a successful Farecard tap."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the pass as valid and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Child Concession on Farecard",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Child concession is used. The system should correctly identify the concession as valid and display the successful Child Transit Pass fare payment screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard fails inspection. The operator should be able to select the payment function on the inspection results screen, and the system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should successfully accept the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should successfully deduct the fare from the e-Purse and accept the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with an anonymous Virtual Card tries to pay the fare with an expired period pass and insufficient ePurse balance. The system should decline the transaction and display a declined message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Blocked Virtual Card",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to pay the fare with a blocked Virtual Card. The system should decline the transaction and display a declined message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Virtual Card on the Deny List",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to pay the fare with a Virtual Card that is on the Deny List. The system should remove the card from the Deny List, set it to blocked, decline the transaction, and display a declined message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Low Battery Threshold during Payment",
        "Test_Sce_Description": "This scenario is to validate the system's performance when the battery goes below the low battery threshold during a successful Farecard tap. The system should still be able to process the remote lists."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Tap Counter at the Limit",
        "Test_Sce_Description": "This scenario is to validate the system's response when the tap counter is at the limit. The system should display a declined message to the customer and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Unreadable Virtual Card",
        "Test_Sce_Description": "This scenario is to validate the system's response when it detects a Virtual Card but fails to read it correctly. The system should indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Virtual Card with Expired Period Pass and Sufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer tries to pay the fare with a Virtual Card that has an expired period pass but has sufficient ePurse balance. The system should successfully deduct the fare from the ePurse and accept the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that the system correctly deducts the fare from the e-Purse when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring outside of the time limit of the Limited Period Pass Product but the farecard has sufficient e-Purse balance to cover the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the system correctly declines the transaction when the customer has an anonymous Farecard with an expired period pass and ePurse balance less than the fare amount."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "Verify that the system correctly declines the transaction when the customer's Farecard is blocked."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Farecard on the Deny List",
        "Test_Sce_Description": "Verify that the system correctly declines the transaction, removes the card from the Deny List and sets it to blocked when the customer's Farecard is on the Deny List."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Low Battery during Payment",
        "Test_Sce_Description": "Verify that the system correctly switches to 'Out of Service' mode when the battery goes below the low battery threshold during payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Non-Farecard Tap",
        "Test_Sce_Description": "Verify that the system correctly displays the 'Card Read Error' toast message for a short period of time when the customer taps a card that is not a Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Farecard within the Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly declines the transaction when the customer's Farecard is within the Anti-Passback Window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Non-Activated Card",
        "Test_Sce_Description": "Verify that the system correctly declines the transaction when the customer taps a non-activated card that is not on the action list available on the device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made with a premium service class and the farecard has a valid special event transfer product and the tap is within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made with a farecard that has a valid non-adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made with a farecard that has a valid child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Performance of Fare Payment",
        "Test_Sce_Description": "Verify that the system performs the fare payment process within the acceptable time limit and without any delays or lags."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool",
        "Test_Scnario": "Security of Fare Payment",
        "Test_Sce_Description": "Verify that the system securely processes the fare payment and does not expose any sensitive information during the process."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window and the premium fare is higher than the special event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Lower Special Event Fare",
        "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a special event service route within the transfer window and the premium fare is lower than the special event fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid non-adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak load conditions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure and that all sensitive data is encrypted during transmission and storage."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route and the farecard is within the transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Non-Adult Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly calculates and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Performance of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame under normal and peak load conditions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Security of Fare Payment Process",
        "Test_Sce_Description": "Verify that the fare payment process is secure and that all sensitive data is encrypted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Accuracy of Fare Calculation",
        "Test_Sce_Description": "Verify that the fare calculation is accurate based on the farecard's conditions such as service class, transfer product, and concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Correctness of Fare Deduction",
        "Test_Sce_Description": "Verify that the correct fare amount is deducted from the ePurse balance after the fare payment process."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool",
        "Test_Scnario": "Proper Communication with SA Tool",
        "Test_Sce_Description": "Verify that the fare calculation and deduction information is correctly communicated back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession",
        "Test_Sce_Description": "This scenario will validate that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Handling of insufficient ePurse balance",
        "Test_Sce_Description": "This scenario will test how the SA Tool handles a situation where the customer's ePurse balance is less than the fare amount. The tool should put the Farecard into overdraft (negative balance)."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Processing of valid transfer product",
        "Test_Sce_Description": "This scenario will test the SA Tool's ability to identify a valid transfer product on the customer's Farecard and compute the free transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Inter-agency transfer processing",
        "Test_Sce_Description": "This scenario will test the SA Tool's ability to compute the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Autoload threshold processing",
        "Test_Sce_Description": "This scenario will test the SA Tool's ability to check that the ePurse balance (after deducting the travel fare) is under the Autoload threshold and add the Autoload amount to the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Action or Load Value list processing",
        "Test_Sce_Description": "This scenario will test the SA Tool's ability to verify that the Farecard is on the Action or Load Value List and update the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Peak hours fare payment after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "This scenario will test the SA Tool's ability to compute the fare and deduct the amount from the Virtual Card E-Purse during peak hours after previously reaching off peak daily cap."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Premium Service Route fare payment with Transfer",
        "Test_Sce_Description": "This scenario will test the SA Tool's ability to compute the fare and deduct the amount from the Virtual Card E-Purse when the customer taps on a premium service route/location after previously riding on a Special Event service route."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard",
        "Test_Scnario": "Valid Non-Adult Concession processing",
        "Test_Sce_Description": "This scenario will test the SA Tool's ability to correctly identify and process a Valid Non-Adult concession on the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Open Payments Media on Deny List",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Open Payments Media on Local Deny List and Device Offline",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Multiple NFC Media Presented at Once",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Device in Out-of-Service State",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state, the Not In Service Screen is provided to the cardholder and the device does not detect the media. The device should remain in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Error Occurred on Device",
        "Test_Sce_Description": "Verify that when an error has occurred on the device that does not cover the exception cases above, the device records the tap. The Declined \u2013 See Customer Service Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Open Payments Media Not on Approved List in Beta Mode",
        "Test_Sce_Description": "Verify that when a customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or the Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Anti-passback Functionality",
        "Test_Sce_Description": "Verify that when a customer attempts to tap-on immediately after tapping-off at the same station and the device is online, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Anti-passback Functionality Offline",
        "Test_Sce_Description": "Verify that when a customer attempts to tap-on immediately after tapping-off at the same station and the device is offline, the device should not allow the tap and should display an appropriate error message. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Multiple NFC media presented to the device",
        "Test_Sce_Description": "Test the functionality of the device when multiple NFC media are presented at the same time. The device should block all fare payment functionality and present an Anti-Collision toast message to the customer. An error should be captured and logged in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Non-activated Farecard tapped on the device",
        "Test_Sce_Description": "Test the functionality of the device when a non-activated Farecard is tapped. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction due to inactive farecard. An error should be captured and logged in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Card reading error occurs",
        "Test_Sce_Description": "Test the functionality of the device when a Cardholder taps Farecard and a Card reading error occurs. The device should not provide any feedback and screen remains \u201cIn-Service\u201d display. An error should be captured and logged in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Card write error occurs",
        "Test_Sce_Description": "Test the functionality of the device when a Farecard is tapped and a card write error occurs. The device should not provide any feedback and screen remains \u201cIn-Service\u201d display. The device should delete the transaction information. An error should be captured and logged in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Farecard tapped when device is in Out-of-Service state",
        "Test_Sce_Description": "Test the functionality of the device when a Farecard is tapped while the device is in Out-of-Service state. The device should not detect the media and remain in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Virtual Card Media tapped when device is in Out-of-Service state",
        "Test_Sce_Description": "Test the functionality of the device when a Virtual Card Media is tapped while the device is in Out-of-Service state. The device should not detect the media and remain in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Customer attempts to tap-on immediately after tapping-off at the same station",
        "Test_Sce_Description": "Test the functionality of the device when a customer attempts to tap-on immediately after tapping-off at the same station. The device should provide the cardholder with the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Customer attempts to tap-on immediately after tapping-off at the same station and the device is offline",
        "Test_Sce_Description": "Test the functionality of the device when a customer attempts to tap-on immediately after tapping-off at the same station and the device is offline. The device should provide the cardholder with the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Error has occurred on the device",
        "Test_Sce_Description": "Test the functionality of the device when an error has occurred that does not cover the exception cases above. The device should record the tap and provide the cardholder with the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Virtual Card has insufficient E-Purse to cover the Tap-On Fare",
        "Test_Sce_Description": "Test the functionality of the device when a Virtual Card has insufficient E-Purse to cover the Tap-On Fare. The device should provide the cardholder with the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Open Payments Media tap when SA Tool is in Out-of-Service state",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader. The expected outcome is that the device will not detect the media and remain in Out-of-Service state."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Open Payments Media tap when SA Tool is configured for Farecard reversals only",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is configured for only farecard reversals and a customer attempts to tap their Open Payments Media on the card reader. The expected outcome is that the device will display an error message 'Only Available for Farecard'."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Open Payments Media tap not on the approved media list while the device is in Pilot mode",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Pilot mode and a customer attempts to tap an Open Payments Media not on the approved media list. The expected outcome is that the device will check the approved media list and if the media is not found, it will display a 'Declined \u2013 Not Accepted, Tap Farecard' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Open Payments Media tap when it is on the BIN Blocking List",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Open Payments Media is on the BIN Blocking List. The expected outcome is that the device will check its local BIN Blocking list and if the card\u2019s BIN is found to be on the list, it will display a 'Declined \u2013 Try Another Card (BIN Blocked)' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing fare payment reversal with Interac Card while Interac is disabled on SA Tool",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to reverse fare payment with Interac Card while Interac is disabled on the tool. The expected outcome is that the device will determine that the media tapped is not supported and display an error message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing fare payment reversal with Open Payment Card while Open Payments are disabled on SA Tool",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to reverse fare payment with Open Payment Card while Open Payments are disabled on the tool. The expected outcome is that the device will determine that the media tapped is not supported and display an error message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing fare payment reversal with Open Payment Card while corresponding payment method / card brand is disabled on SA Tool",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to reverse fare payment with Open Payment Card while the corresponding payment method / card brand is disabled on the tool. The expected outcome is that the device will determine that the media tapped is not supported and display an error message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Error Occurrence on Device",
        "Test_Sce_Description": "Verify that when an error occurs on the device that does not cover the exception cases, the device records the tap, provides the Declined \u2013 See Customer Service Screen to the cardholder, and logs the error in the background and in the SOTI logs. The declined tap should then be sent to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Insufficient E-Purse Balance",
        "Test_Sce_Description": "Verify that when a Virtual Card\u2019s E-Purse balance is less than that of the Tap-On Fare, the device sends the tap to ATS which returns a response that the virtual card does not have a sufficient E-Purse balance to cover the tap-on fare. The Declined \u2013 Insufficient E-Purse Balance should be provided to the cardholder and the error should be logged in the background and in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Virtual Card Media on Online Hotlist",
        "Test_Sce_Description": "Verify that when the Virtual Card media is on the online hotlist, the device sends the tap to ATS and returns a response that the media is on the online hotlist. The Declined \u2013 Blocked Screen should be provided to the cardholder and the Device should update the blocking parameter on the Virtual Card Scratchpad to be enabled. The error should be logged in the background and in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Virtual Card Media on Online Hotlist with Unblocked Scratchpad",
        "Test_Sce_Description": "Verify that when the Virtual Card media is on the online hotlist but the scratchpad does not indicate blocked, the device sends the tap to ATS for processing. ATS checks the online hotlist and confirms that the virtual card is on the online hotlist. ATS sends the rejected tap back to the device via API. The device will update the scratchpad with the blocked status and send a notification to ATS that it has done so. The Declined \u2013 Blocked Screen should be provided to the cardholder and the Device should update the blocking parameter on the Virtual Card Scratchpad to be enabled. The error should be logged in the background and in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Virtual Card Media on Local Hotlist and Device Offline",
        "Test_Sce_Description": "Verify that when the Virtual Card media is on the local hotlist and the device is offline, the device records the tap and provides the Declined \u2013 Please Contact Customer Service screen to the cardholder. The declined tap should then be sent to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Open Payments Media Not on Approved List",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, the device checks the approved media list and if the media is not found on the approved media list, the Declined \u2013 Not Accepted, Tap Farecard screen is provided to the cardholder. The declined tap should then be sent to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Open Payments Media on BIN Blocking List",
        "Test_Sce_Description": "Verify that when the device checks its local BIN Blocking list and the card\u2019s BIN is found to be on the BIN Blocking List, the device plays the decline audio tone and displays the Declined \u2013 Try Another Card (BIN Blocked) screen. The decline should then be sent to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Interac Card in Debt",
        "Test_Sce_Description": "Verify that when a customer is travelling with an Interac Card, and ATS returns a decline response due to Media In Debt, the device sends the tap to ATS and returns a response that the Interac media is on the deny list. The Declined \u2013 Tap Again (in X Seconds) screen (Interac \u2013 Trying to Pay Unpaid Fares) screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Interac Card in Debt with Device Offline",
        "Test_Sce_Description": "Verify that when a customer is travelling with an Interac Card, the device is offline, and Interac media is on the local deny list due to Media In Debt, the device checks the local deny list and finds the media on the local deny list due to reason Media in Debt. The Declined \u2013 Tap Again (in X Seconds) screen (Interac \u2013 Trying to Pay Unpaid Fares) screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Interac Card Tapped while Interac Disabled on SA Tool",
        "Test_Sce_Description": "Verify that when a customer taps the Interac media on the device Card Reader (CID) and the device detects the Interac media, the device determines that the media tapped is not supported and displays an error message. The right to travel should not be conferred and a transaction should not be recorded."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap on and an error has occurred",
        "Test_Scnario": "Open Payment Card Tapped while Open Payments Disabled on SA Tool",
        "Test_Sce_Description": "Verify that when a customer taps an Open Payment Card while Open Payments are disabled on SA Tool, the device should not process the tap and should display an error message indicating that Open Payments are not supported. The right to travel should not be conferred and a transaction should not be recorded."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Open Payments Media on Deny List",
        "Test_Sce_Description": "This scenario tests the functionality of the system when the Open Payments Media is on the deny list. The system should not confer the right to travel and should return a response that the media is on the deny list when the device sends the tap to ATS. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background and in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Open Payments Media on Local Deny List and Device Offline",
        "Test_Sce_Description": "This scenario tests the functionality of the system when the Open Payments Media is on the local deny list and the device is offline. The system should not confer the right to travel and should return a response that the media is denied when the device checks the local deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background and in the SOTI logs. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Multiple NFC Media Presented at Once",
        "Test_Sce_Description": "This scenario tests the functionality of the system when multiple NFC media are presented to the device at one time. The device should block all fare payment functionality and provide the Anti-Collision Error Screen to the cardholder. An error should be captured and logged in the background and in the SOTI logs. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Device in Out-of-Service State",
        "Test_Sce_Description": "This scenario tests the functionality of the system when the device is in an Out-of-Service state. The device should display the Not in Service screen to the cardholder and not detect the media when the customer attempts to tap their Open Payments Media on the card reader. The device should remain in the Out-of-Service state."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Error Occurred on Device",
        "Test_Sce_Description": "This scenario tests the functionality of the system when an error has occurred on the device that does not cover the exception cases above. The device should record the tap and provide the Declined \u2013 See Customer Service Screen to the cardholder. An error should be captured and logged in the background and in the SOTI logs. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Open Payments Media Not on Approved List and Device in Beta Mode",
        "Test_Sce_Description": "This scenario tests the functionality of the system when the customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode. The system should not confer the right to travel and should return a response that the media is on the deny list when the device sends the tap to ATS. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background and in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Customer Taps-on Immediately After Tapping-off at Same Station and Device Online",
        "Test_Sce_Description": "This scenario tests the functionality of the system when the customer taps-on immediately after tapping-off at the same station and the device is online. The device should send the tap to ATS and return a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background and in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Scnario": "Customer Taps-on Immediately After Tapping-off at Same Station and Device Offline",
        "Test_Sce_Description": "This scenario tests the functionality of the system when the customer taps-on immediately after tapping-off at the same station and the device is offline. The device should not detect the tap and should remain in the Out-of-Service state."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the time limit of the pass. The system should correctly identify the validity of the pass and allow the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the time limit of the pass but has sufficient e-Purse balance. The system should correctly identify the invalidity of the pass, compute the fare to be deducted from the e-Purse, and allow the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when an anonymous farecard with an expired period pass and insufficient ePurse balance is used. The system should correctly identify the card as anonymous, detect the insufficient balance, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a blocked farecard is used. The system should correctly identify the card as blocked and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard on Deny List",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard on the Deny List is used. The system should correctly identify the card as being on the Deny List, remove it from the list, set it to blocked, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Low Battery Threshold",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the battery goes below the low battery threshold during a transaction. The system should be able to process the remote lists even after the battery goes below the threshold."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value is used. The system should correctly identify the validity of the pass and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Child concession is used. The system should correctly identify the concession and display the successful Child Transit Pass fare payment screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard fails inspection. The operator should be able to select the payment function on the inspection results screen and the system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the time limit of the pass. The system should correctly identify the pass as valid and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the time limit of the pass but has sufficient e-Purse balance. The system should correctly identify the pass as invalid, compute the fare to be deducted from the e-Purse, and deduct the fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Low Battery Threshold During Payment",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the battery goes below the low battery threshold during a payment. The system should be able to process the remote lists even after the battery goes below the threshold during a successful farecard tap."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a Valid Child concession is used. The system should correctly identify the concession and display the successful Child Transit Pass fare payment screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a fare payment results from a failed inspection. The system should correctly record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Valid Limited Period Pass within time limit",
        "Test_Sce_Description": "Verify that the fare payment is accepted when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Valid Limited Period Pass outside time limit with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that the fare payment is accepted when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring outside of the time limit of the Limited Period Pass Product but the farecard has sufficient e-Purse balance to cover the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Expired Period Pass and ePurse Balance Less than the Fare Amount",
        "Test_Sce_Description": "Verify that the fare payment is declined when the customer has an expired period pass, ePurse balance is less than the fare amount and the customer has an anonymous Virtual Card."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Blocked Virtual Card",
        "Test_Sce_Description": "Verify that the fare payment is declined when the customer\u2019s Farecard is blocked."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Virtual Card on the Deny List",
        "Test_Sce_Description": "Verify that the fare payment is declined when the customer\u2019s Virtual Card is on the Deny List."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Low battery threshold during payment",
        "Test_Sce_Description": "Verify that the fare payment is processed correctly when the low battery threshold is high enough that the remote lists can be processed even after the SA Tool battery goes below the low battery threshold during a successful Farecard tap."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Tap counter at the configured limit",
        "Test_Sce_Description": "Verify that the fare payment is declined when the tap counter is at the configured limit."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Unreadable Virtual Card",
        "Test_Sce_Description": "Verify that the SA Tool application indicates to the operator that the Virtual Card is unreadable when the SA Tool application detects the Virtual Card and fails to read it correctly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Expired Period Pass with Sufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the fare payment is accepted when the customer\u2019s Virtual Card has an expired period pass and the customer\u2019s ePurse balance is more than the fare amount."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should successfully accept the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should deduct the fare from the e-Purse and accept the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when an anonymous farecard with an expired period pass and insufficient ePurse balance is used. The system should decline the transaction and display a declined message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a blocked farecard is used. The system should detect the blocked card, decline the transaction and display a declined message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Farecard on Deny List",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard on the Deny List is used. The system should detect the card on the Deny List, remove it from the list, block it, decline the transaction and display a declined message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Low Battery Threshold",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the battery goes below the low battery threshold during payment. The system should be able to process the remote lists even after the battery goes below the threshold."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Non-Activated Card",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a non-activated card is used. The system should display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Farecard within Anti-Passback Window",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard within the Anti-Passback Window is used. The system should detect the Anti-Passback violation, decline the transaction and display a declined message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Performance of the System",
        "Test_Sce_Description": "This scenario is to validate the performance of the system under different load conditions. The system should be able to handle multiple transactions simultaneously without any performance degradation."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Security of the System",
        "Test_Sce_Description": "This scenario is to validate the security measures implemented in the system. The system should be able to securely process transactions and protect customer data."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Virtual Card is Blocked",
        "Test_Sce_Description": "Verify that when a customer's virtual card is blocked, the transaction is declined and the appropriate declined message is displayed to the customer. Also, ensure that the declined audio tone is played and the Scratchpad is updated accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Virtual Card is on the Deny List",
        "Test_Sce_Description": "Check that when a customer's virtual card is on the Deny List, the card is removed from the Deny List and set to blocked. The transaction should be declined and the appropriate declined message should be displayed to the customer. Also, ensure that the declined audio tone is played and the Scratchpad is updated accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Ensure that if the low battery threshold is reached before Step 5, the application switches to \u201cOut of Service\u201d mode. If the low battery threshold is reached after Step 5, the customer's fare payment should be processed and then the application should switch to \u201cOut of Service\u201d mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Card is not a Farecard",
        "Test_Sce_Description": "Verify that if a customer's card is not a Farecard, the SA Tool application does not respond and the device error message \u201cCard Read Error\u201d is displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Card is within the Anti-Passback Window",
        "Test_Sce_Description": "Check that if a customer's card is within the Anti-Passback Window, the transaction is declined and the appropriate declined message is displayed to the customer. Also, ensure that the declined audio tone is played."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled",
        "Test_Sce_Description": "Ensure that if the Virtual Card Media is blocked, the right to travel is not conferred. If the Virtual Card Media is blocked in the wallet, there should not be an interaction with the device on an attempted tap."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "Tap counter is greater than the allowable offline taps",
        "Test_Sce_Description": "Verify that if the Virtual Media has reached its offline tap counter limit, the right to travel is not conferred. The device should check the tap counter and if the tap counter limit has been reached, the offline device should reject the tap and the rider should not be permitted entry."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "E-Ticket is not in the deny list and is activated",
        "Test_Sce_Description": "Check that the device performs a check against the local deny list and confirms that the current E-Ticket being validated is not on the deny list. The device should call the Bytemark API and receive a response that the E-Ticket is valid for travel."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "E-Ticket holder scans QR Code against the SA Tool reader and the SA Tool is Offline",
        "Test_Sce_Description": "Ensure that if an E-Ticket fails the necessary validation checks, the device returns the appropriate feedback, and the right to travel is not conferred. As the device is offline, the call to the Bytemark backend will fail and be unable to retrieve details regarding the E-Ticket."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Customer\u2019s Virtual Card is Blocked",
        "Test_Scnario": "E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader",
        "Test_Sce_Description": "Verify that when an E-Ticket holder scans a Group QR Code at the SA Tool Barcode Reader, the device is able to process the QR Code and validate the E-Ticket."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Anonymous Farecard with Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the SA Tool application correctly identifies an anonymous Farecard with an ePurse balance less than the fare amount, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Ensure that the SA Tool application correctly identifies a blocked Farecard, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Farecard on the Hotlist",
        "Test_Sce_Description": "Confirm that the SA Tool application correctly identifies a Farecard on the hotlist, updates the card\u2019s status to blocked, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Check if the application switches to \u201cOut of Service\u201d mode when the low battery threshold is reached before Step 5. If not, the customers fare payment should be processed as per Step 5 and then the application should switch to \u201cOut of Service\u201d mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Non-Farecard Tap",
        "Test_Sce_Description": "Verify that the SA Tool displays the \u201cCard Read Error\u201d toast message for a short period of time when a card that is not a Farecard is tapped."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Farecard within the Anti-Passback Window",
        "Test_Sce_Description": "Ensure that the device correctly detects that the Farecard fails the Anti-Passback checks, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Non-Activated Card Tap",
        "Test_Sce_Description": "Confirm that the device correctly detects that the Farecard is not activated, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Limited Period Pass outside of valid time while card is in overdraft",
        "Test_Sce_Description": "Check if the SA Tool correctly detects that the Limited Period Pass is not valid at the current time, computes the value to be deducted from the e-Purse, detects that farecard is in overdraft, displays a declined message to the customer, plays the declined audio tone, and returns to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard - Customer\u2019s Farecard is on the Deny List",
        "Test_Scnario": "Locked Farecard",
        "Test_Sce_Description": "Verify that the SA Tool reads the Farecard and determines that it is locked, displays a declined screen to the operator and does not proceed with the inspection."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Low Battery Threshold Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when the battery level reaches the low battery threshold during a fare payment process. The test will verify if the application switches to 'Out of Service' mode when the low battery threshold is reached before step 5 of the main use case. If the low battery threshold is reached after step 5, the test will verify if the fare payment is processed successfully before the application switches to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Fare Payment Processing Test",
        "Test_Sce_Description": "This scenario tests the fare payment processing functionality of the application. The test will verify if the application correctly processes the fare payment as per step 5 of the main use case when the battery level is above the low battery threshold."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Card Read Error Test",
        "Test_Sce_Description": "This scenario tests the application's response when a non-Farecard is tapped. The test will verify if the application does not respond and if the device displays the error message 'Card Read Error' for a short period of time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Anti-Passback Window Test",
        "Test_Sce_Description": "This scenario tests the application's functionality when a Farecard within the Anti-Passback Window is used for fare payment. The test will verify if the application detects that the Farecard fails the Anti-Passback checks and if it displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Blocked Virtual Card Test",
        "Test_Sce_Description": "This scenario tests the application's functionality when a blocked Virtual Card is used for fare payment. The test will verify if the application reads the Scratchpad, detects that the Farecard is blocked, and displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Deny List Test",
        "Test_Sce_Description": "This scenario tests the application's functionality when a Virtual Card on the Deny List is used for fare payment. The test will verify if the device reads the Scratchpad, detects that the Virtual Card is on the local Deny List, and displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "This scenario tests the performance of the application during fare payment processing. The test will verify if the application processes the fare payment within the acceptable time limit and if it handles multiple fare payment requests efficiently."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "This scenario tests the security features of the application. The test will verify if the application securely processes fare payments, protects customer data, and prevents unauthorized access."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Unreadable Card",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer taps an unreadable Virtual Card. The tool should detect the card but fail to read it, and then indicate to the operator that the card is unreadable. If the customer taps the card again and it is successful, the tool should proceed with the fare payment process. If the tap is unsuccessful, the tool should again indicate that the card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Non-Adult, Non-Child, Non-Discreet Concessions",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer with a valid non-adult, non-child, non-discreet concession taps their Virtual Card. The tool should successfully process the fare payment and play the appropriate audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Insufficient ePurse Balance",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer with an ePurse balance less than the fare amount taps their Virtual Card. The tool should send the tap to ATS for processing, which should then put the card into overdraft and update the Virtual Card accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Intra-SP Transfer Window",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer with a valid intra-agency transfer product taps their Virtual Card. The tool should read the transfer product, deduct $0 from the ePurse, and update the Virtual Card accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Inter-SP Transfer Window",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer with a valid inter-agency transfer product taps their Virtual Card. The tool should read the transfer product, deduct $0 from the ePurse, and update the Virtual Card accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Accepting Fare Payment from a Farecard - Incorrect Farecard Type",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer taps a Farecard of the incorrect type. The tool should detect the Farecard, identify the incorrect type, and notify the operator."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Accepting Fare Payment from a Farecard - Non-Farecard Tapped",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer taps a non-Farecard. The tool should identify the card as a non-Farecard and display an error message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Blocked/Hotlisted Card",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a customer taps a blocked or hotlisted Virtual Card. The tool should detect that the card is blocked and display the Farecard query screen, indicating that the card has been blocked."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Accepting Fare Payment from a Virtual Card - Ineligible Products",
        "Test_Sce_Description": "Test the functionality of the SA Tool when the shopping cart contains ineligible products. The tool should display an error confirming that one or more of the products are not available for sale."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card\u2013 Customer taps a card that is not a Farecard",
        "Test_Scnario": "Accepting Fare Payment from a Virtual Card - ATS Failure to Load Products",
        "Test_Sce_Description": "Test the functionality of the SA Tool when ATS fails to load products to the customer\u2019s account. The tool should inform the operator that the products purchased were not added to the user\u2019s account."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Testing the Anti-Passback Window functionality",
        "Test_Sce_Description": "This scenario will test the functionality of the Anti-Passback Window. The test will involve a customer's card that is within the Anti-Passback Window. The expected outcome is that the ATS detects that the Farecard fails the Anti-Passback checks and the SA Tool application will display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Testing the Offline SA Tool functionality with a Virtual Card",
        "Test_Sce_Description": "This scenario will test the functionality of the Offline SA Tool with a Virtual Card. The test will involve an operator accepting a fare payment on an offline SA Tool from a Virtual Card. The expected outcome is that the SA Tool reads the Virtual Card, performs the necessary validation checks, and displays the successful fare payment screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Testing the Audio Messages functionality",
        "Test_Sce_Description": "This scenario will test the functionality of the Audio Messages. The test will involve a customer asking to pay for the trip with their Virtual Card and requesting audio messages for fare payment. The expected outcome is that the SA Tool displays the fare payment screen to the operator and customer for the duration of the audio message and the corresponding audio message is played to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Testing the functionality when a Farecard is not activated",
        "Test_Sce_Description": "This scenario will test the functionality when a Farecard is not activated. The test will involve a customer tapping a non-activated card. The expected outcome is that the device detects that the Farecard is not activated and the SA Tool application will display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Testing the functionality of a Limited Period Pass outside of valid time",
        "Test_Sce_Description": "This scenario will test the functionality of a Limited Period Pass outside of valid time. The test will involve a farecard that has a valid Limited Period Pass and the current time is outside the time limits of the product. The expected outcome is that the SA Tool detects that the Limited Period Pass is not valid at the current time and displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card \u2013 Customer\u2019s Farecard is within the Anti-Passback Window",
        "Test_Scnario": "Testing the functionality when a Farecard is locked",
        "Test_Sce_Description": "This scenario will test the functionality when a Farecard is locked. The test will involve a locked Farecard. The expected outcome is that the SA Tool reads the Farecard, determines that it is locked, and displays a declined screen to the operator."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Incorrect Farecard Type",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when an incorrect Farecard type is tapped. The tool should be able to identify the incorrect Farecard type and notify the operator. The test will confirm if the use case terminates as expected."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Non-Farecard Tapped",
        "Test_Sce_Description": "This scenario tests the SA Tool's ability to identify a non-Farecard when it is tapped to the reader. The tool should display an error pop up message. The test will confirm if the use case terminates as expected."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Failure to Read Virtual Card",
        "Test_Sce_Description": "This scenario tests the SA Tool's ability to handle situations when it fails to read a Virtual Card. The tool should indicate to the operator that the Virtual Card read has failed and allow the operator to retry. The test will confirm if the use case resumes or terminates as expected."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Non-Virtual Card Tapped",
        "Test_Sce_Description": "This scenario tests the SA Tool's ability to identify a non-Virtual Card when it is tapped to the reader. The tool should display an error pop up message. The test will confirm if the use case terminates as expected."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Blocked/Hotlisted Farecard",
        "Test_Sce_Description": "This scenario tests the SA Tool's ability to detect a blocked Farecard. The tool should display the Farecard query screen indicating that the Farecard has been blocked and prevent further actions on the Farecard. The test will confirm if the operator is able to exit and return to the SA Tool application home screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Ineligible Products in Shopping Cart",
        "Test_Sce_Description": "This scenario tests the SA Tool's ability to handle situations when ineligible products are added to the shopping cart. The tool should display an error confirming that one or more of the products are not available for sale. The test will confirm if the operator is able to remove the ineligible products and reattempt the shopping flow."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "ATS Failure to Load Products",
        "Test_Sce_Description": "This scenario tests the SA Tool's ability to handle situations when ATS is unable to load products to the customer\u2019s account. The tool should inform the operator that the products purchased were not added to the user\u2019s account. The test will confirm if the operator is able to attempt the checkout again or provide the customer a refund if the customer paid with cash."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Farecard Tapped-off at Same Location",
        "Test_Sce_Description": "This scenario tests the SA Tool's ability to handle situations when the Farecard is tapped-off at the same location where tap-on occurred. The tool should provide the appropriate feedback to the cardholder without updating the Farecard. The test will confirm if an error is captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "This scenario tests the SA Tool's ability to handle situations when a blocked Farecard is tapped. The tool should not confer the right to travel and provide the appropriate feedback to the Cardholder. The test will confirm if an error is captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "This scenario tests the SA Tool's ability to handle situations when the time since tap-on exceeds the Max Travel Duration. The tool should auto-settle the Underpayment and open a new trip. The test will confirm if the use case resumes as expected."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Multiple NFC Media Presented",
        "Test_Sce_Description": "This scenario tests the SA Tool's ability to handle situations when multiple NFC media are presented to the device at one time. The tool should block all user functionality and present Anti-Collision HMI to customer. The test will confirm if an error is captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Non-Activated Farecard Tapped",
        "Test_Sce_Description": "This scenario tests the SA Tool's ability to handle situations when a non-activated Farecard is tapped on the device. The tool should provide feedback to the Cardholder of an unsuccessful transaction. The test will confirm if an error is captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "This scenario tests the SA Tool's ability to handle situations when a Card reading error occurs (e.g. Farecard is immediately removed from the card reader). The tool should provide feedback to the Cardholder of an unsuccessful transaction. The test will confirm if an error is captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Incorrect Farecard Type",
        "Test_Sce_Description": "In this scenario, the SA Tool application identifies the Farecard Type to be incorrect for the mode the operator is currently operating in. The SA Tool application notifies the operator of the incorrect Farecard Type. The use case terminates."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Non-Farecard tapped to the reader",
        "Test_Sce_Description": "In this scenario, the SA Tool application identifies the card to be a non-Farecard and displays an error pop up message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Failure to read Virtual Card",
        "Test_Sce_Description": "In this scenario, the NFC reader detects the Virtual Card but is unable to read it. SA Tool application will indicate to the operator that the Virtual Card read has failed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Non-Virtual Card tapped to the reader",
        "Test_Sce_Description": "In this scenario, the SA Tool application identifies the card to be a non-Virtual Card and displays an error pop up message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Sce_Description": "In this scenario, the SA Tool application detects that the Farecard is blocked. The SA Tool application will display the Farecard query screen indicating that the Farecard has been blocked."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Virtual Card \u2013 Ineligible Products",
        "Test_Sce_Description": "In this scenario, while loading funds and/or a transit pass, the product that the operator is loading is no longer eligible to be sold after being added to cart."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "ATS failure to load products",
        "Test_Sce_Description": "In this scenario, after proceeding through checkout, ATS is not able to load products onto a customer\u2019s account."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Farecard is blocked",
        "Test_Sce_Description": "In this scenario, the card reader detects Farecard is blocked and the right to travel is not conferred."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "In this scenario, if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Multiple NFC media are presented to the device at one time",
        "Test_Sce_Description": "In this scenario, if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Tap a non-activated Farecard on an SA Tool",
        "Test_Sce_Description": "In this scenario, if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs",
        "Test_Sce_Description": "In this scenario, Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader)."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Unreadable Virtual Card",
        "Test_Sce_Description": "Test the functionality of the SA Tool when it detects a Virtual Card but fails to read it correctly. The application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is successful, the normal process should continue. If the tap is unsuccessful, the application should again indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "Test the functionality of the SA Tool when the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The application should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "ePurse balance less than the fare amount",
        "Test_Sce_Description": "Test the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS should check the online hotlist, complete the fare processing, remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Transaction within Intra-SP Transfer window",
        "Test_Sce_Description": "Test the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Transaction within Inter-SP Transfer window",
        "Test_Sce_Description": "Test the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product from other service provider. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. The right to travel should be conferred to the Cardholder by updating the Virtual Card."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Virtual Card Media fails the Card Authentication check",
        "Test_Sce_Description": "Test the functionality of the SA Tool when the Virtual Card Media fails the Card Authentication check. The device should return the appropriate feedback and the Declined \u2013 Contact CLIENT Customer Service screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Multiple NFC media presented at one time",
        "Test_Sce_Description": "Test the functionality of the SA Tool when multiple NFC media are presented to the device at one time. The device should block all fare payment functionality and the Anti-Collision Error Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Device in Out-of-Service state",
        "Test_Sce_Description": "Test the functionality of the SA Tool when the device is in Out-of-Service state. The device should display the Not in Service screen to the cardholder and not detect the media."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Error occurred on the device",
        "Test_Sce_Description": "Test the functionality of the SA Tool when an error has occurred on the device. The device should record the tap and the Declined \u2013 See Customer Service Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Virtual Card Media on the local hotlist and device is offline",
        "Test_Sce_Description": "Test the functionality of the SA Tool when the Virtual Card Media is on the local hotlist and the device is offline. The device should check the local hotlist and return a response that the media is denied. The right to travel should not be conferred and the Declined \u2013 Blocked Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Failure to read Virtual Card",
        "Test_Scnario": "Virtual Card Media\u2019s blocked parameter on the scratchpad is enabled",
        "Test_Sce_Description": "Test the functionality of the SA Tool when the Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled. The device should check the blocked parameter and return a response that the media is denied. The right to travel should not be conferred and the Declined \u2013 Blocked Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Default Trip Tap-On",
        "Test_Sce_Description": "Verify that when a Virtual Card with a default trip is tapped on at either the origin or destination station, the device correctly identifies the tap as associated with the default trip and displays the default trip success screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Default Trip Override",
        "Test_Sce_Description": "Verify that when a Virtual Card with a default trip is tapped on at either the origin or destination station and the customer requests an override, the device correctly overrides the default trip and processes the tap as a regular tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card No Default Trip Override",
        "Test_Sce_Description": "Verify that when a Virtual Card with no default trip is tapped on while the device is in Override mode, the device correctly processes the tap as a regular tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Scratchpad Update",
        "Test_Sce_Description": "Verify that when a Virtual Card in good standing is tapped on and the scratchpad blocked parameter needs to be updated, the device correctly updates the scratchpad and provides the appropriate feedback to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Authentication Failure",
        "Test_Sce_Description": "Verify that when a Virtual Card fails the Card Authentication check, the device correctly identifies the failure, provides the appropriate feedback to the cardholder, and sends the declined tap to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Double Tap-On Online",
        "Test_Sce_Description": "Verify that when a Virtual Card is tapped on again at the same station within the anti-passback window and both devices are online, the device correctly identifies the double tap, provides the appropriate feedback to the cardholder, and sends the declined tap to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Double Tap-On Offline",
        "Test_Sce_Description": "Verify that when a Virtual Card is tapped on again at the same station within the anti-passback window and the device is offline, the device correctly identifies the double tap, stores the tap until it is connected to ATS, and provides the appropriate feedback to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device correctly blocks all fare payment functionality and provides the appropriate feedback to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Tap-On in Out-of-Service State",
        "Test_Sce_Description": "Verify that when a Virtual Card is tapped on while the device is in an Out-of-Service state, the device correctly identifies the state and provides the appropriate feedback to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Scnario": "Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled",
        "Test_Sce_Description": "Verify that when the Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled, the right to travel is not conferred. The device should check the local hotlist and not find the Virtual Card. The device should also check the Virtual Card Scratchpad and determine the card blocked parameter is set to true."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Scnario": "Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled",
        "Test_Sce_Description": "Verify that when the Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled, the right to travel is not conferred. The device should not know a tap is attempted and will have no action."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Scnario": "Tap counter is greater than the allowable offline taps",
        "Test_Sce_Description": "Verify that when the tap counter is greater than the allowable offline taps, the right to travel is not conferred. The device should check the tap counter and if the tap counter limit has been reached, the offline device should reject the tap and the rider should not be permitted entry."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Scnario": "Accepting Fare Payment from the E-Ticket",
        "Test_Sce_Description": "Verify that the operator can accept a fare payment from an e-Ticket. The device should perform a check to ensure that the E-Ticket meets timestamp window requirements and is not on the deny list. The device should call the Bytemark API and receive a response that the E-Ticket is valid for travel."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Scnario": "E-Ticket holder scans QR Code against the SA Tool reader and the SA Tool is Offline",
        "Test_Sce_Description": "Verify that when the E-Ticket holder scans the QR Code against the SA Tool reader and the SA Tool is Offline, the device returns the appropriate feedback, and the right to travel is not conferred. The device should be unable to retrieve details regarding the E-Ticket."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Scnario": "E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader",
        "Test_Sce_Description": "Verify that when the E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader, the device should be able to process the group QR code and provide the appropriate feedback to the user."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "ATS failure to load products",
        "Test_Sce_Description": "This scenario will test the system's response when ATS fails to load products onto a customer\u2019s account after checkout. The system should inform the operator that the products purchased were not added to the user\u2019s account. The operator should then have the option to attempt the checkout again or provide the customer a refund if the customer paid with cash."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "SVC / VC Shopping Cart",
        "Test_Sce_Description": "This scenario will test the system's response when the shopping cart includes both SVC and VC products. The system should not allow both SVC and VC products in the shopping cart at the same time. If the cart has ineligible products, the Operator should receive an error providing them the option to clear the cart."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "ECP is disabled and Customer\u2019s Artemis device is locked or asleep",
        "Test_Sce_Description": "This scenario will test the system's response when the user\u2019s device is locked or asleep and ECP is disabled for the users Virtual Card. The system should not detect the virtual card media and the screen should remain the same. The Artemis device should prompt the user to provide authentication."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is disabled",
        "Test_Sce_Description": "This scenario will test the system's response when the user\u2019s mobile device is in Power Reserve mode and ECP is disabled on the mobile device for the users Virtual Card. The system should not detect the virtual card media and the screen should remain the same. The Artemis device should prompt the user to charge their device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "Virtual Card Media fails the Card Authentication check",
        "Test_Sce_Description": "This scenario will test the system's response when the Virtual Card Media fails the Card Authentication check. The system should return the appropriate feedback and provide the Declined \u2013 Contact CLIENT Customer Service screen to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "Multiple NFC media are presented to the device at one time",
        "Test_Sce_Description": "This scenario will test the system's response when multiple NFC media are presented to the device at one time. The system should block all fare payment functionality and provide the Anti-Collision Error Screen to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "Tap-off a Virtual Card Media when SA Tool is in Out-of-Service state",
        "Test_Sce_Description": "This scenario will test the system's response when the device is in Out-of-Service state and a customer attempts to tap their Virtual Card Media on the card reader. The device should not detect the media and remain in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "An error has occurred",
        "Test_Sce_Description": "This scenario will test the system's response when an error has occurred on the device that does not cover the exception cases above. The system should record the tap and provide the Declined \u2013 See Customer Service Screen to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "Virtual Card Media is on the local hotlist and device is offline",
        "Test_Sce_Description": "This scenario will test the system's response when the Virtual Card Media is on the local hotlist and the device is offline. The system should check the local hotlist and return a response that the media is denied. The right to travel should not be conferred and the Declined \u2013 Blocked Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Virtual Card \u2013 Ineligible Products",
        "Test_Scnario": "Virtual Card Media\u2019s blocked parameter on the scratchpad is enabled",
        "Test_Sce_Description": "This scenario will test the system's response when the Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled. The system should deny the media and provide the Declined \u2013 Blocked Screen to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "ATS failure to load products",
        "Test_Sce_Description": "This scenario will test the functionality of the system when ATS fails to load products onto a customer\u2019s account. The operator should be informed that the products purchased were not added to the user\u2019s account. The operator should have the option to attempt the checkout again or provide the customer a refund if the customer paid with cash."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "SVC / VC Shopping Cart",
        "Test_Sce_Description": "This scenario will test the functionality of the system when the shopping cart includes either SVC or VC products. The system should not allow both SVC and VC products in the shopping cart at the same time. If the cart has ineligible products, the Operator should receive an error providing them the option to clear the cart."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "ECP is disabled and Customer\u2019s Artemis device is locked or asleep",
        "Test_Sce_Description": "This scenario will test the functionality of the system when the user\u2019s device is locked or asleep and ECP is disabled for the users Virtual Card. The system should prompt the user to provide authentication for their Virtual Card media on their Artemis device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is disabled",
        "Test_Sce_Description": "This scenario will test the functionality of the system when the user\u2019s mobile device is in Power Reserve mode and ECP is disabled on the mobile device for the users Virtual Card. The system should prompt the user to charge their device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "Device is offline and not connected to Accenture Ticketing Services",
        "Test_Sce_Description": "This scenario will test the functionality of the system when the device is offline and not connected to Accenture Ticketing Services. The device should check the local deny list if the media is on the local deny list. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "Open Payments Media fails ODA check",
        "Test_Sce_Description": "This scenario will test the functionality of the system when an Open Payments Media fails the ODA check. The device should return the appropriate feedback and the Declined \u2013 Failed ODA Check Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "This scenario will test the functionality of the system when an Open Payments Media fails the Expiry Check. The device should return the appropriate feedback and the Declined \u2013 Card Expired Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "Open Payments Media has already tapped-on using an Online Device within Anti-Passback Window",
        "Test_Sce_Description": "This scenario will test the functionality of the system when the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window. The device should provide the cardholder with the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "Open Payments Media has already tapped-on using an Offline Device",
        "Test_Sce_Description": "This scenario will test the functionality of the system when the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window whereby the initial device tapped, and secondary device(s) is the same device and is offline. The device should provide the cardholder with the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "ATS failure to load products",
        "Test_Scnario": "Open Payments Media is on the ATS deny list and the SA Tool is online",
        "Test_Sce_Description": "This scenario will test the functionality of the system when Open Payments Media is on the deny list and the SA Tool is online. The system should deny the transaction and provide the appropriate feedback to the user."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Load or Action Transaction Processing",
        "Test_Sce_Description": "Verify that the device processes the Load or Action Transaction prior to continuing the validation Use Case. This is to ensure that the Load or Action Transaction is processed correctly and in the right order."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Feedback to Cardholder",
        "Test_Sce_Description": "Verify that the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to a List Item processing. This is to ensure that the Cardholder is correctly informed about the transaction status."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Transfer Discount Application",
        "Test_Sce_Description": "Verify that the Tap-On Fare configured on the device as well as the Underpayment Value will be reduced to account for the Transfer Discount. This is to ensure that the Transfer Discount is correctly applied."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Full Fare Deduction",
        "Test_Sce_Description": "Verify that the Device will deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. This is to ensure that the correct fare is deducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Default Trip Override",
        "Test_Sce_Description": "Verify that the Device will override the default O/D contained on the Farecard and process the tap as a regular tap-on. This is to ensure that the default trip can be overridden correctly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Underpayment Deduction",
        "Test_Sce_Description": "Verify that the Device will deduct the Underpayment Value from the Farecard E-Purse prior to performing the Fare Validation. This is to ensure that the Underpayment Value is correctly deducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Non-Revenue Farecard Processing",
        "Test_Sce_Description": "Verify that the SA tool will only accept Non-Revenue farecard in the training mode. If the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI. This is to ensure that Non-Revenue farecards are correctly processed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Temporal Class Supplement Processing",
        "Test_Sce_Description": "Verify that the farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement. This is to ensure that Temporal Class Supplements are correctly processed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Fare Payment Acceptance",
        "Test_Sce_Description": "Verify that the ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool. This is to ensure that fare payments are correctly accepted and processed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Fare Payment during Peak hours",
        "Test_Sce_Description": "Verify that a tap on peak hours after previously reaching off peak daily cap (outside the transfer window) results in a fare payment. This is to ensure that fare payments during peak hours are correctly processed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Premium Service Route Fare Payment",
        "Test_Sce_Description": "Verify that a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a fare upgrade. This is to ensure that fare payments on premium service routes are correctly processed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Premium Service Route Free Transfer",
        "Test_Sce_Description": "Verify that a tap on a premium service route/location after previously riding on a Special Event service route (within the transfer window) results in a free transfer. This is to ensure that free transfers on premium service routes are correctly processed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a valid transfer product",
        "Test_Scnario": "Fare Payment with Valid Non-Adult Concession",
        "Test_Sce_Description": "Verify that the fare payment is correctly processed when the customer\u2019s Farecard has a Valid Non-Adult concession. This is to ensure that fare payments with valid non-adult concessions are correctly processed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Full Fare-by-Zone transaction processing",
        "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip should use PAR as the card identifier."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Override default O/D on Open Payments Media",
        "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and process the tap as a regular tap-on. The customer should be able to request the override of a Default Trip by interacting with the Device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Capping discount eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list and complete the fare processing. ATS should calculate the capping discount and apply to the fare calculation."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Multiple capping discounts eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS should take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Offline device capping discount processing",
        "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services. The tap should then be rated in ATS. Capping rules should follow use-case logic outlined in ticketing use cases."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Open Payments Media fails ODA check",
        "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device should perform the necessary validation and determines that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device should detect that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. The Card reader should detect that Farecard is blocked. The Device should provide the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Max Travel Duration Exceeded",
        "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. The Device should determine that the Tap-On Time + Max Travel Duration < Current Time and Auto-settle the Underpayment and deducts the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Multiple NFC media presented",
        "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. The Device should block all user functionality, presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Non-activated Farecard",
        "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. The Device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Taps on at either the Origin or Destination Station",
        "Test_Scnario": "Card reading error",
        "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device should provide the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Fare-by-Zone transaction with default O/D on Farecard",
        "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Override of Default Trip on Open Payments Media",
        "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on when the customer requests the override of a Default Trip by interacting with the Device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Eligibility for capping discount",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Eligibility for multiple capping discounts",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS will take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Device offline during capping discount eligibility",
        "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules will follow use-case logic outlined in ticketing use cases."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media fails ODA check",
        "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device performs the necessary validation and determines that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Farecard is blocked",
        "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. Card reader detects Farecard is blocked. Right to travel is not conferred. The Device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. Device determines that the Tap-On Time + Max Travel Duration < Current Time. Device Auto-settles the Underpayment and deducts the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple NFC media are presented to the device at one time",
        "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. Customer presents multiple NFC medias to the card reader at once. Device blocks all user functionality, presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Tap a non-activated Farecard on an SA Tool",
        "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. Device detects that the Farecard is not activated. The device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs",
        "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides the appropriate feedback to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains Underpayment from a previous trip",
        "Test_Scnario": "Farecard Tapped Does Not Match",
        "Test_Sce_Description": "Verify that the system correctly identifies when the Farecard tapped during the write tap does not match the Farecard tapped during the identification tap. This scenario will test the system's ability to detect and handle this error condition."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains Underpayment from a previous trip",
        "Test_Scnario": "Underpayment Handling",
        "Test_Sce_Description": "Test the system's ability to detect and handle a situation where the customer's Farecard is in underpayment. This includes verifying that the system correctly identifies the underpayment, informs the operator, and allows the operator to handle the situation appropriately."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains Underpayment from a previous trip",
        "Test_Scnario": "Underpayment Handling with Fee",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer's Farecard is in underpayment and the TA is charging a fee for underpayment. This includes testing that the system correctly calculates the total amount due, including the underpayment and the fee, and allows the operator to handle the situation appropriately."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains Underpayment from a previous trip",
        "Test_Scnario": "Overdraft Handling",
        "Test_Sce_Description": "Test the system's ability to detect and handle a situation where the customer's Farecard is in overdraft. This includes verifying that the system correctly identifies the overdraft, performs two loads to bring the Farecard balance to 0 and load the rest, and allows the operator to handle the situation appropriately."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains Underpayment from a previous trip",
        "Test_Scnario": "Performance Testing",
        "Test_Sce_Description": "Verify that the system performs efficiently under load. This includes testing the system's response time and throughput when handling multiple simultaneous transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard contains Underpayment from a previous trip",
        "Test_Scnario": "Security Testing",
        "Test_Sce_Description": "Test the system's security measures to ensure that customer data is protected. This includes testing the system's encryption of sensitive data, access controls, and error handling."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Non-Revenue Farecard Tapped in Training Mode",
        "Test_Sce_Description": "Validate that the SA tool accepts a Non-Revenue farecard when tapped in the training mode. The device should not display a declined HMI."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Non-Revenue Farecard Tapped in Revenue Mode",
        "Test_Sce_Description": "Validate that the SA tool does not accept a Non-Revenue farecard when tapped in the revenue mode. The device should display a declined HMI."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Temporal Class Supplement Tap-On Transaction",
        "Test_Sce_Description": "Validate that the device processes the Tap-On Transaction as a normal tap-on when a Farecard is tapped during a time period that contains an associated Temporal Class Supplement. The device HMI should reflect the Temporal Class Supplement."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Autoload Enabled Farecard Crossing Threshold",
        "Test_Sce_Description": "Validate that when a Farecard with Autoload Enabled is tapped and the Fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Override Default Trip with No Default O/D",
        "Test_Sce_Description": "Validate that if a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Validate that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Farecard Validation Failure at Tap-On",
        "Test_Sce_Description": "Validate that if a Farecard fails validation checks at Tap-On, the device provides the cardholder with the appropriate feedback without updating the Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Validate that if a Farecard is blocked, the right to travel is not conferred and the device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Exceeding Max Travel Duration",
        "Test_Sce_Description": "Validate that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trip."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Validate that if multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Non-Activated Farecard Tap-On",
        "Test_Sce_Description": "Validate that if a non-activated Farecard is tapped on the device, the transaction is unsuccessful."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Revenue Farecard is tapped on the Device",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "Validate that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Temporal Class Supplement Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the device displays an HMI reflecting the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Autoload Enabled Farecard Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Farecard has the Autoload amount automatically added to the E-Purse balance and the device deducts the Fare from the Farecard E-Purse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Override Default Trip Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on and the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the Default Trip was overridden."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Audio Messages Request during Fare-by-Zone TA Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment during a Fare-by-Zone TA Tap-On Transaction, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Farecard Validation Failure at Tap-On",
        "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window and provides the appropriate feedback to the cardholder without updating the Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Blocked Farecard Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a blocked Farecard is tapped on a device, the right to travel is not conferred and the device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Max Travel Duration Exceeded Tap-On Transaction",
        "Test_Sce_Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment and opens a new trip."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Non-Activated Farecard Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful and the device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Card Reading Error during Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Verify that the SA Tool application correctly detects and handles a situation where the Virtual Card is unreadable. The application should indicate to the operator that the Virtual Card is unreadable and prompt the customer to tap on the NFC reader again."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Successful Tap After Unreadable Card",
        "Test_Sce_Description": "Verify that if the customer taps the NFC reader again after an unreadable card error, and the tap is successful, the application proceeds with steps 4 \u2013 7 as stated in the Main Use Case."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Unsuccessful Tap After Unreadable Card",
        "Test_Sce_Description": "Verify that if the customer taps the NFC reader again after an unreadable card error, and the tap is unsuccessful, the application indicates to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Handling Non-Adult, Non-Child, Non-Discreet Concessions",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the customer's Virtual Card has a valid non-adult, non-child, non-discreet concession. The application should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Handling Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the customer's ePurse balance is less than the fare amount. The application should send the tap to ATS for processing, which checks the online hotlist and completes the fare processing, removing the fare from the Virtual Card e-Purse and putting the card into overdraft."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Successful Transaction Feedback",
        "Test_Sce_Description": "Verify that the SA Tool provides the appropriate feedback to the Cardholder of a successful transaction. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Handling Valid Transfer Product",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the customer's Virtual Card has a valid transfer product. The application should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Handling Inter-SP Transfer",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the customer's Virtual Card has a valid transfer product from other service provider and a transfer agreement between the service providers has been established. The application should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Handling Expired Period Pass",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the customer's Virtual Card has an expired period pass and the ePurse balance is more than the fare amount. The application should detect that the Period Pass has expired, compute the value to be deducted from the e-Purse, and deduct the fare accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable",
        "Test_Scnario": "Handling Audio Messages Request",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where the customer requests audio messages for fare payment. The operator should enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when a Virtual Card is unreadable",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it detects a Virtual Card but is unable to read it. The test will verify if the SA Tool application correctly indicates to the operator that the Virtual Card is unreadable. It will also test the response of the system when the customer taps on the NFC reader again."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when a customer has a non-adult, non-child, non-discreet concession on their Virtual Card",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's Virtual Card has a valid non-adult, non-child, non-discreet concession. The test will verify if the SA Tool correctly shows the successful fare payment screen for non-adult concession and plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when a customer's ePurse balance is less than the fare amount",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's ePurse balance is less than the fare amount. The test will verify if the ATS correctly checks the online hotlist, completes the fare processing, removes the fare from the Virtual Card e-Purse and puts the card into overdraft. It will also test if the right to travel is conferred to the Cardholder by updating the Virtual Card accordingly and if the device provides the appropriate feedback to the Cardholder of a successful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when a transaction is within Intra-SP Transfer window",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's Virtual Card has a valid transfer product and the transaction is within the Intra-SP Transfer window. The test will verify if the ATS correctly reads that the Virtual Card contains a valid intra-agency transfer product and deducts $0 from the Virtual Card E-Purse. It will also test if the right to travel is conferred to the Cardholder by updating the Virtual Card and if the device provides the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when a transaction is within Inter-SP Transfer window",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's Virtual Card has a valid transfer product from other service provider and the transaction is within the Inter-SP Transfer window. The test will verify if the ATS correctly reads that the Virtual Card contains a valid inter-agency transfer product and deducts $0 from the Virtual Card E-Purse. It will also test if the right to travel is conferred to the Cardholder by updating the Virtual Card and if the device provides the appropriate feedback to the Cardholder of a successful transaction with a transfer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card",
        "Test_Scnario": "Testing the functionality of the SA Tool when a customer requests Audio Messages",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer requests Audio Messages. The test will verify if the SA Tool correctly plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Virtual Card Detection",
        "Test_Sce_Description": "Verify that the SA Tool application is able to detect the Virtual Card when it is tapped on the NFC reader. The application should indicate to the operator that the Virtual Card is unreadable if it fails to read it correctly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Successful Tap After Unreadable Card",
        "Test_Sce_Description": "After the first unsuccessful attempt, the customer should tap the Virtual Card on the NFC reader again. If the tap is successful, the application should proceed with steps 4 \u2013 7. If the tap is still unsuccessful, the application should again indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Fare Payment with Non-Adult, Non-Child, Non-Discreet Concessions",
        "Test_Sce_Description": "Verify that the SA Tool can successfully process fare payment when the customer's Virtual Card has a valid non-adult, non-child, non-discreet concession. The application should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Fare Payment with Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the SA Tool can process fare payment when the customer's ePurse balance is less than the fare amount. The ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The device should provide the appropriate feedback to the Cardholder of a successful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Fare Payment within Intra-SP Transfer Window",
        "Test_Sce_Description": "Verify that the SA Tool can process fare payment when the customer's Virtual Card has a valid transfer product and the transaction is within the intra-SP transfer window. The ATS should deduct $0 from the Virtual Card E-Purse and this should be communicated back to the device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Fare Payment within Inter-SP Transfer Window",
        "Test_Sce_Description": "Verify that the SA Tool can process fare payment when the customer's Virtual Card has a valid transfer product from another service provider and the transaction is within the inter-SP transfer window. The ATS should deduct $0 from the Virtual Card E-Purse and this should be communicated back to the device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Payment by e-Purse",
        "Test_Sce_Description": "Verify that the SA Tool can process payment via e-Purse. The application should read the Farecard information, check for the Farecard serial number and if the Farecard is on the hotlist. If the card is valid, not on the hotlist, and has at least a minimum balance needed for payment, then the SA Tool should populate the full payment amount."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Insufficient e-Purse Balance",
        "Test_Sce_Description": "Verify that the SA Tool can handle situations where the e-Purse balance is insufficient to cover the payment amount. The application should inform the operator that the e-Purse balance cannot cover the price and provide options to cancel the transaction or choose another mode of payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount",
        "Test_Scnario": "Successful Transaction",
        "Test_Sce_Description": "Verify that the SA Tool can successfully deduct the balance from the e-purse and use it as a payment means for the transaction. Upon successful transaction, the application should display the option to print a customer receipt or return to the main menu."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Testing the detection of unreadable Virtual Card",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when it detects a Virtual Card but fails to read it correctly. The application should indicate to the operator that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Testing the fare payment with non-adult concession",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a valid non-adult, non-child, non-discreet concession. The SA Tool should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Testing the fare payment with insufficient ePurse balance",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount. The ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Testing the fare payment within Intra-SP Transfer window",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product and the transaction is within the Intra-SP Transfer window. The ATS should deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Testing the fare payment within Inter-SP Transfer window",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product from other service provider and the transaction is within the Inter-SP Transfer window. The ATS should deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Testing the fare payment with audio messages request",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer requests audio messages for fare payment. The operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Testing the fare payment when daily cap is reached",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Farecard has reached Daily Cap Limit and is out of transfer window. The ATS should deduct no fare since the Daily Cap is reached."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Testing the fare payment for premium service or special route/location",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the fare payment is being made for a premium service or special route/location. The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window",
        "Test_Scnario": "Testing the fare payment for premium service or special route/location with fare upgrade",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the fare payment is being made for a premium service or special event route/location after previously riding on a regular service route. The ATS should compute the fare upgrade and deduct the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Virtual Card Unreadable",
        "Test_Sce_Description": "Test the scenario where the SA Tool NFC reader detects the Virtual Card but is unable to read it. The application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "ePurse Balance Less Than the Fare Amount",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Transaction within Intra-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Transaction within Inter-SP Transfer window",
        "Test_Sce_Description": "Test the scenario where the customer\u2019s Virtual Card has a valid transfer product from other service provider. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Customer requests Audio Messages",
        "Test_Sce_Description": "Test the scenario where the customer asks to pay for the trip with their Virtual Card and requests audio messages for fare payment. The operator should enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Daily Cap Reached outside of Transfer window",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, the Farecard has reached Daily Cap Limit and is out of transfer window. ATS should deduct no fare since the Daily Cap is reached."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool and the Service Class is Premium or Special Event. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade",
        "Test_Sce_Description": "Test the scenario where the fare payment is being made on the SA Tool, the Service Class is Premium or Special Event, the Farecard has a valid Regular Service Transfer Product and the tap is within Transfer Window. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Farecard is on the Action or Load Value List",
        "Test_Sce_Description": "Check if the SA Tool correctly verifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Audio Messages for Fare Payment",
        "Test_Sce_Description": "Check if the SA Tool correctly plays the audio messages for fare payment when the customer requests for it. The audio message should be in the default language of the Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Volume Adjustment Functionality",
        "Test_Sce_Description": "Check if the operator can change the volume level using the physical device buttons at the customer\u2019s discretion. The volume adjustment bar should appear and timeout automatically to indicate the volume level."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Daily Cap Reached",
        "Test_Sce_Description": "Check if the SA Tool correctly deducts no fare when the Daily Cap is reached. The fare payment should be made on the SA Tool and the Farecard should be out of transfer window."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Upgrade for Premium Service or Special Route/Location",
        "Test_Sce_Description": "Check if the SA Tool correctly computes and deducts the Upgrade fare when a tap on a premium service or special event route/location is made after previously riding on a regular service route (within the transfer window)."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment during Peak hours after reaching Off Peak Daily Cap",
        "Test_Sce_Description": "Check if the SA Tool correctly processes a fare payment when a tap on peak hours is made after previously reaching off peak daily cap (outside the transfer window). The Farecard should have reached off peak Daily Cap Limit and should not have reached Peak Daily Cap limit."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Limited Period Pass",
        "Test_Sce_Description": "Check if the SA Tool correctly processes the fare payment when the Farecard has a valid Limited Period Pass and the current time is within the limits of the product."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Verify Fare Payment with Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "Check if the SA Tool correctly processes the fare payment when the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Incorrect Farecard Type",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when an incorrect Farecard type is tapped. The tool should be able to identify the incorrect Farecard type and notify the operator. The use case should terminate after this."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Non-Farecard Tapped",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Non-Farecard is tapped. The tool should be able to identify the card as a non-Farecard and display an error pop up message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Failure to Read Virtual Card",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it fails to read a Virtual Card. The tool should indicate to the operator that the Virtual Card read has failed. The operator should be able to close the error prompt and tap the card to try again."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Non-Virtual Card Tapped",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Non-Virtual Card is tapped. The tool should be able to identify the card as a non-Virtual Card and display an error pop up message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a blocked Farecard is tapped. The tool should be able to detect that the Farecard is blocked and display the Farecard query screen indicating that the Farecard has been blocked."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Virtual Card \u2013 Ineligible Products",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the shopping cart has ineligible products. The device should display an error confirming that one or more of the products are not available for sale."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "ATS Failure to Load Products",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when ATS fails to load products. The tool should inform the operator that the products purchased were not added to the user\u2019s account."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Farecard Tapped-off at Same Location",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Farecard is tapped-off at the same location where tap-on occurred. The device should provide the cardholder with the appropriate feedback without updating the Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a blocked Farecard is tapped. The tool should detect that the Farecard is blocked and not confer the right to travel."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the time since tap-on exceeds the Max Travel Duration. The device should auto-settle the Underpayment and open a new trip."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Multiple NFC Media Presented",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when multiple NFC media are presented to the device at one time. The device should block all fare payment functionality."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Non-Activated Farecard Tapped",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a non-activated Farecard is tapped. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a card reading error occurs. The device should capture and log the error in the background to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Incorrect Farecard Type",
        "Test_Sce_Description": "Verify that the SA Tool application correctly identifies when the Farecard type is incorrect for the current mode of operation. The application should notify the operator of the incorrect Farecard type and terminate the use case."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Non-Farecard Tapped to Reader",
        "Test_Sce_Description": "Verify that the SA Tool application correctly identifies when a non-Farecard is tapped to the reader. The application should display an error pop-up message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Failure to Read Virtual Card",
        "Test_Sce_Description": "Verify that the SA Tool application correctly handles the scenario when it detects a Virtual Card but fails to read it. The application should indicate to the operator that the Virtual Card read has failed and allow the operator to retry."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Non-Virtual Card Tapped to Reader",
        "Test_Sce_Description": "Verify that the SA Tool application correctly identifies when a non-Virtual Card is tapped to the reader. The application should display an error pop-up message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Blocked/Hotlisted Farecard \u2013 Virtual Card",
        "Test_Sce_Description": "Verify that the SA Tool application correctly detects when a Farecard is blocked. The application should display the Farecard query screen indicating that the Farecard has been blocked and prevent the operator from taking any further actions on the Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Virtual Card \u2013 Ineligible Products",
        "Test_Sce_Description": "Verify that the SA Tool application correctly handles the scenario when products added to the card become ineligible for purchase. The application should display an error confirming that one or more of the products are not available for sale."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "ATS Failure to Load Products",
        "Test_Sce_Description": "Verify that the SA Tool application correctly handles the scenario when ATS is unable to load products to the customer\u2019s account. The application should inform the operator that the products purchased were not added to the user\u2019s account."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Farecard Tapped-Off at Same Location",
        "Test_Sce_Description": "Verify that the device correctly detects when the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The device should provide the appropriate feedback to the cardholder without updating the Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that the device correctly detects when a Farecard is blocked. The device should not confer the right to travel and provide the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "Verify that the device correctly handles the scenario when the time since tap-on exceeds the Max Travel Duration. The device should auto-settle the Underpayment and open a new trip."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Multiple NFC Media Presented",
        "Test_Sce_Description": "Verify that the device correctly handles the scenario when multiple NFC media are presented to the device at one time. The device should block all fare payment functionality and present Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Non-Activated Farecard Tapped",
        "Test_Sce_Description": "Verify that the device correctly detects when a non-activated Farecard is tapped. The device should provide feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Farecard tapped to the reader",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "Verify that the device correctly handles the scenario when a Card reading error occurs (e.g. Farecard is immediately removed from the card reader). The device should provide feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Failure to read customer\u2019s Virtual Card",
        "Test_Scnario": "Unreadable Virtual Card",
        "Test_Sce_Description": "Test the system's response when the SA Tool NFC reader detects the Virtual Card but is unable to read it. The system should indicate to the operator that the Virtual Card is unreadable. If the customer taps again and it is unsuccessful, the system should again indicate that the Virtual Card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Failure to read customer\u2019s Virtual Card",
        "Test_Scnario": "Non-Adult, Non-Child, non-discreet concessions",
        "Test_Sce_Description": "Test the system's response when the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Failure to read customer\u2019s Virtual Card",
        "Test_Scnario": "ePurse balance less than fare amount",
        "Test_Sce_Description": "Test the system's response when the customer's ePurse balance is less than the fare amount. The device should send the tap to ATS for processing, ATS should check the online hotlist and complete the fare processing, removing the fare from the Virtual Card e-Purse and putting the card into overdraft."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Failure to read customer\u2019s Virtual Card",
        "Test_Scnario": "Transaction within Intra-SP Transfer window",
        "Test_Sce_Description": "Test the system's response when the customer's Virtual Card has a valid transfer product and the transaction is within the Intra-SP Transfer window. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Failure to read customer\u2019s Virtual Card",
        "Test_Scnario": "Transaction within Inter-SP Transfer window",
        "Test_Sce_Description": "Test the system's response when the customer's Virtual Card has a valid transfer product from another service provider and the transaction is within the Inter-SP Transfer window. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Failure to read customer\u2019s Virtual Card",
        "Test_Scnario": "Card Authentication check failure",
        "Test_Sce_Description": "Test the system's response when the Virtual Card Media fails the Card Authentication check. The device should return the appropriate feedback and the Declined \u2013 Contact CLIENT Customer Service screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Failure to read customer\u2019s Virtual Card",
        "Test_Scnario": "Multiple NFC media presented at once",
        "Test_Sce_Description": "Test the system's response when multiple NFC media are presented to the device at one time. The device should block all fare payment functionality and the Anti-Collision Error Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Failure to read customer\u2019s Virtual Card",
        "Test_Scnario": "Device in Out-of-Service state",
        "Test_Sce_Description": "Test the system's response when the device is in Out-of-Service state. The device should display the Not in Service screen to the cardholder and not detect the media."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Failure to read customer\u2019s Virtual Card",
        "Test_Scnario": "Error occurrence",
        "Test_Sce_Description": "Test the system's response when an error has occurred on the device. The device should record the tap and the Declined \u2013 See Customer Service Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Failure to read customer\u2019s Virtual Card",
        "Test_Scnario": "Virtual Card Media on local hotlist and device offline",
        "Test_Sce_Description": "Test the system's response when the Virtual Card Media is on the local hotlist and the device is offline. The device should check the local hotlist and return a response that the media is denied."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Failure to read customer\u2019s Virtual Card",
        "Test_Scnario": "Virtual Card Media\u2019s blocked parameter on scratchpad enabled",
        "Test_Sce_Description": "Test the system's response when the Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled. The right to travel should not be conferred and the Declined \u2013 Blocked Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Default Trip Success",
        "Test_Sce_Description": "Verify that when the Virtual Card media contains a default trip and the current tap location is either the origin or destination, the device correctly displays the default trip success screen. The device should send the tap to ATS for processing, check the online hotlist, complete the fare processing accounting for the virtual card\u2019s default trip, and then send the default trip success result back to the device via API. The right to travel should be conferred to the Cardholder by updating the HMI of the SA Tool."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Default Trip Override",
        "Test_Sce_Description": "Verify that when the Virtual Card media contains a default trip and the current tap location is either the origin or destination, the device correctly overrides the default O/D contained on the Virtual Card and ATS processes the tap as a regular tap-on. The right to travel should be conferred to the Cardholder by updating the HMI of the SA Tool."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card No Default Trip Override",
        "Test_Sce_Description": "Verify that when the Virtual Card with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on. The right to travel should be conferred to the Cardholder by updating the HMI of the SA Tool."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Scratchpad Update",
        "Test_Sce_Description": "Verify that when the Virtual Card is in good standing according to ATS, but scratchpad blocked parameter needs to be updated, the device provides the appropriate feedback to the Cardholder of a successful tap, checks and resets the tap counter to 0 if it isn't already at 0, and updates the Virtual Card scratchpad to remove the block parameter and prioritizes the accepted response from ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Authentication Failure",
        "Test_Sce_Description": "Verify that when the Virtual Card Media fails the Card Authentication check, the device returns the appropriate feedback, performs the necessary validation and determines that the Virtual Card Media is unable to pass the checks, provides the Declined \u2013 Failed Card Authentication Check screen to the cardholder, captures and logs an error in the background and in the SOTI logs, and sends the declined tap to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Already Tapped-on Online",
        "Test_Sce_Description": "Verify that when the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window, whereby the initial device and secondary device tapped on were both online, the device provides the cardholder with the appropriate feedback, sends the tap to ATS which returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window, provides the Declined \u2013 Already Tapped Screen to the cardholder, and captures and logs an error in the background and in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Already Tapped-on Offline",
        "Test_Sce_Description": "Verify that when the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window whereby the initial device tapped, and secondary device(s) is the same device and is offline, the device provides the cardholder with the appropriate feedback, checks the latent transaction processor on the same device for a previous tap within the anti-passback window, stores the tap on the device till it is connected to ATS where the transactions will be reconciled, provides the Declined \u2013 Already Tapped Screen to the cardholder, and captures and logs an error in the background and in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality, provides the Anti-Collision Error Screen to the cardholder, captures and logs an error in the background and in the SOTI logs, and sends the declined tap to ATS."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Non-Virtual Card tapped to the reader",
        "Test_Scnario": "Virtual Card Tap in Out-of-Service State",
        "Test_Sce_Description": "Verify that when a Virtual Card Media is tapped on an SA Tool that is in an Out-of-Service state, the device behaves as expected according to the specifications in the use case."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer\u2019s Farecard is blocked \u2013 Virtual Card",
        "Test_Scnario": "Virtual Card Media\u2019s scratchpad blocked parameter is enabled",
        "Test_Sce_Description": "Verify that when the Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled, the right to travel is not conferred. The device should check the local hotlist and not find the Virtual Card. The device should also check the Virtual Card Scratchpad and determine the card blocked parameter is set to true. The Declined \u2013 Blocked Screen should be provided to the cardholder and an error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer\u2019s Farecard is blocked \u2013 Virtual Card",
        "Test_Scnario": "Virtual Card Media\u2019s mobile wallet blocked parameter is enabled",
        "Test_Sce_Description": "Verify that when the Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled, the right to travel is not conferred. If the Virtual Card Media is blocked in the wallet, there should not be an interaction with the device on an attempted tap. The device should not know a tap is attempted and will have no action."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer\u2019s Farecard is blocked \u2013 Virtual Card",
        "Test_Scnario": "Tap counter is greater than the allowable offline taps",
        "Test_Sce_Description": "Verify that when the tap counter is greater than the allowable offline taps, the right to travel is not conferred. The device should check the local hotlist and not find the Virtual Card. The device should also check the Virtual Card Scratchpad and determine the card blocked parameter is set to true. The Declined \u2013 Blocked Screen should be provided to the cardholder and an error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer\u2019s Farecard is blocked \u2013 Virtual Card",
        "Test_Scnario": "Customer\u2019s Virtual Card is blocked",
        "Test_Sce_Description": "Verify that when the Customer\u2019s Virtual Card is blocked, the right to travel is not conferred. The device should send the transaction to ATS for processing. ATS should detect the card is blocked and return a declined result back to the SA Tool. The SA Tool application should display a declined message to the customer and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer\u2019s Farecard is blocked \u2013 Virtual Card",
        "Test_Scnario": "Customer\u2019s Virtual Card is on the Deny List",
        "Test_Sce_Description": "Verify that when the Customer\u2019s Virtual Card is on the Deny List, the right to travel is not conferred. The device should send the transaction to ATS for processing. ATS should detect the card is on the Deny List, remove the card from the Deny List and set it to blocked. ATS should return a declined result back to the SA Tool. The SA Tool application should display a declined message to the customer and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer\u2019s Farecard is blocked \u2013 Virtual Card",
        "Test_Scnario": "Battery goes below the low battery threshold during payment",
        "Test_Sce_Description": "Verify that when the battery goes below the low battery threshold during payment, the application switches to \u201cOut of Service\u201d mode. If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode. Else, the customers fare payment should be processed as per Step 5."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer\u2019s Farecard is blocked \u2013 Virtual Card",
        "Test_Scnario": "Customer taps a card that is not a Farecard",
        "Test_Sce_Description": "Verify that when the Customer taps a card that is not a Farecard, the SA Tool application does not respond, but the device error message \u201cCard Read Error\u201d is displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Customer\u2019s Farecard is blocked \u2013 Virtual Card",
        "Test_Scnario": "Customer\u2019s card is within the Anti-Passback Window",
        "Test_Sce_Description": "Verify that when the Customer\u2019s card is within the Anti-Passback Window, the right to travel is not conferred. ATS should detect that the Farecard fails the Anti-Passback checks. The SA Tool application should display a declined message the customer and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "SA Tool shopping cart has ineligible products",
        "Test_Scnario": "Required fields not filled out or not valid",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the operator attempts to proceed to the next screen or proceed to payment without entering required information. The tool should check whether all the required fields have valid information and if not, it should display screen validation rules to prompt the operator to input the correct information."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "SA Tool shopping cart has ineligible products",
        "Test_Scnario": "Purchase multiple items",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer indicates that they would like to conduct other purchases in the same transaction. The operator should be able to return to the SA Tool application Sales screen and select the additional product(s) the customer would like to purchase. The tool should add the additional products to the shopping cart."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "SA Tool shopping cart has ineligible products",
        "Test_Scnario": "Refund multiple items",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer requests to refund multiple products where refund criteria have been met. The operator should be able to complete one transaction before starting the next. The tool should confirm the reversal and a transaction successful screen should be displayed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "SA Tool shopping cart has ineligible products",
        "Test_Scnario": "ATS failure to load products",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when ATS is unable to load products to the customer\u2019s account after proceeding through checkout. The tool should inform the operator that the products purchased were not added to the user\u2019s account."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "SA Tool shopping cart has ineligible products",
        "Test_Scnario": "SVC / VC Shopping Cart",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the device has either SVC or VC products in the shopping cart. The tool should not allow both SVC and VC products in the shopping cart at the same time. If the cart has ineligible products, the Operator should receive an error providing them the option to clear the cart."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "SA Tool shopping cart has ineligible products",
        "Test_Scnario": "ECP is disabled and Customer\u2019s Artemis device is locked or asleep",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the user\u2019s device is locked or asleep and ECP is disabled for the users Virtual Card. The tool should not detect the virtual card media and the screen should remain the same. The Artemis device should prompt the user to provide authentication."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "SA Tool shopping cart has ineligible products",
        "Test_Scnario": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is disabled",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the user\u2019s mobile device is in Power Reserve mode and ECP is disabled on the mobile device for the users Virtual Card. The tool should not detect the virtual card media and the screen should remain the same. The Artemis device should prompt the user to charge their device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "ATS failed to load",
        "Test_Scnario": "ATS Failure to Load Products",
        "Test_Sce_Description": "This scenario tests the system's response when ATS fails to load products onto a customer\u2019s account after checkout. The system should inform the operator that the products purchased were not added to the user\u2019s account. The operator should then have the option to attempt the checkout again or provide the customer a refund if the customer paid with cash."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "ATS failed to load",
        "Test_Scnario": "SVC / VC Shopping Cart Validation",
        "Test_Sce_Description": "This scenario tests the system's ability to validate the shopping cart. The shopping cart should only include Virtual Card or Stored Value Card Products and cannot have both at the same time. If the cart has ineligible products, the Operator should receive an error providing them the option to clear the cart."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "ATS failed to load",
        "Test_Scnario": "ECP Disabled and Artemis Device Locked or Asleep",
        "Test_Sce_Description": "This scenario tests the system's response when the user\u2019s device is locked or asleep and ECP is disabled for the users Virtual Card. The system should prompt the user to provide authentication for their Virtual Card media on their Artemis device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "ATS failed to load",
        "Test_Scnario": "Artemis Device in Power Reserve Mode and ECP Disabled",
        "Test_Sce_Description": "This scenario tests the system's response when the user\u2019s mobile device is in Power Reserve mode and ECP is disabled on the mobile device for the users Virtual Card. The system should prompt the user to charge their device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "ATS failed to load",
        "Test_Scnario": "Device Offline and Not Connected to ATS",
        "Test_Sce_Description": "This scenario tests the system's response when the device is offline and not connected to Accenture Ticketing Services. The device should check the local deny list if the media is on the local deny list. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "ATS failed to load",
        "Test_Scnario": "Open Payments Media Fails ODA Check",
        "Test_Sce_Description": "This scenario tests the system's response when an Open Payments Media fails the ODA check. The device should return the appropriate feedback and the Declined \u2013 Failed ODA Check Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "ATS failed to load",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "This scenario tests the system's response when an Open Payments Media fails the Expiry Check. The device should return the appropriate feedback and the Declined \u2013 Card Expired Screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "ATS failed to load",
        "Test_Scnario": "Open Payments Media Already Tapped-On Using an Online Device",
        "Test_Sce_Description": "This scenario tests the system's response when the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window, whereby the initial device and secondary device(s) tapped on were all online. The device should provide the cardholder with the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "ATS failed to load",
        "Test_Scnario": "Open Payments Media Already Tapped-On Using an Offline Device",
        "Test_Sce_Description": "This scenario tests the system's response when the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window whereby the initial device tapped, and secondary device(s) is the same device and is offline. The device should provide the cardholder with the appropriate feedback."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "ATS failed to load",
        "Test_Scnario": "Open Payments Media on the ATS Deny List and the SA Tool is Online",
        "Test_Sce_Description": "This scenario tests the system's response when the Open Payments Media is on the deny list and the SA Tool is online. The system should provide the appropriate feedback to the user."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Temporal Class Supplement Tap-On Transaction",
        "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the device correctly displays an HMI reflecting the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Autoload Enabled Farecard Crossing Threshold",
        "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Farecard correctly has the Autoload amount automatically added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Override of Default Trip",
        "Test_Sce_Description": "Verify that when a Farecard without a Default O/D is tapped on while the device is in Override mode, the device correctly processes the tap as a result tap-on and provides appropriate feedback to the Cardholder of a successful transaction and that the Default Trip was overridden."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator correctly enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Farecard Validation Failure",
        "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device correctly provides the cardholder with the appropriate feedback and logs the error in the background for troubleshooting."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that when a blocked Farecard is tapped on a device, the right to travel is not conferred, the device provides the appropriate feedback to the Cardholder, and logs the error in the background for troubleshooting."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Max Travel Duration Exceeded",
        "Test_Sce_Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device correctly auto-settles the Underpayment, opens a new trip, and deducts the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device correctly blocks all fare payment functionality and presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Non-Activated Farecard",
        "Test_Sce_Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful, the device provides feedback to the Cardholder of an unsuccessful transaction, and logs the error in the background for troubleshooting."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device correctly provides feedback to the Cardholder of an unsuccessful transaction and logs the error in the background for troubleshooting."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard with Autoload Enabled is tapped on it and the Fare amount crosses the Auto-load threshold. The device should detect that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, which triggers the Autoload amount to be added to the Farecard. The device should then deduct the Fare from the Farecard E-Purse balance and provide the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the autoload was successful."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Performance of the device during Autoload process",
        "Test_Sce_Description": "This scenario tests the performance of the device during the Autoload process. The device should be able to process the Autoload transaction quickly and efficiently without any delays or errors. The device should also be able to handle multiple Autoload transactions simultaneously."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Security of the Autoload transaction",
        "Test_Sce_Description": "This scenario tests the security of the Autoload transaction. The device should securely process the Autoload transaction, ensuring that the Cardholder's information is protected and that the transaction is processed accurately and securely. The device should also have measures in place to prevent fraudulent transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Exception Flow: Farecard fails validation checks at Tap-On",
        "Test_Sce_Description": "This scenario tests the exception flow when the Farecard fails validation checks at Tap-On. The device should be able to detect and handle this exception appropriately, providing the appropriate feedback to the Cardholder and preventing the transaction from proceeding."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Alternate Flow: Customer Overrides the Default Trip prior to tapping-off",
        "Test_Sce_Description": "This scenario tests the alternate flow when the Customer Overrides the Default Trip prior to tapping-off. The device should be able to handle this alternate flow, allowing the customer to override the default trip and processing the transaction accordingly."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Fare-by-Zone transaction processing",
        "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Override default O/D",
        "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on when the customer requests the override of a Default Trip by interacting with the Device."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Capping discount eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple capping discounts eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS will take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Offline device capping discount",
        "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules will follow use-case logic outlined in ticketing use cases."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media fails ODA check",
        "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device performs the necessary validation and determines that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen is provided to the cardholder. An error will be captured and logged in the background when this occurs to help with troubleshooting the issue. This error will also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The device provides the appropriate feedback to the cardholder without updating the Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. Card reader detects Farecard is blocked. Right to travel is not conferred. The Device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Max Travel Duration Exceeded",
        "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. Device determines that the Tap-On Time + Max Travel Duration < Current Time. Device Auto-settles the Underpayment and deducts the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple NFC media presented",
        "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. Customer presents multiple NFC medias to the card reader at once. Device blocks all user functionality, presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Non-activated Farecard",
        "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. Device detects that the Farecard is not activated. The device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Card reading error",
        "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard tap during Temporal Class Supplement",
        "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the Device should contain an HMI reflecting the Temporal Class Supplement, and should process the Tap-On Transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Audio Messages request",
        "Test_Sce_Description": "Verify that when the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard validation checks at Tap-On",
        "Test_Sce_Description": "Verify that if the Farecard fails validation checks at Tap-On, the system should handle this exception flow correctly and provide appropriate feedback to the user."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment with Period Pass",
        "Test_Sce_Description": "Verify that if the Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value, the system should compute and deduct the Upgrade fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment with Period Pass and lower fare value",
        "Test_Sce_Description": "Verify that if the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value, the system should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment with Limited Period Pass",
        "Test_Sce_Description": "Verify that if the Farecard has a valid Limited Period Pass and the current time is within the limits of the product, the system should accept the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment with Limited Period Pass outside of valid time",
        "Test_Sce_Description": "Verify that if the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the system should accept the fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Farecard Validation Check",
        "Test_Sce_Description": "Verify that the device performs the necessary validation checks when a Farecard is tapped on. The device should determine whether the Farecard passes the checks or not. If the Farecard fails the checks, the device should provide the appropriate feedback to the Cardholder and the right to travel should not be conferred."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Tap-On Anti-Passback Window",
        "Test_Sce_Description": "Verify that the device detects if the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. If this is the case, the device should provide the appropriate feedback to the cardholder without updating the Farecard. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that the device detects if a Farecard is blocked when it is tapped on. If the Farecard is blocked, the right to travel should not be conferred and the device should provide the appropriate feedback to the Cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Multiple NFC Media",
        "Test_Sce_Description": "Verify that the device blocks all user functionality and presents an Anti-Collision HMI to the customer when multiple NFC media are presented to the card reader at once. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Non-Activated Farecard",
        "Test_Sce_Description": "Verify that the device detects if a Farecard is not activated when it is tapped on. If the Farecard is not activated, the device should provide feedback to the Cardholder of an unsuccessful transaction. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "Verify that the device captures and logs an error when a Cardholder taps a Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader)."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Insufficient E-Purse Balance",
        "Test_Sce_Description": "Verify that the device calculates that the configured Tap-On Fare is greater than the Farecard E-Purse Balance. If this is the case, the right to travel should not be conferred and the device should provide the appropriate feedback to the Cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Max Travel Duration Expiry",
        "Test_Sce_Description": "Verify that the device determines that the Tap-On Time + Max Travel Duration < Current Time. If this is the case, the device should Auto-settle the Underpayment and deduct the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Performance of the Device",
        "Test_Sce_Description": "Verify the performance of the device by checking the speed and accuracy of the Farecard validation checks, the detection of multiple NFC media, and the detection of a blocked or non-activated Farecard."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Security of the Device",
        "Test_Sce_Description": "Verify the security of the device by checking that all user data is securely stored and that all transactions are encrypted. Also, verify that the device has robust error logging and troubleshooting capabilities."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should correctly identify the pass as invalid for the current time, compute the fare to be deducted from the e-Purse, and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when an anonymous farecard with an expired period pass and insufficient ePurse balance is used. The system should correctly identify the pass as expired and the ePurse balance as insufficient, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a blocked farecard is used. The system should correctly identify the farecard as blocked and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard on Deny List",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard on the Deny List is used. The system should correctly identify the farecard as being on the Deny List, remove it from the Deny List, set it to blocked, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Low Battery Scenario",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when the battery goes below the low battery threshold during a payment. The system should be able to process the remote lists even after the battery goes below the threshold during a successful Farecard tap."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Child concession is used. The system should correctly identify the concession as valid and display the successful Child Transit Pass fare payment screen."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard fails inspection. The operator should be able to select the payment function on the SA Tool inspection results screen, and the system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the valid time. The system should correctly identify the pass as valid and deduct the fare from the pass balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass outside the valid time but with sufficient e-Purse balance. The system should correctly identify the pass as invalid for the current time, compute the fare to be deducted from the e-Purse, and deduct the fare."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate that the system correctly handles a fare payment attempt from an anonymous virtual card with an expired period pass and insufficient ePurse balance. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Blocked Virtual Card",
        "Test_Sce_Description": "This scenario is to validate that the system correctly handles a fare payment attempt from a blocked virtual card. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Virtual Card on Deny List",
        "Test_Sce_Description": "This scenario is to validate that the system correctly handles a fare payment attempt from a virtual card on the Deny List. The system should remove the card from the Deny List, set it to blocked, decline the transaction, and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Low Battery Threshold During Payment",
        "Test_Sce_Description": "This scenario is to validate that the system correctly handles a situation where the battery goes below the low battery threshold during a fare payment. The system should be able to process the remote lists even after the battery goes below the threshold."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Validating Period Pass with Higher Service Class Fare Value",
        "Test_Sce_Description": "This scenario is to validate that the system correctly accepts fare payment from a virtual card with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value. The system should correctly identify the pass as valid and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Farecard with Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate that the system correctly handles a fare payment attempt from a Farecard with a Valid Child concession. The system should display the successful Child Transit Pass fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate that the system correctly handles a fare payment resulting from a failed inspection. The operator should be able to select the payment function on the inspection results screen, and the system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate that the system correctly handles a fare payment attempt from an anonymous Farecard with an expired period pass and insufficient ePurse balance. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is lower fare value than the Period Pass Service Class fare on SA Tool",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate that the system correctly handles a fare payment attempt from a blocked Farecard. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the time limit of the pass. The system should successfully deduct the fare from the pass."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the time limit of the pass but has sufficient e-Purse balance. The system should successfully deduct the fare from the e-Purse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a customer has an anonymous farecard with an expired period pass and ePurse balance less than the fare amount. The system should decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Blocked Virtual Card",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a customer's virtual card is blocked. The system should decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Virtual Card on the Deny List",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a customer's virtual card is on the Deny List. The system should remove the card from the Deny List, set it to blocked, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Low Battery Threshold during Payment",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where the device's battery goes below the low battery threshold during a successful farecard tap. The system should still be able to process the remote lists."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Tap Counter at Configured Limit",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where the tap counter is at the configured limit. The system should decline the transaction."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Unreadable Virtual Card",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where the virtual card is unreadable. The system should indicate to the operator that the virtual card is unreadable."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass",
        "Test_Scnario": "Handling Virtual Card with Expired Period Pass and Sufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the system's ability to handle a situation where a customer's virtual card has an expired period pass but the ePurse balance is more than the fare amount. The system should successfully deduct the fare from the ePurse balance."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the valid time limit. The system should correctly identify the pass and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass outside the valid time limit but with a sufficient e-Purse balance. The system should correctly identify the pass, compute the value to be deducted from the e-Purse, and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the system correctly handles a transaction attempt from an anonymous virtual card with an expired period pass and an ePurse balance less than the fare amount. The system should decline the transaction and display an appropriate message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Blocked Virtual Card",
        "Test_Sce_Description": "Verify that the system correctly handles a transaction attempt from a blocked virtual card. The system should decline the transaction and display an appropriate message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Virtual Card on Deny List",
        "Test_Sce_Description": "Verify that the system correctly handles a transaction attempt from a virtual card on the Deny List. The system should remove the card from the Deny List, set it to blocked, decline the transaction, and display an appropriate message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Low Battery Threshold During Payment",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the battery goes below the low battery threshold during a payment transaction. The system should be able to process the remote lists even after the battery goes below the threshold and then switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "Verify that the system correctly handles a transaction attempt from a blocked Farecard. The system should decline the transaction and display an appropriate message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Farecard on Hotlist",
        "Test_Sce_Description": "Verify that the system correctly handles a transaction attempt from a Farecard on the hotlist. The system should update the card's status to blocked, decline the transaction, and display an appropriate message to the customer."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Non-Activated Card",
        "Test_Sce_Description": "Verify that the system correctly handles a transaction attempt from a non-activated card. The system should display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Query a Farecard",
        "Sub_Flow_Name": "With/Without audio messages",
        "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Scnario": "Handling Farecard within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the system correctly handles a transaction attempt from a Farecard within the Anti-Passback Window. The system should decline the transaction and display an appropriate message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Valid Limited Period Pass within time limit",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass within the time limit. The system should detect the validity of the pass and allow the transaction to proceed."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Valid Limited Period Pass outside time limit with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a virtual card with a valid Limited Period Pass outside the time limit but with sufficient e-Purse balance. The system should detect the invalidity of the pass due to time limit but proceed with the transaction by deducting the fare from the e-Purse balance."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Expired Period Pass with insufficient ePurse balance",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from an anonymous virtual card with an expired Period Pass and ePurse balance less than the fare amount. The system should detect the expired pass and insufficient balance, and return a declined result."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Blocked Virtual Card",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a blocked virtual card. The system should detect the blocked status of the card and return a declined result."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Virtual Card on Deny List",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a virtual card on the Deny List. The system should detect the card's status on the Deny List, remove it from the list, set it to blocked, and return a declined result."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Verify that the system correctly processes the remote lists even when the SA Tool battery goes below the low battery threshold during a successful Farecard tap. The system should ensure that the low battery threshold is high enough to allow for this processing."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Unreadable TICKET",
        "Test_Sce_Description": "Verify that the system correctly handles an unreadable TICKET. The system should detect the TICKET but fail to read it, indicating to the operator that the TICKET is unreadable."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that the system correctly handles a customer's request for audio messages during fare payment. The system should play the corresponding audio message in the default language of the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Premium or Special Event Service Class Route/Location",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a TICKET with a valid Period Pass on a route/location with Premium or Special Event Service Class. The system should not differentiate between service class for Tickets."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Valid Child Concession on TICKET",
        "Test_Sce_Description": "Verify that the system correctly accepts fare payment from a TICKET with a Valid Child concession. The system should detect the Valid Child concession and display the successful Child fare payment screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly handles fare payment resulting from a failed inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "TICKET Period Pass not valid on current date",
        "Test_Sce_Description": "Verify that the system correctly declines fare payment from a TICKET with a Period Pass that is not valid on the current date. The system should detect the invalidity of the pass and return a declined result."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Low Battery Threshold During Payment",
        "Test_Sce_Description": "This scenario tests the functionality of the application when the battery goes below the low battery threshold during a successful Farecard tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Card Not a Farecard",
        "Test_Sce_Description": "This scenario tests the application's response when a customer taps a card that is not a Farecard. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Card Within Anti-Passback Window",
        "Test_Sce_Description": "This scenario tests the application's response when a customer's card is within the Anti-Passback Window. The ATS should detect that the Farecard fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Limited Period Pass Outside of Valid Time",
        "Test_Sce_Description": "This scenario tests the application's response when a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, and the farecard is in overdraft. The ATS should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, and detect that farecard is in overdraft. The SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Limited Period Pass Within Valid Time",
        "Test_Sce_Description": "This scenario tests the application's response when a Farecard has a valid Limited Period Pass and the current time is within the time limits of the product. The steps from the Main Use Case should be completed as stated."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Limited Period Pass Outside of Valid Time with Sufficient e-Purse Balance",
        "Test_Sce_Description": "This scenario tests the application's response when a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction. The ATS should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, and deduct the fare."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Expired Period Pass and ePurse Balance Less than Fare Amount",
        "Test_Sce_Description": "This scenario tests the application's response when a customer has an expired period pass and the ePurse balance is less than the fare amount. The ATS should detect the card is Anonymous and the ePurse Balance is less than the fare amount and return a declined result back to the SA Tool. The SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "This scenario tests the application's response when a customer's Farecard is blocked. The ATS should detect the card is blocked and return a declined result back to the SA Tool. The SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Card on Deny List",
        "Test_Sce_Description": "This scenario tests the application's response when a customer's Virtual Card is on the Deny List. The ATS should detect the card is on the Deny List, remove the card from the Deny List and set it to blocked, and return a declined result back to the SA Tool. The SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Unreadable TICKET",
        "Test_Sce_Description": "Verify that the SA Tool application correctly detects and handles a TICKET that it fails to read correctly. The application should indicate to the operator that the TICKET is unreadable and log an error in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Successful Tap After Unreadable TICKET",
        "Test_Sce_Description": "Verify that the customer can successfully tap the NFC reader again after an unreadable TICKET error. If the tap is successful, the application should proceed with steps 4 \u2013 9 of the Main Use Case."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that the application correctly handles a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level at the customer's discretion."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Audio Message Language",
        "Test_Sce_Description": "Verify that the audio message is played in the default language of the customer's Farecard. The language should correspond to the language registered on the Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Valid Period Pass on Premium Route",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies and accepts a valid period pass fare payment on a route/location with Premium or Special Event Service Class."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Valid Child Concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a Valid Child Concession on a customer's TICKET and displays the successful Child fare payment screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Failed Inspection Resulting in Fare Payment",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles a fare payment resulting from a failed inspection. The application should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Invalid Period Pass",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects and handles a period pass TICKET that is outside the validity period. The application should display a declined message to the customer and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Anti-Passback Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects and handles a TICKET that is within the Anti-Passback Window. The application should display a declined message to the customer and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Non-Activated TICKET",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects and handles a non-activated TICKET. The application should display a declined message to the customer and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Expired TICKET",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects and handles an expired TICKET. The application should display a declined message to the customer and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Anti-Passback Window Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and displays a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Timeout Functionality",
        "Test_Sce_Description": "Verify that after a configurable timeout, the app returns to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Non-Activated Ticket Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a non-activated ticket and displays a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Expired Ticket Check",
        "Test_Sce_Description": "Verify that the system correctly identifies an expired ticket and displays a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Period Pass Validation",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket with a valid period pass and accepts the fare. The SA Tool should update the ticket accordingly and display the successful fare payment screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Unreadable Ticket Check",
        "Test_Sce_Description": "Verify that the system correctly identifies an unreadable ticket and fails to read it correctly."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Limited Period Pass Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket with a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Expired Period Pass Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket with an expired period pass and displays a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Blocked Farecard Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a blocked farecard and displays a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Deny List Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a farecard on the Deny List and displays a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Low Battery Threshold Check",
        "Test_Sce_Description": "Verify that the system correctly identifies when the battery goes below the low battery threshold during a successful Farecard tap and processes the remote lists accordingly."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Validating the functionality of the SA Tool when a non-activated CLIENT Ticket is tapped",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a non-activated CLIENT Ticket is tapped. The SA Tool should detect that the TICKET is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Performance of the SA Tool when a non-activated CLIENT Ticket is tapped",
        "Test_Sce_Description": "This scenario will test the performance of the SA Tool when a non-activated CLIENT Ticket is tapped. The SA Tool should promptly detect that the TICKET is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Security of the SA Tool when a non-activated CLIENT Ticket is tapped",
        "Test_Sce_Description": "This scenario will test the security of the SA Tool when a non-activated CLIENT Ticket is tapped. The SA Tool should securely detect that the TICKET is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Validating the functionality of the SA Tool during exception flow",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool during exception flow. The SA Tool should handle exceptions such as TICKET Period Pass not valid on the current date, battery going below the low battery threshold during payment, customer tapping a card that is not CLIENT media, TICKET within the Anti-Passback Window, non-activated CLIENT Ticket, and expired Ticket."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Performance of the SA Tool during exception flow",
        "Test_Sce_Description": "This scenario will test the performance of the SA Tool during exception flow. The SA Tool should promptly handle exceptions such as TICKET Period Pass not valid on the current date, battery going below the low battery threshold during payment, customer tapping a card that is not CLIENT media, TICKET within the Anti-Passback Window, non-activated CLIENT Ticket, and expired Ticket."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Security of the SA Tool during exception flow",
        "Test_Sce_Description": "This scenario will test the security of the SA Tool during exception flow. The SA Tool should securely handle exceptions such as TICKET Period Pass not valid on the current date, battery going below the low battery threshold during payment, customer tapping a card that is not CLIENT media, TICKET within the Anti-Passback Window, non-activated CLIENT Ticket, and expired Ticket."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Validating the functionality of the SA Tool during alternate flow",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool during alternate flow. The SA Tool should handle alternate flows such as SA Tool application detecting the TICKET and failing to read it correctly."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Performance of the SA Tool during alternate flow",
        "Test_Sce_Description": "This scenario will test the performance of the SA Tool during alternate flow. The SA Tool should promptly handle alternate flows such as SA Tool application detecting the TICKET and failing to read it correctly."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Security of the SA Tool during alternate flow",
        "Test_Sce_Description": "This scenario will test the security of the SA Tool during alternate flow. The SA Tool should securely handle alternate flows such as SA Tool application detecting the TICKET and failing to read it correctly."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment with Expired Ticket",
        "Test_Sce_Description": "This scenario is to test the system's ability to detect and decline a fare payment attempt using an expired ticket. The system should display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "This scenario is to test the system's ability to detect and handle an unreadable ticket. The system should be able to detect the ticket but fail to read it correctly, and display an appropriate error message to the user."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment with Valid Period Pass",
        "Test_Sce_Description": "This scenario is to test the system's ability to accept fare payment from a ticket with a valid period pass. The system should be able to compute that the ticket has a valid period pass, accept the fare, update the ticket accordingly, and display the successful fare payment screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment with Blocked Virtual Card",
        "Test_Sce_Description": "This scenario is to test the system's ability to detect and decline a fare payment attempt using a blocked virtual card. The system should be able to detect that the card is blocked, return a declined result back to the SA Tool, display a declined message to the customer, play a declined audio tone, and update the Scratchpad accordingly."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment with Virtual Card on Deny List",
        "Test_Sce_Description": "This scenario is to test the system's ability to detect and handle a fare payment attempt using a virtual card that is on the Deny List. The system should be able to detect that the card is on the Deny List, remove the card from the Deny List and set it to blocked, return a declined result back to the SA Tool, display a declined message to the customer, play a declined audio tone, and update the Scratchpad accordingly."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment with Insufficient e-Purse Balance",
        "Test_Sce_Description": "This scenario is to test the system's ability to detect and decline a fare payment attempt when the customer's e-Purse balance is less than the fare amount. The system should be able to detect that the e-Purse Balance is less than the fare amount, return a declined result back to the SA Tool, display a declined message to the customer, play a declined audio tone, and update the Scratchpad accordingly."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment with Limited Period Pass Outside Valid Time",
        "Test_Sce_Description": "This scenario is to test the system's ability to handle a fare payment attempt when the farecard has a valid Limited Period Pass but the current time is outside the time limits of the product. The system should be able to detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, deduct the fare, and update the Scratchpad accordingly."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "This scenario is to test the system's ability to handle a fare payment attempt when the device's battery goes below the low battery threshold during a successful Farecard tap. The system should be able to process the remote lists even after the SA Tool battery goes below the low battery threshold."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Unreadable TICKET detection",
        "Test_Sce_Description": "Verify that the SA Tool application correctly detects an unreadable TICKET and displays an appropriate error message to the operator."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Error logging for unreadable TICKET",
        "Test_Sce_Description": "Verify that when a TICKET is unreadable, an error is captured and logged in the background to aid in troubleshooting. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Successful tap after unreadable TICKET",
        "Test_Sce_Description": "Verify that if a customer taps the NFC reader again after an unreadable TICKET error, and the tap is successful, the SA Tool application proceeds with steps 4 \u2013 9 of the Main Use Case."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Unsuccessful tap after unreadable TICKET",
        "Test_Sce_Description": "Verify that if a customer taps the NFC reader again after an unreadable TICKET error, and the tap is unsuccessful, the SA Tool application displays an error message indicating that the TICKET is unreadable."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Audio message request handling",
        "Test_Sce_Description": "Verify that when a customer requests audio messages for fare payment, the operator can enable audio mode and adjust the volume level using the physical device buttons. The audio message should be played in the default language of the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Screen display during audio message",
        "Test_Sce_Description": "Verify that the SA Tool displays the TICKET fare payment screen to the operator and customer for the duration of the audio message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Screen return after audio message",
        "Test_Sce_Description": "Verify that after the audio message ends, the screen returns to the application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Period Pass validity check for Premium or Special Event Service Class Route/Location",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment when the fare payment is being made on a route/location with Premium or Special Event Service Class."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Child Concession validity check",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a Valid Child Concession on a customer's TICKET and displays the successful Child fare payment screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Successful fare payment audio tone for Child concession",
        "Test_Sce_Description": "Verify that the SA Tool plays the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Fare payment recording after failed inspection",
        "Test_Sce_Description": "Verify that the SA Tool records both the fare payment and inspection transactions when a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Toast notification display after failed inspection",
        "Test_Sce_Description": "Verify that the SA Tool application returns to the Tap Card screen and displays a toast notification of the corresponding inspection action after a fare payment is made as a result of a failed inspection."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Invalid Period Pass detection",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects when a customer's TICKET Period Pass is not valid on the current date."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing the functionality of the Virtual Card payment with audio messages",
        "Test_Sce_Description": "This scenario tests the functionality of the Virtual Card payment system when the customer requests audio messages for fare payment. The operator should be able to enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion. The SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message. The audio message should be played in the default language of the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing the functionality of the Period Pass fare payment with higher fare value",
        "Test_Sce_Description": "This scenario tests the functionality of the Period Pass fare payment system when the Service class fare value is lower than the current route/location Service Class fare value. The ATS should compute and deduct the Upgrade fare. The SA Tool should set the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing the functionality of the Period Pass fare payment with lower fare value",
        "Test_Sce_Description": "This scenario tests the functionality of the Period Pass fare payment system when the Service class fare value is greater than the current route/location Service Class fare value. The ATS should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing the functionality of the Limited Period Pass fare payment within valid time",
        "Test_Sce_Description": "This scenario tests the functionality of the Limited Period Pass fare payment system when the current time is within the limits of the product. The SA Tool should accept the fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing the functionality of the Limited Period Pass fare payment outside of valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario tests the functionality of the Limited Period Pass fare payment system when the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction. The SA Tool should accept the fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing the functionality of the TICKET fare payment within the Anti-Passback Window",
        "Test_Sce_Description": "This scenario tests the functionality of the TICKET fare payment system when the customer\u2019s Ticket is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing the functionality of the TICKET fare payment with a non-activated Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the TICKET fare payment system when the customer\u2019s Ticket is not activated. The device should detect that the TICKET is not activated and display a declined message to the customer. The transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing the functionality of the TICKET fare payment with an expired Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the TICKET fare payment system when the customer\u2019s Ticket is expired. The device should detect that the TICKET is expired and display a declined message to the customer. The transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing the functionality of the TICKET fare payment using Period Pass",
        "Test_Sce_Description": "This scenario tests the functionality of the TICKET fare payment system using a Period Pass. The device should compute that the TICKET has a valid period pass and accept the fare. The SA Tool should update the TICKET accordingly and display the successful fare payment screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing the functionality of the TICKET fare payment with an Unreadable TICKET",
        "Test_Sce_Description": "This scenario tests the functionality of the TICKET fare payment system when the SA Tool application detects the TICKET and fails to read it correctly. The SA Tool should display a declined message to the customer. The transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment on FLATFARE BASED SA Tool with Premium or Special Event Service Class",
        "Test_Sce_Description": "Verify that the fare payment is successfully made on the FLATFARE BASED SA Tool when the Service Class is Premium or Special Event. The ticket should have a valid Transfer Product and the tap should be within the Transfer Window."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "Verify that the fare payment is successfully made when the customer\u2019s TICKET has a Valid Child concession. The SA Tool should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the fare payment is successfully made when the operator inspects a customer\u2019s TICKET and determines that they have not paid a fare. The operator should be able to select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the fare payment is declined when the customer\u2019s ride balance is empty. The SA Tool should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "Verify that the fare payment is processed as per the low battery threshold. If the low battery threshold is reached before the payment, the application should switch to \u201cOut of Service\u201d mode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media Card",
        "Test_Sce_Description": "Verify that the SA Tool application does not respond when the customer\u2019s card is not CLIENT media. The device error message \u201cCard Read Error\u201d should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with TICKET within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the fare payment is declined when the customer\u2019s Ticket is within the Anti-Passback Window. The SA Tool should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the fare payment is declined when the customer\u2019s Ticket is not activated. The SA Tool should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Period Pass",
        "Test_Sce_Description": "Verify that the fare payment is successfully made when the farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value. The SA Tool should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Limited Period Pass",
        "Test_Sce_Description": "Verify that the fare payment is successfully made when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Limited Period Pass Outside of Valid Time",
        "Test_Sce_Description": "Verify that the fare payment is successfully made when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring outside of the time limit of the Limited Period Pass Product. The SA Tool should compute the value to be deducted from the e-Purse and deduct the fare."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Blocked Farecard",
        "Test_Sce_Description": "Verify that the fare payment is declined when the customer\u2019s Farecard is blocked. The SA Tool should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Processing Valid Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid transfer product on the customer's TICKET and computes the free transfer. The system should follow the Transfer Product Processing rules as per [R6]."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Handling Audio Messages Request",
        "Test_Sce_Description": "Verify that the system correctly handles a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion. The audio message should be played in the default language of the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Processing Premium Service or Special Route/Location on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location, resulting in a regular ride balance fare payment and Transfer Product creation. The device should not differentiate between service class for CLIENT Ticket."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Handling Fare Upgrade on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route, resulting in a free transfer. The device should not differentiate between service class for CLIENT Ticket."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Processing Valid Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Child concession on the customer's TICKET. The system should display the successful Child Transit Pass fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Handling Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the operator inspects a customer\u2019s farecard and determines that they have not paid a fare. The operator should be able to select the payment function on the SA Tool inspection results screen. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Handling Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer has an expired period pass and their ePurse balance is less than the fare amount. The system should display a declined message to the customer and not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer\u2019s Farecard is blocked. The system should not allow any transactions to be conducted with the blocked Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment Inspection",
        "Test_Sce_Description": "Verify that the operator can inspect a customer\u2019s TICKET and determine whether they have paid a fare or not."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Payment Function Selection",
        "Test_Sce_Description": "Verify that the operator can select the payment function on the SA Tool inspection results screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment and Inspection Transaction Recording",
        "Test_Sce_Description": "Verify that the SA Tool records both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Invalid Period Pass",
        "Test_Sce_Description": "Verify that the SA Tool application detects that the TICKET Period Pass is not valid on the current date and displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Verify that if the low battery threshold is reached before Step 5, the application switches to \u201cOut of Service\u201d mode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Non-CLIENT Media Card",
        "Test_Sce_Description": "Verify that if a customer taps a card that is not CLIENT media, the SA Tool application does not respond, but the device error message \u201cCard Read Error\u201d is displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Anti-Passback Window",
        "Test_Sce_Description": "Verify that if a customer\u2019s card is within the Anti-Passback Window, the device detects that the TICKET fails the Anti-Passback checks and displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Non-Activated Ticket",
        "Test_Sce_Description": "Verify that if a customer taps a non-activated CLIENT Ticket, the device detects that the TICKET is not activated and displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Expired Ticket",
        "Test_Sce_Description": "Verify that if a customer taps an expired Ticket, the device detects that the TICKET is expired and displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Accept inspection",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Successful Fare Payment",
        "Test_Sce_Description": "Verify that if a customer taps a valid TICKET, the device computes that the TICKET has a valid period pass and accepts the fare, updates the TICKET accordingly, displays the successful fare payment screen, and plays the successful fare payment audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Validating Fare Payment with Valid Limited Period Pass",
        "Test_Sce_Description": "This scenario is to test the functionality of the system when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product. The system should be able to deduct the fare from the pass and complete the transaction successfully."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Validating Fare Payment with Limited Period Pass Outside Valid Time",
        "Test_Sce_Description": "This scenario is to test the functionality of the system when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring outside of the time limit of the Limited Period Pass Product. The system should be able to detect that the pass is not valid at the current time, compute the value to be deducted from the e-Purse, and deduct the fare."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Validating Fare Payment with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to test the functionality of the system when the customer has an expired period pass, the ePurse balance is less than the fare amount, and the customer has an anonymous Virtual Card. The system should be able to detect the insufficient balance and return a declined result back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Validating Fare Payment with Blocked Virtual Card",
        "Test_Sce_Description": "This scenario is to test the functionality of the system when the customer\u2019s Farecard is blocked. The system should be able to detect the blocked card and return a declined result back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Validating Fare Payment with Virtual Card on Deny List",
        "Test_Sce_Description": "This scenario is to test the functionality of the system when the customer\u2019s Virtual Card is on the Deny List. The system should be able to detect the card on the Deny List, remove the card from the Deny List and set it to blocked, and return a declined result back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Validating Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "This scenario is to test the functionality of the system when the low battery threshold is high enough that the remote lists can be processed even after the SA Tool battery goes below the low battery threshold during a successful Farecard tap. The system should be able to process the transaction successfully despite the low battery."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Validating Fare Payment with Unreadable TICKET",
        "Test_Sce_Description": "This scenario is to test the functionality of the system when the SA Tool application detects the TICKET and fails to read it correctly. The system should be able to indicate to the operator that the TICKET is unreadable."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Validating Fare Payment with TICKET on Premium or Special Event Service Class Route/Location",
        "Test_Sce_Description": "This scenario is to test the functionality of the system when the Ticket has a valid Period Pass and is tapped on route/location with Premium or Special Event Service Class. The system should be able to identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Validating Fare Payment with Valid Child Concession on TICKET",
        "Test_Sce_Description": "This scenario is to test the functionality of the system when the customer\u2019s TICKET has a Valid Child concession. The system should be able to detect the Valid Child Concession and display the successful Child fare payment screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Validating Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "This scenario is to test the functionality of the system when the operator inspects a customer\u2019s TICKET and determines that they have not paid a fare. The system should be able to record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Validating Fare Payment with TICKET Period Pass Not Valid on Current Date",
        "Test_Sce_Description": "This scenario is to test the functionality of the system when the customer has a period pass Ticket that is outside the validity period. The system should be able to detect the invalid period pass and return a declined result back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Low Battery Threshold during Payment",
        "Test_Sce_Description": "This scenario tests the functionality of the application when the battery goes below the low battery threshold during a successful Farecard tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Card Not a Farecard",
        "Test_Sce_Description": "This scenario tests the application's response when a customer taps a card that is not a Farecard. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Card within Anti-Passback Window",
        "Test_Sce_Description": "This scenario tests the application's functionality when a customer's card is within the Anti-Passback Window. The ATS should detect that the Farecard fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Limited Period Pass outside of valid time while card is in overdraft",
        "Test_Sce_Description": "This scenario tests the application's functionality when a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, and the farecard is in overdraft. The ATS should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, and detect that farecard is in overdraft. The SA Tool application should display a declined message to the customer and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario tests the application's functionality when a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction. The ATS should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, and deduct the fare."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Expired Period Pass and ePurse Balance Less than the Fare Amount",
        "Test_Sce_Description": "This scenario tests the application's functionality when a customer has an expired period pass and the ePurse balance is less than the fare amount. The device should send the transaction to ATS for processing, ATS should detect the card is Anonymous and the ePurse Balance is less than the fare amount, and return a declined result back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Blocked Virtual Card",
        "Test_Sce_Description": "This scenario tests the application's functionality when a customer's Farecard is blocked. The device should send the transaction to ATS for processing, ATS should detect the card is blocked, and return a declined result back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Virtual Card on the Deny List",
        "Test_Sce_Description": "This scenario tests the application's functionality when a customer's Virtual Card is on the Deny List. The device should send the transaction to ATS for processing, ATS should detect the card is on the Deny List, remove the card from the Deny List and set it to blocked, and return a declined result back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating TICKET Readability",
        "Test_Sce_Description": "This scenario is to test if the SA Tool application is able to detect and read the TICKET correctly. The TICKET is tapped on the NFC reader and the application should be able to read it. If the TICKET is unreadable, the application should indicate to the operator that the TICKET is unreadable."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Successful Fare Payment",
        "Test_Sce_Description": "This scenario is to test if the SA Tool application is able to successfully process the fare payment from a TICKET using a Period Pass. The TICKET is tapped on the NFC reader and the application should validate the TICKET, compute the fare and update the TICKET accordingly. The application should then display the successful fare payment screen and play the successful fare payment audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating TICKET with Invalid Period Pass",
        "Test_Sce_Description": "This scenario is to test if the SA Tool application is able to detect and decline a TICKET with an invalid Period Pass. The TICKET is tapped on the NFC reader and the application should validate the TICKET. If the Period Pass is not valid, the application should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating TICKET with Child Concession",
        "Test_Sce_Description": "This scenario is to test if the SA Tool application is able to detect and process a TICKET with a valid Child concession. The TICKET is tapped on the NFC reader and the application should validate the TICKET. If a valid Child concession is found, the application should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating TICKET with Failed Inspection",
        "Test_Sce_Description": "This scenario is to test if the SA Tool application is able to process a fare payment from a TICKET that has failed inspection. The operator inspects the TICKET and determines that the customer has not paid a fare. The operator then selects the payment function on the SA Tool inspection results screen. The application should then process the fare payment and record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating TICKET with Anti-Passback Window",
        "Test_Sce_Description": "This scenario is to test if the SA Tool application is able to detect and decline a TICKET that is within the Anti-Passback Window. The TICKET is tapped on the NFC reader and the application should validate the TICKET. If the TICKET fails the Anti-Passback checks, the application should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating TICKET that is not Activated",
        "Test_Sce_Description": "This scenario is to test if the SA Tool application is able to detect and decline a TICKET that is not activated. The TICKET is tapped on the NFC reader and the application should validate the TICKET. If the TICKET is not activated, the application should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating TICKET that is Expired",
        "Test_Sce_Description": "This scenario is to test if the SA Tool application is able to detect and decline an expired TICKET. The TICKET is tapped on the NFC reader and the application should validate the TICKET. If the TICKET is expired, the application should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Anti-Passback Window Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback window and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Non-Activated Ticket Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a non-activated ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Expired Ticket Check",
        "Test_Sce_Description": "Verify that the system correctly identifies an expired ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Period Pass Validation",
        "Test_Sce_Description": "Verify that the system correctly validates a ticket with a valid period pass. The system should accept the fare, update the ticket accordingly, display a successful fare payment screen, and play a successful fare payment audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Unreadable Ticket Check",
        "Test_Sce_Description": "Verify that the system correctly identifies an unreadable ticket and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Limited Period Pass Time Validation",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket with a valid Limited Period Pass that is being used outside of its valid time. The system should compute the value to be deducted from the e-Purse and deduct the fare."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Expired Period Pass and Insufficient ePurse Balance Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket with an expired period pass and an ePurse balance less than the fare amount. The system should decline the transaction, display a declined message to the customer, and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Blocked Farecard Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a blocked farecard and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Deny List Farecard Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a farecard on the Deny List, removes it from the Deny List, sets it to blocked, and declines the transaction. The system should display a declined message to the customer and play a declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Low Battery Threshold Check",
        "Test_Sce_Description": "Verify that the system correctly identifies when the battery goes below the low battery threshold during a successful Farecard tap. The system should be able to process the remote lists even after the battery goes below the threshold."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Testing Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to pay the fare with a non-activated ticket. The tool should detect that the ticket is not activated, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Testing Fare Payment with Expired Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to pay the fare with an expired ticket. The tool should detect that the ticket is expired, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Testing Fare Payment with Ticket Failing Anti-Passback Checks",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to pay the fare with a ticket that fails the Anti-Passback checks. The tool should detect the failure, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Testing Fare Payment with Valid Period Pass",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to pay the fare with a ticket that has a valid period pass. The tool should compute that the ticket has a valid period pass, accept the fare, update the ticket accordingly, display the successful fare payment screen, play the successful fare payment audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Testing Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it detects a ticket but fails to read it correctly. The tool should display an error message and not proceed with the fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Testing Fare Payment with Low Battery",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the device battery goes below the low battery threshold during a successful ticket tap. The tool should switch to 'Out of Service' mode after processing the fare payment if the low battery threshold is reached before the fare payment is processed."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Testing Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to pay the fare with a card that is not CLIENT media. The tool should not respond and display a 'Card Read Error' message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Testing Fare Payment with Ticket Outside Validity Period",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to pay the fare with a period pass ticket that is outside the validity period. The tool should detect that the period pass is not valid on the current date, display a declined message to the customer, play a declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment from an Expired TICKET using Period Pass",
        "Test_Sce_Description": "This scenario is to test the functionality of the system when a customer tries to pay for a trip using an expired TICKET with a Period Pass. The system should detect that the TICKET is expired and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment from a TICKET with Insufficient e-Purse Balance",
        "Test_Sce_Description": "This scenario is to test the functionality of the system when a customer tries to pay for a trip using a TICKET with a Period Pass but the e-Purse balance is less than the fare amount. The system should detect the insufficient balance and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment from a Blocked TICKET using Period Pass",
        "Test_Sce_Description": "This scenario is to test the functionality of the system when a customer tries to pay for a trip using a blocked TICKET with a Period Pass. The system should detect that the TICKET is blocked and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment from a TICKET on the Deny List using Period Pass",
        "Test_Sce_Description": "This scenario is to test the functionality of the system when a customer tries to pay for a trip using a TICKET with a Period Pass that is on the Deny List. The system should detect that the TICKET is on the Deny List, remove it from the list, set it to blocked, and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment from a TICKET during Low Battery",
        "Test_Sce_Description": "This scenario is to test the functionality of the system when a customer tries to pay for a trip using a TICKET with a Period Pass while the SA Tool battery is low. The system should be able to process the remote lists even when the battery goes below the low battery threshold during a successful TICKET tap."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment from a TICKET within the Anti-Passback Window",
        "Test_Sce_Description": "This scenario is to test the functionality of the system when a customer tries to pay for a trip using a TICKET with a Period Pass within the Anti-Passback Window. The system should detect that the TICKET fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment from a Non-Activated TICKET using Period Pass",
        "Test_Sce_Description": "This scenario is to test the functionality of the system when a customer tries to pay for a trip using a non-activated TICKET with a Period Pass. The system should detect that the TICKET is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Performance Testing of the SA Tool",
        "Test_Sce_Description": "This scenario is to test the performance of the SA Tool when processing fare payments from TICKETS using Period Pass. The system should be able to handle multiple transactions simultaneously without any lag or delay."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Security Testing of the SA Tool",
        "Test_Sce_Description": "This scenario is to test the security of the SA Tool when processing fare payments from TICKETS using Period Pass. The system should securely handle all transactions and protect the customer's data from any potential security threats."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Unreadable TICKET detection",
        "Test_Sce_Description": "Verify that the SA Tool application correctly detects an unreadable TICKET and displays an appropriate error message to the operator."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Error logging for unreadable TICKET",
        "Test_Sce_Description": "Verify that when a TICKET is unreadable, an error is captured and logged in the background to aid in troubleshooting. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Successful tap after unreadable TICKET",
        "Test_Sce_Description": "Verify that if the customer taps the NFC reader again after an unreadable TICKET error, and the tap is successful, the application proceeds with steps 4-9 as stated in the Main Use Case."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Audio messages request handling",
        "Test_Sce_Description": "Verify that when a customer requests audio messages for fare payment, the operator can enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Audio language selection",
        "Test_Sce_Description": "Verify that the audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Valid Period Pass on Premium or Special Event Service Class Route",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid Period Pass on a Premium or Special Event Service Class Route and accepts the fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Valid Child Concession detection",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a Valid Child Concession on a TICKET and displays the successful Child fare payment screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that if the operator inspects a customer\u2019s TICKET and determines that they have not paid a fare, the SA Tool records both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Handling of TICKET Period Pass not valid on the current date",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a TICKET Period Pass that is not valid on the current date and displays an appropriate error message to the operator."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Expired Period Pass with sufficient ePurse balance",
        "Test_Sce_Description": "Verify that if a customer\u2019s Farecard has an expired period pass but the ePurse balance is more than the fare amount, the SA Tool correctly deducts the fare from the e-Purse."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Expired Period Pass with insufficient ePurse balance",
        "Test_Sce_Description": "Verify that if a customer\u2019s Farecard has an expired period pass and the ePurse balance is less than the fare amount, the SA Tool correctly puts the Farecard into overdraft."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Inter-agency Transfer window",
        "Test_Sce_Description": "Verify that if a customer\u2019s Farecard has a valid transfer product from another transit agency, the SA Tool correctly identifies this and accepts the fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Farecard on the Action or Load Value List",
        "Test_Sce_Description": "Verify that if a customer\u2019s Farecard is on the Action or Load Value list, the SA Tool correctly identifies this and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Audio Mode Enablement",
        "Test_Sce_Description": "Verify that the operator is able to enable the audio mode when the customer requests for audio messages for fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Volume Adjustment",
        "Test_Sce_Description": "Verify that the operator can adjust the volume level using the physical device buttons at the customer\u2019s discretion."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Volume Adjustment Bar Display",
        "Test_Sce_Description": "Verify that a volume adjustment bar appears while the volume is being adjusted and it times out automatically."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Volume Return to Default",
        "Test_Sce_Description": "Verify that the volume returns to the device default after the use case is completed."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Fare Payment Screen Display",
        "Test_Sce_Description": "Verify that the SA Tool displays the fare payment screen to the operator and customer for the duration of the audio message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Audio Message Playback",
        "Test_Sce_Description": "Verify that the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Screen Return to Tap Card Screen",
        "Test_Sce_Description": "Verify that after the audio ends, the SA Tool screen returns to the application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Fare Deduction for Higher Fare Value",
        "Test_Sce_Description": "Verify that the ATS computes and deducts the Upgrade fare when the Service class fare value is lower than the current route/location Service Class fare value."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Fare Acceptance for Lower Fare Value",
        "Test_Sce_Description": "Verify that the ATS identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment when the Service class fare value is greater than the current route/location Service Class fare value."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Fare Payment with Limited Period Pass",
        "Test_Sce_Description": "Verify that the fare payment is accepted when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Fare Payment with Limited Period Pass Outside Valid Time",
        "Test_Sce_Description": "Verify that the fare payment is accepted when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring outside of the time limit of the Limited Period Pass Product, but the farecard has sufficient e-Purse balance to cover the transaction."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Declined Message Display for Unreadable Ticket",
        "Test_Sce_Description": "Verify that the SA Tool application displays a declined message to the customer when the device detects that the TICKET is unreadable."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Declined Message Display for Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the SA Tool application displays a declined message to the customer when the device detects that the TICKET is not activated."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Declined Message Display for Expired Ticket",
        "Test_Sce_Description": "Verify that the SA Tool application displays a declined message to the customer when the device detects that the TICKET is expired."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Successful Fare Payment Display",
        "Test_Sce_Description": "Verify that the SA Tool displays the successful fare payment screen when the fare payment is accepted."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Successful Fare Payment Audio Tone",
        "Test_Sce_Description": "Verify that the SA Tool plays the successful fare payment audio tone when the fare payment is accepted."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Accepting Fare Payment from a TICKET using Ride Balance - Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the free transfer for a ticket with a valid Transfer Product when the Service Class is Premium or Special Event. The fare payment should be made on the FLATFARE BASED SA Tool and the tap should be within the Transfer Window."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a Valid Child Concession on a customer's TICKET and successfully completes the fare payment. The SA Tool should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the SA Tool correctly processes a fare payment resulting from a failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's ride balance is empty and declines the transaction. The SA Tool should display a declined message to the customer, play the declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment",
        "Test_Sce_Description": "Verify that the SA Tool correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful TICKET tap. If the low battery threshold is reached before Step 5, the application should switch to 'Out of Service' mode. If not, the customer's fare payment should be processed as per Step 5 before switching to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's card is not CLIENT media and does not respond. The device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's TICKET is within the Anti-Passback Window and declines the transaction. The SA Tool should display a declined message to the customer, play the declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's TICKET is not activated and declines the transaction. The SA Tool should display a declined message to the customer, play the declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Premium or Special Event Service Class Route/Location on SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment when the fare payment is being made on the SA Tool and the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass",
        "Test_Sce_Description": "Verify that the SA Tool correctly processes a fare payment from a Farecard with a valid Limited Period Pass and the current time is within the limits of the product. The SA Tool should complete all steps as stated in the Main Use Case."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies that the Limited Period Pass is not valid at the current time, computes the value to be deducted from the e-Purse, and deducts the fare. The SA Tool should complete all steps as stated in the Main Use Case."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a Valid Child Concession on a customer's Farecard and successfully completes the fare payment. The SA Tool should display the successful Child Transit Pass fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the SA Tool correctly processes a fare payment resulting from a failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer has an expired period pass, an ePurse balance less than the fare amount, and an anonymous Farecard. The SA Tool should decline the transaction, display a declined message to the customer, play the declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer\u2019s Farecard is Blocked",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's Farecard is blocked and declines the transaction. The SA Tool should display a declined message to the customer, play the declined audio tone, and return to the Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid transfer product on the customer's TICKET. The system should compute the free transfer and proceed with the fare payment process."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that the system correctly handles a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment on the FLATFARE BASED SA Tool for a premium service or special route/location. The system should not differentiate between service class for CLIENT Ticket."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment on the FLATFARE BASED SA Tool for a premium service or special event route/location after previously riding on a regular, premium, or special event route. The system should compute the free transfer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Valid Child Concession on CLIENT Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Child concession on the customer's CLIENT Ticket. The system should proceed with the fare payment process."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Valid Period Pass",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid Period Pass on the customer's Farecard and accepts the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Limited Period Pass",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid Limited Period Pass product on the customer's Farecard and the current time is within the limits of the product."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid Limited Period Pass product on the customer's Farecard and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Valid Child Concession on Farecard",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Child concession on the customer's Farecard. The system should display the successful Child Transit Pass fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly handles a fare payment resulting from a failed inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Expired Period Pass and ePurse Balance Less than the Fare Amount",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer has an expired period pass and the ePurse balance is less than the fare amount. The system should display a declined message to the customer and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that the system correctly identifies a blocked Farecard and prevents the fare payment process from proceeding."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment Inspection",
        "Test_Sce_Description": "Verify that the operator is able to inspect a customer\u2019s TICKET and determine if they have not paid a fare."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Payment Function Selection",
        "Test_Sce_Description": "Verify that the operator is able to select the payment function on the SA Tool inspection results screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment and Inspection Transaction Recording",
        "Test_Sce_Description": "Verify that the SA Tool records both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Invalid Period Pass",
        "Test_Sce_Description": "Verify that the SA Tool application detects that the TICKET Period Pass is not valid on the current date and displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Verify that if the low battery threshold is reached before Step 5, the application switches to \u201cOut of Service\u201d mode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Non-CLIENT Media Card",
        "Test_Sce_Description": "Verify that if a customer taps a card that is not CLIENT media, the SA Tool application does not respond, but the device error message \u201cCard Read Error\u201d is displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Anti-Passback Window",
        "Test_Sce_Description": "Verify that if a customer\u2019s card is within the Anti-Passback Window, the device detects that the TICKET fails the Anti-Passback checks and displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Non-Activated Ticket",
        "Test_Sce_Description": "Verify that if a customer taps a non-activated CLIENT Ticket, the device detects that the TICKET is not activated and displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Expired Ticket",
        "Test_Sce_Description": "Verify that if a customer taps an expired Ticket, the device detects that the TICKET is expired and displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Successful Fare Payment",
        "Test_Sce_Description": "Verify that if a customer taps a valid TICKET, the device computes that the TICKET has a valid period pass, accepts the fare, updates the TICKET accordingly, displays the successful fare payment screen, and plays the successful fare payment audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Sign In with New Operator",
        "Test_Sce_Description": "Verify that a new operator can sign in to the SA Tool even when a current operator is already signed in. The system should display a message indicating that another operator is currently signed in and ask for confirmation to proceed. Upon selecting 'Yes', the current operator should be signed off and the new operator should be signed in."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Shut Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator can manually shut down the SA Tool by pressing and holding the physical power button. The system should display a confirmation message with options such as 'Power off', 'Reset', 'Airplane Mode', etc. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Reboot SA Tool",
        "Test_Sce_Description": "Verify that the operator can manually reboot the SA Tool at any time by pressing and holding the physical power button. The system should display a confirmation message with options such as 'Power off', 'Reset', 'Airplane Mode', etc. Upon selecting the 'Restart' option, the device should restart by turning off and powering on."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the SA Tool can switch into a Standby state where the screen will turn off after a configurable period of inactivity. In this state, the SA Tool should disconnect from all peripherals to conserve battery life. An operator should be able to bring the device back into In-Service state by pressing the physical power button and signing in to the device lock screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool application can run in the background while the operator uses authorized third-party applications. The SA Tool should disconnect from all peripherals to conserve battery life in this state. The operator should be able to resume the functionality of the SA Tool application by switching back to it."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that in Revenue Mode, the SA Tool operator can interact with customers and perform operations such as inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA Tool should only have access to the EPT in this mode and should accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that in Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in this mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Access Revenue Mode",
        "Test_Sce_Description": "Verify that SA Tool Operators have access to Revenue Mode and can perform core functionalities such as Sales, Fare Payment, Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are correctly implemented and functioning as expected."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "SA Tool Offline Sign-Off",
        "Test_Sce_Description": "Verify that the operator is able to sign-off from the SA Tool when it is in offline mode. The tool should not close the operator's shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "SA Tool Standby State",
        "Test_Sce_Description": "Verify that the SA Tool enters the Standby state after a configurable period of inactivity. In this state, the screen should turn off and the tool should disconnect from all peripherals to conserve battery life."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "SA Tool Standby State Activation",
        "Test_Sce_Description": "Verify that the operator can activate the SA Tool from Standby state by pressing the physical power button and signing in to the device lock screen. The tool should then return to the In-Service state."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "SA Tool Running in Background",
        "Test_Sce_Description": "Verify that the SA Tool can run in the background while the operator uses authorized third-party applications. The tool should enter Standby state and disconnect from all peripherals to conserve battery life."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "SA Tool Revenue Mode",
        "Test_Sce_Description": "Verify that the operator can select Revenue Mode upon logon. In this mode, the operator should be able to interact with customers, perform inspections, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "SA Tool Training Mode",
        "Test_Sce_Description": "Verify that the operator can select Training Mode upon logon. In this mode, the operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "SA Tool Shut Down",
        "Test_Sce_Description": "Verify that the operator can manually shut down the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with the option to power off."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "SA Tool Reboot",
        "Test_Sce_Description": "Verify that the operator can manually reboot the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with the option to restart."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "SA Tool Performance in Different Modes",
        "Test_Sce_Description": "Verify the performance of the SA Tool in different modes (Revenue, Training). The tool should function smoothly and efficiently in each mode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "SA Tool Security",
        "Test_Sce_Description": "Verify the security measures of the SA Tool. Unauthorized users should not be able to access the tool or its functionalities."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "New Operator Sign In",
        "Test_Sce_Description": "Verify that a new operator can sign into the system using their own user ID and passcode. The system should display a message indicating that the current operator is signed in and ask if the new operator wants to sign in anyway. Upon confirmation, the current operator should be signed off from the system."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "SA Tool Offline Sign-Off",
        "Test_Sce_Description": "Verify that the SA Tool application can close the current shift and generate the shift statistics email when the device is offline. The email should be stored on the device and sent once the SA Tool is powered on and re-establishes connection to the network."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "SA Tool Low Battery Sign-Off",
        "Test_Sce_Description": "Verify that the SA Tool application can close the current shift and generate the shift statistics email when the device's battery level reaches 1%. The email should be stored on the device and sent once the SA Tool is powered on and re-establishes connection to the network."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "First Time Sign In Without Network",
        "Test_Sce_Description": "Verify that when a network is unavailable, the SA Tool application displays a message to the operator requesting them to sign in when network is available. The operator should not be signed in."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "Maximum Number of Login Attempts",
        "Test_Sce_Description": "Verify that the SA Tool application records a cumulative number of unsuccessful sign on attempts for a single valid operator badge ID on a SA Tool. When the number of unsuccessful sign-in attempts reaches the maximum number of sign-on attempts, the SA Tool application should deny access to that operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "New Passcode Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that the SA Tool application detects that the new passcode is the same as the temporary passcode in the Subsystem. The SA Tool Device should inform the user of the error and clear the new passcode fields."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that the SA Tool will not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "Expired Operator Passcode",
        "Test_Sce_Description": "Verify that the system correctly detects when an operator's passcode has expired and prompts the operator to enter a new passcode. Ensure that the new passcode is saved successfully when the operator selects Submit."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "Future Passcode Expiry",
        "Test_Sce_Description": "Check that the system accurately predicts when an operator's passcode will expire in the future and prompts the operator to change their passcode. The operator should have the option to either change their passcode or dismiss the message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "Secondary Transit Agency without Open Payments",
        "Test_Sce_Description": "Test that the application functions only with Farecard taps when the secondary transit agency does not have Open Payments enabled. The application should not respond to taps from contactless payment cards."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "Secondary Transit Agency with Open Payments",
        "Test_Sce_Description": "Ensure that the application functions for both Farecard and Open Payment media when the secondary transit agency has Open Payments enabled."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "Expired Temporary Passcode",
        "Test_Sce_Description": "Verify that the system correctly identifies when an operator enters a valid operator badge ID and an expired temporary passcode. The system should inform the operator of the expired temporary passcode and increment the invalid entry counter by one."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "Incorrect Username or Passcode",
        "Test_Sce_Description": "Check that the system correctly identifies when an operator enters an invalid operator badge ID and/or an invalid passcode. The system should inform the operator of the invalid operator badge ID and passcode combination, and increment the invalid entry counter by one."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "Maximum Number of Log-in Attempts Reached",
        "Test_Sce_Description": "Test that the system correctly locks the operator user account when the maximum number of sign-in attempts has been reached. The system should inform the operator that the user account associated with the operator ID is locked and clear the passcode field in the sign-in screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "First Time Sign-in with Temporary Passcode and No Network",
        "Test_Sce_Description": "Verify that the system correctly displays a message to the operator requesting them to sign in when network is available when the operator signs in for the first time using a temporary passcode and the network is not available."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "New Passcode is Same as Temporary Passcode",
        "Test_Sce_Description": "Check that the system correctly detects when the new passcode is the same as the temporary passcode. The system should inform the user of the error and clear the new passcode fields."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Ensure that the system correctly disables the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Passcode Expiry Notification",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects that the Operator\u2019s passcode will expire in a certain number of days and prompts the Operator to change their passcode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Passcode Change Prompt Dismissal",
        "Test_Sce_Description": "Verify that the Operator can dismiss the passcode change prompt if they choose not to change their passcode immediately."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Passcode Change Submission",
        "Test_Sce_Description": "Verify that when the Operator selects Submit after entering a new passcode, the new passcode is saved successfully."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Expired Temporary Passcode Entry",
        "Test_Sce_Description": "Verify that when the Operator enters an expired temporary passcode, the SA Tool correctly identifies it as invalid and informs the operator of the expired temporary passcode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Invalid Entry Counter Increment",
        "Test_Sce_Description": "Verify that the SA Tool increments the invalid entry counter by one each time an invalid sign-in is attempted."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Invalid Operator Badge ID or Passcode Entry",
        "Test_Sce_Description": "Verify that when the Operator enters an invalid operator badge ID and/or an invalid passcode, the SA Tool correctly identifies it as invalid and informs the operator of the invalid operator badge ID and passcode combination."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Maximum Number of Login Attempts",
        "Test_Sce_Description": "Verify that when the maximum number of login attempts is reached, the SA Tool locks the operator user account and informs the operator that the user account associated with the operator ID is locked."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "New Passcode Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects when the new passcode is the same as the temporary passcode and informs the user of the error."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "New Passcode Length Validation",
        "Test_Sce_Description": "Verify that the SA Tool does not enable the submit button until the passcode entered is of the correct length."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Network Availability Check for First Time Sign-in",
        "Test_Sce_Description": "Verify that when the network is unavailable, the SA Tool displays a message to the operator requesting them to sign in when network is available."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is not enabled for the secondary transit agency",
        "Test_Scnario": "Open Payments Media on Deny List",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is not enabled for the secondary transit agency",
        "Test_Scnario": "Open Payments Media on Local Deny List and Device Offline",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is not enabled for the secondary transit agency",
        "Test_Scnario": "Multiple NFC Media Presented at Once",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is not enabled for the secondary transit agency",
        "Test_Scnario": "Tap Open Payments Media when Device is Out-of-Service",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is not enabled for the secondary transit agency",
        "Test_Scnario": "Customer Taps-on Immediately After Tapping-off at the Same Station",
        "Test_Sce_Description": "Verify that when a cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is not enabled for the secondary transit agency",
        "Test_Scnario": "Error Occurs on Device",
        "Test_Sce_Description": "Verify that when an error occurs on the device that does not cover the exception cases above, the device records the tap and the Declined \u2013 See Customer Service Screen is provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is not enabled for the secondary transit agency",
        "Test_Scnario": "Tap Open Payments Media Not on Approved List in Beta Mode",
        "Test_Sce_Description": "Verify that when a customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode, the appropriate error message is displayed and the tap is not processed."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Open Payments Media on the deny list",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Open Payments Media on the local deny list and device is offline",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Multiple NFC media presented to the device at one time",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)",
        "Test_Sce_Description": "Verify that when the cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window, the device provides the cardholder with the appropriate feedback. The device should send the tap to ATS and return a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Open Payments Media Contains a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Sce_Description": "Verify that when the customer requests the override of a Default Trip by interacting with the Device, the device should inform the customer that it is prepared to override the Default Trip. The Cardholder then initiates a trip by presenting the Farecard to the Device CID."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Tap-On an SA Tool with Open Payments Media \u2013 Customer is eligible for capping discount",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Tap-On an SA Tool with Open Payments Media \u2013 Customer is eligible for multiple capping discounts",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS should take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Open Payments Media fails ODA check",
        "Test_Sce_Description": "Verify that when an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "Verify that when an Open Payments Media fails the expiry check, the device returns the appropriate feedback. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed Expiry Check screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "Expired Operator Passcode",
        "Test_Sce_Description": "Verify that the system correctly detects when an operator's passcode has expired and prompts the operator to enter a new passcode. Ensure that the new passcode is saved successfully and the operator can proceed with the main use case steps."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "Future Passcode Expiration",
        "Test_Sce_Description": "Check if the system correctly detects that the operator's passcode will expire in the future and prompts the operator to change their passcode. The operator should have the option to change their passcode or dismiss the message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "Secondary Transit Agency without Open Payments",
        "Test_Sce_Description": "Ensure that the application functions only with Farecard taps when the secondary transit agency does not have Open Payments enabled. The application should not respond to taps from contactless payment cards."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "Secondary Transit Agency with Open Payments",
        "Test_Sce_Description": "Verify that the application functions for both Farecard and Open Payment media when the secondary transit agency has Open Payments enabled."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "Expired Temporary Passcode",
        "Test_Sce_Description": "Check if the system correctly detects when an operator enters a valid operator badge ID and an expired temporary passcode. The system should inform the operator of an expired temporary passcode and increment the invalid entry counter."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "Incorrect Username or Passcode",
        "Test_Sce_Description": "Verify that the system correctly detects when an operator enters an invalid operator badge ID and/or an invalid passcode. The system should inform the operator of an invalid operator badge ID and passcode combination, and increment the invalid entry counter."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "Maximum Number of Log-in Attempts Reached",
        "Test_Sce_Description": "Ensure that the system correctly locks the operator user account when the maximum number of sign-in attempts has been reached. The system should inform the operator that the user account associated with the operator ID is locked."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "First Time Sign-in with Temporary Passcode and Network Unavailability",
        "Test_Sce_Description": "Check if the system correctly displays a message to the operator requesting them to sign in when network is available when the operator signs in for the first time using a temporary passcode and the network is not available."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "New Passcode Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that the system correctly detects when the new passcode is the same as the temporary passcode. The system should inform the user of the error and clear the new passcode fields."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Ensure that the system does not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "First Time User Sign-In",
        "Test_Sce_Description": "Verify that a first-time user is able to sign-in to the SA Tool application using their operator badge ID and temporary passcode. The user should be prompted to change their temporary passcode upon initial log-in."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Online Authentication",
        "Test_Sce_Description": "Verify that the SA Tool communicates with the User management service to authenticate user login. This should be required when the device is online for first time users or after the local cache is cleaned based on a configurable credential caching duration."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Local Authentication",
        "Test_Sce_Description": "Verify that local authentication is used for users re-logging into the same SA Tool and whose credentials have not been cleaned based on the configurable credential caching duration. The local credential cache should only store the credentials of users who have logged in to the specific device previously."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Security Setup",
        "Test_Sce_Description": "Verify that the SA Tool application informs the operator of successful first-time sign-in and displays the Security Setup screen. The operator should be notified that they will need to set up security questions and a new passcode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Passcode Validation",
        "Test_Sce_Description": "Verify that the SA Tool application validates that the new passcode meets passcode length criteria by connecting to the user management service. The application should also validate that the new passcode does not match the temporary passcode, and that the new passcodes that were entered twice match each other."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Incorrect Username or Passcode",
        "Test_Sce_Description": "Verify that if the operator enters an incorrect username or passcode, the SA Tool application records a cumulative number of unsuccessful sign on attempts for a single valid operator badge ID on a SA Tool. When the number of unsuccessful sign-in attempts reaches the maximum number of sign-on attempts, the SA Tool application should deny access to that operator."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Network Unavailability",
        "Test_Sce_Description": "Verify that if the network is unavailable, the SA Tool application displays a message to the operator requesting them to sign in when network is available."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Same Temporary and New Passcode",
        "Test_Sce_Description": "Verify that if the new passcode is the same as the temporary passcode, the SA Tool Device informs the user of the error and clears the new passcode fields."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Passcode Length Criteria",
        "Test_Sce_Description": "Verify that the SA Tool will not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Network Unavailability during First Time Sign-in",
        "Test_Sce_Description": "Verify that the SA Tool application displays a message to the operator requesting them to sign in when network is available, when the operator tries to sign in for the first time using a temporary passcode and the network is not available."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Maximum Number of Login Attempts Reached",
        "Test_Sce_Description": "Verify that the SA Tool application records the number of unsuccessful sign-in attempts for a single valid operator badge ID. When the number of unsuccessful sign-in attempts reaches the maximum number of sign-on attempts, the SA Tool application should deny access to that operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "New Passcode is Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that the SA Tool application detects that the new passcode is the same as the temporary passcode in the Subsystem and informs the user of the error and clears the new passcode fields."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that the SA Tool will not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Reset Passcode when Operator Account is Locked",
        "Test_Sce_Description": "Verify that the SA Tool application detects that operator account has been locked by checking the User management service and notifies the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Reset Passcode with Invalid Operator Badge ID",
        "Test_Sce_Description": "Verify that the SA Tool application checks with the User management service and determines that the operator badge ID is invalid and notifies the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Reset Passcode with Invalid Security Question Answers",
        "Test_Sce_Description": "Verify that the SA Tool application validates that the security question answers entered do not match those stored in the User management service and notifies the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Reset Passcode with Mismatched New Passcodes",
        "Test_Sce_Description": "Verify that the SA Tool application validates that the new passcodes that were entered twice are not same and notifies the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Reset Passcode with Incorrect Passcode Length",
        "Test_Sce_Description": "Verify that the SA Tool application will not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Reset Passcode for First-Time User",
        "Test_Sce_Description": "Verify that the SA Tool application connects to the User management service and validates that the operator badge ID entered belongs to a first-time user and notifies the operator with a corresponding error message and clears the passcode field."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Maximum Number of Forgot Passcode Attempts Reached",
        "Test_Sce_Description": "Verify that the SA Tool application records a cumulative number of unsuccessful reset passcode attempts for a single valid operator ID on a specific SA Tool. When the number of unsuccessful reset passcode attempts reaches the maximum reset passcode attempts, the SA Tool denies access to that operator until the operator ID is unlocked by the CLIENT back-office user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Written warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Account Validation Fails After Passcode Reset",
        "Test_Sce_Description": "Verify that the SA Tool application validates the user account after the passcode has been reset. If the validation fails, the application should notify the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should successfully accept the fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should deduct the fare from the e-Purse and accept the fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a customer with an anonymous farecard that has an expired period pass and insufficient ePurse balance attempts to make a fare payment. The system should decline the transaction and display a declined message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a customer with a blocked farecard attempts to make a fare payment. The system should decline the transaction and display a declined message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Handling Farecard on Deny List",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a customer with a farecard on the Deny List attempts to make a fare payment. The system should remove the card from the Deny List, set it to blocked, decline the transaction, and display a declined message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Handling Low Battery during Payment",
        "Test_Sce_Description": "This scenario is to validate the system's handling when the battery goes below the low battery threshold during a fare payment. The system should still be able to process the remote lists and complete the transaction."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Handling Unreadable TICKET",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a TICKET is unreadable. The system should indicate to the operator that the TICKET is unreadable and prompt the customer to tap again."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Handling Audio Message Request",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a customer requests audio messages for the fare payment. The system should play the corresponding audio message in the default language of the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Handling Premium or Special Event Service Class Route/Location",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a TICKET with a valid Period Pass is tapped on a route/location with Premium or Special Event Service Class. The system should accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Handling Valid Child Concession",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a customer with a TICKET that has a Valid Child concession attempts to make a fare payment. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Handling Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Handling TICKET Period Pass not valid on the current date",
        "Test_Sce_Description": "This scenario is to validate the system's handling when a customer with a TICKET that has a period pass not valid on the current date attempts to make a fare payment. The system should decline the transaction and display a declined message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Low Battery Threshold Test",
        "Test_Sce_Description": "This scenario tests the functionality of the application when the battery goes below the low battery threshold during a successful Farecard tap. The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If not, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Non-Farecard Tap Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer taps a card that is not a Farecard. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Anti-Passback Window Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer's Farecard is within the Anti-Passback Window. The ATS should detect that the Farecard fails the Anti-Passback checks and the SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Limited Period Pass Outside Valid Time Test",
        "Test_Sce_Description": "This scenario tests the application's response when a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, and the farecard is in overdraft. The ATS should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, and detect that farecard is in overdraft. The SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Expired Period Pass and Insufficient ePurse Balance Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer has an expired period pass and their ePurse balance is less than the fare amount. The device should send the transaction to ATS for processing. ATS should detect the card is Anonymous and the ePurse Balance is less than the fare amount and return a declined result back to the SA Tool. The SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Blocked Virtual Card Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer's Farecard is blocked. The device should send the transaction to ATS for processing. ATS should detect the card is blocked and return a declined result back to the SA Tool. The SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Virtual Card on Deny List Test",
        "Test_Sce_Description": "This scenario tests the application's response when a customer's Virtual Card is on the Deny List. The device should send the transaction to ATS for processing. ATS should detect the card is on the Deny List, remove the card from the Deny List and set it to blocked, and return a declined result back to the SA Tool. The SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Unreadable TICKET",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it detects a TICKET but fails to read it correctly. The SA Tool should indicate to the operator that the TICKET is unreadable and log an error in the background for troubleshooting."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Successful Tap After Unreadable TICKET",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer taps the NFC reader again after an unreadable TICKET error. If the tap is successful, the SA Tool should conduct steps 4 \u2013 9 as stated in the Main Use Case."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer requests audio messages for the fare payment. The operator should be able to enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Premium or Special Event Service Class Route/Location",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the TICKET has a valid Period Pass and is tapped on route/location with Premium or Special Event Service Class. The SA Tool should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Valid Child Concession",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer\u2019s TICKET has a Valid Child concession. The SA Tool should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the operator inspects a customer\u2019s TICKET and determines that they have not paid a fare. The SA Tool should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Invalid Period Pass",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer has a period pass Ticket that is outside the validity period. The SA Tool should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Non-activated Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer\u2019s Ticket is not activated. The SA Tool should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Expired Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer\u2019s Ticket is expired. The SA Tool should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Anti-Passback Window Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback window and displays a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Non-Activated Ticket Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a non-activated ticket and displays a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Expired Ticket Check",
        "Test_Sce_Description": "Verify that the system correctly identifies an expired ticket and displays a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Period Pass Validation",
        "Test_Sce_Description": "Verify that the system correctly validates a ticket with a valid period pass and accepts the fare. The SA Tool should update the ticket accordingly and display the successful fare payment screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Unreadable Ticket Check",
        "Test_Sce_Description": "Verify that the system correctly identifies an unreadable ticket and fails to read it correctly. The SA Tool should display a declined message to the customer and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Limited Period Pass Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket with a valid Limited Period Pass product on it and accepts the fare if the time at tap is occurring within the time limit of the Limited Period Pass Product."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Expired Period Pass Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket with an expired period pass and displays a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Blocked Farecard Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a blocked farecard and displays a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Deny List Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a farecard on the Deny List and displays a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Low Battery Threshold Check",
        "Test_Sce_Description": "Verify that the system correctly identifies when the battery goes below the low battery threshold during a successful Farecard tap and processes the remote lists accordingly."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Validating Non-Activated Ticket",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer taps a non-activated ticket. The tool should detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Testing Anti-Passback Window Functionality",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's ticket is within the Anti-Passback Window. The tool should detect that the ticket fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Testing Expired Ticket",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer taps an expired ticket. The tool should detect that the ticket is expired and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Testing Period Pass Validity",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer's ticket period pass is not valid on the current date. The tool should detect that the ticket period pass is not valid and display a declined message to the customer. The transaction should not be conducted and the tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Testing Low Battery Threshold",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the device battery goes below the low battery threshold during a successful ticket tap. If the low battery threshold is reached before the fare payment is processed, the application should switch to 'Out of Service' mode. If the threshold is reached after the fare payment is processed, the application should still switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Testing Non-CLIENT Media",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when a customer taps a card that is not CLIENT media. The tool should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment with Expired Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the system when a customer attempts to make a fare payment using an expired ticket. The system should detect that the ticket is expired and decline the transaction, displaying a declined message to the customer and playing a declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "This scenario tests the system's ability to handle situations where the SA Tool application detects the TICKET but fails to read it correctly. The system should display an error message indicating that the ticket is unreadable."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment with Active Ticket and Valid Period Pass",
        "Test_Sce_Description": "This scenario tests the system's functionality when a customer attempts to make a fare payment using an active ticket with a valid period pass. The system should successfully process the transaction, update the ticket accordingly, and display a successful fare payment screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Performance of the System during Peak Hours",
        "Test_Sce_Description": "This scenario tests the system's performance during peak hours when multiple customers are attempting to make fare payments simultaneously. The system should be able to handle the high load without any significant delays or errors."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Security of the System during Fare Payment",
        "Test_Sce_Description": "This scenario tests the security of the system during fare payment. The system should securely process the transaction without exposing any sensitive customer information."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment with Blocked Ticket",
        "Test_Sce_Description": "This scenario tests the system's functionality when a customer attempts to make a fare payment using a blocked ticket. The system should detect that the ticket is blocked and decline the transaction, displaying a declined message to the customer and playing a declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment with Ticket on Deny List",
        "Test_Sce_Description": "This scenario tests the system's functionality when a customer attempts to make a fare payment using a ticket that is on the Deny List. The system should detect that the ticket is on the Deny List, remove it from the list, set it to blocked, and decline the transaction."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment with Insufficient e-Purse Balance",
        "Test_Sce_Description": "This scenario tests the system's functionality when a customer attempts to make a fare payment using a ticket with insufficient e-Purse balance. The system should detect the insufficient balance and decline the transaction, displaying a declined message to the customer and playing a declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment with Ticket within Anti-Passback Window",
        "Test_Sce_Description": "This scenario tests the system's functionality when a customer attempts to make a fare payment using a ticket that is within the Anti-Passback Window. The system should detect the Anti-Passback violation and decline the transaction."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "This scenario tests the system's functionality when a customer attempts to make a fare payment using a non-activated ticket. The system should detect that the ticket is not activated and decline the transaction, displaying a declined message to the customer and playing a declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "TICKET Unreadable",
        "Test_Sce_Description": "Verify that the SA Tool application correctly detects and handles an unreadable TICKET. The application should indicate to the operator that the TICKET is unreadable and log an error in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Successful TICKET Tap After Unreadable Error",
        "Test_Sce_Description": "Verify that if a customer taps their TICKET again after an unreadable error, and the tap is successful, the SA Tool application proceeds with steps 4 \u2013 9 as stated in the Main Use Case."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Unsuccessful TICKET Tap After Unreadable Error",
        "Test_Sce_Description": "Verify that if a customer taps their TICKET again after an unreadable error, and the tap is unsuccessful, the SA Tool application indicates to the operator that the TICKET is unreadable."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator can enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Audio Message Language",
        "Test_Sce_Description": "Verify that the audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Valid Period Pass on Premium or Special Event Service Class Route/Location",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment when the fare payment is being made on a route/location with Premium or Special Event Service Class."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Valid Child Concession on TICKET",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a Valid Child Concession on a customer\u2019s TICKET and displays the successful Child fare payment screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that when the operator inspects a customer\u2019s TICKET and determines that they have not paid a fare, the SA Tool records both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Invalid TICKET Period Pass",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where a customer has a period pass TICKET that is outside the validity period."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Farecard Unreadable",
        "Test_Sce_Description": "Verify that the SA Tool application correctly detects and handles an unreadable Farecard. The application should indicate to the operator that the Farecard is unreadable and log an error in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Expired Period Pass with Sufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where a customer\u2019s Farecard has an expired period pass but the ePurse balance is more than the fare amount. The SA Tool should compute the value to be deducted from the e-Purse and deduct the fare accordingly."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Expired Period Pass with Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles a situation where a customer\u2019s Farecard has an expired period pass and the ePurse balance is less than the fare amount. The SA Tool should compute the value to be deducted from the e-Purse, deduct the fare, and put the Farecard into overdraft."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Inter-agency Transfer",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a valid transfer product from another transit agency on a customer\u2019s Farecard and computes that the Farecard has a valid period pass."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Farecard on Action or Load Value List",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a Farecard that is on the Action or Load Value List and updates the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Audio Mode Enablement",
        "Test_Sce_Description": "Verify that the operator is able to enable the audio mode when the customer requests for audio messages for fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Volume Adjustment",
        "Test_Sce_Description": "Verify that the operator can adjust the volume level using the physical device buttons at the customer\u2019s discretion."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Volume Adjustment Bar Display",
        "Test_Sce_Description": "Verify that a volume adjustment bar appears while the volume is being adjusted and it times out automatically."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Volume Return to Default",
        "Test_Sce_Description": "Verify that the volume returns to the device default after the use case is completed."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Audio Message Language",
        "Test_Sce_Description": "Verify that the audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Screen Display after Audio Ends",
        "Test_Sce_Description": "Verify that after the audio ends, the SA Tool screen returns to the application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Fare Deduction for Higher Fare Value",
        "Test_Sce_Description": "Verify that the ATS computes and deducts the Upgrade fare when the Service class fare value is lower than the current route/location Service Class fare value."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Fare Acceptance for Lower Fare Value",
        "Test_Sce_Description": "Verify that the ATS identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment when the Service class fare value is greater than the current route/location Service Class fare value."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Fare Payment with Limited Period Pass",
        "Test_Sce_Description": "Verify that the fare payment is accepted when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Fare Payment with Limited Period Pass Outside Valid Time",
        "Test_Sce_Description": "Verify that the fare payment is accepted when the farecard has a valid Limited Period Pass product on it, the time at tap is occurring outside of the time limit of the Limited Period Pass Product, and the farecard has sufficient e-Purse balance to cover the transaction."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Declined Message Display for Anti-Passback Window",
        "Test_Sce_Description": "Verify that the SA Tool application displays a declined message to the customer when the TICKET fails the Anti-Passback checks."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Declined Message Display for Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the SA Tool application displays a declined message to the customer when the TICKET is not activated."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Declined Message Display for Expired Ticket",
        "Test_Sce_Description": "Verify that the SA Tool application displays a declined message to the customer when the TICKET is expired."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Successful Fare Payment Display",
        "Test_Sce_Description": "Verify that the SA Tool displays the successful fare payment screen when the TICKET has a valid period pass and the fare is accepted."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Successful Fare Payment Audio Tone",
        "Test_Sce_Description": "Verify that the SA Tool plays the successful fare payment audio tone when the TICKET has a valid period pass and the fare is accepted."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Screen Return to Tap Card Screen",
        "Test_Sce_Description": "Verify that after a configurable timeout, the screen returns to the application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Declined Message Display for Unreadable TICKET",
        "Test_Sce_Description": "Verify that the SA Tool application displays a declined message to the customer when the TICKET is unreadable."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Valid Transfer Product",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the free transfer when the ticket has a valid Transfer Product and the tap is within the Transfer Window."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Child Concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a Valid Child Concession on the customer's ticket and successfully completes the fare payment, displaying the successful Child fare payment screen and playing the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that when the operator inspects a customer\u2019s TICKET and determines that they have not paid a fare, the operator can select the payment function on the SA Tool inspection results screen and the SA Tool correctly records both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that when the customer\u2019s ride balance is empty, the SA Tool correctly detects this, displays a declined message to the customer, and does not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Low Battery",
        "Test_Sce_Description": "Verify that when the low battery threshold is reached during a successful TICKET tap, the application correctly switches to \u201cOut of Service\u201d mode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that when the customer\u2019s card is not CLIENT media, the SA Tool application does not respond and the device error message \u201cCard Read Error\u201d is displayed for a short period of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that when the customer\u2019s Ticket is within the Anti-Passback Window, the device correctly detects that the TICKET fails the Anti-Passback checks and displays a declined message to the customer, not conducting the transaction."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that when the customer\u2019s Ticket is not activated, the SA Tool correctly detects this and does not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Period Pass",
        "Test_Sce_Description": "Verify that when the farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value, the SA Tool correctly identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Limited Period Pass",
        "Test_Sce_Description": "Verify that when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product, the SA Tool correctly accepts the fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Limited Period Pass Outside of Valid Time",
        "Test_Sce_Description": "Verify that when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring outside of the time limit of the Limited Period Pass Product, the SA Tool correctly detects that the Limited Period Pass is not valid at the current time, computes the value to be deducted from the e-Purse, and deducts the fare."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Blocked Farecard",
        "Test_Sce_Description": "Verify that when the customer\u2019s Farecard is blocked, the SA Tool correctly detects this and does not conduct the transaction."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a valid Non-Adult, Non-Child concession on the customer's TICKET. The system should play the successful fare payment audio tone for a concession other than Adult or Child."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly identifies a valid transfer product on the customer's TICKET. The system should compute the free transfer correctly."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that the system correctly processes a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location. The system should result in a regular ride balance fare payment and Transfer Product creation."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route. The system should result in a free transfer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Valid Child Concession on CLIENT Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a Valid Child concession on the customer's CLIENT Ticket."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Period Pass with Service class fare value greater than current route/location Service Class fare value",
        "Test_Sce_Description": "Verify that the system correctly identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment when the Service class fare value is greater than the current route/location Service Class fare value."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Limited Period Pass",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a farecard with a valid Limited Period Pass product on it and the current time is within the limits of the product."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that the system correctly identifies that the Limited Period Pass is not valid at the current time, computes the value to be deducted from the e-Purse, and deducts the fare."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Valid Child Concession on Farecard",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a Valid Child concession on the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly processes a fare payment resulting from a failed inspection. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Expired Period Pass and ePurse Balance Less than the Fare Amount",
        "Test_Sce_Description": "Verify that the system correctly identifies an expired period pass and an ePurse balance less than the fare amount on an anonymous Farecard. The system should display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that the system correctly identifies a blocked Farecard. The system should prevent any transactions from being conducted."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment Inspection",
        "Test_Sce_Description": "Verify that the operator can inspect a customer\u2019s TICKET and determine whether they have paid a fare or not."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Payment Function Selection",
        "Test_Sce_Description": "Verify that the operator can select the payment function on the SA Tool inspection results screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment and Inspection Transaction Recording",
        "Test_Sce_Description": "Verify that the SA Tool records both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Toast Notification Display",
        "Test_Sce_Description": "Verify that a toast notification is displayed of the corresponding inspection action when the SA Tool application returns to the Tap Card screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Invalid Period Pass Detection",
        "Test_Sce_Description": "Verify that the SA Tool application can detect if the customer\u2019s TICKET Period Pass is not valid on the current date."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Declined Message Display",
        "Test_Sce_Description": "Verify that the SA Tool application displays a declined message to the customer when the transaction is not conducted."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Low Battery Threshold Handling",
        "Test_Sce_Description": "Verify that the application switches to \u201cOut of Service\u201d mode if the low battery threshold is reached before Step 5."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Non-CLIENT Media Card Handling",
        "Test_Sce_Description": "Verify that the SA Tool application does not respond, but the device error message \u201cCard Read Error\u201d is displayed for a short period of time when the customer taps a card that is not CLIENT media."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Anti-Passback Window Handling",
        "Test_Sce_Description": "Verify that the device detects that the TICKET fails the Anti-Passback checks and the SA Tool application displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Non-Activated Ticket Handling",
        "Test_Sce_Description": "Verify that the device detects that the TICKET is not activated and the SA Tool application displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Expired Ticket Handling",
        "Test_Sce_Description": "Verify that the device detects that the TICKET is expired and the SA Tool application displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Successful Fare Payment",
        "Test_Sce_Description": "Verify that the device computes that the TICKET has a valid period pass and accepts the fare."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Ticket Update",
        "Test_Sce_Description": "Verify that the SA Tool updates the TICKET accordingly after a successful fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Successful Fare Payment Screen Display",
        "Test_Sce_Description": "Verify that the SA Tool displays the successful fare payment screen after a successful fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Successful Fare Payment Audio Tone",
        "Test_Sce_Description": "Verify that the SA Tool plays the successful fare payment audio tone after a successful fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Sign In with Valid Credentials",
        "Test_Sce_Description": "Verify that the new operator is able to sign in to the SA Tool using valid user ID and passcode. The system should display a message indicating that the current operator is signed in and ask if the new operator wants to sign in anyway. Upon selecting 'Yes', the current operator should be signed off from the SA Tool."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Sign In with Invalid Credentials",
        "Test_Sce_Description": "Verify that the new operator is not able to sign in to the SA Tool using invalid user ID or passcode. The system should display an error message indicating invalid credentials."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Shut Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator is able to manually shut down the SA Tool by pressing and holding the physical power button. The system should display a confirmation message with the 'Power off' option. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Reboot SA Tool",
        "Test_Sce_Description": "Verify that the operator is able to manually reboot the SA Tool by pressing and holding the physical power button. The system should display a confirmation message with the 'Restart' option. Upon selecting 'Restart', the device should restart by turning off and powering on."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "SA Tool in Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "SA Tool in Standby State",
        "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state where the screen will turn off after remaining inactive for a configurable period of time. Alternatively, the operator should be able to press the physical power button to switch the SA Tool into standby state directly. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "SA Tool in Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon, the operator is able to select the Revenue Mode which allows the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "SA Tool in Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode. They should not be a form of valid proof of payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "SA Tool Operators Access",
        "Test_Sce_Description": "Verify that the SA Tool Operators have access to Revenue Mode, Core Functionality - Sales, Fare Payment, Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession. They should not have access to Training."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are working as expected."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the functionality of SA Tool in Out-of-Service state",
        "Test_Sce_Description": "Check if the SA Tool is unable to accept a Farecard for any kind of functionality when it is in \u201cOut-of-Service\u201d state. Also, verify if it requires maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the operator's shift status when device goes into out-of-service state",
        "Test_Sce_Description": "Check if the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off when the device goes into out-of-service state."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the functionality of SA Tool in Standby state",
        "Test_Sce_Description": "Check if the SA Tool suspends all functionality and disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life when it is in Standby state."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the functionality of SA Tool when it is running in the background",
        "Test_Sce_Description": "Check if the SA Tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life when it is running in the background. Also, verify if the operator can resume the functionality of the SA Tool application by switching back to the SA Tool application."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the functionality of SA Tool in Revenue mode",
        "Test_Sce_Description": "Check if the SA Tool operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in Revenue mode. Also, verify if the SA tool only has access to the EPT in the revenue mode and accepts the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the functionality of SA Tool in Training mode",
        "Test_Sce_Description": "Check if the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in Training Mode. Also, verify if only non-revenue Farecard is accepted in Training Mode and payment by credit /debit is not enabled."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the functionality of SA Tool when a new operator signs in",
        "Test_Sce_Description": "Check if a message indicates that the current Operator is currently signed in, and asks if the new Operator wants to sign in anyway when a new Operator enters own user ID and passcode and selects Sign In. Also, verify if the current Operator is signed off from the SA Tool when the new Operator selects Yes."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the functionality of SA Tool when it is manually shut down",
        "Test_Sce_Description": "Check if the SA Tool displays a confirmation message with the following options: Power off, Other options (e.g. Reset, Airplane Mode, etc.) when the operator presses and holds the physical power button on the SA Tool. Also, verify if the device turns off and the operator shift is not closed if it is open when the operator confirms the shut-down."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the functionality of SA Tool when it is manually rebooted",
        "Test_Sce_Description": "Check if the SA Tool displays a confirmation message with the following options: Power off, Other options (e.g. Reset, Airplane Mode, etc.) when the operator presses and holds the physical power button on the SA Tool. Also, verify if the device restarts by turning off and powering on when the operator selects the restart option."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "New Operator Sign In",
        "Test_Sce_Description": "Verify that a new operator can sign in to the SA Tool using their own user ID and passcode. The system should display a message indicating that the current operator is signed in and ask if the new operator wants to sign in anyway. Upon selecting 'Yes', the current operator should be signed off from the SA Tool."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "SA Tool Offline Sign-Off",
        "Test_Sce_Description": "Verify that the SA Tool application can close the current shift and generate the shift statistics email when the device is offline. The email should be stored on the device and sent once the SA Tool is powered on and re-establishes connection to the network."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "SA Tool Low Battery Sign-Off",
        "Test_Sce_Description": "Verify that the SA Tool can be turned off after the operator confirms they would like to sign-out when the battery level reaches 1%. The application should close off the current shift and generate the inspection shift statistics email that is stored on the device."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "First Time Sign In with Temporary Passcode and No Network",
        "Test_Sce_Description": "Verify that when a network is unavailable, the SA Tool application displays a message to the operator requesting them to sign in when network is available. The operator should not be signed in."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "Maximum Number of Login Attempts",
        "Test_Sce_Description": "Verify that the SA Tool application records a cumulative number of unsuccessful sign on attempts for a single valid operator badge ID on a SA Tool. When the number of unsuccessful sign-in attempts reaches the maximum number of sign-on attempts, the SA Tool application should deny access to that operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "New Passcode is Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that the SA Tool application detects that the new passcode is the same as the temporary passcode in the Subsystem. The SA Tool Device should inform the user of the error and clear the new passcode fields."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that the SA Tool will not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "Expired Operator Passcode",
        "Test_Sce_Description": "Verify that the system correctly detects when an operator's passcode has expired and prompts the operator to enter a new passcode. Ensure that the new passcode is saved successfully when the operator selects 'Submit'."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "Future Passcode Expiration",
        "Test_Sce_Description": "Verify that the system correctly detects when an operator's passcode will expire in the future and prompts the operator to change their passcode. Ensure that the operator can choose to change their passcode or dismiss the message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "Secondary Transit Agency without Open Payments",
        "Test_Sce_Description": "Verify that the application functions only with Farecard taps when the secondary transit agency does not have Open Payments enabled. Ensure that the application does not respond to taps from contactless payment cards."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "Secondary Transit Agency with Open Payments",
        "Test_Sce_Description": "Verify that the application functions for both Farecard and Open Payment media when the secondary transit agency has Open Payments enabled."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "Expired Temporary Passcode",
        "Test_Sce_Description": "Verify that the system correctly detects when an operator enters a valid operator badge ID and an expired temporary passcode. Ensure that the system informs the operator of an expired temporary passcode and increments the invalid entry counter by one."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "Incorrect Username or Passcode",
        "Test_Sce_Description": "Verify that the system correctly detects when an operator enters an invalid operator badge ID and/or an invalid passcode. Ensure that the system informs the operator of an invalid operator badge ID and passcode combination, and increments the invalid entry counter by one."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "Maximum Number of Log-in Attempts Reached",
        "Test_Sce_Description": "Verify that the system correctly detects when the maximum number of unsuccessful sign-in attempts for the same operator badge ID has been reached. Ensure that the system denies access to that operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "First Time Sign-in with Temporary Passcode and Network Unavailability",
        "Test_Sce_Description": "Verify that the system correctly displays a message to the operator requesting them to sign in when network is available when the operator signs in for the first time using a temporary passcode and the network is not available."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "New Passcode is the Same as The Temporary Passcode",
        "Test_Sce_Description": "Verify that the system correctly detects when the new passcode is the same as the temporary passcode. Ensure that the system informs the user of the error and clears the new passcode fields."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that the system correctly disables the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Operator\u2019s Passcode Expiry Notification",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects and notifies the operator when their passcode is about to expire in the future. The tool should prompt the operator to change their passcode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Operator\u2019s Passcode Change",
        "Test_Sce_Description": "Verify that the operator can successfully change their passcode when prompted by the SA Tool. The new passcode should be saved successfully."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Operator\u2019s Dismissal of Passcode Expiry Notification",
        "Test_Sce_Description": "Verify that the operator can choose to dismiss the passcode expiry notification. The SA Tool should continue to function normally."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Secondary Transit Agency without Open Payments",
        "Test_Sce_Description": "Verify that the application functions only with Farecard taps when the secondary transit agency does not have Open Payments enabled. The application should not respond to taps from contactless payment cards."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Secondary Transit Agency with Open Payments",
        "Test_Sce_Description": "Verify that the application functions for both Farecard taps and Open Payment media when the secondary transit agency has Open Payments enabled."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Temporary Passcode Expiry",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects and informs the operator when their temporary passcode has expired. The tool should increment the invalid entry counter by one and clear the passcode field in the sign-in screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Incorrect Username or Passcode Entry",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects and informs the operator when an invalid operator badge ID and/or passcode is entered. The tool should increment the invalid entry counter by one and clear the passcode field in the sign-in screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Maximum Number of Login Attempts",
        "Test_Sce_Description": "Verify that the SA Tool correctly locks the operator user account when the maximum number of sign-in attempts has been reached. The tool should inform the operator that their account is locked and clear the passcode field in the sign-in screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "First Time Sign-in with Temporary Passcode and No Network",
        "Test_Sce_Description": "Verify that the SA Tool correctly displays a message requesting the operator to sign in when network is available if the operator is signing in for the first time using a temporary passcode and the network is not available."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "New Passcode Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects and informs the user of the error when the new passcode is the same as the temporary passcode. The tool should clear the new passcode fields."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "New Passcode Length",
        "Test_Sce_Description": "Verify that the SA Tool correctly disables the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is not enabled for the secondary transit agency",
        "Test_Scnario": "Open Payments Media on Deny List",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is not enabled for the secondary transit agency",
        "Test_Scnario": "Open Payments Media on Local Deny List and Device Offline",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is not enabled for the secondary transit agency",
        "Test_Scnario": "Multiple NFC Media Presented at Once",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is not enabled for the secondary transit agency",
        "Test_Scnario": "Device in Out-of-Service State",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state, the Not In Service Screen is provided to the cardholder. The device should not detect the media when the customer attempts to tap their Open Payments Media on the card reader. The device should remain in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is not enabled for the secondary transit agency",
        "Test_Scnario": "Anti-passback Scenario",
        "Test_Sce_Description": "Verify that when the cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window, the device provides the cardholder with the appropriate feedback. The device should send the tap to ATS and return a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is not enabled for the secondary transit agency",
        "Test_Scnario": "Error Occurrence",
        "Test_Sce_Description": "Verify that when an error has occurred on the device that does not cover the exception cases above, the device records the tap. The Declined \u2013 See Customer Service Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is not enabled for the secondary transit agency",
        "Test_Scnario": "Open Payments Media Not on Approved List",
        "Test_Sce_Description": "Verify that when a customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode, the appropriate error message is displayed and the tap is not accepted."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Open Payments Media on Deny List",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Open Payments Media on Local Deny List and Device Offline",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Multiple NFC Media Presented at Once",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Device in Out-of-Service State",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state, it displays the Not in Service screen to the cardholder and does not detect the media when the customer attempts to tap their Open Payments Media on the card reader."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Tap-On Immediately After Tapping-Off at the Same Station",
        "Test_Sce_Description": "Verify that when the cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window, the device provides the cardholder with the appropriate feedback. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Open Payments Media Contains a Default O/D",
        "Test_Sce_Description": "Verify that when the Open Payments Media contains a default O/D, ATS deducts the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Customer Eligible for Capping Discount",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Open Payments Media Fails ODA Check",
        "Test_Sce_Description": "Verify that when an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "Verify that when an Open Payments Media fails the expiry check, the device returns the appropriate feedback. The Declined \u2013 Failed Expiry Check screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "Expired Operator Passcode",
        "Test_Sce_Description": "Verify that the system correctly detects when an operator's passcode has expired and prompts the operator to enter a new passcode. The system should successfully save the new passcode when the operator selects 'Submit'."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "Future Passcode Expiry",
        "Test_Sce_Description": "Verify that the system correctly detects when an operator's passcode will expire in the future and prompts the operator to change their passcode. The operator should have the option to either change their passcode or dismiss the message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "Secondary Transit Agency without Open Payments",
        "Test_Sce_Description": "Verify that the application functions only with Farecard taps when the secondary transit agency does not have Open Payments enabled. The application should not respond to taps from contactless payment cards."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "Secondary Transit Agency with Open Payments",
        "Test_Sce_Description": "Verify that the application functions for both Farecard taps and Open Payment media when the secondary transit agency has Open Payments enabled."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "Expired Temporary Passcode",
        "Test_Sce_Description": "Verify that the system correctly detects when an operator enters an expired temporary passcode. The system should inform the operator of the expired temporary passcode and increment the invalid entry counter by one."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "Incorrect Username or Passcode",
        "Test_Sce_Description": "Verify that the system correctly detects when an operator enters an invalid operator badge ID and/or an invalid passcode. The system should inform the operator of the invalid operator badge ID and passcode combination, and increment the invalid entry counter by one."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "Maximum Number of Login Attempts Reached",
        "Test_Sce_Description": "Verify that the system correctly detects when the maximum number of unsuccessful sign-in attempts for the same operator badge ID has been reached. The system should lock the operator user account and inform the operator that the user account associated with the operator ID is locked."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "First Time Sign-in with Temporary Passcode and No Network",
        "Test_Sce_Description": "Verify that the system correctly displays a message to the operator requesting them to sign in when network is available if the operator is signing in for the first time using a temporary passcode and the network is not available."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "New Passcode is Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that the system correctly detects when the new passcode is the same as the temporary passcode. The system should inform the user of the error and clear the new passcode fields."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "New Passcode Length Does Not Meet Criteria",
        "Test_Sce_Description": "Verify that the system correctly disables the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify successful sign-in for first-time user",
        "Test_Sce_Description": "Test if a first-time user can successfully sign-in to the SA Tool application using a valid operator badge ID and temporary passcode. The user should be able to change their temporary passcode upon initial log-in and set up security questions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify unsuccessful sign-in with invalid passcode",
        "Test_Sce_Description": "Test if the SA Tool application correctly denies access when an operator enters an invalid passcode. The application should inform the operator that the passcode is incorrect and allow a re-try after 30 seconds."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify unsuccessful sign-in with invalid badge ID",
        "Test_Sce_Description": "Test if the SA Tool application correctly denies access when an operator enters an invalid badge ID. The application should inform the operator that the badge ID is incorrect and allow a re-try after 30 seconds."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify lockout after maximum sign-in attempts",
        "Test_Sce_Description": "Test if the SA Tool application correctly locks the operator account after the maximum number of unsuccessful sign-in attempts. The application should inform the operator that their account is locked and clear the passcode field in the sign-in screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify successful sign-in after lockout period",
        "Test_Sce_Description": "Test if the SA Tool application correctly allows sign-in after the operator account has been unlocked. The operator should be able to sign-in using their valid badge ID and passcode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify unsuccessful sign-in with network unavailable",
        "Test_Sce_Description": "Test if the SA Tool application correctly denies access when the network is unavailable. The application should display a message to the operator requesting them to sign in when network is available."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify unsuccessful passcode change to temporary passcode",
        "Test_Sce_Description": "Test if the SA Tool application correctly denies a passcode change to the temporary passcode. The application should inform the user of the error and clear the new passcode fields."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify unsuccessful passcode change with incorrect length",
        "Test_Sce_Description": "Test if the SA Tool application correctly denies a passcode change when the new passcode does not meet the pre-defined length criteria. The application should not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify successful passcode change",
        "Test_Sce_Description": "Test if the SA Tool application correctly allows a passcode change when the new passcode meets all criteria. The application should indicate to the operator that the passcode was successfully changed and display the Inspection Parameters screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify successful setup of security questions",
        "Test_Sce_Description": "Test if the SA Tool application correctly allows the operator to select 2 security questions from a list of pre-defined security questions and provide their answers. The answers should be limited to alphanumerical characters and up to 20 characters."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Network Unavailability During First Time Sign In",
        "Test_Sce_Description": "Verify that the system displays an appropriate message to the operator requesting them to sign in when network is available, when the operator tries to sign in for the first time using a temporary passcode and the network is not available."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Maximum Number of Login Attempts Reached",
        "Test_Sce_Description": "Verify that the system locks the operator user account and displays an appropriate message to the operator when the maximum number of sign-in attempts has been reached. Also, verify that the locked user is not able to sign-in from that SA Tool until the user is unlocked by a CLIENT Operations User."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "New Passcode is the Same as The Temporary Passcode",
        "Test_Sce_Description": "Verify that the system detects that the new passcode is the same as the temporary passcode and informs the user of the error and clears the new passcode fields."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that the system does not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Operator Account Locked During Passcode Reset",
        "Test_Sce_Description": "Verify that the system detects that operator account has been locked by checking the User management service and notifies the operator with a corresponding error message when the operator tries to reset their passcode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Invalid Operator Badge ID During Passcode Reset",
        "Test_Sce_Description": "Verify that the system checks with the User management service and determines that the operator badge ID is invalid and notifies the operator with a corresponding error message when the operator enters an invalid operator badge ID when resetting their passcode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Invalid Security Question Answers During Passcode Reset",
        "Test_Sce_Description": "Verify that the system validates that the security question answers entered do not match those stored in the User management service and notifies the operator with a corresponding error message when the operator enters invalid security question answers during passcode reset."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Mismatch in New Passcodes During Passcode Reset",
        "Test_Sce_Description": "Verify that the system validates that the new passcodes that were entered twice are not same and notifies the operator with a corresponding error message when the operator enters new passcode twice, but new passcodes do not match during passcode reset."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "New Passcodes Do Not Meet Length Criteria During Passcode Reset",
        "Test_Sce_Description": "Verify that the system does not enable the submit button until the passcode entered is the correct length when the operator enters new passcode twice, but new passcodes do not meet passcode length criteria during passcode reset."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "First-Time User Tries to Reset Passcode",
        "Test_Sce_Description": "Verify that the system connects to the User management service and validates that the operator badge ID entered belongs to a first-time user and notifies the operator with a corresponding error message and clears the passcode field when a first-time user tries to reset passcode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Maximum Number of Forgot Passcode Attempts Reached",
        "Test_Sce_Description": "Verify that the system locks the operator user account and redirects the user to the application sign-in screen and informs the operator that the user account associated with the operator ID is locked when the maximum number of forgot passcode attempts has been reached."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Account Validation Fails After Passcode Reset",
        "Test_Sce_Description": "Verify that the system displays an appropriate error message when the user has entered all fields correctly in the Reset Passcode screen and has successfully reset their passcode but the account validation fails."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Sign In with New Operator",
        "Test_Sce_Description": "Verify that a new operator can sign in to the SA Tool even when a current operator is already signed in. The system should display a message indicating that a current operator is signed in and ask the new operator if they want to sign in anyway. Upon selecting 'Yes', the current operator should be signed off from the SA Tool."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Shut Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator can manually shut down the SA Tool by pressing and holding the physical power button. The system should display a confirmation message with 'Power off' and other options. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Reboot SA Tool",
        "Test_Sce_Description": "Verify that the operator can manually reboot the SA Tool at any time by pressing and holding the physical power button. The system should display a confirmation message with 'Power off' and other options. Upon selecting the 'Restart' option, the device should restart by turning off and powering on."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the SA Tool can switch into a Standby state where the screen will turn off after remaining inactive for a configurable period of time. In this state, the SA tool should disconnect from all the peripherals to conserve battery life. An operator should be able to bring the device back into In-Service state by pressing the physical power button and signing in to the device lock screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon, the operator can select the Revenue Mode which allows the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Access Revenue Mode for Different Users",
        "Test_Sce_Description": "Verify that different users have different access rights to the Revenue Mode. For example, SA Tool Operators should have access to Revenue Mode, while Training users should not."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are correctly implemented and functioning as expected."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Out-of-Service State Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Standby State Functionality",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Standby State with SA Tool application running in the background",
        "Test_Sce_Description": "Verify that if the SA Tool PDS application is running but is not in the foreground (i.e., the operator is using another application), the application will be in Standby State. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Resuming Functionality from Standby State",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Revenue Mode Functionality",
        "Test_Sce_Description": "Verify that in Revenue Mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Training Mode Functionality",
        "Test_Sce_Description": "Verify that in Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Shut Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that an operator can manually shut down the SA Tool by pressing and holding the physical power button on the SA Tool. The SA Tool should display a confirmation message with the following options: Power off, Other options (e.g. Reset, Airplane Mode, etc.)."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Reboot SA Tool",
        "Test_Sce_Description": "Verify that an operator can manually reboot the SA Tool at any time (particularly when the application is not responding and the OS is not able to exit the application) by pressing and holding the physical power button on the SA Tool. The SA Tool should display a confirmation message with the following options: Power off, Other options (e.g. Reset, Airplane Mode, etc.)."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "New Operator Sign In",
        "Test_Sce_Description": "Verify that a new operator can sign into the system using their own user ID and passcode. The system should display a message indicating that the current operator is signed in and ask if the new operator wants to sign in anyway. Upon selecting 'Yes', the current operator should be signed off from the system."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "Sign In with Low Battery",
        "Test_Sce_Description": "Verify that the system can handle sign out process when the battery level is at 1%. The system should be able to close off the current shift and generate the inspection shift statistics email that is stored on the device. The email should be sent once the device is powered on and re-establishes connection to the network."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "Sign Off while Offline",
        "Test_Sce_Description": "Verify that the system can handle sign off process when the device is offline. The system should be able to close the current shift and generate the shift statistics email that is stored on the device. The email should be sent once the device is powered on and re-establishes connection to the network."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "First Time Sign In with Temporary Passcode and No Network",
        "Test_Sce_Description": "Verify that the system displays a message to the operator requesting them to sign in when network is available, when the operator tries to sign in for the first time using a temporary passcode and the network is not available."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "Maximum Number of Login Attempts",
        "Test_Sce_Description": "Verify that the system locks the operator user account when the maximum number of unsuccessful sign-in attempts is reached. The system should inform the operator that the user account associated with the operator ID is locked and clear the passcode field in the sign-in screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "New Passcode is the Same as The Temporary Passcode",
        "Test_Sce_Description": "Verify that the system detects when the new passcode is the same as the temporary passcode. The system should inform the user of the error and clear the new passcode fields."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that the system does not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Temporal Class Supplement Tap-On Transaction",
        "Test_Sce_Description": "Verify that the device correctly processes a Tap-On Transaction when a Farecard is tapped during a time period that contains an associated Temporal Class Supplement. The device should display an HMI reflecting the Temporal Class Supplement and process the transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Autoload Threshold Crossed",
        "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance. The device should detect that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, triggering the Autoload amount to be added to the Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Override Default Trip",
        "Test_Sce_Description": "Verify that if a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on. The device should inform the customer that it is prepared to override the Default Trip and process the transaction accordingly."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Farecard Validation Failure",
        "Test_Sce_Description": "Verify that if a Farecard fails validation checks at Tap-On, the device provides the cardholder with the appropriate feedback without updating the Farecard. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that if a Farecard is blocked, the right to travel is not conferred. The device should detect that the Farecard is blocked and provide the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Max Travel Duration Exceeded",
        "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment and opens a new trip. The device should determine that the Tap-On Time + Max Travel Duration < Current Time and auto-settle the Underpayment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Multiple NFC Media Presented",
        "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality and presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Non-Activated Farecard",
        "Test_Sce_Description": "Verify that if a non-activated Farecard is tapped on the device, the transaction is unsuccessful. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "Verify that if a Cardholder taps a Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Autoload Threshold Crossed",
        "Test_Sce_Description": "Verify that when the Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Autoload Threshold Not Crossed",
        "Test_Sce_Description": "Verify that when the Farecard with Autoload Enabled is tapped on a device and the Fare amount does not cross the Auto-load threshold, the Autoload amount is not added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Autoload Threshold Crossed with Insufficient Balance",
        "Test_Sce_Description": "Verify that when the Farecard with Autoload Enabled is tapped on a device, the Fare amount crosses the Auto-load threshold, and the E-Purse balance is insufficient, an appropriate error message is displayed."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Autoload Threshold Crossed with Sufficient Balance",
        "Test_Sce_Description": "Verify that when the Farecard with Autoload Enabled is tapped on a device, the Fare amount crosses the Auto-load threshold, and the E-Purse balance is sufficient, the Autoload amount is added to the E-Purse balance and the transaction is successful."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Performance Test",
        "Test_Sce_Description": "Verify that the system can handle the maximum number of Farecards with Autoload Enabled being tapped on a device simultaneously and the Fare amount crossing the Auto-load threshold."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Security Test",
        "Test_Sce_Description": "Verify that the system securely processes the transaction when the Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, ensuring that the data is encrypted and no sensitive information is leaked."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Exception Flow Test",
        "Test_Sce_Description": "Verify that the system handles exceptions correctly when the Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, such as when the Farecard is invalid or the device is offline."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Alternate Flow Test",
        "Test_Sce_Description": "Verify that the system correctly processes the transaction when the Farecard with Autoload Enabled is tapped on a device and the Fare amount does not cross the Auto-load threshold, ensuring that the Autoload amount is not added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Full Fare-by-Zone transaction processing",
        "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Override Default O/D",
        "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and process the tap as a regular tap-on when the customer requests the override of a Default Trip by interacting with the Device."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Capping discount eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple capping discounts eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS checks the online deny list and completes the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS will take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Offline device capping discount eligibility",
        "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor stores the tap till the device goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS. Capping rules will follow use-case logic outlined in ticketing use cases."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media fails ODA check",
        "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device performs the necessary validation and determines that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Farecard is blocked",
        "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. Card reader detects Farecard is blocked. Right to travel is not conferred. The Device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. Device determines that the Tap-On Time + Max Travel Duration < Current Time. Device Auto-settles the Underpayment and deducts the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple NFC media are presented to the device at one time",
        "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. Customer presents multiple NFC medias to the card reader at once. Device blocks all user functionality, presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Tap a non-activated Farecard on an SA Tool",
        "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. Device detects that the Farecard is not activated. The device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs",
        "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Non-Revenue farecard in training mode",
        "Test_Sce_Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode. If the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard with Temporal Class Supplement",
        "Test_Sce_Description": "Verify that when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement, the Device should contain an HMI reflecting the Temporal Class Supplement, and process the Tap-On Transaction as a normal tap-on."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard with Autoload Enabled",
        "Test_Sce_Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard should have the Autoload amount automatically added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard without Default O/D",
        "Test_Sce_Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device should process the tap as a result tap-on."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Audio Messages Request",
        "Test_Sce_Description": "Verify that when the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard Validation Checks",
        "Test_Sce_Description": "Verify that if a Farecard fails validation checks at Tap-On, the system should handle this exception appropriately."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Period Pass with Higher Fare Value",
        "Test_Sce_Description": "Verify that if a Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value, the ATS should compute and deduct the Upgrade fare."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Period Pass with Lower Fare Value",
        "Test_Sce_Description": "Verify that if a Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value, the ATS should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Limited Period Pass",
        "Test_Sce_Description": "Verify that if a Farecard has a valid Limited Period Pass and the current time is within the limits of the product, the system should accept the fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Limited Period Pass outside of valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "Verify that if a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction, the system should accept the fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Farecard Tap-Off at Same Location",
        "Test_Sce_Description": "Verify that the device provides the appropriate feedback when the Farecard is tapped-off at the same location where tap-on occurred. The device should detect that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that the device correctly identifies a blocked Farecard and does not confer the right to travel. The device should provide the appropriate feedback to the Cardholder and log an error in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Exceeding Max Travel Duration",
        "Test_Sce_Description": "Verify that the device correctly auto-settles the Underpayment and opens a new trip when the time since tap-on exceeds the Max Travel Duration. The device should determine that the Tap-On Time + Max Travel Duration < Current Time and deduct the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Verify that the device blocks all fare payment functionality when multiple NFC media are presented at one time. The device should present Anti-Collision HMI to the customer and log an error in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Non-Activated Farecard",
        "Test_Sce_Description": "Verify that the device correctly identifies a non-activated Farecard and provides feedback to the Cardholder of an unsuccessful transaction. The device should log an error in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "Verify that the device correctly identifies a card reading error (e.g. Farecard is immediately removed from the card reader) and logs an error in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Farecard Fails Validation Checks",
        "Test_Sce_Description": "Verify that the device correctly identifies when a Farecard fails the necessary validation checks, returns the appropriate feedback, and does not confer the right to travel. The device should perform the necessary validation and determine that the Farecard is unable to pass the checks."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Cardholder Taps-On Again",
        "Test_Sce_Description": "Verify that the device correctly identifies when the cardholder taps-on again at the same station within the Tap-on anti-passback Window and provides the appropriate feedback without updating the Farecard. The device should log an error in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Insufficient E-Purse Balance",
        "Test_Sce_Description": "Verify that the device correctly identifies when a Farecard\u2019s E-Purse balance is less than that of the Tap-On Fare and does not confer the right to travel. The device should calculate that the configured Tap-On Fare is greater than the Farecard E-Purse Balance and provide the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that the device correctly identifies a blocked Farecard and does not confer the right to travel. The device should provide the appropriate feedback to the Cardholder and log an error in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Verify that the device blocks all fare payment functionality when multiple NFC media are presented at one time. The device should present Anti-Collision toast message to the customer and log an error in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Verbal warning",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Non-Activated Farecard",
        "Test_Sce_Description": "Verify that the device correctly identifies a non-activated Farecard and provides feedback to the Cardholder of an unsuccessful transaction. The device should log an error in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Validating Limited Period Pass within valid time",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used within the valid time limit. The system should successfully accept the fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Validating Limited Period Pass outside valid time with sufficient e-Purse balance",
        "Test_Sce_Description": "This scenario is to validate the functionality of the system when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance. The system should compute the value to be deducted from the e-Purse and deduct the fare successfully."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Handling Anonymous Farecard with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with an anonymous farecard with an expired period pass and insufficient ePurse balance attempts to make a fare payment. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Handling Blocked Farecard",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a blocked farecard attempts to make a fare payment. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Handling Farecard on the Deny List",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer with a farecard on the Deny List attempts to make a fare payment. The system should remove the card from the Deny List, set it to blocked, decline the transaction, and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Handling Low Battery during Payment",
        "Test_Sce_Description": "This scenario is to validate the system's performance when the battery goes below the low battery threshold during a fare payment. The system should be able to process the remote lists even after the battery goes below the threshold."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Handling Unreadable TICKET",
        "Test_Sce_Description": "This scenario is to validate the system's response when it detects a TICKET but fails to read it correctly. The system should indicate to the operator that the TICKET is unreadable."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Handling Audio Messages Request",
        "Test_Sce_Description": "This scenario is to validate the system's functionality when a customer requests audio messages for the fare payment. The system should play the corresponding audio message in the default language of the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Handling Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "This scenario is to validate the system's functionality when a TICKET with a valid Period Pass is tapped on a route/location with Premium or Special Event Service Class. The system should accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Handling Valid Child Concession on CLIENT Ticket",
        "Test_Sce_Description": "This scenario is to validate the system's functionality when a customer's TICKET has a Valid Child concession. The system should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Handling Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "This scenario is to validate the system's functionality when the operator inspects a customer\u2019s TICKET and determines that they have not paid a fare. The system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date",
        "Test_Scnario": "Handling TICKET Period Pass not valid on the current date",
        "Test_Sce_Description": "This scenario is to validate the system's response when a customer has a period pass Ticket that is outside the validity period. The system should decline the transaction and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Low Battery Threshold During Payment",
        "Test_Sce_Description": "This scenario tests the functionality of the application when the battery goes below the low battery threshold during a successful Farecard tap. The application should be able to process the remote lists and then switch to 'Out of Service' mode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Card Not a Farecard",
        "Test_Sce_Description": "This scenario tests the application's response when a customer taps a card that is not a Farecard. The application should not respond and a 'Card Read Error' message should be displayed."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Card Within Anti-Passback Window",
        "Test_Sce_Description": "This scenario tests the application's response when a customer's card is within the Anti-Passback Window. The application should detect that the Farecard fails the Anti-Passback checks and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Limited Period Pass Outside Valid Time",
        "Test_Sce_Description": "This scenario tests the application's response when a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, and the Farecard is in overdraft. The application should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, and display a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Limited Period Pass Within Valid Time",
        "Test_Sce_Description": "This scenario tests the application's response when a Farecard has a valid Limited Period Pass and the current time is within the time limits of the product. The application should process the payment as per the Main Use Case."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Limited Period Pass Outside Valid Time with Sufficient e-Purse Balance",
        "Test_Sce_Description": "This scenario tests the application's response when a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the Farecard has sufficient e-Purse balance to cover the transaction. The application should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, and deduct the fare."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Expired Period Pass and ePurse Balance Less than Fare Amount",
        "Test_Sce_Description": "This scenario tests the application's response when a customer has an expired period pass and the ePurse balance is less than the fare amount. The application should detect the card is Anonymous and the ePurse Balance is less than the fare amount, and return a declined result back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Blocked Virtual Card",
        "Test_Sce_Description": "This scenario tests the application's response when a customer's Farecard is blocked. The application should detect the card is blocked and return a declined result back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment",
        "Test_Scnario": "Virtual Card on Deny List",
        "Test_Sce_Description": "This scenario tests the application's response when a customer's Virtual Card is on the Deny List. The application should detect the card is on the Deny List, remove the card from the Deny List and set it to blocked, and return a declined result back to the SA Tool."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating TICKET Readability",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when it detects a TICKET and fails to read it correctly. The application should indicate to the operator that the TICKET is unreadable and log the error in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Successful Tap after Unreadable TICKET",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the customer taps the NFC reader again after an unreadable TICKET error. If the tap is successful, the application should proceed with steps 4 \u2013 9. If the tap is unsuccessful, the application should indicate to the operator that the TICKET is unreadable."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating Audio Messages Request",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the customer requests audio messages for the fare payment. The operator should be able to enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating TICKET Fare Payment with Valid Period Pass on Premium or Special Event Service Class Route/Location",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the customer\u2019s TICKET with a valid Period Pass is tapped on a route/location with Premium or Special Event Service Class. The application should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating TICKET Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the customer\u2019s TICKET has a Valid Child concession. The application should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating TICKET Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator inspects a customer\u2019s TICKET and determines that they have not paid a fare. The application should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating TICKET Fare Payment with Period Pass not valid on the current date",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the customer has a period pass Ticket that is outside the validity period. The application should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating TICKET Fare Payment with TICKET within the Anti-Passback Window",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the customer\u2019s Ticket is within the Anti-Passback Window. The application should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating TICKET Fare Payment with non-activated Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the customer\u2019s Ticket is not activated. The application should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media",
        "Test_Scnario": "Validating TICKET Fare Payment with expired Ticket",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the customer\u2019s Ticket is expired. The application should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Anti-Passback Window Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket that is within the Anti-Passback Window and displays a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Timeout Functionality",
        "Test_Sce_Description": "Verify that after a configurable timeout, the app returns to the SA Tool application Tap Card screen when a ticket fails the Anti-Passback checks."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Non-Activated Ticket Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a non-activated ticket and displays a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Expired Ticket Check",
        "Test_Sce_Description": "Verify that the system correctly identifies an expired ticket and displays a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Period Pass Validation",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket with a valid period pass and accepts the fare. The SA Tool should update the ticket accordingly and display the successful fare payment screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Successful Fare Payment Audio Tone",
        "Test_Sce_Description": "Verify that the SA Tool plays the successful fare payment audio tone when a ticket with a valid period pass is accepted."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Unreadable Ticket Check",
        "Test_Sce_Description": "Verify that the system correctly identifies an unreadable ticket and fails to read it correctly. The SA Tool should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Limited Period Pass Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket with a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product. The SA Tool should accept the fare and update the ticket accordingly."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Expired Period Pass Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket with an expired period pass and an ePurse balance less than the fare amount. The SA Tool should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Blocked Farecard Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a blocked farecard and displays a declined message to the customer. The SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Deny List Check",
        "Test_Sce_Description": "Verify that the system correctly identifies a farecard on the Deny List and displays a declined message to the customer. The SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window",
        "Test_Scnario": "Low Battery Threshold Check",
        "Test_Sce_Description": "Verify that the system correctly identifies when the battery goes below the low battery threshold during a successful Farecard tap. The SA Tool should display a declined message to the customer and play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Validating the functionality of the SA Tool application when a non-activated CLIENT Ticket is tapped",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application when a non-activated CLIENT Ticket is tapped. The application should detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Performance testing of the SA Tool application when a non-activated CLIENT Ticket is tapped",
        "Test_Sce_Description": "This scenario will test the performance of the SA Tool application when a non-activated CLIENT Ticket is tapped. The application should quickly detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Security testing of the SA Tool application when a non-activated CLIENT Ticket is tapped",
        "Test_Sce_Description": "This scenario will test the security of the SA Tool application when a non-activated CLIENT Ticket is tapped. The application should securely detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Validating the functionality of the SA Tool application when a non-activated CLIENT Ticket is tapped in the exception flow",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application when a non-activated CLIENT Ticket is tapped in the exception flow. The application should detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Performance testing of the SA Tool application when a non-activated CLIENT Ticket is tapped in the exception flow",
        "Test_Sce_Description": "This scenario will test the performance of the SA Tool application when a non-activated CLIENT Ticket is tapped in the exception flow. The application should quickly detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Security testing of the SA Tool application when a non-activated CLIENT Ticket is tapped in the exception flow",
        "Test_Sce_Description": "This scenario will test the security of the SA Tool application when a non-activated CLIENT Ticket is tapped in the exception flow. The application should securely detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Validating the functionality of the SA Tool application when a non-activated CLIENT Ticket is tapped in the alternate flow",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool application when a non-activated CLIENT Ticket is tapped in the alternate flow. The application should detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Performance testing of the SA Tool application when a non-activated CLIENT Ticket is tapped in the alternate flow",
        "Test_Sce_Description": "This scenario will test the performance of the SA Tool application when a non-activated CLIENT Ticket is tapped in the alternate flow. The application should quickly detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket",
        "Test_Scnario": "Security testing of the SA Tool application when a non-activated CLIENT Ticket is tapped in the alternate flow",
        "Test_Sce_Description": "This scenario will test the security of the SA Tool application when a non-activated CLIENT Ticket is tapped in the alternate flow. The application should securely detect that the ticket is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment with Expired Ticket",
        "Test_Sce_Description": "This scenario is to test the functionality of the system when a customer tries to pay the fare with an expired ticket. The system should detect that the ticket is expired and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment with Unreadable Ticket",
        "Test_Sce_Description": "This scenario is to test the functionality of the system when a customer tries to pay the fare with an unreadable ticket. The system should detect that the ticket is unreadable and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Validating Fare Payment with Valid Period Pass",
        "Test_Sce_Description": "This scenario is to test the functionality of the system when a customer tries to pay the fare with a ticket that has a valid period pass. The system should compute that the ticket has a valid period pass and accept the fare. The SA Tool should update the ticket accordingly and display the successful fare payment screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Performance of the System during Fare Payment",
        "Test_Sce_Description": "This scenario is to test the performance of the system during fare payment. The system should be able to handle multiple fare payments simultaneously without any delay or error. The response time of the system should be within the acceptable range."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket",
        "Test_Scnario": "Security of the System during Fare Payment",
        "Test_Sce_Description": "This scenario is to test the security of the system during fare payment. The system should securely process the fare payment and protect the customer's ticket information. There should be no unauthorized access or data leakage during the fare payment process."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Unreadable TICKET detection",
        "Test_Sce_Description": "Verify that the SA Tool application is able to detect when a TICKET is unreadable. The application should indicate to the operator that the TICKET is unreadable and log an error in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Successful tap after unreadable TICKET",
        "Test_Sce_Description": "Verify that the customer can successfully tap the NFC reader again after an unreadable TICKET error. If the tap is successful, the application should proceed with steps 4 \u2013 9 of the Main Use Case."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Unsuccessful tap after unreadable TICKET",
        "Test_Sce_Description": "Verify that the application correctly handles an unsuccessful tap after an unreadable TICKET error. The application should indicate to the operator that the TICKET is unreadable."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Audio Messages request",
        "Test_Sce_Description": "Verify that the application correctly handles a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level at the customer's discretion."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "Verify that the application correctly handles a fare payment from a TICKET with a Valid Child concession. The application should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the application correctly handles a fare payment resulting from a failed inspection. The operator should be able to select the payment function on the inspection results screen and the application should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Invalid TICKET Period Pass",
        "Test_Sce_Description": "Verify that the application correctly handles a TICKET with a Period Pass that is not valid on the current date. The application should indicate to the operator that the Period Pass is not valid."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Farecard Unreadable",
        "Test_Sce_Description": "Verify that the SA Tool application is able to detect when a Farecard is unreadable. The application should indicate to the operator that the Farecard is unreadable and log an error in the background for troubleshooting purposes."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Farecard with Sufficient ePurse Balance and Expired Period Pass",
        "Test_Sce_Description": "Verify that the application correctly handles a Farecard with an expired period pass and a sufficient ePurse balance. The application should compute the value to be deducted from the e-Purse and deduct the fare accordingly."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Farecard with Positive ePurse Balance Less Than Fare Amount and Expired Period Pass",
        "Test_Sce_Description": "Verify that the application correctly handles a Farecard with an expired period pass and a positive ePurse balance that is less than the fare amount. The application should compute the value to be deducted from the e-Purse, deduct the fare, and put the Farecard into overdraft."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable",
        "Test_Scnario": "Farecard on Action or Load Value List",
        "Test_Sce_Description": "Verify that the application correctly handles a Farecard that is on the Action or Load Value list. The application should verify that the Farecard is on the list and update the Farecard accordingly."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Audio Mode Enablement",
        "Test_Sce_Description": "Verify that the operator can enable the audio mode successfully when the customer requests for audio messages for fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Volume Adjustment",
        "Test_Sce_Description": "Verify that the operator can adjust the volume level using the physical device buttons at the customer\u2019s discretion."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Volume Adjustment Bar Display",
        "Test_Sce_Description": "Verify that a volume adjustment bar appears while the volume is being adjusted and it times out automatically."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Default Volume Restoration",
        "Test_Sce_Description": "Verify that the volume returns to the device default after the use case is completed."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Audio Message Language",
        "Test_Sce_Description": "Verify that the audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Fare Payment Screen Display",
        "Test_Sce_Description": "Verify that the SA Tool displays the fare payment screen to the operator and customer for the duration of the audio message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Upgrade Fare Deduction",
        "Test_Sce_Description": "Verify that the ATS computes and deducts the Upgrade fare when the Service class fare value is lower than the current route/location Service Class fare value."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Period Pass Fare Payment Acceptance",
        "Test_Sce_Description": "Verify that the ATS identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment when the Service class fare value is greater than the current route/location Service Class fare value."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Limited Period Pass Validation",
        "Test_Sce_Description": "Verify that the fare payment is accepted when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Limited Period Pass with Sufficient e-Purse Balance",
        "Test_Sce_Description": "Verify that the fare payment is accepted when the farecard has a valid Limited Period Pass product on it, the time at tap is occurring outside of the time limit of the Limited Period Pass Product, but the farecard has sufficient e-Purse balance to cover the transaction."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Anti-Passback Window Validation",
        "Test_Sce_Description": "Verify that the device detects that the TICKET fails the Anti-Passback checks when the Customer\u2019s Ticket is within the Anti-Passback Window."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Non-Activated Ticket Validation",
        "Test_Sce_Description": "Verify that the device detects that the TICKET is not activated when the Customer\u2019s Ticket is not activated."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Expired Ticket Validation",
        "Test_Sce_Description": "Verify that the device detects that the TICKET is expired when the Customer\u2019s Ticket is expired."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Period Pass Fare Payment",
        "Test_Sce_Description": "Verify that the device computes that the TICKET has a valid period pass and accepts the fare when the Customer\u2019s TICKET has valid FLATFARE BASED period pass."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Ticket Update",
        "Test_Sce_Description": "Verify that the SA Tool updates the TICKET accordingly after the fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Successful Fare Payment Display",
        "Test_Sce_Description": "Verify that the SA Tool displays the successful fare payment screen after the fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Successful Fare Payment Audio Tone",
        "Test_Sce_Description": "Verify that the SA Tool plays the successful fare payment audio tone after the fare payment."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Unreadable Ticket Validation",
        "Test_Sce_Description": "Verify that the SA Tool application detects the TICKET and fails to read it correctly when the TICKET is unreadable."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the SA Tool correctly computes the free transfer for a ticket with a valid Transfer Product when the Service Class is Premium or Special Event and the fare payment is being made on the FLATFARE BASED SA Tool."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Valid Child Concession",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies a Valid Child Concession on a customer's TICKET and successfully completes the fare payment, displaying the successful Child fare payment screen and playing the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the SA Tool correctly processes a fare payment resulting from a failed inspection, recording both the fare payment and inspection transactions and returning to the Tap Card screen with a toast notification of the corresponding inspection action."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Empty Ride Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's ride balance is empty, displaying a declined message to the customer, playing the declined audio tone, and returning to the SA Tool application Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Low Battery Threshold",
        "Test_Sce_Description": "Verify that the SA Tool correctly switches to 'Out of Service' mode when the low battery threshold is reached during a successful TICKET tap, processing the customers fare payment if the threshold is reached after Step 5."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Non-CLIENT Media",
        "Test_Sce_Description": "Verify that the SA Tool correctly does not respond when a customer taps a card that is not CLIENT media, displaying the device error message 'Card Read Error' for a short period of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment within Anti-Passback Window",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's TICKET is within the Anti-Passback Window, displaying a declined message to the customer, playing the declined audio tone, and returning to the SA Tool application Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's TICKET is not activated, displaying a declined message to the customer, playing the declined audio tone, and returning to the SA Tool application Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Expired Period Pass and Insufficient ePurse Balance",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer has an expired period pass and an ePurse balance less than the fare amount on an anonymous Farecard, displaying a declined message to the customer, playing the declined audio tone, and returning to the SA Tool application Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool",
        "Test_Scnario": "Fare Payment with Blocked Farecard",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies when a customer's Farecard is blocked, displaying a declined message to the customer, playing the declined audio tone, and returning to the SA Tool application Tap Card screen after a configurable timeout."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Non-Adult, Non-Child Concession",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a ticket with a valid non-adult, non-child concession. The system should play the successful fare payment audio tone for a concession other than adult or child."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Validating Transfer Product",
        "Test_Sce_Description": "Verify that the system correctly identifies a ticket with a valid transfer product and computes the free transfer. The system should follow the Transfer Product Processing rules as per [R6]."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that the system correctly handles a customer's request for audio messages during fare payment. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion. The audio message should be played in the default language of the customer's Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a Fixed Ride Ticket tap on a premium service or special route/location, resulting in a regular ride balance fare payment and Transfer Product creation. The device should not differentiate between service class for CLIENT Ticket."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Premium Service or Special Route/Location with Fare Upgrade on FLATFARE BASED SA Tool",
        "Test_Sce_Description": "Verify that the system correctly processes a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route, resulting in a free transfer. The device should not differentiate between service class for CLIENT Ticket."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Valid Child Concession on CLIENT Ticket",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a ticket with a valid child concession."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Period Pass with Service Class Fare Value Greater than Current Route/Location Service Class Fare Value",
        "Test_Sce_Description": "Verify that the system correctly identifies and accepts the period pass fare payment when the fare payment is being made on the SA Tool and the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Limited Period Pass",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a farecard with a valid Limited Period Pass product on it and the current time is within the time limit of the Limited Period Pass Product."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Limited Period Pass Outside of Valid Time with Sufficient e-Purse Balance",
        "Test_Sce_Description": "Verify that the system correctly identifies that the Limited Period Pass is not valid at the current time, computes the value to be deducted from the e-Purse, and deducts the fare."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Valid Child Concession on Farecard",
        "Test_Sce_Description": "Verify that the system correctly identifies and processes a Farecard with a valid child concession. The system should display the successful Child Transit Pass fare payment screen and play the successful fare payment audio tone for Child concession."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Fare Payment Resulting from Failed Inspection",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the operator inspects a customer\u2019s farecard and determines that they have not paid a fare. The operator should be able to select the payment function on the SA Tool inspection results screen and the system should record both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Expired Period Pass and ePurse Balance Less than the Fare Amount",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the customer has an expired period pass, the ePurse balance is less than the fare amount, and the Farecard is anonymous. The system should display a declined message to the customer and the transaction should not be conducted."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket",
        "Test_Scnario": "Blocked Farecard",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where the customer\u2019s Farecard is blocked."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment Inspection",
        "Test_Sce_Description": "Verify that the operator can inspect a customer\u2019s TICKET and determine whether they have paid a fare or not."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Payment Function Selection",
        "Test_Sce_Description": "Verify that the operator can select the payment function on the SA Tool inspection results screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Fare Payment and Inspection Transaction Recording",
        "Test_Sce_Description": "Verify that the SA Tool records both the fare payment and inspection transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Invalid Period Pass",
        "Test_Sce_Description": "Verify that the SA Tool application detects when the TICKET Period Pass is not valid on the current date and displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Low Battery Threshold",
        "Test_Sce_Description": "Verify that the application switches to \u201cOut of Service\u201d mode if the low battery threshold is reached before Step 5."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Non-CLIENT Media Card",
        "Test_Sce_Description": "Verify that the SA Tool application does not respond, but the device error message \u201cCard Read Error\u201d is displayed for a short period of time when a customer taps a card that is not CLIENT media."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Anti-Passback Window",
        "Test_Sce_Description": "Verify that the device detects when the TICKET fails the Anti-Passback checks and displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Non-Activated Ticket",
        "Test_Sce_Description": "Verify that the device detects when the TICKET is not activated and displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Expired Ticket",
        "Test_Sce_Description": "Verify that the device detects when the TICKET is expired and displays a declined message to the customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Successful Fare Payment",
        "Test_Sce_Description": "Verify that the SA Tool displays the successful fare payment screen and plays the successful fare payment audio tone when a fare payment is successful."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection",
        "Test_Scnario": "Unreadable Ticket",
        "Test_Sce_Description": "Verify that the SA Tool application detects when the TICKET is unreadable and fails to read it correctly."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Sign In with New Operator",
        "Test_Sce_Description": "Verify that a new operator can sign in to the SA Tool even when a current operator is already signed in. The system should display a message indicating that another operator is currently signed in and ask for confirmation to proceed. Upon selecting 'Yes', the current operator should be signed off and the new operator signed in."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Shut Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator can manually shut down the SA Tool by pressing and holding the physical power button. The system should display a confirmation message with options including 'Power off'. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Reboot SA Tool",
        "Test_Sce_Description": "Verify that the operator can manually reboot the SA Tool by pressing and holding the physical power button. The system should display a confirmation message with options including 'Restart'. Upon selecting 'Restart', the device should turn off and power on again."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any functionality and may require maintenance. If an operator is signed in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the SA Tool can switch into a Standby state where the screen turns off after remaining inactive for a configurable period of time. In this state, the SA Tool should disconnect from all peripherals to conserve battery life. An operator should be able to bring the device back into In-Service state by pressing the physical power button and signing in to the device lock screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "SA Tool Application Running in Background",
        "Test_Sce_Description": "Verify that the SA Tool application can run in the background while the operator uses authorized third-party applications. The SA Tool should disconnect from all peripherals to conserve battery life in this state. The operator should be able to resume the functionality of the SA Tool application by switching back to it."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that in Revenue Mode, the SA Tool operator can interact with customers and perform functions such as inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA Tool should only have access to the EPT in this mode and accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that in Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in this mode. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "User Access and Functionality",
        "Test_Sce_Description": "Verify that different users have access to different functionalities as per their roles. For example, SA Tool Operators should have access to Revenue Mode, Sales, Fare Payment, Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession functionalities."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are correctly implemented and functioning as expected."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the functionality of SA Tool in 'Out-of-Service' state",
        "Test_Sce_Description": "Check if the SA Tool is unable to accept a Farecard for any kind of functionality when it is in 'Out-of-Service' state. Also, verify if it requires maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify operator's shift status when device goes into 'Out-of-Service' state",
        "Test_Sce_Description": "Check if the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off when the device goes into 'Out-of-Service' state."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the functionality of SA Tool in 'Standby' state",
        "Test_Sce_Description": "Check if the SA Tool suspends all functionality and disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life when it is in 'Standby' state."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the functionality of SA Tool when it is running in the background",
        "Test_Sce_Description": "Check if the SA Tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life when it is running in the background. Also, verify if the operator can resume the functionality of the SA Tool application by switching back to it."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the functionality of SA Tool in 'Revenue' mode",
        "Test_Sce_Description": "Check if the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in 'Revenue' mode. Also, verify if the SA tool only has access to the EPT in the revenue mode and accepts the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the functionality of SA Tool in 'Training' mode",
        "Test_Sce_Description": "Check if the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in 'Training' mode. Also, verify if only non-revenue Farecard is accepted and payment by credit /debit is not enabled in this mode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the functionality of SA Tool when a new operator signs in",
        "Test_Sce_Description": "Check if the SA Tool displays a message indicating that the current Operator is currently signed in, and asks if the new Operator wants to sign in anyway when a new operator enters own user ID and passcode and selects Sign In. Also, verify if the current Operator is signed off from the SA Tool when the new Operator selects Yes."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the functionality of SA Tool when it is manually shut down",
        "Test_Sce_Description": "Check if the SA Tool displays a confirmation message with the following options: Power off, Other options (e.g. Reset, Airplane Mode, etc.) when the operator presses and holds the physical power button on the SA Tool. Also, verify if the device turns off and the operator shift is not closed when the operator confirms the shut-down."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the functionality of SA Tool when it is manually rebooted",
        "Test_Sce_Description": "Check if the SA Tool displays a confirmation message with the following options: Power off, Other options (e.g. Reset, Airplane Mode, etc.) when the operator presses and holds the physical power button on the SA Tool. Also, verify if the device restarts by turning off and powering on when the operator selects the restart option."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "New Operator Sign In",
        "Test_Sce_Description": "Verify that a new operator can sign in to the SA Tool using their own user ID and passcode, even if another operator is currently signed in. The system should display a message indicating that another operator is currently signed in and ask if the new operator wants to sign in anyway. Upon confirmation, the current operator should be signed off from the SA Tool."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "SA Tool Offline Sign-Off",
        "Test_Sce_Description": "Verify that the SA Tool application can close the current shift and generate the shift statistics email even when the device is offline. The email should be stored on the device and sent once the SA Tool is powered on and re-establishes connection to the network."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "SA Tool Low Battery Sign-Off",
        "Test_Sce_Description": "Verify that the SA Tool can be turned off after the operator confirms that they would like to sign-out, even when the battery level is at 1%. The application should close off the current shift and generate the inspection shift statistics email that is stored on the device. The email should be sent once the SA Tool is powered on and re-establishes connection to the network."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "First Time Sign-In with Temporary Passcode and No Network",
        "Test_Sce_Description": "Verify that when a network is unavailable, the SA Tool application displays a message to the operator requesting them to sign in when network is available. The operator should not be signed in."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "Maximum Number of Login Attempts",
        "Test_Sce_Description": "Verify that the SA Tool application records a cumulative number of unsuccessful sign on attempts for a single valid operator badge ID on a SA Tool. When the number of unsuccessful sign-in attempts reaches the maximum number of sign-on attempts, the SA Tool application should deny access to that operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "New Passcode is Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that the SA Tool application detects if the new passcode is the same as the temporary passcode in the Subsystem. The SA Tool Device should inform the user of the error and clear the new passcode fields."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that the SA Tool will not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "Expired Operator Passcode",
        "Test_Sce_Description": "Verify that the system correctly detects when an operator's passcode has expired and prompts the operator to enter a new passcode. The system should successfully save the new passcode when the operator selects 'Submit'."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "Future Passcode Expiry",
        "Test_Sce_Description": "Verify that the system correctly detects when an operator's passcode will expire in the future and prompts the operator to change their passcode. The operator should have the option to either change their passcode or dismiss the message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "Secondary Transit Agency without Open Payments",
        "Test_Sce_Description": "Verify that the application functions only with Farecard taps and does not respond to taps from contactless payment cards when the secondary transit agency does not have Open Payments enabled."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "Secondary Transit Agency with Open Payments",
        "Test_Sce_Description": "Verify that the application functions for both Farecard taps and Open Payment media when the secondary transit agency has Open Payments enabled."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "Expired Temporary Passcode",
        "Test_Sce_Description": "Verify that the system correctly detects when an operator enters a valid operator badge ID and an expired temporary passcode. The system should inform the operator of the expired temporary passcode and increment the invalid entry counter by one."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "Incorrect Username or Passcode",
        "Test_Sce_Description": "Verify that the system correctly detects when an operator enters an invalid operator badge ID and/or an invalid passcode. The system should inform the operator of the invalid operator badge ID and passcode combination, and increment the invalid entry counter by one."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "Maximum Number of Log-in Attempts Reached",
        "Test_Sce_Description": "Verify that the system correctly detects when the maximum number of unsuccessful sign-in attempts for the same operator badge ID has been reached. The system should deny access to that operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "First Time Sign-in with Temporary Passcode and No Network",
        "Test_Sce_Description": "Verify that the system correctly displays a message to the operator requesting them to sign in when network is available if the operator is signing in for the first time using a temporary passcode and the network is not available."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "Maximum Number of Login Attempts Reached",
        "Test_Sce_Description": "Verify that the system correctly locks the operator user account and informs the operator that the user account associated with the operator ID is locked when the user enters a valid operator badge ID and invalid temporary passcode combination and reaches the maximum number of attempts allowed."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "New Passcode is the Same as The Temporary Passcode",
        "Test_Sce_Description": "Verify that the system correctly detects that the new passcode is the same as the temporary passcode in the Subsystem and informs the user of the error and clears the new passcode fields."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator\u2019s passcode has expired",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that the system correctly disables the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Passcode Expiry Notification",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects that the Operator\u2019s passcode will expire in a certain number of days and prompts the Operator to change their passcode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Passcode Change Prompt",
        "Test_Sce_Description": "Check if the SA Tool provides an option for the Operator to change their passcode or dismiss the message when the passcode is about to expire."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Passcode Change Submission",
        "Test_Sce_Description": "Ensure that when the Operator selects Submit after entering a new passcode, the new passcode is saved successfully."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Expired Temporary Passcode",
        "Test_Sce_Description": "Verify that the SA Tool correctly identifies an expired temporary passcode and informs the operator of the same."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Invalid Entry Counter",
        "Test_Sce_Description": "Check if the SA Tool increments the invalid entry counter by one to track the number of invalid sign-ins when an expired temporary passcode is entered."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Incorrect Username or Passcode",
        "Test_Sce_Description": "Ensure that the SA Tool correctly identifies an invalid operator badge ID and/or an invalid passcode and informs the operator of the same."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Maximum Login Attempts",
        "Test_Sce_Description": "Verify that the SA Tool locks the operator user account and informs the operator when the maximum number of sign-in attempts has been reached."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Network Unavailability",
        "Test_Sce_Description": "Check if the SA Tool displays a message to the operator requesting them to sign in when network is available, in case of network unavailability."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Same New and Temporary Passcode",
        "Test_Sce_Description": "Ensure that the SA Tool detects when the new passcode is the same as the temporary passcode and informs the user of the error."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Passcode Length Criteria",
        "Test_Sce_Description": "Verify that the SA Tool does not enable the submit button until the passcode entered is of the correct length."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is not enabled for the secondary transit agency",
        "Test_Scnario": "Open Payments Media on Deny List",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is not enabled for the secondary transit agency",
        "Test_Scnario": "Open Payments Media on Local Deny List and Device Offline",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is not enabled for the secondary transit agency",
        "Test_Scnario": "Multiple NFC Media Presented at Once",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is not enabled for the secondary transit agency",
        "Test_Scnario": "Device in Out-of-Service State",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state, it does not detect the media and remains in Out-of-Service State. The Not In Service Screen should be provided to the cardholder when they attempt to tap their Open Payments Media on the card reader."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is not enabled for the secondary transit agency",
        "Test_Scnario": "Anti-passback Functionality",
        "Test_Sce_Description": "Verify that when the cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window, the device provides the cardholder with the appropriate feedback. The device should send the tap to ATS and return a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is not enabled for the secondary transit agency",
        "Test_Scnario": "Error Occurrence",
        "Test_Sce_Description": "Verify that when an error has occurred on the device that does not cover the exception cases above, the device records the tap and the Declined \u2013 See Customer Service Screen is provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is not enabled for the secondary transit agency",
        "Test_Scnario": "Unapproved Open Payments Media in Beta Mode",
        "Test_Sce_Description": "Verify that when a customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode, the appropriate error message is displayed and the tap is not processed."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Open Payments Media on Deny List",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Open Payments Media on Local Deny List and Device Offline",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Multiple NFC Media Presented at Once",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder and the declined tap should be sent to ATS."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Device in Out-of-Service State",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state, it does not detect the media and remains in Out-of-Service State. The device should display the Not in Service screen to the cardholder."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Anti-passback Scenario with Device Online",
        "Test_Sce_Description": "Verify that when the cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window, the device provides the cardholder with the appropriate feedback. The device should send the tap to ATS and return a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Anti-passback Scenario with Device Offline",
        "Test_Sce_Description": "Verify that when the cardholder taps-on again at an SA Tool after just tapping-off at the same station and the device is offline, the device processes a full Fare-by-Zone transaction. ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Customer Eligible for Capping Discount",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list, complete the fare processing, calculate the capping discount and apply to the fare calculation."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Customer Eligible for Multiple Capping Discounts",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list, complete the fare processing, calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS should take whatever Capping program which is of highest precedence and apply that discount to the fare."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Device Offline and Customer Eligible for Capping Discount",
        "Test_Sce_Description": "Verify that when the device is offline and not connected to Accenture Ticketing Services, and the customer has met any capping discount criteria, the device checks the local deny list if the media is on the local deny list. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services. The tap should then be rated in ATS."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Open Payments Media Fails ODA Check",
        "Test_Sce_Description": "Verify that when an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "Verify that when an Open Payments Media fails the expiry check, the device returns the appropriate feedback. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed Expiry Check screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "Expired Operator Passcode",
        "Test_Sce_Description": "Verify that the system correctly detects when an operator's passcode has expired and prompts the operator to enter a new passcode. The system should successfully save the new passcode when the operator selects 'Submit'."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "Future Passcode Expiration",
        "Test_Sce_Description": "Verify that the system correctly detects when an operator's passcode will expire in the future and prompts the operator to change their passcode. The operator should have the option to either change their passcode or dismiss the message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "Secondary Transit Agency without Open Payments",
        "Test_Sce_Description": "Verify that the application functions only with Farecard taps when the secondary transit agency does not have Open Payments enabled. The application should not respond to taps from contactless payment cards."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "Secondary Transit Agency with Open Payments",
        "Test_Sce_Description": "Verify that the application functions for both Farecard taps and Open Payment media when the secondary transit agency has Open Payments enabled."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "Expired Temporary Passcode",
        "Test_Sce_Description": "Verify that the system correctly detects when an operator enters a valid operator badge ID and an expired temporary passcode. The system should inform the operator of the expired temporary passcode and increment the invalid entry counter by one."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "Incorrect Username or Passcode",
        "Test_Sce_Description": "Verify that the system correctly detects when an operator enters an invalid operator badge ID and/or an invalid passcode. The system should inform the operator of the invalid operator badge ID and passcode combination, and increment the invalid entry counter by one."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "Maximum Number of Login Attempts Reached",
        "Test_Sce_Description": "Verify that the system correctly detects when the maximum number of unsuccessful sign-in attempts for the same operator badge ID has been reached. The system should deny access to that operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "First Time Sign in with Temporary Passcode and Network Unavailability",
        "Test_Sce_Description": "Verify that the system correctly displays a message to the operator requesting them to sign in when network is available when the operator signs in for the first time using a temporary passcode and the network is not available. The operator should not be signed in."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "New Passcode Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that the system correctly detects when the new passcode is the same as the temporary passcode. The system should inform the user of the error and clear the new passcode fields."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Temporary Passcode Expires",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that the system correctly disables the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "First-Time User Sign-In",
        "Test_Sce_Description": "Verify that a first-time user is able to sign in to the SA Tool application using their operator badge ID and temporary passcode. The user should be prompted to change their temporary passcode upon initial log-in."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Online Authentication",
        "Test_Sce_Description": "Verify that the SA Tool communicates with the User management service to authenticate user login. This should be required when the device is online for first time users and after the local cache is cleaned based on a configurable credential caching duration."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Local Authentication",
        "Test_Sce_Description": "Verify that local authentication is used for users re-logging into the same SA Tool and whose credentials have not been cleaned based on the configurable credential caching duration. The local credential cache should only store the credentials of users who have logged in to the specific device previously."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Incorrect Username or Passcode",
        "Test_Sce_Description": "Verify that when the operator enters an incorrect username or passcode, the SA Tool application records a cumulative number of unsuccessful sign on attempts for a single valid operator badge ID on a SA Tool. When the number of unsuccessful sign-in attempts reaches the maximum number of sign-on attempts, the SA Tool application should deny access to that operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Network Unavailability",
        "Test_Sce_Description": "Verify that when the network is unavailable, the SA Tool application displays a message to the operator requesting them to sign in when network is available."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "New Passcode Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that the SA Tool application detects when the new passcode is the same as the temporary passcode in the Subsystem and informs the user of the error and clears the new passcode fields."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "New Passcode Length",
        "Test_Sce_Description": "Verify that the SA Tool will not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Security Setup",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator that they will need to set up security questions and a new passcode. The new passcode must be a 4-digit number."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Security Questions",
        "Test_Sce_Description": "Verify that the operator selects 2 security questions from a list of pre-defined security questions and provides their answers to the questions. Answers should be limited to alphanumerical characters and up to 20 characters. The character limit should be configurable. Answers should be case insensitive. The operator should not be able to enter non-alphanumerical characters."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Passcode Change",
        "Test_Sce_Description": "Verify that the SA Tool application validates that the new passcode meets passcode length criteria by connecting to the user management service. If the new passcode length meets the defined criteria, the SA Tool application should indicate to the operator that the passcode was successfully changed and displays the Inspection Parameters screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Network Unavailability during First Time Sign-in",
        "Test_Sce_Description": "Verify that the SA Tool application displays a message to the operator requesting them to sign in when network is available, when the operator tries to sign in for the first time using a temporary passcode and the network is not available."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Maximum Number of Login Attempts Reached",
        "Test_Sce_Description": "Verify that the SA Tool application records the number of unsuccessful sign-in attempts for a single valid operator badge ID and denies access to that operator when the maximum number of sign-in attempts is reached. The operator badge ID should be unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "New Passcode is Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that the SA Tool application detects when the new passcode entered by the operator is the same as the temporary passcode and informs the user of the error, clearing the new passcode fields."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that the SA Tool application does not enable the submit button until the passcode entered by the operator is of the correct length."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Reset Passcode when Operator Account is Locked",
        "Test_Sce_Description": "Verify that the SA Tool application detects when an operator account has been locked and notifies the operator with a corresponding error message when the operator tries to reset their passcode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Reset Passcode with Invalid Operator Badge ID",
        "Test_Sce_Description": "Verify that the SA Tool application checks with the User management service and determines when the operator badge ID entered for resetting the passcode is invalid, notifying the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Reset Passcode with Invalid Security Question Answers",
        "Test_Sce_Description": "Verify that the SA Tool application validates the security question answers entered by the operator during passcode reset and notifies the operator with a corresponding error message if the answers do not match those stored in the User management service."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Reset Passcode with Mismatched New Passcodes",
        "Test_Sce_Description": "Verify that the SA Tool application validates the new passcodes entered by the operator during passcode reset and notifies the operator with a corresponding error message if the passcodes do not match."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Reset Passcode with Incorrect Passcode Length",
        "Test_Sce_Description": "Verify that the SA Tool application does not enable the submit button for passcode reset until the passcode entered by the operator is of the correct length."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Reset Passcode for First-Time User",
        "Test_Sce_Description": "Verify that the SA Tool application connects to the User management service and validates that the operator badge ID entered for passcode reset belongs to a first-time user, notifying the operator with a corresponding error message and clearing the passcode field."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Maximum Number of Forgot Passcode Attempts Reached",
        "Test_Sce_Description": "Verify that the SA Tool application records the number of unsuccessful reset passcode attempts for a single valid operator ID and denies access to that operator when the maximum number of reset passcode attempts is reached. The operator ID should be unlocked by the CLIENT back-office user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Maximum Number of Log-in Attempts Reached",
        "Test_Scnario": "Account Validation Fails after Passcode Reset",
        "Test_Sce_Description": "Verify that the SA Tool application checks and determines when the user has entered all fields correctly in the Reset Passcode screen and has successfully reset their passcode, but the account validation fails."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Sign In with New Operator",
        "Test_Sce_Description": "Verify that a new operator can sign in to the SA Tool even when a current operator is already signed in. The system should display a message indicating that a current operator is signed in and ask if the new operator wants to sign in anyway. Upon selecting 'Yes', the current operator should be signed off from the SA Tool."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Shut Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator can manually shut down the SA Tool by pressing and holding the physical power button. The system should display a confirmation message with 'Power off' and other options. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Reboot SA Tool",
        "Test_Sce_Description": "Verify that the operator can manually reboot the SA Tool at any time by pressing and holding the physical power button. The system should display a confirmation message with 'Power off' and other options. Upon selecting the 'Restart' option, the device should restart by turning off and powering on."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the SA Tool can switch into a Standby state where the screen will turn off after remaining inactive for a configurable period of time. Alternatively, the operator should be able to press the physical power button to switch the SA Tool into standby state directly. Once in the standby mode, the SA tool should disconnect from all the peripherals to conserve battery life."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator can select the Revenue Mode to operate their shift in. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Access Revenue Mode",
        "Test_Sce_Description": "Verify that SA Tool Operators have access to Revenue Mode and can perform core functionalities such as Sales, Fare Payment, Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out",
        "Test_Scnario": "Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are correctly implemented and functioning as expected."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the functionality of SA Tool in Out-of-Service state",
        "Test_Sce_Description": "Check if the SA Tool is unable to accept a Farecard for any kind of functionality when it is in \u201cOut-of-Service\u201d state. Also, verify if it requires maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Check operator's shift status when device goes into out-of-service state",
        "Test_Sce_Description": "If an operator is signed-in and the device goes into out-of-service state, verify if the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the functionality of SA Tool in Standby state",
        "Test_Sce_Description": "Check if an operator can temporarily suspend all SA Tool functionality while in Standby state. Also, verify if the SA Tool switches into a Standby state where the screen will turn off after remaining inactive for a configurable period of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Check the disconnection of peripherals in Standby state",
        "Test_Sce_Description": "Once the SA Tool is in Standby state, verify if the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the functionality of SA Tool when running in the background",
        "Test_Sce_Description": "Check if the SA Tool device allows the operator to use authorized third-party applications as needed. Also, verify if the operator can launch multiple applications on the android device and move between them."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Check the functionality of SA Tool in Revenue Mode",
        "Test_Sce_Description": "Verify if the Revenue Mode allows the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the functionality of SA Tool in Training Mode",
        "Test_Sce_Description": "Check if the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the functionality of Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Check if an operator can manually shut down the SA Tool by pressing and holding the physical power button on the SA Tool."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline",
        "Test_Scnario": "Verify the functionality of Reboot SA Tool",
        "Test_Sce_Description": "Check if the operator can manually reboot the SA Tool at any time by pressing and holding the physical power button on the SA Tool."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "New Operator Sign In",
        "Test_Sce_Description": "Verify that a new operator can sign in successfully even when another operator is already signed in. The system should display a message indicating that the current operator is signed in and ask if the new operator wants to sign in anyway. Upon confirmation, the current operator should be signed off and the new operator signed in."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "SA Tool Offline Sign-Off",
        "Test_Sce_Description": "Validate that the SA Tool application can close the current shift and generate the shift statistics email even when the tool is offline. The email should be stored on the device and sent once the tool is powered on and re-establishes connection to the network."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "SA Tool Low Battery Sign-Off",
        "Test_Sce_Description": "Check that the SA Tool can be turned off after the operator confirms sign-out, even when the battery level is at 1%. The application should close off the current shift and generate the inspection shift statistics email that is stored on the device and sent once the tool is powered on and re-establishes connection to the network."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "First Time Sign In Without Network",
        "Test_Sce_Description": "Verify that when a network is unavailable, the SA Tool application displays a message to the operator requesting them to sign in when network is available. The operator should not be signed in."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "Maximum Number of Login Attempts",
        "Test_Sce_Description": "Validate that the SA Tool application records a cumulative number of unsuccessful sign on attempts for a single valid operator badge ID on a SA Tool. When the number of unsuccessful sign-in attempts reaches the maximum number of sign-on attempts, the application should deny access to that operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "New Passcode Same as Temporary Passcode",
        "Test_Sce_Description": "Check that the SA Tool application detects if the new passcode is the same as the temporary passcode in the Subsystem. The tool should inform the user of the error and clear the new passcode fields."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "New operator signs into current operator\u2019s shift",
        "Test_Scnario": "New Passcode Length Validation",
        "Test_Sce_Description": "Verify that the SA Tool does not enable the submit button until the passcode entered is the correct length. The system should validate the length of the new passcode against the pre-defined criteria."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Temporal Class Supplement Tap-On Transaction",
        "Test_Sce_Description": "Verify that the device correctly reflects the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on when the Farecard is tapped on during a time period that contains an associated Temporal Class Supplement."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Autoload Enabled Farecard Transaction",
        "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance and the Fare is deducted from the Farecard E-Purse balance."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Override Default Trip Transaction",
        "Test_Sce_Description": "Verify that when a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on and the right to travel is conferred to the Cardholder by updating the Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that when the customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Farecard Validation Failure",
        "Test_Sce_Description": "Verify that when a Farecard fails validation checks at Tap-On, the device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window and provides the appropriate feedback to the cardholder without updating the Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Blocked Farecard Transaction",
        "Test_Sce_Description": "Verify that when a blocked Farecard is tapped on the device, the right to travel is not conferred and the Device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Exceeding Max Travel Duration",
        "Test_Sce_Description": "Verify that when the time since tap-on exceeds the Max Travel Duration, the Device auto-settles the Underpayment and opens a new trip."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality and presents Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Non-Activated Farecard Transaction",
        "Test_Sce_Description": "Verify that when a non-activated Farecard is tapped on the device, the transaction is unsuccessful and the device provides feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device provides the appropriate feedback to the Cardholder."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Farecard Autoload Threshold Crossing",
        "Test_Sce_Description": "Verify that when a Farecard with Autoload enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Autoload amount is automatically added to the E-Purse balance. The device should detect that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, which triggers the Autoload amount to be added to the Farecard. The Device should deduct the Fare from the Farecard E-Purse balance."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Successful Transaction Feedback",
        "Test_Sce_Description": "Verify that the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the autoload was successful. The right to travel should be conferred to the Cardholder by updating the Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Farecard Validation Failure",
        "Test_Sce_Description": "Verify the system's response when a Farecard fails validation checks at Tap-On. The system should handle this exception flow appropriately and provide clear feedback to the user."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Temporal Class Supplement Processing",
        "Test_Sce_Description": "Verify that the device correctly processes a Tap-On Transaction as a normal tap-on when a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement. The device should contain an HMI reflecting the Temporal Class Supplement."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Non-Revenue Farecard Handling",
        "Test_Sce_Description": "Verify that the system only accepts Non-Revenue farecard in the training mode. If the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Default Trip Override",
        "Test_Sce_Description": "Verify that if a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on. The customer should be able to request the override of a Default Trip by interacting with the Device."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Audio Messages Request",
        "Test_Sce_Description": "Verify that when a customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator enables audio mode. The operator should be able to change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold",
        "Test_Scnario": "Fare Payment with Fare type Discount",
        "Test_Sce_Description": "Verify that the Device displays the \u201cFare Payment with Fare type Discount\u201d HMI and accounts for the concession discount in the Fare when a Farecard with Fare type (either Universal or Specific) other than Default taps-off. The Device should read the concession value from the Farecard and pass this information to the CRE. The CRE then utilizes this concession information to determine the appropriate fare and deduct this value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Full Fare-by-Zone transaction processing",
        "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction in case of a default O/D on the Farecard. This includes both tap-on and tap-off transactions. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. The default trip should use PAR as the card identifier."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Override default O/D on Open Payments Media",
        "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on. The customer should be able to request the override of a Default Trip by interacting with the Device. The Device HMI should inform the customer that the Device is prepared to override the Default Trip."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Capping discount eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list and complete the fare processing. ATS should calculate the capping discount and apply to the fare calculation."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple capping discounts eligibility",
        "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list and complete the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS should take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Device offline and capping discount eligibility",
        "Test_Sce_Description": "Verify that if the device is offline and not connected to Accenture Ticketing Services, and the customer has met any capping discount criteria, the device checks the local deny list if the media is on the local deny list. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services. The tap should then be rated in ATS."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media fails ODA check",
        "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Open Payments Media Fails Expiry Check",
        "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device should detect that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Farecard is blocked",
        "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. The card reader should detect that the Farecard is blocked."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. The Device should determine that the Tap-On Time + Max Travel Duration < Current Time and auto-settle the Underpayment and deduct the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Multiple NFC media are presented to the device at one time",
        "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. The customer should present multiple NFC medias to the card reader at once and the device should block all user functionality, presenting Anti-Collision HMI to customer."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Tap a non-activated Farecard on an SA Tool",
        "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on",
        "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs",
        "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device should provide the appropriate feedback to the cardholder."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Non-Revenue farecard in training mode",
        "Test_Sce_Description": "Verify that the SA tool accepts Non-Revenue farecard in the training mode and displays a declined HMI when the Non-Revenue card is tapped in the revenue mode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard tap during Temporal Class Supplement",
        "Test_Sce_Description": "Verify that the device displays an HMI reflecting the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on when a Farecard is tapped during a time period that contains an associated Temporal Class Supplement."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard with Autoload Enabled",
        "Test_Sce_Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard will have the Autoload amount automatically added to the E-Purse balance."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard without Default O/D",
        "Test_Sce_Description": "Verify that if a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Audio Messages request",
        "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Farecard validation checks at Tap-On",
        "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a Farecard fails validation checks at Tap-On."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment with Period Pass",
        "Test_Sce_Description": "Verify that the system correctly computes and deducts the Upgrade fare when a Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment with Period Pass and lower fare value",
        "Test_Sce_Description": "Verify that the system correctly identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment when the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment with Limited Period Pass",
        "Test_Sce_Description": "Verify that the system correctly processes the fare payment when the Farecard has a valid Limited Period Pass and the current time is within the limits of the product."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages",
        "Test_Scnario": "Testing Fare Payment with Limited Period Pass outside of valid time",
        "Test_Sce_Description": "Verify that the system correctly processes the fare payment when the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Farecard Tap-Off at Same Location",
        "Test_Sce_Description": "Verify that the device provides the appropriate feedback when the Farecard is tapped-off at the same location where tap-on occurred."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Farecard Blocked",
        "Test_Sce_Description": "Verify that the device does not confer the right to travel and provides the appropriate feedback when the Farecard is blocked."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "Verify that the device auto-settles the Underpayment and opens a new trip when the time since tap-on exceeds the Max Travel Duration."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Multiple NFC Media Presentation",
        "Test_Sce_Description": "Verify that the device blocks all fare payment functionality when multiple NFC media are presented to the device at one time."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Tap a Non-Activated Farecard",
        "Test_Sce_Description": "Verify that the device provides feedback of an unsuccessful transaction when a non-activated Farecard is tapped on the device."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Farecard Fails Validation Checks at Tap-On",
        "Test_Sce_Description": "Verify that the device returns the appropriate feedback and does not confer the right to travel when a Farecard fails the necessary validation checks."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Cardholder Taps-On Again at Same Station",
        "Test_Sce_Description": "Verify that the device provides the appropriate feedback without updating the Farecard when the cardholder taps-on again at the same station within the Tap-on anti-passback Window."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Farecard's E-Purse Balance Less than Tap-On Fare",
        "Test_Sce_Description": "Verify that the device does not confer the right to travel and provides the appropriate feedback when a Farecard\u2019s E-Purse balance is less than that of the Tap-On Fare."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Card Reading Error",
        "Test_Sce_Description": "Verify that the device captures and logs an error when a card reading error occurs (e.g. Farecard is immediately removed from the card reader)."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Performance of Device",
        "Test_Sce_Description": "Verify the performance of the device by checking the response time when a Farecard is tapped on the device."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Farecard fails validation checks at Tap-On",
        "Test_Scnario": "Security of Device",
        "Test_Sce_Description": "Verify the security of the device by checking if the device blocks all user functionality when an unauthorized action is attempted."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State with SA Tool application running in the background",
        "Test_Sce_Description": "Verify that if the SA Tool PDS application is running but is not in the foreground, the application will be in Standby State. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that in Revenue Mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that in Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State with Customer Interaction",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state, the device does not detect the media when a customer attempts to tap their Open Payments Media on the card reader."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device Configured for Farecard Reversals Only",
        "Test_Sce_Description": "Verify that when the device is configured for only farecard reversals, the 'Only Available for Farecards' error message is provided to the cardholder when they attempt to tap their Open Payments Media on the card reader."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device in Pilot Mode with Unapproved Media",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Open Payments Media on the BIN Blocking List",
        "Test_Sce_Description": "Verify that when the card\u2019s BIN is found to be on the BIN Blocking List, the device plays the decline audio tone and displays the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of Fare Payment with Interac Card while Interac is Disabled",
        "Test_Sce_Description": "Verify that when the Cardholder taps the Interac media on the device Card Reader (CID) while the device is in reversal mode and Interac is disabled, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of Fare Payment with Open Payment Card while Open Payments are Disabled",
        "Test_Sce_Description": "Verify that when the Cardholder taps the OP media on the device Card Reader (CID) while the device is in reversal mode and Open Payments are disabled, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of Fare Payment with Open Payment Card while Corresponding Payment Method/Card Brand is Disabled",
        "Test_Sce_Description": "Verify that when the Cardholder taps the OP media on the device Card Reader (CID) while the device is in reversal mode and the corresponding payment method/card brand is disabled, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device, enters the lock screen passcode and signs in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state without requiring login if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Standby State when navigating away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool successfully goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Standby State",
        "Test_Sce_Description": "Verify that all SA Tool functionality is suspended while in Standby state and that the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Resuming functionality of the SA Tool application",
        "Test_Sce_Description": "Verify that the operator can resume the functionality of the SA Tool application by switching back to the SA Tool application when the application is running in the background."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Operating SA Tool in Revenue Mode",
        "Test_Sce_Description": "Verify that the operator can interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in the Revenue Mode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Operating SA Tool in Training Mode",
        "Test_Sce_Description": "Verify that the operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in the Training Mode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Accessing and modifying functionalities by different users",
        "Test_Sce_Description": "Verify that different users such as SA Tool Operators, 3rd Party SA Tool Operators, Distance based Transitrvisors, Maintenance and Training have the correct access and modification rights to the functionalities of the SA Tool."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that an authorized operator can successfully launch the SA Tool Application from the home screen of the SA Tool device. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Power on SA Tool with no network connection",
        "Test_Sce_Description": "Verify that the SA Tool can operate in offline mode when the device is unable to connect to a network. The application should perform continuous diagnostic checks and indicate on the SA Tool that the device is unable to connect to a network."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Power on SA Tool with initial self-diagnostic check unsuccessful",
        "Test_Sce_Description": "Verify that the SA Tool goes to error state when initial self-diagnostic checks find critical failures. The application should perform initial self-diagnostic checks and go to error state if any critical failures are found."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Power on SA Tool with continuous self-diagnostic check unsuccessful",
        "Test_Sce_Description": "Verify that the SA Tool goes to out-of-service state when continuous self-diagnostic checks for storage, battery or secure element find errors or failures. A critical event should be sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that an authorized operator can switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button present on the android navigation bar."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Switching to an application already launched and running in the background",
        "Test_Sce_Description": "Verify that the operator can switch to an application that is already running in the device background. The operator should be able to tap on the App Overview button on the bottom navigation bar and navigate through the list of open applications until they find the desired application."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when a SA Tool is in \u201cOut-of-Service\u201d state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator can select Revenue Mode to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where at least one mean of payment is credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The operator should then be able to confirm the cancellation, and the system should reverse non-credit and/or non-debit means of payment automatically. The operator should then be able to choose the mean of payment and verbally prompt the customer to interact with the PIN pad to perform a refund void. The system should then handle successful and unsuccessful Moneris processing correctly."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where none of the means of payment are credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The operator should then be able to confirm the cancellation, and the system should reverse the payment means automatically and prompt the operator to begin a refund void. A customer and merchant receipt should then print, and the system should return to the home screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Product Quantity",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the quantity of a product added to the cart exceeds the maximum allowable amount. The system should not allow the operator to add more than the maximum allowable quantity to the shopping cart, and the operator should be able to process the customer\u2019s request in multiple transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund/Reversal",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where no products are eligible for refund or reversal. The system should display the relevant error message, which the operator must acknowledge, and then return to the main menu."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund/Reversal Not Requested by Customer",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where products are eligible for refund or reversal, but are not what the customer requested. The operator should be able to inform the customer that their product is not eligible for reversal or refund, and then return to the main menu."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Failure to Connect to Internet",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where there is no internet connection. The system should time out and display the relevant error message, with options to try again or cancel. If the connection is restored, the main use case should resume. If the action is cancelled, the system should return to the previous screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool is in an \u201cOut-of-Service\u201d state. The system should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool is in a Standby state. The screen should turn off, and the operator should be able to press the physical power button and sign-in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "SA Tool Application Running in the Background",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool application is running in the background. The operator should be able to switch back to the SA Tool application to resume its functionality."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the operator is in Revenue Mode. The operator should be able to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The system should only have access to the EPT in the revenue mode and should accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the operator is in Training Mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Payment by credit/debit should not be enabled, and all paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the Out-of-Service State",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in the 'Out-of-Service' state. The test will ensure that the tool does not accept any Farecard and requires maintenance to restore out-of-order components. It will also verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the Standby State",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in the 'Standby' state. The test will ensure that the screen is turned off after a configurable period of inactivity or when the operator presses the physical power button. It will also verify that the SA tool disconnects from all the peripherals to conserve battery life and requires the operator to press the physical power button and sign-in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the SA Tool application running in the background",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the application is running in the background. The test will ensure that the application goes into Standby State when it is not in the foreground and disconnects from all the peripherals to conserve battery life. It will also verify that to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the Revenue Mode",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in the 'Revenue' mode. The test will ensure that the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. It will also verify that the SA tool only has access to the EPT in the revenue mode and accepts the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the Training Mode",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in the 'Training' mode. The test will ensure that the operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. It will also verify that only non-revenue Farecard will be accepted in Training Mode and payment by credit /debit will not be enabled."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the Alternate Flow",
        "Test_Sce_Description": "This scenario will test the alternate flow of the SA Tool. The test will ensure that the operator can switch to a third party application on SA Tool and the SA Tool application runs in the background and goes into standby state."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the Exception Flow",
        "Test_Sce_Description": "This scenario will test the exception flow of the SA Tool. The test will ensure that the operator can attempt to change SP on the login screen and the SA Tool application notifies the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the In-App Training and FAQ",
        "Test_Sce_Description": "This scenario will test the In-App Training and FAQ of the SA Tool. The test will ensure that the operator can access in-app training and frequently asked questions (FAQs) and the content is stored locally on the device. It will also verify that the training material is updated or changed the SA Tool will sync with the device and update the content."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Open Payments Media is on the deny list",
        "Test_Scnario": "Open Payments Media on Deny List",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Open Payments Media is on the deny list",
        "Test_Scnario": "Open Payments Media on Local Deny List and Device Offline",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Open Payments Media is on the deny list",
        "Test_Scnario": "Multiple NFC Media Presented at Once",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Open Payments Media is on the deny list",
        "Test_Scnario": "Tap Open Payments Media when Device is Out-of-Service",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Open Payments Media is on the deny list",
        "Test_Scnario": "Error Occurs During Tap On",
        "Test_Sce_Description": "Verify that when an error occurs on the device that does not cover the exception cases above, the device records the tap and the Declined \u2013 See Customer Service Screen is provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Open Payments Media is on the deny list",
        "Test_Scnario": "Tap On with Unapproved Open Payments Media in Beta Mode",
        "Test_Sce_Description": "Verify that when a customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Open Payments Media is on the deny list",
        "Test_Scnario": "Tap-On Immediately After Tapping-Off at Same Station (Anti-passback)",
        "Test_Sce_Description": "Verify that when a cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Open Payments Media on Deny List",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the deny list, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Open Payments Media on Local Deny List and Device Offline",
        "Test_Sce_Description": "Verify that when the Open Payments Media is on the local deny list and the device is offline, the right to travel is not conferred. The device should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Multiple NFC Media Presented at Once",
        "Test_Sce_Description": "Verify that when multiple NFC media are presented to the device at one time, the device blocks all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Device in Out-of-Service State",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state, the Not In Service Screen is provided to the cardholder and the device does not detect the media. The device should remain in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Error Occurred on Device",
        "Test_Sce_Description": "Verify that when an error has occurred on the device that does not cover the exception cases, the device records the tap. The Declined \u2013 See Customer Service Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Open Payments Media Not on Approved List and Device in Beta Mode",
        "Test_Sce_Description": "Verify that when a customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode, the right to travel is not conferred. The device should send the tap to ATS and return a response that the media is on the deny list. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Anti-passback Functionality",
        "Test_Sce_Description": "Verify that when a customer attempts to tap-on immediately after tapping-off at the same station and the device is online, the device sends the tap to ATS and returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline",
        "Test_Scnario": "Anti-passback Functionality with Device Offline",
        "Test_Sce_Description": "Verify that when a customer attempts to tap-on immediately after tapping-off at the same station and the device is offline, the device should not allow the tap and should provide appropriate feedback to the cardholder. An error should be captured and logged in the background."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Multiple NFC media presented at once",
        "Test_Sce_Description": "This scenario tests the functionality of the device when multiple NFC media are presented to the card reader at the same time. The expected outcome is that the device should block all user functionality and present an Anti-Collision toast message to the customer. An error should be logged in the background and captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Non-activated Farecard tapped on SA Tool",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a non-activated Farecard is tapped on the device. The expected outcome is that the transaction should be unsuccessful, and the device should provide feedback to the Cardholder of an unsuccessful transaction due to inactive farecard. An error should be logged in the background and captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Card reading error occurs",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs. The expected outcome is that the device should not provide any feedback and screen remains \u201cIn-Service\u201d display. An error should be logged in the background and captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Card write error occurs",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard is tapped on an SA Tool and a card write error occurs. The expected outcome is that the device should not provide any feedback and screen remains \u201cIn-Service\u201d display. The device should delete the transaction information. An error should be logged in the background and captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Farecard tapped when SA Tool is in Out-of-Service state",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard is tapped on an SA Tool while the device is in Out-of-Service state. The expected outcome is that the device should remain in Out-of-Service state and not detect the media."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Virtual Card Media tapped when SA Tool is in Out-of-Service state",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a Virtual Card Media is tapped on the card reader while the device is in Out-of-Service state. The expected outcome is that the device should remain in Out-of-Service state and not detect the media."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Customer attempts to tap-on immediately after tapping-off at the same station",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a customer attempts to tap-on immediately after tapping-off at the same station. The expected outcome is that the device should provide the Declined \u2013 Already Tapped Screen to the cardholder. An error should be logged in the background and captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Customer attempts to tap on and an error has occurred",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a customer attempts to tap on and an error has occurred. The expected outcome is that the device should provide the Declined \u2013 See Customer Service Screen to the cardholder. An error should be logged in the background and captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Multiple NFC media are presented to the device at one time",
        "Test_Scnario": "Virtual Card has insufficient E-Purse to cover the Tap-On Fare",
        "Test_Sce_Description": "This scenario tests the functionality of the device when a Virtual Card has insufficient E-Purse to cover the Tap-On Fare. The expected outcome is that the device should provide the Declined \u2013 Insufficient Funds Screen to the cardholder. An error should be logged in the background and captured in the SOTI logs."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Open Payments Media tap when SA Tool is in Out-of-Service state",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader. The expected outcome is that the device will not detect the media and will remain in Out-of-Service state."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Open Payments Media tap when SA Tool is configured for Farecard reversals only",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is configured for only farecard reversals and a customer attempts to tap their Open Payments Media on the card reader. The expected outcome is that the device will display an error message stating 'Only Available for Farecard'."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Open Payments Media tap not on the approved media list while the device is in Pilot mode",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Pilot mode and a customer attempts to tap an Open Payments Media not on the approved media list. The expected outcome is that the device will display a 'Declined \u2013 Not Accepted, Tap Farecard' screen to the cardholder."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing Open Payments Media tap when the media is on the BIN Blocking List",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer\u2019s Open Payments Media is on the BIN Blocking List. The expected outcome is that the device will play a decline audio tone and display the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing fare payment reversal with Interac Card while Interac is disabled on SA Tool",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to reverse fare payment with Interac Card while Interac is disabled on the device. The expected outcome is that the device will display an error message and the fare payment reversal will not be recorded."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing fare payment reversal with Open Payment Card while Open Payments are disabled on SA Tool",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to reverse fare payment with Open Payment Card while Open Payments are disabled on the device. The expected outcome is that the device will display an error message and the fare payment reversal will not be recorded."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing fare payment reversal with Open Payment Card while corresponding payment method / card brand is disabled on SA Tool",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to reverse fare payment with Open Payment Card while the corresponding payment method / card brand is disabled on the device. The expected outcome is that the device will display an error message and the fare payment reversal will not be recorded."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing SA Tool in Standby State",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Standby state. The expected outcome is that the screen will turn off and the device will disconnect from all peripherals to conserve battery life."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing SA Tool in Revenue Mode",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Revenue Mode. The expected outcome is that the operator will be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Tap an Open Payments Media when SA Tool is in Out-of-Service state",
        "Test_Scnario": "Testing SA Tool in Training Mode",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Training Mode. The expected outcome is that the operator will be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)",
        "Test_Scnario": "Farecard tapped-off at the same location where tap-on occurred",
        "Test_Sce_Description": "Verify that when the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. Check if the device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. Ensure that the device provides the appropriate feedback to the cardholder without updating the Farecard. Confirm that an error is captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)",
        "Test_Scnario": "Farecard is blocked",
        "Test_Sce_Description": "Verify that when the Farecard is blocked, the right to travel is not conferred. Check if the card reader detects that the Farecard is blocked. Ensure that the device provides the appropriate feedback to the Cardholder. Confirm that an error is captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)",
        "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration",
        "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. Check if the Device determines that the Tap-On Time + Max Travel Duration < Current Time and Auto-settles the Underpayment and deducts the value from the Farecard E-Purse."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)",
        "Test_Scnario": "Multiple NFC media are presented to the device at one time",
        "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. Check if the device blocks all user functionality, presents Anti-Collision HMI to customer. Confirm that an error is captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)",
        "Test_Scnario": "Tap a non-activated Farecard on an SA Tool",
        "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. Check if the device detects that the Farecard is not activated. Ensure that the device provides feedback to the Cardholder of an unsuccessful transaction. Confirm that an error is captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)",
        "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs",
        "Test_Sce_Description": "Verify that when a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader). Check if the device accepts the tap and checks the latent transaction processor on the same device for a previous tap within the anti-passback window. Ensure that the Declined \u2013 Already Tapped Screen is provided to the cardholder. Confirm that an error is captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)",
        "Test_Scnario": "Customer attempts to tap on and an error has occurred",
        "Test_Sce_Description": "Verify that when an error has occurred on the device that does not cover the exception cases above. Check if the device records the tap. Ensure that the Declined \u2013 See Customer Service Screen is provided to the cardholder. Confirm that an error is captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)",
        "Test_Scnario": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device. Check if the device checks the approved media list. If the media is not found on the approved media list, the Declined \u2013 Tap Farecard Screen is provided to the cardholder. Confirm that an error is captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)",
        "Test_Scnario": "Customer\u2019s Open Payments Media is on the BIN Blocking List",
        "Test_Sce_Description": "Verify that when the device checks its local BIN Blocking list. The card\u2019s BIN is found to be on the BIN Blocking List. The device plays the decline audio tone and displays the Declined \u2013 BIN Blocked screen. Confirm that an error is captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Inspection",
        "Sub_Flow_Name": "Provincial offense notice (PON)",
        "Use_Case_Name": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)",
        "Test_Scnario": "Customer is travelling with an Interac Card, and ATS returns a decline response due to Media In Debt",
        "Test_Sce_Description": "Verify that when the device sends the tap to ATS and returns a response that the Interac media is on the deny list. Check if the Right to travel is not conferred. Ensure that the Declined \u2013 Interac Unpaid Fares Online Screen is provided to the cardholder. Confirm that an error is captured and logged in the background when this occurs to help with troubleshooting the issue."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator can manually shut down the SA Tool by pressing and holding the physical power button. The SA Tool should display a confirmation message with the options 'Power off' and other options. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sign Out on Shutdown",
        "Test_Sce_Description": "Verify that when the SA Tool is shut down, the current operator is signed off from the tool. The operator's shift should not be closed if it is open."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Restart Functionality",
        "Test_Sce_Description": "Verify that the operator can manually restart the SA Tool by pressing and holding the physical power button. The SA Tool should display a confirmation message with the options 'Restart' and other options. Upon selecting 'Restart', the device should turn off and power on again."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Airplane Mode Functionality",
        "Test_Sce_Description": "Verify that when 'Airplane Mode' is selected, the SA Tool disables network communications and is unable to perform any inspections, card query and counters. An airplane icon should be displayed in the top notification bar when this mode is enabled. To disable the airplane mode, the operator should press and hold the power button, and select the airplane mode option."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool. The minimum limit for volume should be configurable."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Standby State",
        "Test_Sce_Description": "Verify that when the SA Tool is in Standby state (screen turned off), an operator must press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state. The SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Revenue Mode",
        "Test_Sce_Description": "Verify that in the Revenue Mode, the SA Tool operator can interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Training Mode",
        "Test_Sce_Description": "Verify that in the Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode. They should not be a form of valid proof of payment."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool User Configurable Functionality",
        "Test_Sce_Description": "Verify that the SA Tool provides configurable functionality for different types of users including SA Tool Operators, SA Tool Operators - 3rd Party, Distance based Transitrvisors, Maintenance, and Training. The access to different functionalities like Revenue Mode, Sales, Fare Payment, Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession should be configurable based on the user type."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "Verify that the SA Tool reboots successfully when the operator selects the restart option. The tool should turn off and power on again as expected. This test will check the functionality of the reboot process."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Airplane Mode",
        "Test_Sce_Description": "Verify that the SA Tool disables network communications when the Airplane Mode is selected. The device should not be able to perform any inspections, counters, and queries. An airplane icon should be displayed in the top notification bar when this mode is enabled."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool. The minimum limit for volume should be configurable. This test will check the functionality of the sound adjustment feature."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "Verify that the SA Tool reboots within an acceptable time frame. This test will check the performance of the reboot process."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "Verify that the SA Tool maintains all security features and data integrity during and after the reboot process. This test will check the security of the reboot process."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "Verify that the SA Tool handles exceptions correctly during the reboot process. For example, if the device is unable to connect to a network, the tool should still be able to operate in offline mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Alternate Flow",
        "Test_Sce_Description": "Verify that the SA Tool handles alternate flows correctly during the reboot process. For example, if the application that the operator intends to launch is already running in the device background, the operator should be able to navigate through the list of open applications until they find the desired application."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State with peripherals",
        "Test_Sce_Description": "Verify that once in the standby mode, the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that if the SA Tool PDS application is running but is not in the foreground (i.e., the operator is using another application), the application will be in Standby State."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Resuming functionality of SA Tool application",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator will be able to select which mode they would like to operate their shift in. The Revenue Mode allows the SA Tool operator to interact with customers."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Configurable Functionality",
        "Test_Sce_Description": "Verify that the SA Tool Operators have access to Revenue Mode, Core Functionality - Sales, Core Functionality - Fare Payment, Core Functionality - Inspection, SA Tool Remote Access, Unblock Farecard, Modify Card Concession."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are working as expected."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State with Open Payments Media",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device configured for only farecard reversals",
        "Test_Sce_Description": "Verify that when the device is configured for only farecard reversals and a customer attempts to tap their Open Payments Media on the card reader, the 'Only Available for Farecards' error message is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device in Pilot mode with unapproved Open Payments media",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Open Payments Media on the BIN Blocking List",
        "Test_Sce_Description": "Verify that when a customer's Open Payments Media is on the BIN Blocking List, the device plays the decline audio tone and displays the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversing fare payment with Interac Card while Interac is disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Interac Card while Interac is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversing fare payment with Open Payment Card while Open Payments are disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while Open Payments are disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversing fare payment with Open Payment Card while corresponding payment method / card brand is disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while corresponding payment method / card brand is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switch SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device, enters the lock screen passcode and signs in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switch SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state without requiring login if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switch SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switch SA Tool from In-Service to Standby State when navigating away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool successfully goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Verify SA Tool in Out-of-Service State",
        "Test_Sce_Description": "Verify that the SA Tool is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components when it is in \u201cOut-of-Service\u201d state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Verify SA Tool in Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time or when the operator presses the physical power button."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Verify SA Tool in Revenue Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in the Revenue Mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Verify SA Tool in Training Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in the Training Mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Verify Configurable Functionality for SA Tool Operators",
        "Test_Sce_Description": "Verify that the SA Tool Operators have access to Revenue Mode, Core Functionality - Sales, Fare Payment, Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that the authorized operator is able to launch the SA Tool Application successfully. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Unsuccessful Continuous Self-Diagnostic Check (Network Connection)",
        "Test_Sce_Description": "Verify that the SA Tool Application can operate in offline mode when the device is unable to connect to a network. The application should perform continuous diagnostic checks and indicate on the SA Tool if the network connection is not available."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Unsuccessful Initial Self-Diagnostic Check",
        "Test_Sce_Description": "Verify that the SA Tool goes to error state when the initial self-diagnostic checks find critical failures. The application should perform initial self-diagnostic checks and go to error state if any critical failures are found."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Unsuccessful Continuous Self-Diagnostic Check (Storage, Battery or Secure Element)",
        "Test_Sce_Description": "Verify that the SA Tool goes to out-of-service state when the continuous self-diagnostic checks for storage, battery or secure element find errors or failures. A critical event should be sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool Application and Third-Party Applications",
        "Test_Sce_Description": "Verify that the authorized operator is able to switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications and launch the desired application."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Switching to an Application Running in the Background",
        "Test_Sce_Description": "Verify that the operator is able to switch to an application that is already running in the device background. The operator should be able to navigate through the list of open applications and launch the desired application."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Application Running in the Background",
        "Test_Sce_Description": "Verify that the SA Tool Application can run in the background while the operator is using another application. The application should disconnect from all the peripherals to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool in Out-of-Service State",
        "Test_Sce_Description": "Verify that the SA Tool Application does not close the operator\u2019s shift unless the operator has requested to sign-off when the device goes into out-of-service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool in Standby State",
        "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time. The operator should be able to press the physical power button to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool in Revenue Mode",
        "Test_Sce_Description": "Verify that the operator is able to select Revenue Mode upon logon. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool in Training Mode",
        "Test_Sce_Description": "Verify that the operator is able to select Training Mode upon logon. In this mode, the operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where at least one mean of payment is credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The system should automatically reverse non-credit and/or non-debit means of payment, and the operator should be able to choose the mean of payment and verbally prompt the customer to interact with the PIN pad to perform a refund void. The system should handle both successful and unsuccessful Moneris processing, with appropriate actions and receipts printed."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where none of the means of payment are credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The system should automatically reverse the payment means and prompt the operator to begin a refund void. A customer and merchant receipt should print, and the system should return to the home screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Product Quantity",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the quantity of a product added to the cart exceeds the maximum allowable amount. The system should not allow the operator to add more than the maximum allowable quantity to the shopping cart, and the operator should be able to process the customer\u2019s request in multiple transactions."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund or Reversal",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where no products are eligible for refund or reversal. The system should display the relevant error message, which the operator must acknowledge, and then return to the main menu."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund or Reversal Not Requested by Customer",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where products are eligible for refund or reversal, but are not what the customer requested. The operator should inform the customer that their product is not eligible for reversal or refund, and then return to the main menu."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Failure to Connect to Internet",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where there is no internet connection. The system should time out and display the relevant error message, with options to try again or cancel. If the connection is restored, the main use case should resume. If the action is cancelled, the system should return to the previous screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool is in an \u201cOut-of-Service\u201d state. The system should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool is in a Standby state. The screen should turn off, and the SA tool should disconnect from all peripherals to conserve battery life. The operator should be able to press the physical power button and sign-in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "SA Tool Application Running in the Background",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool application is running in the background. The SA tool should disconnect from all peripherals to conserve battery life, and the operator should be able to switch back to the SA Tool application to resume functionality."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Revenue Mode. The operator should be able to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA tool should only have access to the EPT in the revenue mode and accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Training Mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Out-of-Service State Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Operator Sign-off in Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State Functionality",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State Power Button Functionality",
        "Test_Sce_Description": "Verify that the operator can press the physical power button to switch the SA Tool into standby state directly. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State to In-Service State Transition",
        "Test_Sce_Description": "Verify that once the SA Tool is in Standby state (screen turned off), an operator must press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "SA Tool Application Running in Background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground (i.e., the operator is using another application), the application should be in Standby State."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Resuming SA Tool Application Functionality",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Revenue Mode Functionality",
        "Test_Sce_Description": "Verify that upon logon the operator will be able to select which mode they would like to operate their shift in. The Revenue Mode should allow the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Training Mode Functionality",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Alternate Flow Functionality",
        "Test_Sce_Description": "Verify that the operator can switch to a third party application on SA Tool. The SA Tool application should run in the background and therefore go into standby state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Exception Flow Functionality",
        "Test_Sce_Description": "Verify that the operator can attempt to change SP on the login screen. The SA Tool application should notify the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training and FAQ Functionality",
        "Test_Sce_Description": "Verify that this Use Case describes the steps for an operator to access in-app training and frequently asked questions (FAQs). The in-app training and FAQs should assist the operator and answer common questions on CLIENT and CLIENT products, as well as the usage of the application."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Offline SA Tool Functionality",
        "Test_Sce_Description": "Verify that if the SA Tool is offline, the operator can select the FAQ and Training option. The SA Tool should launch a lockdown browser. The SA Tool should load and display the last saved content (homepage) on the device."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training Update Functionality",
        "Test_Sce_Description": "Verify that if the SA Tool receives updated training content while the training is being played by the operator, the training should continue to play while the new content is downloaded to the device. Once the download has completed it should be available the next time the In-App Training and FAQ is launched."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training Download Functionality",
        "Test_Sce_Description": "Verify that if the In-App Training has not been downloaded to the SA Tool, the SA Tool should display a toast message on the Inspection home screen notifying the operator that there is no content available."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on / off / reboot SA Tool",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training Disable Functionality",
        "Test_Sce_Description": "Verify that if the In-App Training has been remotely disabled from the SA Tool after Operator navigates to Help Screen, the SA Tool should display a toast message on the Inspection home screen notifying the operator that there is no content available."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator can manually shut down the SA Tool by pressing and holding the physical power button. The SA Tool should display a confirmation message with options including 'Power off'. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sign Off on Shutdown",
        "Test_Sce_Description": "Verify that when the SA Tool is shut down, the current operator is signed off from the tool. The operator's shift should not be closed if it is open."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Other Options Functionality",
        "Test_Sce_Description": "Verify that the other options displayed on the SA Tool during shut down, such as 'Reset', 'Airplane Mode', etc., function as per the device\u2019s operating system. These options should not be required for running the SA Tool application and should not be used by the operators."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Reboot SA Tool",
        "Test_Sce_Description": "Verify that the operator can manually reboot the SA Tool by pressing and holding the physical power button. The SA Tool should display a confirmation message with options including 'Restart'. Upon selecting 'Restart', the device should turn off and power on again."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. The SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Standby State",
        "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state after remaining inactive for a configurable period of time, or when the operator presses the physical power button. In Standby state, the screen should turn off and the SA tool should disconnect from all peripherals to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Revenue Mode",
        "Test_Sce_Description": "Verify that in Revenue Mode, the SA Tool operator can interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA tool should only have access to the EPT in the revenue mode and should accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Training Mode",
        "Test_Sce_Description": "Verify that in Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool User Access",
        "Test_Sce_Description": "Verify that different users have access to different functionalities of the SA Tool as per their roles. For example, SA Tool Operators should have access to Revenue Mode, Sales, Fare Payment, Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are functioning as expected."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "Verify that the SA Tool reboots successfully when the operator selects the restart option. The tool should turn off and then power back on."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Airplane Mode",
        "Test_Sce_Description": "Verify that when the operator selects the 'Airplane Mode' option, the network communications of the device are disabled. The device should not be able to perform any inspections, counters, and queries."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool. The minimum limit for volume should be configurable."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Power Off",
        "Test_Sce_Description": "Verify that when the operator selects the 'Power off' option, the device turns off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "Verify that the tool handles exceptions correctly. For example, if the operator selects an option that is not supported by the tool, an appropriate error message should be displayed."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "Verify that the tool reboots within an acceptable time frame. The tool should not take an excessively long time to reboot."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "Verify that the tool maintains security during the reboot process. No sensitive information should be exposed during the reboot."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Alternate Flow",
        "Test_Sce_Description": "Verify that the tool handles alternate flows correctly. For example, if the operator selects the 'Restart' option, the tool should restart (equivalent of powering on and off the device)."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State Functionality",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State Power Button Functionality",
        "Test_Sce_Description": "Verify that the operator can press the physical power button to switch the SA Tool into standby state directly. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State to In-Service State Transition",
        "Test_Sce_Description": "Verify that once the SA Tool is in Standby state (screen turned off), an operator must press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "SA Tool Application Running in Background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground (i.e., the operator is using another application), the application should be in Standby State."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Resuming SA Tool Application Functionality",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode Functionality",
        "Test_Sce_Description": "Verify that upon logon the operator will be able to select which mode they would like to operate their shift in. The Revenue Mode should allow the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode Functionality",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. This allows for thorough training directly at the SA Tool. Payment by credit /debit should not be enabled."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Configurable Functionality for Different Users",
        "Test_Sce_Description": "Verify that different users have different access and functionality rights on the SA Tool. For example, SA Tool Operators should have access to Revenue Mode, Sales, Fare Payment, Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession, while Training users should not have access to these functionalities."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device, enters the lock screen passcode and signs in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state without requiring the operator to sign in if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value that requires logging in."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Standby State when navigating away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool successfully goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully suspends all its functionality while in Standby state and disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Resuming functionality of the SA Tool application",
        "Test_Sce_Description": "Verify that the operator can successfully resume the functionality of the SA Tool application by switching back to the SA Tool application when it is running in the background."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Operating SA Tool in Revenue Mode",
        "Test_Sce_Description": "Verify that the operator can successfully select and operate their shift in Revenue Mode upon logon, allowing them to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Operating SA Tool in Training Mode",
        "Test_Sce_Description": "Verify that the operator can successfully select and operate their shift in Training Mode upon logon, allowing them to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Accessing Revenue Mode by different users",
        "Test_Sce_Description": "Verify that only SA Tool Operators can access Revenue Mode and perform core functionalities such as sales, fare payment, inspection, SA Tool remote access, unblock farecard, and modify card concession."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that an authorized operator is able to launch the SA Tool Application from the home screen of the SA Tool device. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Power on SA Tool with no network connection",
        "Test_Sce_Description": "Verify that the SA Tool can operate in offline mode when the device is unable to connect to a network. The application should perform continuous diagnostic checks and indicate on the SA Tool that the network connection is not available. The sign-in screen should still be displayed."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Power on SA Tool with initial self-diagnostic check failure",
        "Test_Sce_Description": "Verify that the SA Tool goes to error state when it performs initial self-diagnostic checks and finds critical failures. The application should not proceed to the sign-in screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Power on SA Tool with continuous self-diagnostic check failure",
        "Test_Sce_Description": "Verify that the SA Tool goes to out-of-service state when it performs continuous self-diagnostic checks for storage, battery or secure element and finds errors or failures. A critical event should be sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that an authorized operator is able to switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button, and launch the desired application by pressing on its icon."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Switching to an application running in the background",
        "Test_Sce_Description": "Verify that the operator can switch to an application that is already running in the device background. The operator should be able to tap on the App Overview button on the bottom navigation bar, navigate through the list of open applications, and press on the desired application to launch it."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool in Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in \u201cOut-of-Service\u201d state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool in Standby State",
        "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state where the screen will turn off after it remains inactive for a configurable period of time. In the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life. An operator should be able to press the physical power button and sign-in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground, the application should be in Standby State. The operator should be able to switch back to the SA Tool application to resume its functionality."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool in Revenue Mode",
        "Test_Sce_Description": "Verify that in the Revenue Mode, the SA Tool operator is able to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA tool should only have access to the EPT in the revenue mode and accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool in Training Mode",
        "Test_Sce_Description": "Verify that in the Training Mode, the SA Tool operator is able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where at least one mean of payment is credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The operator should then be able to confirm the cancellation, and the system should automatically reverse non-credit/debit means of payment. The operator should then be able to choose the mean of payment and prompt the customer to interact with the PIN pad to perform a refund void. The system should then handle successful and unsuccessful Moneris processing correctly."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where none of the means of payment are credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The operator should then be able to confirm the cancellation, and the system should automatically reverse the payment means and prompt the operator to begin a refund void."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Product Quantity",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the quantity of a product added to the cart exceeds the maximum allowable amount. The system should not allow the operator to add more than the maximum allowable quantity to the shopping cart, and the operator should be able to process the customer\u2019s request in multiple transactions."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund or Reversal",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where no products are eligible for refund or reversal. The system should display the relevant error message and the operator should be able to acknowledge the message and return to the main menu."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund or Reversal Not Requested by Customer",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where products are eligible for refund or reversal, but are not what the customer requested. The operator should be able to inform the customer that their product is not eligible for reversal or refund and return to the main menu."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Failure to Connect to Internet",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where there is no internet connection. The system should time out and display the relevant error message with options to try again or cancel. If successful connection is restored, the operator should be able to resume the main use case. If the action is cancelled, the operator should be able to return to the previous screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool is in \u201cOut-of-Service\u201d state. The SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool is in Standby state. The operator should be able to press the physical power button and sign-in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "SA Tool Application Running in the Background",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool application is running in the background. The operator should be able to switch back to the SA Tool application to resume its functionality."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the operator selects the Revenue Mode. The operator should be able to interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the operator selects the Training Mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any functionality and may require maintenance to restore out-of-order components. Also, check if the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off when the device goes into out-of-service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the SA Tool can switch into a Standby state after remaining inactive for a configurable period of time or by pressing the physical power button. Check if the screen turns off and the SA tool disconnects from all the peripherals to conserve battery life. Also, ensure that the operator must press the physical power button and sign-in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed and can launch multiple applications on the android device and move between them. Check if the SA Tool application goes into Standby State when it is not in the foreground and disconnects from all the peripherals. Also, ensure that the operator can resume the functionality of the SA Tool application by switching back to it."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the operator can select the Revenue Mode upon logon and can interact with customers in this mode. Check if the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. Also, ensure that the SA tool only has access to the EPT in the revenue mode and accepts the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the operator can select the Training Mode upon logon and can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Check if only non-revenue Farecard is accepted in Training Mode and payment by credit /debit is not enabled. Also, ensure that all paper tickets printed from the SA Tool indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Alternate Flow - Operator navigates away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the operator can switch to a third party application on SA Tool and the SA Tool application runs in the background and goes into standby state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Exception Flow - Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that when the operator attempts to change SP on the login screen, the SA Tool application notifies the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training and FAQ",
        "Test_Sce_Description": "Verify that the operator can access in-app training and frequently asked questions (FAQs) to assist the operator and answer common questions on CLIENT and CLIENT products, as well as the usage of the application. Check if the In-App Training and FAQ are stored locally on the device and are updated or changed when the SA Tool syncs with the device."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Alternate Flow - Operator attempts to launch In-App Training and FAQ when SA Tool is Offline",
        "Test_Sce_Description": "Verify that when the SA Tool is offline, the operator can select the FAQ and Training option and the SA Tool launches a lockdown browser and displays the last saved content (homepage) on the device."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Exception Flow - In-App Training has not been downloaded to the SA Tool",
        "Test_Sce_Description": "Verify that when the In-App Training has not been downloaded to the SA Tool, the SA Tool displays a toast message on the Inspection home screen notifying the operator that there is no content available."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator can manually shut down the SA Tool by pressing and holding the physical power button. The SA Tool should display a confirmation message with options such as 'Power off' and other standard functions. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sign In",
        "Test_Sce_Description": "Verify that a new operator can sign in to the SA Tool using their user ID and passcode. The system should display a message indicating that the current operator is signed in and ask if the new operator wants to sign in anyway. Upon selecting 'Yes', the current operator should be signed off from the SA Tool."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Session Timeout",
        "Test_Sce_Description": "Verify that the SA Tool login screen is displayed due to session timeout. The system should automatically sign out the current operator after a certain period of inactivity."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Reboot SA Tool",
        "Test_Sce_Description": "Verify that the operator can manually reboot the SA Tool by pressing and holding the physical power button. The SA Tool should display a confirmation message with options such as 'Restart' and other standard functions. Upon selecting 'Restart', the device should turn off and power on again."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Standby State",
        "Test_Sce_Description": "Verify that the SA Tool can switch into a Standby state where the screen will turn off after a certain period of inactivity. In this state, the SA tool should disconnect from all peripherals to conserve battery life. An operator should be able to bring the device back into In-Service state by pressing the physical power button and signing in to the device lock screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Revenue Mode",
        "Test_Sce_Description": "Verify that in the Revenue Mode, the SA Tool operator can interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA tool should only have access to the EPT in the revenue mode and accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Training Mode",
        "Test_Sce_Description": "Verify that in the Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "Verify that the SA Tool reboots successfully when the operator selects the restart option. The tool should turn off and power on again as expected. The operator should be able to perform this action at any time, particularly when the application is not responding and the OS is not able to exit the application."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Network Communications",
        "Test_Sce_Description": "Verify that when the 'Airplane Mode' is enabled, the SA Tool disables the network communications and is not able to perform any inspections, counters, and queries. An airplane icon should be displayed in the top notification bar when this mode is enabled. To disable the airplane mode, the operator should be able to press and hold the power button, and select the airplane mode option."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool. The minimum limit for volume should be configurable."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "Verify that when the SA Tool is powered on and the operator presses and holds the physical power button, the tool displays a confirmation message with the following options: Power off, Reset, Airplane Mode, etc. These options should be standard functions from the device\u2019s operating system and cannot be modified. These options should not be required for running the SA Tool application and should not be used by the operators."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Alternate Flow",
        "Test_Sce_Description": "Verify that when the operator selects the restart option, the device restarts by turning off and powering on. This should be equivalent to powering on and off the device."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "Verify that the SA Tool reboots within an acceptable time frame. The tool should not hang or freeze during the reboot process."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "Verify that the SA Tool maintains all security protocols during the reboot process. No data should be lost or compromised during this process."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State with Peripherals",
        "Test_Sce_Description": "Verify that once the SA Tool is in Standby state, the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "SA Tool Application Running in Background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator can launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground, the application will be in Standby State."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator will be able to select which mode they would like to operate their shift in. The Revenue Mode allows the SA Tool operator to interact with customers. In this mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard will be accepted in Training Mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State with Open Payments Media",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device Configured for Farecard Reversals Only",
        "Test_Sce_Description": "Verify that when the device is configured for only farecard reversals and a customer attempts to tap their Open Payments Media on the card reader, the 'Only Available for Farecards' error message is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device in Pilot Mode with Unapproved Media",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device, enters the lock screen passcode and signs-in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state without requiring login if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State by navigating away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool successfully goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool in Out-of-Service State",
        "Test_Sce_Description": "Verify that the SA Tool is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components when it is in \u201cOut-of-Service\u201d state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool in Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time or when the operator presses the physical power button."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool in Revenue Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in the Revenue Mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool in Training Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in the Training Mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool Operators Access to Revenue Mode",
        "Test_Sce_Description": "Verify that the SA Tool Operators have access to Revenue Mode and can perform core functionality such as sales, fare payment, inspection, remote access, unblock Farecard, and modify card concession."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that the authorized operator is able to launch the SA Tool Application successfully. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. After successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Power on SA Tool with no network connection",
        "Test_Sce_Description": "Verify that the SA Tool can operate in offline mode when the device is unable to connect to a network. The application should perform continuous diagnostic checks and indicate on the SA Tool that the device is unable to connect to a network."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Power on SA Tool with initial self-diagnostic check unsuccessful",
        "Test_Sce_Description": "Verify that the SA Tool goes to error state when it performs initial self-diagnostic checks and finds critical failures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Power on SA Tool with continuous self-diagnostic check unsuccessful",
        "Test_Sce_Description": "Verify that the SA Tool goes to out-of-service state when the application performs the continuous self-diagnostics for storage, battery or secure element and finds errors or failures in any of these elements. A critical event should be sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that the authorized operator is able to switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button present on the android navigation bar."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Switching to an application already launched and running in the background",
        "Test_Sce_Description": "Verify that the operator is able to switch to an application that is already running in the device background. The operator should be able to navigate through the list of open applications until they find the desired application."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in \u201cOut-of-Service\u201d state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off. The operator should be able to press the physical power button to switch the SA Tool into standby state directly."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground, the application should be in Standby State."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator is able to select Revenue Mode to operate their shift in. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where at least one mean of payment is credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The system should automatically reverse non-credit and/or non-debit means of payment, and the operator should be prompted to choose a mean of payment for a refund void. The system should handle both successful and unsuccessful Moneris processing."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where none of the means of payment are credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The system should automatically reverse the payment means and prompt the operator to begin a refund void."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Product Quantity",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the quantity of a product added to the cart exceeds the maximum allowable amount. The system should not allow the operator to add more than the maximum allowable quantity to the shopping cart, and the operator should be able to process the customer\u2019s request in multiple transactions."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund or Reversal",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where no products are eligible for refund or reversal. The system should display the relevant error message and the operator must acknowledge the message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund or Reversal Not Requested by Customer",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where products are eligible for refund or reversal, but are not what the customer requested. The operator should inform the customer their product is not eligible for reversal or refund."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Failure to Connect to Internet",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where there is no internet connection and the operator is performing an action that requires connection to the Internet. The system should time out and display the relevant error message with options to try again or cancel."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device goes into out-of-service state. The system should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device goes into standby state. The system should disconnect from all the peripherals to conserve battery life, and the operator should be able to press the physical power button and sign-in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "SA Tool Application Running in the Background",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool application is running but is not in the foreground. The system should disconnect from all the peripherals to conserve battery life, and the operator should be able to switch back to the SA Tool application."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Revenue Mode. The operator should be able to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The system should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Training Mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. The system should not accept payment by credit /debit and all paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Out-of-Service State Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Operator Sign-off in Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State Functionality",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State Power Button Functionality",
        "Test_Sce_Description": "Verify that the operator can press the physical power button to switch the SA Tool into standby state directly. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State to In-Service State Transition",
        "Test_Sce_Description": "Verify that once the SA Tool is in Standby state (screen turned off), an operator must press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "SA Tool Application Running in Background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground (i.e., the operator is using another application), the application should be in Standby State."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Resuming SA Tool Application Functionality",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Revenue Mode Functionality",
        "Test_Sce_Description": "Verify that upon logon the operator will be able to select which mode they would like to operate their shift in. The Revenue Mode should allow the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Training Mode Functionality",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. This allows for thorough training directly at the SA Tool. Payment by credit /debit should not be enabled."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Alternate Flow Functionality",
        "Test_Sce_Description": "Verify that the operator can switch to a third party application on SA Tool. The SA Tool application should run in the background and therefore go into standby state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Exception Flow Functionality",
        "Test_Sce_Description": "Verify that the operator can attempt to change SP on the login screen. The SA Tool application should notify the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training and FAQ Functionality",
        "Test_Sce_Description": "Verify that the operator can access in-app training and frequently asked questions (FAQs). The in-app training and FAQs should assist the operator and answer common questions on CLIENT and CLIENT products, as well as the usage of the application."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Offline SA Tool Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool is offline, the operator can select the FAQ and Training option. The SA Tool should launch a lockdown browser. The SA Tool should load and display the last saved content (homepage) on the device."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training Update Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool receives updated training content, the training being played by the operator should continue to play while the new content is downloaded to the device. Once the download has completed it should be available the next time the In-App Training and FAQ is launched."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training Download Failure",
        "Test_Sce_Description": "Verify that when the In-App Training has not been downloaded to the SA Tool, the SA Tool should display a toast message on the Inspection home screen notifying the operator that there is no content available."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Power on",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training Disablement",
        "Test_Sce_Description": "Verify that when the In-App Training has been remotely disabled from the SA Tool after Operator navigates to Help Screen, the SA Tool should display a toast message on the Inspection home screen notifying the operator that there is no content available."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator is able to shut down the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with options including 'Power off'. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sign In",
        "Test_Sce_Description": "Verify that a new operator is able to sign in to the SA Tool using their user ID and passcode. If a current operator is already signed in, the tool should display a message indicating this and asking if the new operator wants to sign in anyway. Upon selecting 'Yes', the current operator should be signed off from the SA Tool."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Standby State",
        "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state after remaining inactive for a configurable period of time, during which the screen turns off. In this state, the SA Tool should disconnect from all peripherals to conserve battery life. An operator should be able to bring the device back into In-Service state by pressing the physical power button and signing in to the device lock screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Reboot",
        "Test_Sce_Description": "Verify that the operator is able to manually reboot the SA Tool at any time by pressing and holding the physical power button. The tool should display a confirmation message with options including 'Restart'. Upon selecting 'Restart', the device should turn off and power on again."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Modes",
        "Test_Sce_Description": "Verify that the SA Tool has two modes: Revenue and Training. Upon logon, operators with access to both modes should be able to select which Mode they would like to operate their shift in. 'Training' users should only have access to Training mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Revenue Mode",
        "Test_Sce_Description": "Verify that in Revenue Mode, the SA Tool operator can interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The tool should only have access to the EPT in the revenue mode and accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Training Mode",
        "Test_Sce_Description": "Verify that in Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool User Configurable Functionality",
        "Test_Sce_Description": "Verify that the SA Tool allows different types of users (Operators, 3rd Party, Supervisors, Maintenance, Training) to access and modify different functionalities. The access and modification rights should be as per the user type."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are working as expected."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "Verify that the SA Tool reboots successfully when the operator selects the restart option from the power menu. The tool should turn off and power on again as expected."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Airplane Mode",
        "Test_Sce_Description": "Verify that the SA Tool disables network communications when the operator selects the 'Airplane Mode' option from the power menu. An airplane icon should be displayed in the top notification bar when this mode is enabled."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool. The minimum limit for volume should be configurable."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "Verify that the SA Tool reboots within an acceptable time frame when the operator selects the restart option. The tool should not hang or lag during the reboot process."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "Verify that the SA Tool maintains all security protocols during the reboot process. No data should be lost or compromised during the reboot."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "Verify that the SA Tool handles exceptions correctly during the reboot process. If an error occurs, the tool should display an appropriate error message and not crash."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Alternate Flow",
        "Test_Sce_Description": "Verify that the SA Tool handles alternate flows correctly during the reboot process. If the operator selects an option other than 'restart' from the power menu, the tool should perform the corresponding action as expected."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool is in the 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in Persistence",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State Functionality",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State Peripheral Disconnection",
        "Test_Sce_Description": "Verify that once in the standby mode, the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State Exit",
        "Test_Sce_Description": "Verify that once the SA Tool is in Standby state (screen turned off), an operator must press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "SA Tool Application Background Functionality",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator can launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground (i.e., the operator is using another application), the application will be in Standby State."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "SA Tool Application Resume Functionality",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode Functionality",
        "Test_Sce_Description": "Verify that upon logon the operator will be able to select which mode they would like to operate their shift in. The Revenue Mode allows the SA Tool operator to interact with customers. In this mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode Functionality",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard will be accepted in Training Mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State Display",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state, the screen provides appropriate \u2018Out-of-Service\u2019 display to customers."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Farecard Reversals Only Configuration",
        "Test_Sce_Description": "Verify that when the device is configured for only farecard reversals, the 'Only Available for Farecard s' error message is provided to the cardholder when they attempt to tap their Open Payments Media on the card reader."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Open Payments Media Not on Approved List",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Open Payments Media on BIN Blocking List",
        "Test_Sce_Description": "Verify that when the card\u2019s BIN is found to be on the BIN Blocking List, the device plays the decline audio tone and displays the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Interac Card Reversal with Interac Disabled",
        "Test_Sce_Description": "Verify that when the Cardholder taps the Interac media on the device Card Reader (CID) while the device is in reversal mode and Interac is disabled, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Open Payment Card Reversal with Open Payments Disabled",
        "Test_Sce_Description": "Verify that when the Cardholder taps the OP media on the device Card Reader (CID) while the device is in reversal mode and Open Payments are disabled, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Open Payment Card Reversal with Corresponding Payment Method Disabled",
        "Test_Sce_Description": "Verify that when the Cardholder taps the OP media on the device Card Reader (CID) while the device is in reversal mode and the corresponding payment method / card brand is disabled, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device, enters the lock screen passcode and signs in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state without requiring login if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Standby State when navigating away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool successfully goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Standby State",
        "Test_Sce_Description": "Verify that all SA Tool functionality is suspended while in Standby state and the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Revenue Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in the Revenue Mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Training Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in the Training Mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Access to Revenue Mode for different users",
        "Test_Sce_Description": "Verify that only SA Tool Operators have access to Revenue Mode and not the Training users."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are correct and functional."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that an authorized operator is able to launch the SA Tool Application from the home screen of the SA Tool device. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Network Connection Unavailable during Launch",
        "Test_Sce_Description": "Verify that the SA Tool Application is able to operate in offline mode when the device is unable to connect to a network during the continuous diagnostic checks. The unavailability of network connection should be indicated on the SA Tool."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Critical Failures during Initial Self-Diagnostic Check",
        "Test_Sce_Description": "Verify that the SA Tool goes to error state when it performs initial self-diagnostic checks and finds critical failures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Failures in Storage, Battery or Secure Element during Continuous Self-Diagnostic Check",
        "Test_Sce_Description": "Verify that the SA Tool goes to out-of-service state when it performs the continuous self-diagnostics for storage, battery or secure element and finds errors or failures in any of these elements. A critical event should be sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that an authorized operator is able to switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button present on the android navigation bar."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching to an Application Running in the Background",
        "Test_Sce_Description": "Verify that the operator is able to switch to an application that is already launched and is running in the background. The operator should be able to navigate through the list of open applications until they find the desired application and press on it to launch it."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool in Out-of-Service State",
        "Test_Sce_Description": "Verify that when a SA Tool is in \u201cOut-of-Service\u201d state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool in Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off. The operator should be able to press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Operating in Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator is able to select Revenue Mode to operate their shift in. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Operating in Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where at least one mean of payment is credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The system should automatically reverse non-credit and/or non-debit means of payment, and the operator should be able to choose the mean of payment for the refund void. The system should handle both successful and unsuccessful Moneris processing."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where none of the means of payment are credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The system should automatically reverse the payment means and prompt the operator to begin a refund void."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Product Quantity",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the quantity of a product added to the cart exceeds the maximum allowable amount. The system should not allow the operator to add more than the maximum allowable quantity to the shopping cart, and the operator should be able to process the customer\u2019s request in multiple transactions."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund or Reversal",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where no products are eligible for refund or reversal. The system should display the relevant error message and the operator should acknowledge the message. The system should then return to the main menu."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund or Reversal Not Requested by Customer",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where products are eligible for refund or reversal, but are not what the customer requested. The operator should inform the customer their product is not eligible for reversal or refund, and then return to the main menu."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Failure to Connect to Internet",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where there is no internet connection and the operator is performing an action that requires connection to the Internet. The system should time out and display the relevant error message, with options to try again or cancel. If successful connection is restored, the operator should be able to resume the main use case."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device goes into out-of-service state. The system should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device goes into standby state. The system should disconnect from all the peripherals to conserve battery life, and the operator should be able to press the physical power button and sign-in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "SA Tool Application Running in the Background",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool application is running in the background. The operator should be able to switch back to the SA Tool application to resume its functionality."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Revenue Mode. The operator should be able to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The system should only have access to the EPT in the revenue mode and accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Training Mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Payment by credit/debit should not be enabled."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Out-of-Service State Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any functionality and may require maintenance to restore out-of-order components. Also, if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State Functionality",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off. Also, verify that the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "SA Tool Application Running in Background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground, the application should be in Standby State."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Revenue Mode Functionality",
        "Test_Sce_Description": "Verify that upon logon the operator is able to select which mode they would like to operate their shift in. The Revenue Mode should allow the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Training Mode Functionality",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. This allows for thorough training directly at the SA Tool. Payment by credit /debit should not be enabled."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Alternate Flow Functionality",
        "Test_Sce_Description": "Verify that the operator can switch to a third party application on SA Tool. The SA Tool application should run in the background and therefore go into standby state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Exception Flow Functionality",
        "Test_Sce_Description": "Verify that the operator can attempt to change SP on the login screen. The SA Tool application should notify the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training and FAQ Functionality",
        "Test_Sce_Description": "Verify that the operator can access in-app training and frequently asked questions (FAQs). The in-app training and FAQs should assist the operator and answer common questions on CLIENT and CLIENT products, as well as the usage of the application."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Offline SA Tool Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool is offline, the operator can select the FAQ and Training option. The SA Tool should launch a lockdown browser. The SA Tool should load and display the last saved content (homepage) on the device."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training Update Functionality",
        "Test_Sce_Description": "Verify that the SA Tool receives updated training content. The training being played by the operator should continue to play while the new content is downloaded to the device. Once the download has completed it should be available the next time the In-App Training and FAQ is launched."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator can manually shut down the SA Tool by pressing and holding the physical power button. The SA Tool should display a confirmation message with the options: Power off and Other options. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Confirmation Message Display",
        "Test_Sce_Description": "Verify that upon pressing and holding the physical power button, the SA Tool displays a confirmation message with the options: Power off and Other options. The options should be clearly visible and understandable to the operator."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Power Off Selection",
        "Test_Sce_Description": "Verify that upon selecting the 'Power off' option from the confirmation message, the SA Tool asks the operator to confirm the shut-down. The confirmation message should be clear and concise."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down Confirmation",
        "Test_Sce_Description": "Verify that upon confirming the shut-down, the device turns off. The transition from on to off state should be smooth and without any glitches."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Operator Shift Status Post Shut-Down",
        "Test_Sce_Description": "Verify that if the operator shift is open at the time of shut-down, the operator shift does not close. The shift status should be maintained even after the device is turned off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Reboot SA Tool",
        "Test_Sce_Description": "Verify that the operator can manually reboot the SA Tool by pressing and holding the physical power button. Upon selecting the 'Restart' option from the confirmation message, the device should restart by turning off and powering on."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Restart Option Functionality",
        "Test_Sce_Description": "Verify that upon selecting the 'Restart' option from the confirmation message, the device restarts. The device should turn off and power on again smoothly without any glitches."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Airplane Mode Functionality",
        "Test_Sce_Description": "Verify that upon selecting the 'Airplane Mode' option from the confirmation message, the device disables the network communications. The device should not be able to perform any inspections, counters and queries. An airplane icon should be displayed in the top notification bar when this mode is enabled."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Sound Levels Adjustment",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool. The minimum limit for volume should be configurable."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Out-of-Service State Functionality",
        "Test_Sce_Description": "Verify that if a SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "Verify that the SA Tool reboots successfully when the operator selects the restart option. The tool should turn off and power on again as expected. The operator should be able to perform this action at any time, particularly when the application is not responding and the OS is not able to exit the application."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Network Communications",
        "Test_Sce_Description": "Verify that when the 'Airplane Mode' is enabled, the device disables the network communications and is not able to perform any inspections, counters, and queries. An airplane icon should be displayed in the top notification bar when this mode is enabled. To disable the airplane mode, the operator should press and hold the power button, and select the airplane mode option."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool. The minimum limit for volume should be configurable."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "Verify that if the operator selects other options (e.g. Reset, Airplane Mode, etc.) which are standard functions from the device\u2019s operating system and cannot be modified, the expected behaviors occur. These options are not required for running the SA Tool application and should not be used by the operators."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "Verify that the reboot process does not take an excessive amount of time and that the device is responsive and functional after the reboot."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "Verify that the reboot process does not compromise the security of the device or the data stored on it. After the reboot, the device should still require the operator to enter their user ID and passcode to access the SA Tool."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State with peripherals",
        "Test_Sce_Description": "Verify that once in the standby mode, the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator is able to select the Revenue Mode to operate their shift in. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State with Open Payments Media",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device configured for only farecard reversals",
        "Test_Sce_Description": "Verify that when the device is configured for only farecard reversals and a customer attempts to tap their Open Payments Media on the card reader, the 'Only Available for Farecards' error message is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device in Pilot mode with unapproved media",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Open Payments Media on the BIN Blocking List",
        "Test_Sce_Description": "Verify that when a customer\u2019s Open Payments Media is on the BIN Blocking List, the device plays the decline audio tone and displays the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of fare payment with Interac Card while Interac is disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Interac Card while Interac is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of fare payment with Open Payment Card while Open Payments are disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while Open Payments are disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of fare payment with Open Payment Card while corresponding payment method / card brand is disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while the corresponding payment method / card brand is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the operator is able to successfully switch the SA Tool from standby to in-service state by pressing the physical power button, entering the lock screen passcode and signing in to the SA Tool application."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the SA Tool switches from standby to in-service state without requiring login if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the operator is able to successfully switch the SA Tool from in-service to standby state by pressing the physical power button once."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Standby State when navigating away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Standby State",
        "Test_Sce_Description": "Verify that all SA Tool functionality is suspended while in Standby state and the SA tool disconnects from all the peripherals to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality when running in the background",
        "Test_Sce_Description": "Verify that the SA Tool application goes into Standby State and disconnects from all the peripherals to conserve battery life when it is running in the background."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching back to the SA Tool application",
        "Test_Sce_Description": "Verify that the operator is able to resume the functionality of the SA Tool application by switching back to the SA Tool application from a third-party application."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Revenue Mode",
        "Test_Sce_Description": "Verify that the operator is able to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in the Revenue Mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Training Mode",
        "Test_Sce_Description": "Verify that the operator is able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in the Training Mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool application launches successfully when the operator selects the SA Tool Application icon from the home screen of the SA Tool device. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the SA Tool application sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Power on SA Tool with no network connection",
        "Test_Sce_Description": "Verify that the SA Tool application can operate in offline mode when the device is unable to connect to a network. The application should perform continuous diagnostic checks and indicate on the SA Tool that the device is unable to connect to a network."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Power on SA Tool with initial self-diagnostic check unsuccessful",
        "Test_Sce_Description": "Verify that the SA Tool goes to error state when it performs initial self-diagnostic checks and finds critical failures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Power on SA Tool with continuous self-diagnostic check unsuccessful",
        "Test_Sce_Description": "Verify that the SA Tool goes to out-of-service state when the application performs the continuous self-diagnostics for storage, battery or secure element and finds errors or failures in any of these elements. A critical event should be sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that the operator can switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to tap on the home button present on the android navigation bar to navigate to the list of whitelisted third-party applications."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Switching to an application already launched and running in the background",
        "Test_Sce_Description": "Verify that the operator can switch to an application that is already running in the device background. The operator should be able to tap on the App Overview button on the bottom navigation bar and swipe to navigate through the list of open applications until they find the desired application."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool application can run in the background while the operator is using another application. The application should be in Standby State and disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching SA Tool from Standby state to In-Service state",
        "Test_Sce_Description": "Verify that the operator can switch the SA Tool from Standby state (screen turned off) to In-Service state by pressing the physical power button and signing in to the device lock screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Operating SA Tool in Revenue Mode",
        "Test_Sce_Description": "Verify that the operator can select Revenue Mode upon logon to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Operating SA Tool in Training Mode",
        "Test_Sce_Description": "Verify that the operator can select Training Mode upon logon to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where at least one mean of payment is credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The operator should then be able to confirm the cancellation, and the system should reverse non-credit and/or non-debit means of payment automatically. The operator should then be prompted to choose a mean of payment and verbally prompt the customer to interact with the PIN pad to perform a refund void. The system should then handle successful and unsuccessful Moneris processing correctly."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where none of the means of payment are credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The operator should then be able to confirm the cancellation, and the system should reverse the payment means automatically and prompt the operator to begin a refund void. A customer and merchant receipt should then print, and the system should return to the home screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Product Quantity",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the quantity of a product added to the cart exceeds the maximum allowable amount. The system should not allow the operator to add more than the maximum allowable quantity to the shopping cart, and the operator should be able to process the customer\u2019s request in multiple transactions."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund or Reversal",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where no products are eligible for refund or reversal. The system should display the relevant error message, which the operator must acknowledge, and then return to the main menu."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund or Reversal Not Requested by Customer",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where products are eligible for refund or reversal, but are not what the customer requested. The operator should inform the customer that their product is not eligible for reversal or refund, and then return to the main menu."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Failure to Connect to Internet",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where there is no internet connection and the operator is performing an action that requires connection to the Internet. The system should time out and display the relevant error message, with options to try again or cancel. If successful connection is restored, the operator should be able to resume the main use case. If the action is cancelled, the system should return to the previous screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool is in \u201cOut-of-Service\u201d state. The system should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool is in Standby state. The operator should be able to press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "SA Tool Application Running in the Background",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool application is running in the background. The operator should be able to switch back to the SA Tool application, and the third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the operator is in Revenue Mode. The operator should be able to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The system should only have access to the EPT in the revenue mode and accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the operator is in Training Mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode. They should not be a form of valid proof of payment."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in the 'Out-of-Service' state, it does not accept a Farecard for any functionality and may require maintenance to restore out-of-order components. Also, check if the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off when the device goes into out-of-service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the Standby State",
        "Test_Sce_Description": "Verify that the SA Tool can switch into a Standby state after remaining inactive for a configurable period of time and the screen turns off. Also, check if the SA Tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed and the SA Tool application goes into Standby State when it is not in the foreground. Also, check if the SA Tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the Revenue Mode",
        "Test_Sce_Description": "Verify that the Revenue Mode allows the SA Tool operator to interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. Also, check if the SA tool only has access to the EPT in the revenue mode and accepts the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Also, check if only non-revenue Farecard is accepted in Training Mode and payment by credit /debit is not enabled."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the Alternate Flow",
        "Test_Sce_Description": "Verify that the operator can switch to a third party application on SA Tool and the SA Tool application runs in the background and goes into standby state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the Exception Flow",
        "Test_Sce_Description": "Verify that the operator can attempt to change SP on the login screen and the SA Tool application notifies the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the In-App Training and FAQ",
        "Test_Sce_Description": "Verify that the operator can access in-app training and frequently asked questions (FAQs) and the in-app training and FAQs assist the operator and answer common questions on CLIENT and CLIENT products, as well as the usage of the application."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator can manually shut down the SA Tool by pressing and holding the physical power button. The SA Tool should display a confirmation message with the options: Power off and other options. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Confirmation Message Display",
        "Test_Sce_Description": "Verify that upon pressing and holding the physical power button, the SA Tool displays a confirmation message with the options: Power off and other options. The options should be standard functions from the device\u2019s operating system and cannot be modified."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Power Off Functionality",
        "Test_Sce_Description": "Verify that upon selecting 'Power off' from the confirmation message and confirming shut-down, the SA Tool turns off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Operator Shift Status after Shut-Down",
        "Test_Sce_Description": "Verify that if the operator shift is open when the device is turned off, the operator shift will not be closed."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Reboot SA Tool",
        "Test_Sce_Description": "Verify that the operator can manually reboot the SA Tool by pressing and holding the physical power button. The SA Tool should display a confirmation message with the options: Power off and other options. Upon selecting the restart option, the device should restart by turning off and powering on."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Restart Option Functionality",
        "Test_Sce_Description": "Verify that upon selecting the restart option from the confirmation message, the device restarts by turning off and powering on."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that if a SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator can select the Revenue Mode to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Successful Restart",
        "Test_Sce_Description": "Verify that the SA Tool successfully restarts when the operator selects the restart option. The device should turn off and power back on, and the SA Tool application should be accessible post-restart."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Unsuccessful Restart",
        "Test_Sce_Description": "Verify the system behavior when the SA Tool fails to restart after the operator selects the restart option. The system should display an appropriate error message and guide the operator on the next steps."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Network Communications",
        "Test_Sce_Description": "Verify that the SA Tool disables network communications when the 'Airplane Mode' is enabled. The device should not be able to perform any inspections, counters, and queries. An airplane icon should be displayed in the top notification bar when this mode is enabled."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool. The minimum limit for volume should be configurable."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "Verify the system behavior when an exception occurs during the reboot process. The system should handle the exception gracefully and provide an appropriate error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Alternate Flow",
        "Test_Sce_Description": "Verify the system behavior when an alternate flow is triggered during the reboot process. The system should handle the alternate flow correctly and provide the expected output."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "Verify the performance of the SA Tool during the reboot process. The system should not lag or freeze, and the reboot process should be completed within the expected time frame."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "Verify that the SA Tool maintains the security of the system during the reboot process. No data should be lost or compromised, and all security protocols should be adhered to."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool will switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State with SA Tool application running in the background",
        "Test_Sce_Description": "Verify that if the SA Tool PDS application is running but is not in the foreground, the application will be in Standby State. Once in the standby mode, the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Resuming functionality of SA Tool application",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that in Revenue Mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool will only have access to the EPT in the revenue mode and will accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that in Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard will be accepted in Training Mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State with Open Payments Media",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state, it does not detect the media when a customer attempts to tap their Open Payments Media on the card reader."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device configured for only farecard reversals",
        "Test_Sce_Description": "Verify that when the device is configured for only farecard reversals, it provides an error message to the cardholder when they attempt to tap their Open Payments Media on the card reader."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device in Pilot mode with unapproved Open Payments media",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, it provides a 'Declined \u2013 Not Accepted, Tap Farecard' screen to the cardholder."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Open Payments Media on the BIN Blocking List",
        "Test_Sce_Description": "Verify that when the card\u2019s BIN is found to be on the BIN Blocking List, the device plays the decline audio tone and displays the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversing fare payment with Interac Card while Interac is disabled on SA Tool",
        "Test_Sce_Description": "Verify that when the Cardholder taps the Interac media on the device Card Reader (CID) while the device is in reversal mode, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversing fare payment with Open Payment Card while Open Payments are disabled on SA Tool",
        "Test_Sce_Description": "Verify that when the Cardholder taps the OP media on the device Card Reader (CID) while the device is in reversal mode, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversing fare payment with Open Payment Card while corresponding payment method / card brand is disabled on SA Tool",
        "Test_Sce_Description": "Verify that when the Cardholder taps the OP media on the device Card Reader (CID) while the device is in reversal mode, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the operator can successfully switch the SA Tool from standby to in-service state by pressing the physical power button, entering the lock screen passcode and signing in to the application. The tool should enter the in-service state and display the shift preferences screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value that requires logging in, the SA Tool displays the home screen without requiring sign-in and navigation to the home screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the operator can successfully switch the SA Tool from in-service to standby state by pressing the physical power button once. The tool should turn off the screen and go into standby state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching to a third party application on SA Tool",
        "Test_Sce_Description": "Verify that the operator can switch to a third party application on SA Tool. The SA Tool application should run in the background and go into standby state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that if the operator attempts to change SP on the login screen after switching the device from standby to in-service state, the SA Tool application notifies the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in \u201cOut-of-Service\u201d state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. The SA Tool should switch into a Standby state where the screen will turn off after remaining inactive for a configurable period of time."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator can select the Revenue Mode. In this mode, the operator should be able to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Accessing Configurable Functionality",
        "Test_Sce_Description": "Verify that the SA Tool Operators have access to Revenue Mode, Core Functionality - Sales, Core Functionality - Fare Payment, Core Functionality - Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that an authorized operator is able to successfully launch the SA Tool Application from the home screen of the SA Tool device. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Continuous Diagnostic Check Failure due to Network Connection",
        "Test_Sce_Description": "Verify that the SA Tool Application is able to operate in offline mode when the continuous diagnostic check fails due to lack of network connection. The device should indicate the lack of network connection and the operator should still be able to proceed to the sign-in screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Initial Self-Diagnostic Check Failure",
        "Test_Sce_Description": "Verify that the SA Tool Application goes to error state when the initial self-diagnostic check finds critical failures. The application should not proceed to the sign-in screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Continuous Self-Diagnostic Check Failure due to Storage, Battery or Secure Element",
        "Test_Sce_Description": "Verify that the SA Tool Application goes to out-of-service state when the continuous self-diagnostic check finds errors or failures in storage, battery or secure element. A critical event should be sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that an authorized operator is able to switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button present on the android navigation bar."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching to an Application Running in the Background",
        "Test_Sce_Description": "Verify that an operator is able to switch to an application that is already launched and is running in the background. The operator should be able to navigate through the list of open applications until they find the desired application and press on it to launch it."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Application Running in the Background",
        "Test_Sce_Description": "Verify that the SA Tool Application is able to run in the background while the operator is using another application. The application should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching SA Tool to Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon, operators with access to both modes are able to select Revenue Mode to operate their shift in. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching SA Tool to Training Mode",
        "Test_Sce_Description": "Verify that upon logon, operators with access to both modes are able to select Training Mode to operate their shift in. In this mode, the operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Accessing Configurable Functionality",
        "Test_Sce_Description": "Verify that SA Tool Operators are able to access Revenue Mode, Sales, Fare Payment, Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession functionalities. These functionalities should not be accessible to Training users."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a split payment refund/reversal has already begun and the customer has been refunded with at least one mean of payment that is credit or debit. The operator should be able to select to cancel the transaction, and the SA Tool should inform the operator that the payment means must be reversed. The operator should be able to confirm the cancellation of the transaction, and the SA Tool should reverse non-credit and/or non-debit means of payment automatically. The operator should then choose the mean of payment and verbally prompt the customer to interact with the PIN pad to perform a refund void. The test should cover both successful and unsuccessful Moneris processing."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a split payment refund/reversal has already begun and the customer has been refunded with at least one mean of payment that is not credit or debit. The operator should be able to select to cancel the transaction, and the SA Tool should inform the operator that the payment means must be reversed. The operator should be able to confirm the cancellation of the transaction, and the SA Tool should reverse the payment means automatically and prompt the operator to begin a refund void."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Quantity",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the quantity of product added to the cart exceeds the maximum allowable amount. The operator should be informed that they must process the customer's request in multiple transactions, and the SA Tool should not allow the operator to add more than the maximum allowable quantity to the shopping cart."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund or Reversal",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when no eligible products for refund or reversal are detected. The SA Tool should display the relevant error message and the operator must acknowledge the message. The SA Tool should then return to the main menu."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund or Reversal Not Requested by Customer",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when there are products available for refund or reversal other than the product requested by the customer. The operator should inform the customer that their product is not eligible for reversal or refund, and then return to the main menu."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Failure to Connect to Internet",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when there is no internet connection and the operator is performing an action that requires connection to the Internet. The SA Tool should time out and display the relevant error message with options to try again or cancel."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in an 'Out-of-Service' state. The SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in a Standby state. The SA Tool should disconnect from all the peripherals to conserve battery life, and the operator should be able to press the physical power button and sign-in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "SA Tool Application Running in the Background",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the application is running but is not in the foreground. The SA Tool should disconnect from all the peripherals to conserve battery life, and the operator should be able to switch back to the SA Tool application to resume its functionality."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool in Revenue Mode. The operator should be able to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA Tool should only have access to the EPT in the revenue mode and should accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool in Training Mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Payment by credit/debit should not be enabled."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Out-of-Service State Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. Also, ensure that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State Functionality",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off. Also, ensure that the operator can press the physical power button to switch the SA Tool into standby state directly. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground (i.e., the operator is using another application), the application should be in Standby State. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Revenue Mode Functionality",
        "Test_Sce_Description": "Verify that upon logon the operator is able to select which mode they would like to operate their shift in. The Revenue Mode should allow the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Training Mode Functionality",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. This should allow for thorough training directly at the SA Tool. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode. They should not be a form of valid proof of payment."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Alternate Flow Functionality",
        "Test_Sce_Description": "Verify that the operator can switch to a third party application on SA Tool. The SA Tool application should run in the background and therefore go into standby state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Exception Flow Functionality",
        "Test_Sce_Description": "Verify that the operator can attempt to change SP on the login screen. The SA Tool application should notify the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Shut down",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training and FAQ Functionality",
        "Test_Sce_Description": "Verify that the operator can access in-app training and frequently asked questions (FAQs). The in-app training and FAQs should assist the operator and answer common questions on CLIENT and CLIENT products, as well as the usage of the application. The In-App Training and FAQ should be stored locally on the device. Anytime the training material is updated or changed the SA Tool should sync with the device and update the content. If the operator exits the training while on a training sub-page and returns to the tap card screen and re-launches training, the SA Tool should launch the training home page."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator can manually shut down the SA Tool by pressing and holding the physical power button. The SA Tool should display a confirmation message with the options 'Power off' and other options. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sign In",
        "Test_Sce_Description": "Verify that a new operator can sign in to the SA Tool using their user ID and passcode. The system should display a message indicating that the current operator is signed in and ask if the new operator wants to sign in anyway. Upon selecting 'Yes', the current operator should be signed off from the SA Tool."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Standby State",
        "Test_Sce_Description": "Verify that the SA Tool can switch into a Standby state where the screen will turn off after remaining inactive for a configurable period of time. In this state, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life. An operator should be able to bring the device back into In-Service state by pressing the physical power button and signing in to the device lock screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Reboot",
        "Test_Sce_Description": "Verify that the operator can manually reboot the SA Tool by pressing and holding the physical power button. The SA Tool should display a confirmation message with the options 'Power off' and other options. Upon selecting the restart option, the device should restart by turning off and powering on."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon, the operator can select the Revenue Mode which allows the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode and should not be a form of valid proof of payment."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool User Configurations",
        "Test_Sce_Description": "Verify that the SA Tool allows different user configurations for SA Tool Operators, SA Tool Operators - 3rd Party, Distance based Transitrvisors, Maintenance, and Training. Each user type should have access to different functionalities as per the user management portal group."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "Verify that the SA Tool reboots successfully when the operator selects the restart option. The device should turn off and then power on again. Check that the device is functioning normally after the reboot."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Airplane Mode",
        "Test_Sce_Description": "Verify that when the operator selects the 'Airplane Mode' during the reboot process, the network communications of the device are disabled. The device should not be able to perform any inspections, counters, and queries. An airplane icon should be displayed in the top notification bar when this mode is enabled."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool during the reboot process. The minimum limit for volume should be configurable."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Power Off",
        "Test_Sce_Description": "Verify that when the operator selects the 'Power off' option during the reboot process, the device turns off. The device should not power on again unless manually turned on by the operator."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "Verify that when an exception occurs during the reboot process, the device handles it gracefully without crashing. The device should display an appropriate error message and guide the operator on the next steps."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Alternate Flow",
        "Test_Sce_Description": "Verify that when an alternate flow is triggered during the reboot process, the device handles it correctly. The device should follow the alternate flow and complete the reboot process successfully."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "Verify that the reboot process of the SA Tool is completed within an acceptable time frame. The device should not hang or slow down during the reboot process."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "Verify that the reboot process of the SA Tool does not expose any sensitive information on the screen. The device should maintain the security of the operator's data during the reboot process."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State with peripherals",
        "Test_Sce_Description": "Verify that once in the standby mode, the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator can launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground, the application will be in Standby State."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator will be able to select which mode they would like to operate their shift in. The Revenue Mode allows the SA Tool operator to interact with customers. In this mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard will be accepted in Training Mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State with Open Payments Media",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device configured for Farecard reversals only",
        "Test_Sce_Description": "Verify that when the device is configured for only farecard reversals and a customer attempts to tap their Open Payments Media on the card reader, the 'Only Available for Farecards' error message is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device in Pilot mode with unapproved media",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device, enters the lock screen passcode and signs-in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state without requiring login if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State by navigating away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool successfully goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool in Out-of-Service State",
        "Test_Sce_Description": "Verify that the SA Tool is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components when it is in \u201cOut-of-Service\u201d state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool in Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time or when the operator presses the physical power button."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool application runs in the background and goes into standby state when the operator is using another application."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching between Revenue and Training Modes",
        "Test_Sce_Description": "Verify that the operators with access to both modes are able to select which Mode they would like to operate their shift in upon logon and that \u2018Training\u2019 users only have access to Training mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Functionality in Revenue Mode",
        "Test_Sce_Description": "Verify that the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in Revenue Mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Functionality in Training Mode",
        "Test_Sce_Description": "Verify that the operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in Training Mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Access and Functionality for Different Users",
        "Test_Sce_Description": "Verify that the access and functionality for different users such as SA Tool Operators, SA Tool Operators - 3rd Party, Distance based Transitrvisors, Maintenance, and Training are as per the specifications."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are as per the specifications."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that the authorized operator is able to launch the SA Tool Application successfully. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Unsuccessful continuous self-diagnostic check (network connection not available)",
        "Test_Sce_Description": "Verify that the SA Tool Application is able to operate in offline mode when the device is unable to connect to a network. The application should indicate this on the SA Tool. Forget passcode and passcode change functionalities should be unavailable when the device is offline."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Unsuccessful initial self-diagnostic check",
        "Test_Sce_Description": "Verify that the SA Tool Application goes to error state when it performs initial self-diagnostic checks and finds critical failures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Unsuccessful continuous self-diagnostic check (storage, battery or secure element)",
        "Test_Sce_Description": "Verify that the SA Tool Application goes to out-of-service state when it performs the continuous self-diagnostics for storage, battery or secure element and finds errors or failures in any of these elements. A critical event should be sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that the authorized operator is able to switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button present on the android navigation bar."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: The application is already launched and is running in the background",
        "Test_Sce_Description": "Verify that the operator is able to launch the application that is already running in the device background. The operator should be able to navigate through the list of open applications until they find the desired application."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the SA Tool Application is unable to accept a Farecard for any kind of functionality when it is in \u201cOut-of-Service\u201d state. The application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the SA Tool Application is able to switch into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time. The SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the SA Tool Application allows the operator to interact with customers in Revenue Mode. The operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the SA Tool Application allows the operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where at least one mean of payment is credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The operator should be able to confirm the cancellation, and the system should automatically reverse non-credit and/or non-debit means of payment. The operator should then be able to choose the mean of payment and verbally prompt the customer to interact with the PIN pad to perform a refund void. The system should handle both successful and unsuccessful Moneris processing correctly."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where none of the means of payment are credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The operator should be able to confirm the cancellation, and the system should automatically reverse the payment means and prompt the operator to begin a refund void. A customer and merchant receipt should print, and the system should return to the home screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Product Quantity",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the quantity of a product added to the cart exceeds the maximum allowable amount. The system should not allow the operator to add more than the maximum allowable quantity to the shopping cart, and the operator should be able to process the customer\u2019s request in multiple transactions."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund or Reversal",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where no products are eligible for refund or reversal. The system should display the relevant error message, which the operator must acknowledge, and then return to the main menu."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund or Reversal Not Requested by Customer",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where products are eligible for refund or reversal, but are not what the customer requested. The operator should be able to inform the customer that their product is not eligible for reversal or refund, and then return to the main menu."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Internet Connection Failure",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where there is no internet connection and the operator is performing an action that requires connection to the Internet. The system should time out and display the relevant error message, with options to try again or cancel. If successful connection is restored, the operator should be able to resume the main use case. If the action is cancelled, the system should return to the previous screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool is in \u201cOut-of-Service\u201d state. The system should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool is in Standby state. The operator should be able to press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "SA Tool Running in Background",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool application is running in the background. The operator should be able to switch back to the SA Tool application to resume its functionality."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Revenue Mode. The operator should be able to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The system should only have access to the EPT in the revenue mode and accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Training Mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any functionality and may require maintenance to restore out-of-order components. Also, ensure that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off. Also, ensure that the operator can press the physical power button to switch the SA Tool into standby state directly. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground (i.e., the operator is using another application), the application should be in Standby State. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator is able to select which mode they would like to operate their shift in. The Revenue Mode should allow the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. This should allow for thorough training directly at the SA Tool. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode. They should not be a form of valid proof of payment."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Alternate Flow",
        "Test_Sce_Description": "Verify that the operator can switch to a third party application on SA Tool. The SA Tool application should run in the background and therefore go into standby state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Exception Flow",
        "Test_Sce_Description": "Verify that the operator can attempt to change SP on the login screen. The SA Tool application should notify the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing In-App Training and FAQ",
        "Test_Sce_Description": "Verify that the operator can access in-app training and frequently asked questions (FAQs). The in-app training and FAQs should assist the operator and answer common questions on CLIENT and CLIENT products, as well as the usage of the application. Online web search, copy and find features should be disabled in the lockdown browser."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator can manually shut down the SA Tool by pressing and holding the physical power button. The SA Tool should display a confirmation message with options such as 'Power off' and other standard functions from the device\u2019s operating system. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sign Off on Shutdown",
        "Test_Sce_Description": "Verify that when the SA Tool is shut down, the current operator is signed off from the tool. The operator's shift should not be closed if it is open."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Restart Functionality",
        "Test_Sce_Description": "Verify that the operator can manually reboot the SA Tool by pressing and holding the physical power button. The SA Tool should display a confirmation message with options such as 'Restart' and other standard functions from the device\u2019s operating system. Upon selecting 'Restart', the device should turn off and power on again."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Airplane Mode Functionality",
        "Test_Sce_Description": "Verify that the 'Airplane Mode' option disables the network communications. The device should not be able to perform any inspections, card query and counters. An airplane icon should be displayed in the top notification bar when this mode is enabled. To disable the airplane mode, the operator should press and hold the power button, and select the airplane mode option."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sound Levels Adjustment",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool. The minimum limit for volume should be configurable."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Standby State",
        "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time. Alternatively, the operator should be able to press the physical power button to switch the SA Tool into standby state directly. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator can select the Revenue Mode which allows the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. This allows for thorough training directly at the SA Tool. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode. They should not be a form of valid proof of payment."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool User Configurable Functionality",
        "Test_Sce_Description": "Verify that the SA Tool provides configurable functionality for different types of users such as SA Tool Operators, SA Tool Operators - 3rd Party, Distance based Transitrvisors, Maintenance, and Training. The access to different functionalities such as Revenue Mode, Sales, Fare Payment, Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession should be configurable based on the user type."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "Verify that the SA Tool reboots successfully when the operator selects the restart option from the power menu. The tool should turn off and power back on, displaying the home screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Airplane Mode",
        "Test_Sce_Description": "Verify that when the operator selects the 'Airplane Mode' from the power menu, the network communications of the SA Tool are disabled. The tool should not be able to perform any inspections, counters, and queries."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool. The minimum limit for volume should be configurable."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "Verify that the SA Tool handles exceptions correctly during the reboot process. If an error or failure occurs, the tool should go to an error state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "Verify that the SA Tool reboots within an acceptable time frame. The tool should not hang or lag during the reboot process."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "Verify that the SA Tool maintains the security of the data during the reboot process. No data should be lost or corrupted."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications - Normal Flow",
        "Test_Sce_Description": "Verify that the operator can switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications - Alternate Flow",
        "Test_Sce_Description": "Verify that if the application that the operator intends to launch is already running in the device background, the operator can tap on the App Overview button on the bottom navigation bar, swipe to navigate through the list of open applications until they find the desired application, and press on the desired application to launch it."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications - Performance",
        "Test_Sce_Description": "Verify that the operator can switch between the applications without any lag or delay. The applications should load quickly and run smoothly."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications - Security",
        "Test_Sce_Description": "Verify that the operator can switch between the applications without any security issues. The data in the applications should be secure and not accessible to unauthorized users."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State with peripherals",
        "Test_Sce_Description": "Verify that once in the standby mode, the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator can launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground, the application will be in Standby State."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator will be able to select which mode they would like to operate their shift in. The Revenue Mode allows the SA Tool operator to interact with customers. In this mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard will be accepted in Training Mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State with Open Payments Media",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device configured for farecard reversals only",
        "Test_Sce_Description": "Verify that when the device is configured for only farecard reversals and a customer attempts to tap their Open Payments Media on the card reader, the 'Only Available for Farecards' error message is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device in Pilot mode with unapproved media",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Open Payments Media on the BIN Blocking List",
        "Test_Sce_Description": "Verify that when a customer's Open Payments Media is on the BIN Blocking List, the device plays the decline audio tone and displays the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of fare payment with Interac Card while Interac is disabled",
        "Test_Sce_Description": "Verify that when a Cardholder taps the Interac media on the device Card Reader (CID) while the device is in reversal mode, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of fare payment with Open Payment Card while Open Payments are disabled",
        "Test_Sce_Description": "Verify that when a Cardholder taps the OP media on the device Card Reader (CID) while the device is in reversal mode, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of fare payment with Open Payment Card while corresponding payment method / card brand is disabled",
        "Test_Sce_Description": "Verify that when a Cardholder taps the OP media on the device Card Reader (CID) while the device is in reversal mode, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device, enters the lock screen passcode and signs in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state without requiring the operator to sign in if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value that requires logging in."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Standby State when navigating away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool successfully goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Standby State",
        "Test_Sce_Description": "Verify that all SA Tool functionality is suspended while in Standby state and the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Resuming functionality of the SA Tool application",
        "Test_Sce_Description": "Verify that the operator can resume the functionality of the SA Tool application by switching back to the SA Tool application when the SA Tool application is running in the background."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Revenue Mode",
        "Test_Sce_Description": "Verify that the operator can successfully switch the SA Tool to Revenue Mode and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Training Mode",
        "Test_Sce_Description": "Verify that the operator can successfully switch the SA Tool to Training Mode and mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Accessing Revenue Mode by different users",
        "Test_Sce_Description": "Verify that only SA Tool Operators can access Revenue Mode and perform core functionalities such as sales, fare payment, inspection, SA Tool remote access, unblock farecard, and modify card concession."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that an authorized operator is able to launch the SA Tool Application from the home screen of the SA Tool device. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Unsuccessful Continuous Self-Diagnostic Check",
        "Test_Sce_Description": "Verify that if the SA Tool performs the continuous diagnostic checks and determines that the device is unable to connect to a network, this is indicated on the SA Tool. The application should still launch and the sign-in screen should be displayed, indicating that the SA Tool can operate in offline mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Unsuccessful Initial Self-Diagnostic Check",
        "Test_Sce_Description": "Verify that if the SA Tool performs initial self-diagnostic checks and finds critical failures, the SA Tool goes to error state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Unsuccessful Continuous Self-Diagnostic Check",
        "Test_Sce_Description": "Verify that if the SA Tool application performs the continuous self-diagnostics for storage, battery or secure element and finds errors or failures in any of these elements, the SA Tool goes to out-of-service state and a critical event is sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that an authorized operator is able to switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button present on the android navigation bar."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Switching to an Application Running in the Background",
        "Test_Sce_Description": "Verify that if the application that the operator intends to launch is already running in the device background, the operator can tap on the App Overview button on the bottom navigation bar, navigate through the list of open applications until they find the desired application, and press on the desired application to launch it."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that if a SA Tool is in \u201cOut-of-Service\u201d state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that if the SA Tool PDS application is running but is not in the foreground, the application will be in Standby State. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life. The operator should be able to resume the functionality of the SA Tool application by switching back to the SA Tool application."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator is able to select Revenue Mode to operate their shift in. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a split payment refund/reversal has already begun and the customer has been refunded with at least one mean of payment that is credit or debit. The operator should be able to select to cancel the transaction, and the SA Tool should inform the operator that the payment means must be reversed. The operator should be able to confirm the cancellation of the transaction, and the SA Tool should reverse non-credit and/or non-debit means of payment automatically. The operator should then choose the mean of payment and verbally prompt the customer to interact with the PIN pad in order to perform a refund void. The test should cover both successful and unsuccessful Moneris processing."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a split payment refund/reversal has already begun and the customer has been refunded with at least one mean of payment that is not credit or debit. The operator should be able to select to cancel the transaction, and the SA Tool should inform the operator that the payment means must be reversed. The operator should be able to confirm the cancellation of the transaction, and the SA Tool should reverse the payment means automatically and prompt the operator to begin a refund void."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Product Quantity",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the quantity of product added to the cart exceeds the maximum allowable amount. The operator should be informed that they must process the customer's request in multiple transactions, and the SA Tool should not allow the operator to add more than the maximum allowable quantity to the shopping cart."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund or Reversal",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when no eligible products for refund or reversal are detected. The SA Tool should display the relevant error message and the operator must acknowledge the message. The SA Tool should then return to the main menu."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund or Reversal Not Requested by Customer",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when there are products available for refund or reversal other than the product requested by the customer. The operator should inform the customer their product is not eligible for reversal or refund, and then return to the main menu."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Failure to Connect to Internet",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when there is no internet connection and the operator is performing an action that requires connection to the Internet. The SA Tool should time out and display the relevant error message with options to try again or cancel. If successful connection is restored, the main use case should resume. If the action is cancelled, the SA Tool should return to the previous screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in 'Out-of-Service' state. The SA Tool should be unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Standby state. The screen should turn off after the SA Tool remains inactive for a configurable period of time, or if the operator presses the physical power button. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life. An operator should be able to press the physical power button and sign-in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool in Revenue Mode. The operator should be able to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool in Training Mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode. They should not be a form of valid proof of payment."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. Also, if an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Standby State",
        "Test_Sce_Description": "Verify that the SA Tool can switch into a Standby state where the screen will turn off after a configurable period of inactivity. Also, check if the operator can press the physical power button to switch the SA Tool into standby state directly. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground, the application should be in Standby State. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator is able to select which mode they would like to operate their shift in. The Revenue Mode should allow the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. This allows for thorough training directly at the SA Tool. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode. They should not be a form of valid proof of payment."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Alternate Flow",
        "Test_Sce_Description": "Verify that the operator can switch to a third party application on SA Tool. The SA Tool application should run in the background and therefore go into standby state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Exception Flow",
        "Test_Sce_Description": "Verify that the operator can attempt to change SP on the login screen. The SA Tool application should notify the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing In-App Training and FAQ",
        "Test_Sce_Description": "Verify that the operator can access in-app training and frequently asked questions (FAQs). The in-app training and FAQs should assist the operator and answer common questions on CLIENT and CLIENT products, as well as the usage of the application. The In-App Training and FAQ should be stored locally on the device. Anytime the training material is updated or changed the SA Tool should sync with the device and update the content."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator is able to shut down the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with options including 'Power off'. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Sign-off Current Operator",
        "Test_Sce_Description": "Verify that when a new operator tries to sign in, a message is displayed indicating that the current operator is already signed in and asks if the new operator wants to sign in anyway. Upon selecting 'Yes', the current operator should be signed off from the SA Tool."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Reboot SA Tool",
        "Test_Sce_Description": "Verify that the operator is able to reboot the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with options including 'Restart'. Upon selecting 'Restart', the device should turn off and power on again."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state where the screen will turn off after remaining inactive for a configurable period of time. In this state, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life. An operator should be able to bring the device back into In-Service state by pressing the physical power button and signing in to the device lock screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. If the SA Tool PDS application is running but is not in the foreground, the application should be in Standby State. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life. The operator should be able to resume the functionality of the SA Tool application by switching back to the SA Tool application."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator is able to select Revenue Mode to operate their shift in. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "Verify that the SA Tool reboots successfully when the operator selects the restart option. The tool should turn off and power on again as expected."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Airplane Mode",
        "Test_Sce_Description": "Verify that when the operator selects the 'Airplane Mode' during the reboot process, the network communications are disabled and the device is unable to perform any inspections, counters, and queries."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool during the reboot process. The minimum limit for volume should be configurable."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "Verify that the reboot process of the SA Tool is completed within the acceptable time limit and there is no lag or delay."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "Verify that the reboot process does not compromise the security of the SA Tool. No data should be lost or corrupted during the reboot process."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "Verify that the SA Tool handles exceptions correctly during the reboot process. If any error or failure occurs, the tool should go to the error state and display an appropriate error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Alternate Flow",
        "Test_Sce_Description": "Verify that the SA Tool handles alternate flows correctly during the reboot process. If the operator selects an option other than 'Restart', the tool should perform the corresponding action correctly."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Network Connection",
        "Test_Sce_Description": "Verify that the SA Tool checks for network/cellular connection during the reboot process. If the connection is not available, the tool should indicate this on the display."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Battery Level",
        "Test_Sce_Description": "Verify that the SA Tool checks for the battery level during the reboot process. If the battery level is low, the tool should indicate this on the display."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Storage Space",
        "Test_Sce_Description": "Verify that the SA Tool checks for available storage space during the reboot process. If the storage space is low, the tool should indicate this on the display."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State Functionality",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State with Peripherals",
        "Test_Sce_Description": "Verify that once in the standby mode, the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Resuming from Standby State",
        "Test_Sce_Description": "Verify that once the SA Tool is in Standby state (screen turned off), an operator must press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "SA Tool with Third-Party Applications",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Resuming SA Tool Functionality",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode Functionality",
        "Test_Sce_Description": "Verify that upon logon the operator will be able to select which mode they would like to operate their shift in. The Revenue Mode should allow the SA Tool operator to interact with customers."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode Functionality",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "User Access and Functionality",
        "Test_Sce_Description": "Verify that different users have access to different functionalities as per the user management portal group."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are working as expected."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State with Open Payments Media",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device Configured for Farecard Reversals Only",
        "Test_Sce_Description": "Verify that when the device is configured for only farecard reversals and a customer attempts to tap their Open Payments Media on the card reader, the 'Only Available for Farecards' error message is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device in Beta Mode with Unapproved Media",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Open Payments Media on the BIN Blocking List",
        "Test_Sce_Description": "Verify that when a customer's Open Payments Media is on the BIN Blocking List, the device plays the decline audio tone and displays the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversing Fare Payment with Interac Card while Interac is Disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Interac Card while Interac is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversing Fare Payment with Open Payment Card while Open Payments are Disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while Open Payments are disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversing Fare Payment with Open Payment Card while Corresponding Payment Method/Card Brand is Disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while corresponding payment method/card brand is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device, enters the lock screen passcode and signs-in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state without requiring login if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Standby State when navigating away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool successfully goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Out-of-Service State",
        "Test_Sce_Description": "Verify that the SA Tool is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components when it is in \u201cOut-of-Service\u201d state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Standby State",
        "Test_Sce_Description": "Verify that the SA Tool suspends all functionality and disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life when it is in Standby state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Revenue Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in the Revenue Mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Training Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in the Training Mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool Remote Access",
        "Test_Sce_Description": "Verify that the SA Tool Operators have remote access to the SA Tool."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that an authorized operator can successfully launch the SA Tool Application from the home screen of the SA Tool device. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application in Offline Mode",
        "Test_Sce_Description": "Verify that the SA Tool Application can operate in offline mode. The application should perform continuous diagnostic checks and indicate on the SA Tool if the device is unable to connect to a network. The sign-in screen should still be displayed."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application with Critical Failures",
        "Test_Sce_Description": "Verify that the SA Tool Application handles critical failures correctly during the initial self-diagnostic checks. The SA Tool should go to an error state if critical failures are found."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application with Storage, Battery or Secure Element Failures",
        "Test_Sce_Description": "Verify that the SA Tool Application handles failures in storage, battery or secure element correctly during the continuous self-diagnostic checks. The SA Tool should go to an out-of-service state and a critical event should be sent to SOTI Mobicontrol and CSM if errors or failures are found in these elements."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool Application and Third-Party Applications",
        "Test_Sce_Description": "Verify that an authorized operator can switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button present on the android navigation bar."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching to an Already Launched Application Running in the Background",
        "Test_Sce_Description": "Verify that an operator can switch to an application that is already launched and running in the background. The operator should be able to tap on the App Overview button on the bottom navigation bar and navigate through the list of open applications until they find the desired application."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Application Running in the Background",
        "Test_Sce_Description": "Verify that the SA Tool Application can run in the background while the operator is using another application. The SA Tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Application in Revenue Mode",
        "Test_Sce_Description": "Verify that the SA Tool Application operates correctly in Revenue Mode. The operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA Tool should only have access to the EPT in the revenue mode and accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Application in Training Mode",
        "Test_Sce_Description": "Verify that the SA Tool Application operates correctly in Training Mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Payment by credit/debit should not be enabled and all paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where at least one mean of payment is credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The system should automatically reverse non-credit and/or non-debit means of payment, and the operator should be able to choose the mean of payment for the refund void. The system should handle both successful and unsuccessful Moneris processing."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where none of the means of payment are credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The system should automatically reverse the payment means and prompt the operator to begin a refund void."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Product Quantity",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the quantity of a product added to the cart exceeds the maximum allowable amount. The system should not allow the operator to add more than the maximum allowable quantity to the shopping cart, and the operator should be able to process the customer\u2019s request in multiple transactions."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund or Reversal",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where no products are eligible for refund or reversal. The system should display the relevant error message and the operator should acknowledge the message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund or Reversal Not Requested by Customer",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where products are eligible for refund or reversal, but are not what the customer requested. The operator should inform the customer their product is not eligible for reversal or refund."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Failure to Connect to Internet",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where there is no internet connection and the operator is performing an action that requires connection to the Internet. The system should time out and display the relevant error message with options to try again or cancel."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device goes into out-of-service state. The system should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device goes into standby state. The system should disconnect from all the peripherals to conserve battery life, and the operator should be able to bring the device back into In-Service state by pressing the physical power button and signing in to the device lock screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "SA Tool Application Running in the Background",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool application is running but is not in the foreground. The system should disconnect from all the peripherals to conserve battery life, and the operator should be able to resume the functionality of the SA Tool application by switching back to it."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Revenue Mode. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The system should only have access to the EPT in the revenue mode and should accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Training Mode. In this mode, the operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. The system should not accept payment by credit/debit, and all paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Verify SA Tool in Out-of-Service State",
        "Test_Sce_Description": "Check if the SA Tool correctly enters the 'Out-of-Service' state when it is unable to accept a Farecard for any kind of functionality. Also, verify if the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off when the device goes into out-of-service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Verify SA Tool in Standby State",
        "Test_Sce_Description": "Check if the SA Tool correctly enters the 'Standby' state after remaining inactive for a configurable period of time or when the operator presses the physical power button. Also, verify if the SA Tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Verify SA Tool in Revenue Mode",
        "Test_Sce_Description": "Check if the SA Tool correctly enters the 'Revenue' mode upon logon and allows the operator to interact with customers. Also, verify if the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Verify SA Tool in Training Mode",
        "Test_Sce_Description": "Check if the SA Tool correctly enters the 'Training' mode upon logon and allows the operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Verify Alternate Flow - Operator navigates away from the SA Tool Application",
        "Test_Sce_Description": "Check if the SA Tool application correctly runs in the background and goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Verify Exception Flow - Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Check if the SA Tool application correctly notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Verify In-App Training and FAQs",
        "Test_Sce_Description": "Check if the operator can correctly access in-app training and frequently asked questions (FAQs) from the SA Tool home screen. Also, verify if the SA Tool correctly launches a lockdown browser and navigates to a web page that is populated with training modules and FAQs and other operator aids."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Verify Alternate Flow - Operator attempts to launch In-App Training and FAQ when SA Tool is Offline",
        "Test_Sce_Description": "Check if the SA Tool correctly launches a lockdown browser and loads and displays the last saved content (homepage) on the device when the operator selects the FAQ and Training option while the SA Tool is offline."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Verify Exception Flow - In-App Training has not been downloaded to the SA Tool",
        "Test_Sce_Description": "Check if the SA Tool correctly displays a toast message on the Inspection home screen notifying the operator that there is no content available when the In-App Training has not been downloaded to the SA Tool."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator is able to shut down the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with options including 'Power off'. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sign Out on Shut Down",
        "Test_Sce_Description": "Verify that when the SA Tool is shut down, the current operator is signed off from the tool. The operator's shift should not be closed if it is still open."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Other Options Functionality",
        "Test_Sce_Description": "Verify that the other options displayed on the confirmation message such as 'Reset', 'Airplane Mode', etc. are standard functions from the device\u2019s operating system and cannot be modified. Check the expected behaviours when these options are selected."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Reboot SA Tool",
        "Test_Sce_Description": "Verify that the operator is able to reboot the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with options including 'Restart'. Upon selecting 'Restart', the device should turn off and power on again."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. The operator's shift should not be closed unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Standby State",
        "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state where the screen will turn off after remaining inactive for a configurable period of time. Check that the SA tool disconnects from all the peripherals to conserve battery life in this state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Modes Functionality",
        "Test_Sce_Description": "Verify that the SA Tool has two modes: 'Revenue' and 'Training'. Check that operators with access to both modes are able to select which Mode they would like to operate their shift in. 'Training' users should only have access to Training mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Revenue Mode Functionality",
        "Test_Sce_Description": "Verify that in the Revenue Mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Training Mode Functionality",
        "Test_Sce_Description": "Verify that the Training Mode allows the operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Users Access",
        "Test_Sce_Description": "Verify that different users have different access to the SA Tool functionalities. For example, SA Tool Operators should have access to Revenue Mode, Sales, Fare Payment, Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "This scenario will test the normal flow of rebooting the SA Tool. The operator will press and hold the physical power button on the SA Tool, select the restart option from the confirmation message, and the device should restart successfully."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Airplane Mode",
        "Test_Sce_Description": "This scenario will test the functionality of the Airplane Mode option during the reboot process. The operator will press and hold the physical power button on the SA Tool, select the Airplane Mode option from the confirmation message, and the device should disable the network communications."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "This scenario will test the functionality of adjusting the device sound levels during the reboot process. The operator will press and hold the physical power button on the SA Tool, adjust the sound levels using the side buttons on the SA Tool, and the device should adjust the sound levels accordingly."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "This scenario will test the exception flow of rebooting the SA Tool. The operator will press and hold the physical power button on the SA Tool, select the restart option from the confirmation message, and the device should not restart due to an exception (e.g., low battery, insufficient memory, etc.)."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Alternate Flow",
        "Test_Sce_Description": "This scenario will test the alternate flow of rebooting the SA Tool. The operator will press and hold the physical power button on the SA Tool, select the Power off option from the confirmation message, and the device should power off instead of restarting."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "This scenario will test the performance of the SA Tool during the reboot process. The operator will press and hold the physical power button on the SA Tool, select the restart option from the confirmation message, and the device should restart within a reasonable amount of time."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "This scenario will test the security of the SA Tool during the reboot process. The operator will press and hold the physical power button on the SA Tool, select the restart option from the confirmation message, and the device should require the operator to enter their user ID and passcode after the device restarts."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State with SA Tool application running in the background",
        "Test_Sce_Description": "Verify that if the SA Tool PDS application is running but is not in the foreground, the application will be in Standby State. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Resuming functionality of SA Tool application",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that in the Revenue Mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State with Customer Interaction",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state, it does not detect the media when a customer attempts to tap their Open Payments Media on the card reader."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device configured for only farecard reversals",
        "Test_Sce_Description": "Verify that when the device is configured for only farecard reversals, it provides an error message 'Only Available for Farecard' to the cardholder when they attempt to tap their Open Payments Media on the card reader."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device in Pilot mode with unapproved media",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, it provides the 'Declined \u2013 Not Accepted, Tap Farecard' screen to the cardholder."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "BIN Blocking List",
        "Test_Sce_Description": "Verify that the device checks its local BIN Blocking list. If the card\u2019s BIN is found to be on the BIN Blocking List, the device should play the decline audio tone and display the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal with Interac Card while Interac is disabled",
        "Test_Sce_Description": "Verify that when the Cardholder taps the Interac media on the device Card Reader (CID) while the device is in reversal mode and Interac is disabled, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal with Open Payment Card while Open Payments are disabled",
        "Test_Sce_Description": "Verify that when the Cardholder taps the OP media on the device Card Reader (CID) while the device is in reversal mode and Open Payments are disabled, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal with Open Payment Card while corresponding payment method / card brand is disabled",
        "Test_Sce_Description": "Verify that when the Cardholder taps the OP media on the device Card Reader (CID) while the device is in reversal mode and the corresponding payment method / card brand is disabled, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device, enters the lock screen passcode and signs-in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state without requiring the operator to sign-in if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value that requires logging in."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Standby State when navigating away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool successfully goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Out-of-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully goes into out-of-service state and does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Standby State after inactivity",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Resuming functionality of the SA Tool application",
        "Test_Sce_Description": "Verify that the operator can successfully resume the functionality of the SA Tool application by switching back to the SA Tool application when it is running in the background."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Revenue Mode",
        "Test_Sce_Description": "Verify that the operator can successfully switch the SA Tool to Revenue Mode and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Training Mode",
        "Test_Sce_Description": "Verify that the operator can successfully switch the SA Tool to Training Mode and mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that an authorized operator can successfully launch the SA Tool Application from the home screen of the SA Tool device. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Power on SA Tool with no network connection",
        "Test_Sce_Description": "Verify that the SA Tool can operate in offline mode when the device is unable to connect to a network. The application should perform continuous diagnostic checks and indicate on the SA Tool that the device is unable to connect to a network. The sign-in screen should still be displayed."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Power on SA Tool with initial self-diagnostic check unsuccessful",
        "Test_Sce_Description": "Verify that the SA Tool goes to error state when initial self-diagnostic checks find critical failures. The application should perform initial self-diagnostic checks and go to error state if any critical failures are found."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Power on SA Tool with continuous self-diagnostic check unsuccessful",
        "Test_Sce_Description": "Verify that the SA Tool goes to out-of-service state when continuous self-diagnostic checks for storage, battery or secure element find errors or failures. A critical event should be sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that an authorized operator can switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button present on the android navigation bar."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Switching to an application already running in the background",
        "Test_Sce_Description": "Verify that the operator can switch to an application that is already running in the device background. The operator should be able to tap on the App Overview button on the bottom navigation bar and navigate through the list of open applications until they find the desired application."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool application can run in the background while the operator is using another application. The application should be in Standby State and disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool in Revenue Mode",
        "Test_Sce_Description": "Verify that the operator can select Revenue Mode upon logon to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool in Training Mode",
        "Test_Sce_Description": "Verify that the operator can select Training Mode upon logon to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where at least one mean of payment is credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The system should automatically reverse non-credit and/or non-debit means of payment, and the operator should be able to choose the mean of payment for the refund void. The system should handle both successful and unsuccessful Moneris processing."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where none of the means of payment are credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The system should automatically reverse the payment means and prompt the operator to begin a refund void."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Product Quantity",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the quantity of a product added to the cart exceeds the maximum allowable amount. The system should not allow the operator to add more than the maximum allowable quantity to the shopping cart, and the operator should be able to process the customer\u2019s request in multiple transactions."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund or Reversal",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where no products are eligible for refund or reversal. The system should display the relevant error message and the operator should acknowledge the message. The system should then return to the main menu."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund or Reversal Not Requested by Customer",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where products are eligible for refund or reversal, but are not what the customer requested. The operator should inform the customer their product is not eligible for reversal or refund, and then return to the main menu."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Failure to Connect to Internet",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where there is no internet connection and the operator is performing an action that requires connection to the Internet. The system should time out and display the relevant error message, with options to try again or cancel. If successful connection is restored, the system should resume the main use case. If the action is cancelled, the system should return to the previous screen."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool is in \u201cOut-of-Service\u201d state. The system should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool is in Standby state. The operator should be able to press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "SA Tool Application Running in the Background",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool application is running in the background. The operator should be able to switch back to the SA Tool application to resume its functionality."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the operator selects the Revenue Mode. The operator should be able to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the operator selects the Training Mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Out-of-Service State Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Operator Sign-in Persistence",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State Functionality",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State Peripheral Disconnection",
        "Test_Sce_Description": "Verify that once the SA Tool is in Standby state, it disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State Exit",
        "Test_Sce_Description": "Verify that once the SA Tool is in Standby state, an operator must press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "SA Tool Application Running in Background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "SA Tool Application Standby State",
        "Test_Sce_Description": "Verify that if the SA Tool PDS application is running but is not in the foreground, the application will be in Standby State. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "SA Tool Application Resume Functionality",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Revenue Mode Functionality",
        "Test_Sce_Description": "Verify that in Revenue Mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Training Mode Functionality",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Alternate Flow Functionality",
        "Test_Sce_Description": "Verify that the operator can switch to a third party application on SA Tool and the SA Tool application runs in the background and therefore goes into standby state."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Exception Flow Functionality",
        "Test_Sce_Description": "Verify that the operator can attempt to change SP on the login screen and the SA Tool application should notify the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training and FAQ Functionality",
        "Test_Sce_Description": "Verify that the operator can access in-app training and frequently asked questions (FAQs). The in-app training and FAQs should assist the operator and answer common questions on CLIENT and CLIENT products, as well as the usage of the application."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training and FAQ Offline Functionality",
        "Test_Sce_Description": "Verify that if the SA Tool is offline, the operator can select the FAQ and Training option and the SA Tool should launch a lockdown browser. The SA Tool should load and display the last saved content (homepage) on the device."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training and FAQ Update Functionality",
        "Test_Sce_Description": "Verify that if the SA Tool receives updated training content while the training is being played by the operator, the training should continue to play while the new content is downloaded to the device."
    },
    {
        "Function_Flow_Name": "Training Mode",
        "Sub_Flow_Name": "Reboot",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training and FAQ Exception Flow",
        "Test_Sce_Description": "Verify that if the In-App Training has not been downloaded to the SA Tool, the SA Tool should display a toast message on the Inspection home screen notifying the operator that there is no content available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator is able to shut down the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with options including 'Power off'. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sign Out",
        "Test_Sce_Description": "Verify that when a new operator attempts to sign in, a message indicates that the current operator is already signed in and asks if the new operator wants to sign in anyway. Upon selecting 'Yes', the current operator should be signed off from the SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Standby State",
        "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state where the screen will turn off after remaining inactive for a configurable period of time. In this state, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Reboot",
        "Test_Sce_Description": "Verify that the operator is able to reboot the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with options including 'Restart'. Upon selecting 'Restart', the device should turn off and power on again."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon, the operator is able to select the Revenue Mode which allows the operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool User Access",
        "Test_Sce_Description": "Verify that different users have different access rights. For example, SA Tool Operators should have access to Revenue Mode, Core Functionality - Sales, Core Functionality - Fare Payment, Core Functionality - Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are correctly implemented and functioning as expected."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "Verify that the SA Tool reboots successfully when the operator selects the restart option. The tool should turn off and power on again as expected. Check the functionality of the tool post reboot to ensure it is working as expected."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Airplane Mode",
        "Test_Sce_Description": "Verify that the SA Tool disables network communications when the Airplane Mode is selected. The tool should not be able to perform any inspections, counters, and queries. An airplane icon should be displayed in the top notification bar when this mode is enabled. Verify that the operator can disable the airplane mode by pressing and holding the power button, and selecting the airplane mode option."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool. The minimum limit for volume should be configurable. Check the functionality of the sound levels post reboot to ensure it is working as expected."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "Verify that the SA Tool goes to error state when it performs initial self-diagnostic checks and finds critical failures. The tool should not be able to perform any operations in this state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Alternate Flow",
        "Test_Sce_Description": "Verify that the SA Tool goes to out-of-service state when it performs the continuous self-diagnostics for storage, battery or secure element and finds errors or failures in any of these elements. A critical event should be sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "Verify that the SA Tool maintains the security of the data during the reboot process. No data should be lost or corrupted during the reboot. The tool should require the operator to sign in again post reboot to ensure security."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "Verify that the SA Tool reboots within the acceptable time limit. The tool should not hang or slow down during the reboot process. Check the performance of the tool post reboot to ensure it is working as expected."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State with SA Tool application running in the background",
        "Test_Sce_Description": "Verify that if the SA Tool PDS application is running but is not in the foreground, the application will be in Standby State. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Resuming functionality of SA Tool application",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that in Revenue Mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that in Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State with Open Payments Media",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device configured for only farecard reversals",
        "Test_Sce_Description": "Verify that when the device is configured for only farecard reversals and a customer attempts to tap their Open Payments Media on the card reader, the 'Only Available for Farecards' error message is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device in Pilot mode with unapproved Open Payments media",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Open Payments Media on the BIN Blocking List",
        "Test_Sce_Description": "Verify that when a customer\u2019s Open Payments Media is on the BIN Blocking List, the device plays the decline audio tone and displays the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversing fare payment with Interac Card while Interac is disabled on SA Tool",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Interac Card while Interac is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversing fare payment with Open Payment Card while Open Payments are disabled on SA Tool",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while Open Payments are disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversing fare payment with Open Payment Card while corresponding payment method / card brand is disabled on SA Tool",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while corresponding payment method / card brand is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device, enters the lock screen passcode and signs in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state without requiring login if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Standby State when navigating away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool successfully goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Out-of-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully goes into out-of-service state and does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Standby State after inactivity",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Standby State when running in the background",
        "Test_Sce_Description": "Verify that the SA Tool successfully goes into Standby State when the SA Tool application is running but is not in the foreground."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Revenue Mode",
        "Test_Sce_Description": "Verify that the operator can successfully select the Revenue Mode upon logon and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Training Mode",
        "Test_Sce_Description": "Verify that the operator can successfully select the Training Mode upon logon and mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that the authorized operator is able to launch the SA Tool Application successfully from the home screen of the SA Tool device. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Continuous Diagnostic Check Failure - Network Connection",
        "Test_Sce_Description": "Verify that the SA Tool Application is able to identify when it is unable to connect to a network during the continuous diagnostic checks. The device should indicate this status and allow the operator to proceed in offline mode, with certain functionalities unavailable."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Initial Self-Diagnostic Check Failure",
        "Test_Sce_Description": "Verify that the SA Tool Application is able to identify critical failures during the initial self-diagnostic checks. The device should go to an error state upon detection of such failures."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Continuous Diagnostic Check Failure - Storage, Battery or Secure Element",
        "Test_Sce_Description": "Verify that the SA Tool Application is able to identify errors or failures in storage, battery or secure element during the continuous self-diagnostic checks. The device should go to an out-of-service state and send a critical event to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that the operator is able to switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications, find the desired app, and launch it."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching to an Already Launched Application Running in the Background",
        "Test_Sce_Description": "Verify that the operator is able to switch to an application that is already launched and running in the background. The operator should be able to navigate through the list of open applications and launch the desired application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Application Running in the Background",
        "Test_Sce_Description": "Verify that the SA Tool Application is able to run in the background while the operator is using another application. The application should disconnect from all peripherals to conserve battery life and resume functionality when the operator switches back to it."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Application in Revenue Mode",
        "Test_Sce_Description": "Verify that the operator is able to select and operate in Revenue Mode upon logon. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Application in Training Mode",
        "Test_Sce_Description": "Verify that the operator is able to select and operate in Training Mode upon logon. In this mode, the operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where at least one mean of payment is credit or debit. The system should prompt the operator to confirm cancellation, reverse non-credit/debit payments automatically, and require the operator to choose a mean of payment for a refund void. The system should also handle both successful and unsuccessful Moneris processing correctly."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where none of the means of payment are credit or debit. The system should prompt the operator to confirm cancellation and reverse the payment means automatically. The system should also prompt the operator to begin a refund void."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Product Quantity",
        "Test_Sce_Description": "Verify that the system correctly prevents the operator from adding more than the maximum allowable quantity of a product to the shopping cart. The system should inform the operator that they must process the customer's request in multiple transactions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund/Reversal",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where no products are eligible for refund or reversal. The system should display an error message and return to the main menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund/Reversal Not Requested by Customer",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the products eligible for refund or reversal are not what the customer requested. The operator should inform the customer that their product is not eligible and return to the main menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Internet Connection Failure",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the internet connection is lost during a flow that requires internet connection. The system should display an error message and provide options to try again or cancel."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool is in an 'Out-of-Service' state. The system should not close the operator's shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the system correctly enters and exits the Standby state. The system should turn off the screen after a period of inactivity or when the power button is pressed. The system should also disconnect from all peripherals to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Revenue Mode. The operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The system should also only accept credit and debit payments in this mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Training Mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. The system should also only accept non-revenue Farecard in this mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. Also, if an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Standby State",
        "Test_Sce_Description": "Verify that the SA Tool can switch into a Standby state after remaining inactive for a configurable period of time, and that the screen turns off in this state. Also, check if the operator can press the physical power button to switch the SA Tool into standby state directly. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground (i.e., the operator is using another application), the application should be in Standby State."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Revenue Mode",
        "Test_Sce_Description": "Verify that in the Revenue Mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Alternate Flow",
        "Test_Sce_Description": "Verify that the operator can switch to a third party application on SA Tool. The SA Tool application should run in the background and therefore go into standby state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Exception Flow",
        "Test_Sce_Description": "Verify that when the operator attempts to change SP on the login screen, the SA Tool application notifies the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing In-App Training and FAQ",
        "Test_Sce_Description": "Verify that the operator can access in-app training and frequently asked questions (FAQs). The in-app training and FAQs should assist the operator and answer common questions on CLIENT and CLIENT products, as well as the usage of the application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Configurable Functionality",
        "Test_Sce_Description": "Verify that the SA Tool Operators, SA Tool Operators - 3rd Party, SDistance based Transitrvisors, Maintenance, Training have the correct access and functionality as per the requirements."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are working as expected."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator is able to shut down the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with the options 'Power off' and other standard functions. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sign Off on Shut Down",
        "Test_Sce_Description": "Verify that when the SA Tool is shut down, the current operator is signed off from the tool. This should happen regardless of whether the operator manually signs off before shutting down the tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Restart Option",
        "Test_Sce_Description": "Verify that when the operator presses and holds the physical power button, the restart option is displayed among other options. Upon selecting the restart option, the device should restart by turning off and powering on."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Airplane Mode",
        "Test_Sce_Description": "Verify that the 'Airplane Mode' option disables the network communications when selected. The device should not be able to perform any inspections, counters and queries. An airplane icon should be displayed in the top notification bar when this mode is enabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool. The minimum limit for volume should be configurable."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. The SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Standby State",
        "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state where the screen turns off after remaining inactive for a configurable period of time. In this state, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Revenue Mode",
        "Test_Sce_Description": "Verify that in the Revenue Mode, the SA Tool operator can interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The tool should only have access to the EPT in the revenue mode and accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Training Mode",
        "Test_Sce_Description": "Verify that in the Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool User Configurable Functionality",
        "Test_Sce_Description": "Verify that the SA Tool allows different users to access different functionalities based on their roles. For example, SA Tool Operators should have access to Revenue Mode, Sales, Fare Payment, Inspection, Remote Access, Unblock Farecard, and Modify Card Concession."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "Verify that the SA Tool reboots successfully when the operator selects the restart option from the power menu. The tool should turn off and then power back on."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Airplane Mode",
        "Test_Sce_Description": "Verify that the SA Tool disables network communications when the operator selects the 'Airplane Mode' option from the power menu. An airplane icon should be displayed in the top notification bar when this mode is enabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool. The minimum limit for volume should be configurable."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "Verify that the SA Tool reboots within an acceptable time frame when the operator selects the restart option from the power menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "Verify that the SA Tool maintains all security settings and user data after a reboot."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "Verify that the SA Tool handles exceptions correctly during the reboot process. For example, if the device's battery level is too low to complete the reboot, the tool should display an appropriate error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Alternate Flow",
        "Test_Sce_Description": "Verify that the SA Tool can handle alternate flows during the reboot process. For example, if the operator selects the 'Power off' option instead of the 'Restart' option from the power menu, the tool should power off instead of rebooting."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State with peripherals",
        "Test_Sce_Description": "Verify that once in the standby mode, the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator can launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground, the application will be in Standby State."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator will be able to select which mode they would like to operate their shift in. The Revenue Mode allows the SA Tool operator to interact with customers. In this mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard will be accepted in Training Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State with Open Payments Media",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device configured for farecard reversals only",
        "Test_Sce_Description": "Verify that when the device is configured for only farecard reversals and a customer attempts to tap their Open Payments Media on the card reader, the 'Only Available for Farecards' error message is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device in Pilot mode with unapproved media",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device, enters the lock screen passcode and signs in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state without requiring login if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Standby State when navigating away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool successfully goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Standby State",
        "Test_Sce_Description": "Verify that all SA Tool functionality is suspended when in Standby state and the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Resuming SA Tool functionality from Standby State",
        "Test_Sce_Description": "Verify that the operator can resume the functionality of the SA Tool application by switching back to the SA Tool application when it is running in the background."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Revenue Mode",
        "Test_Sce_Description": "Verify that the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in the Revenue Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Training Mode",
        "Test_Sce_Description": "Verify that the operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in the Training Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Access to Revenue Mode for different users",
        "Test_Sce_Description": "Verify that only SA Tool Operators have access to Revenue Mode and not the Training users."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Access to Core Functionality for different users",
        "Test_Sce_Description": "Verify that only SA Tool Operators have access to Core Functionality - Sales, Fare Payment, Inspection and not the Training users."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool Remote Access for different users",
        "Test_Sce_Description": "Verify that only SA Tool Operators have access to SA Tool Remote Access and not the Training users."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Unblock Farecard functionality for different users",
        "Test_Sce_Description": "Verify that only SA Tool Operators have the ability to Unblock Farecard and not the Training users."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Modify Card Concession functionality for different users",
        "Test_Sce_Description": "Verify that only SA Tool Operators have the ability to Modify Card Concession and not the Training users."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are correctly implemented."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that the authorized operator is able to launch the SA Tool Application successfully. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. After successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Application Launch with Network Connection Unavailable",
        "Test_Sce_Description": "Verify that the SA Tool Application is able to launch even when the network connection is not available. The application should perform continuous diagnostic checks and indicate on the tool that the device is unable to connect to a network. The application should operate in offline mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Application Launch with Initial Self-Diagnostic Check Unsuccessful",
        "Test_Sce_Description": "Verify that the SA Tool Application handles the scenario when the initial self-diagnostic check is unsuccessful. The application should perform initial self-diagnostic checks and if it finds critical failures, it should go to error state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Application Launch with Continuous Self-Diagnostic Check Unsuccessful",
        "Test_Sce_Description": "Verify that the SA Tool Application handles the scenario when the continuous self-diagnostic check for storage, battery or secure element is unsuccessful. The application should perform the continuous self-diagnostics and if it finds errors or failures in any of these elements, it should go to out-of-service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that the authorized operator is able to switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications and launch the desired application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching to an Application Already Running in the Background",
        "Test_Sce_Description": "Verify that the operator is able to switch to an application that is already running in the device background. The operator should be able to navigate through the list of open applications and launch the desired application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Application Running in the Background",
        "Test_Sce_Description": "Verify that the SA Tool Application is able to run in the background while the operator is using another application. The application should disconnect from all the peripherals to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Application in Revenue Mode",
        "Test_Sce_Description": "Verify that the SA Tool Application operates correctly in Revenue Mode. The operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Application in Training Mode",
        "Test_Sce_Description": "Verify that the SA Tool Application operates correctly in Training Mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Application in Out-of-Service State",
        "Test_Sce_Description": "Verify that the SA Tool Application handles the scenario when it goes into out-of-service state. The application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where at least one mean of payment is credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. Upon confirmation, the system should reverse non-credit/debit means of payment automatically, and the operator should be able to choose the mean of payment for the refund void. The system should then process the refund and return to the home screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where none of the means of payment are credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. Upon confirmation, the system should reverse the payment means automatically and prompt the operator to begin a refund void. The system should then process the refund and return to the home screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Product Quantity",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the quantity of a product added to the cart exceeds the maximum allowable amount. The system should not allow the operator to add more than the maximum allowable quantity to the shopping cart, and the operator should be able to process the customer\u2019s request in multiple transactions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund/Reversal",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where no products are eligible for refund or reversal. The system should display the relevant error message and return to the main menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund/Reversal Not Requested by Customer",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where products are eligible for refund or reversal, but are not what the customer requested. The operator should be able to inform the customer that their product is not eligible for reversal or refund, and return to the main menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Failure to Connect to Internet",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where there is no internet connection. The system should time out and display the relevant error message, with options to try again or cancel. If the connection is restored, the system should resume the main use case. If the action is cancelled, the system should return to the previous screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device goes into out-of-service state. The system should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device goes into standby state. The system should disconnect from all peripherals to conserve battery life, and the operator should be able to press the physical power button and sign-in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "SA Tool Application Running in Background",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool application is running in the background. The system should disconnect from all peripherals to conserve battery life, and the operator should be able to switch back to the SA Tool application to resume functionality."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Revenue Mode. The operator should be able to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The system should only have access to the EPT in the revenue mode and accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Training Mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. The system should not accept payment by credit/debit, and all paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Out-of-Service State Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Operator Sign-off in Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State Functionality",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State with Third-Party Applications",
        "Test_Sce_Description": "Verify that if the SA Tool PDS application is running but is not in the foreground (i.e., the operator is using another application), the application will be in Standby State."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Resuming Functionality from Standby State",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Revenue Mode Functionality",
        "Test_Sce_Description": "Verify that in Revenue Mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Training Mode Functionality",
        "Test_Sce_Description": "Verify that in Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Alternate Flow: Operator Navigates Away from SA Tool Application",
        "Test_Sce_Description": "Verify that when the operator switches to a third party application on SA Tool, the SA Tool application runs in the background and therefore goes into standby state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Exception Flow: Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that when the operator attempts to change SP on the login screen, the SA Tool application notifies the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training and FAQ Functionality",
        "Test_Sce_Description": "Verify that the operator can access in-app training and frequently asked questions (FAQs) to assist the operator and answer common questions on CLIENT and CLIENT products, as well as the usage of the application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Alternate Flow: Operator Attempts to Launch In-App Training and FAQ when SA Tool is Offline",
        "Test_Sce_Description": "Verify that when the SA Tool is offline, the SA Tool loads and displays the last saved content (homepage) on the device when the operator selects the FAQ and Training option."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Exception Flow: In-App Training has not been downloaded to the SA Tool",
        "Test_Sce_Description": "Verify that when the In-App Training has not been downloaded to the SA Tool, the SA Tool displays a toast message on the Inspection home screen notifying the operator that there is no content available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the SA Tool shuts down correctly when the physical power button is pressed and held. The tool should display a confirmation message with options including 'Power off'. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sign Off Upon New Operator Sign In",
        "Test_Sce_Description": "Verify that when a new operator attempts to sign in to the SA Tool while a current operator is signed in, a message is displayed indicating that the current operator is signed in and asking if the new operator wants to sign in anyway. Upon selecting 'Yes', the current operator should be signed off from the SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Standby State",
        "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state where the screen turns off after remaining inactive for a configurable period of time. In this state, the SA Tool should disconnect from all peripherals to conserve battery life. An operator should be able to press the physical power button and sign-in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Reboot",
        "Test_Sce_Description": "Verify that the SA Tool reboots correctly when the physical power button is pressed and held. The tool should display a confirmation message with options including 'Restart'. Upon selecting 'Restart', the device should turn off and power on again."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Revenue Mode",
        "Test_Sce_Description": "Verify that in Revenue Mode, the SA Tool operator can interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The tool should only have access to the EPT in the revenue mode and should accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Training Mode",
        "Test_Sce_Description": "Verify that in Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode and should not be a form of valid proof of payment."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool User Access",
        "Test_Sce_Description": "Verify that different users have appropriate access to the SA Tool functionalities. For example, SA Tool Operators should have access to Revenue Mode, Core Functionality - Sales, Core Functionality - Fare Payment, Core Functionality - Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession. Training users should not have access to these functionalities."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are correctly implemented and functioning as expected."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "Verify that the SA Tool reboots successfully when the operator selects the restart option. The tool should turn off and power on again as expected. This test will check the functionality of the reboot process."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Airplane Mode",
        "Test_Sce_Description": "Verify that the SA Tool disables network communications when the Airplane Mode is selected. The device should not be able to perform any inspections, counters, and queries. An airplane icon should be displayed in the top notification bar when this mode is enabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool. The minimum limit for volume should be configurable. This test will check the functionality of the sound adjustment feature."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Power Off",
        "Test_Sce_Description": "Verify that the SA Tool powers off when the operator selects the 'Power off' option. The tool should ask the operator to confirm the shut-down and then turn off as expected. This test will check the functionality of the power off process."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "Verify that the SA Tool handles exceptions correctly during the reboot process. For example, if the tool encounters a critical failure during the self-diagnostic checks, it should go to an error state. This test will check the tool's error handling capabilities."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Alternate Flow",
        "Test_Sce_Description": "Verify that the SA Tool handles alternate flows correctly during the reboot process. For example, if the operator selects an option other than 'Restart', the tool should perform the corresponding action (e.g., enabling Airplane Mode, adjusting sound levels, etc.). This test will check the tool's ability to handle alternate flows."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "Verify that the SA Tool reboots within an acceptable time frame. The tool should not take an excessively long time to reboot, as this could disrupt the operator's workflow. This test will check the performance of the reboot process."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "Verify that the SA Tool maintains security during the reboot process. For example, the tool should not expose any sensitive information during the reboot, and it should require the operator to sign in again after the reboot. This test will check the security of the reboot process."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State Functionality",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State Power Button Functionality",
        "Test_Sce_Description": "Verify that the operator can press the physical power button to switch the SA Tool into standby state directly. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State Resume Functionality",
        "Test_Sce_Description": "Verify that once the SA Tool is in Standby state (screen turned off), an operator must press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "SA Tool Application Running in Background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground (i.e., the operator is using another application), the application should be in Standby State."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "SA Tool Application Resume Functionality",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode Functionality",
        "Test_Sce_Description": "Verify that upon logon the operator will be able to select which mode they would like to operate their shift in. The Revenue Mode should allow the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode Functionality",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State with Customer Interaction",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state, if a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device Configured for Farecard Reversals Only",
        "Test_Sce_Description": "Verify that when the device is configured for only farecard reversals, if a customer attempts to tap their Open Payments Media on the card reader, the 'Only Available for Farecards' error message is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device in Beta Mode with Unapproved Media",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Open Payments Media on the BIN Blocking List",
        "Test_Sce_Description": "Verify that when a customer's Open Payments Media is on the BIN Blocking List, the device checks its local BIN Blocking list, plays the decline audio tone and displays the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Interac Card Reversal with Interac Disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Interac Card while Interac is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Open Payment Card Reversal with Open Payments Disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while Open Payments are disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Open Payment Card Reversal with Corresponding Payment Method Disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while corresponding payment method / card brand is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device, enters the lock screen passcode and signs in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state without requiring login if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Standby State when navigating away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool successfully goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Standby State",
        "Test_Sce_Description": "Verify that all SA Tool functionality is suspended while in Standby state and the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Resuming functionality of the SA Tool application",
        "Test_Sce_Description": "Verify that the operator can resume the functionality of the SA Tool application by switching back to the SA Tool application when the SA Tool application is running in the background."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Operating SA Tool in Revenue Mode",
        "Test_Sce_Description": "Verify that the operator can interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in the Revenue Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Operating SA Tool in Training Mode",
        "Test_Sce_Description": "Verify that the operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in the Training Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Accessing Revenue Mode by different users",
        "Test_Sce_Description": "Verify that only SA Tool Operators can access Revenue Mode and perform core functionalities like sales, fare payment, inspection, SA Tool remote access, unblock farecard, and modify card concession."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that the authorized operator is able to launch the SA Tool Application successfully. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Unsuccessful Continuous Self-Diagnostic Check (Network Connection)",
        "Test_Sce_Description": "Verify that the SA Tool Application is able to operate in offline mode when the device is unable to connect to a network. The application should indicate this on the SA Tool. The forget passcode and passcode change functionalities should be unavailable in this mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Unsuccessful Initial Self-Diagnostic Check",
        "Test_Sce_Description": "Verify that the SA Tool Application goes to error state when it performs initial self-diagnostic checks and finds critical failures."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Unsuccessful Continuous Self-Diagnostic Check (Storage, Battery or Secure Element)",
        "Test_Sce_Description": "Verify that the SA Tool Application goes to out-of-service state when it performs the continuous self-diagnostics for storage, battery or secure element and finds errors or failures in any of these elements. A critical event should be sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that the authorized operator is able to switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button present on the android navigation bar."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: The application is already launched and is running in the background",
        "Test_Sce_Description": "Verify that the operator is able to launch the application that is already running in the device background. The operator should be able to navigate through the list of open applications until they find the desired application and press on it to launch."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the SA Tool Application is unable to accept a Farecard for any kind of functionality when it is in \u201cOut-of-Service\u201d state. The application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the SA Tool Application is able to switch into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time. The SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the SA Tool Application allows the operator to interact with customers in Revenue Mode. The operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the SA Tool Application allows the operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where at least one mean of payment is credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The system should automatically reverse non-credit and/or non-debit means of payment. The operator should then choose the mean of payment and verbally prompt the customer to interact with the PIN pad to perform a refund void. The system should handle both successful and unsuccessful Moneris processing."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where none of the means of payment are credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The system should automatically reverse the payment means and prompt the operator to begin a refund void."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Quantity",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the quantity of a product added to the cart exceeds the maximum allowable amount. The system should not allow the operator to add more than the maximum allowable quantity to the shopping cart. The operator should be able to process the customer\u2019s request in multiple transactions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund or Reversal",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where no eligible products for refund or reversal are detected. The system should display the relevant error message and the operator must acknowledge the message. The system should then return to the main menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund or Reversal Not Requested by Customer",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where products are eligible for refund or reversal, but are not what the customer requested. The operator should inform the customer their product is not eligible for reversal or refund and return to the main menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Failure to Connect to Internet",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where there is no internet connection and the operator is performing an action that requires connection to the Internet. The system should time out and display the relevant error message with options to try again or cancel."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device goes into out-of-service state. The system should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device goes into standby state. The system should disconnect from all the peripherals to conserve battery life. The operator should be able to press the physical power button and sign-in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "SA Tool Application Running in the Background",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool application is running but is not in the foreground. The system should disconnect from all the peripherals to conserve battery life. The operator should be able to switch back to the SA Tool application to resume its functionality."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Revenue Mode. The operator should be able to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The system should only have access to the EPT in the revenue mode and accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Training Mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. The system should not accept payment by credit/debit and all paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "User Access",
        "Test_Sce_Description": "Verify that the system correctly handles user access. The system should allow SA Tool Operators to access Revenue Mode, perform core functionality (Sales, Fare Payment, Inspection), access SA Tool Remote Access, Unblock Farecard, and Modify Card Concession. The system should not allow Training users to access these functionalities."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the system correctly handles the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Out-of-Service State Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. Also, if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State Functionality",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off. Also, verify that the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "SA Tool Application Running in Background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground (i.e., the operator is using another application), the application should be in Standby State."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Revenue Mode Functionality",
        "Test_Sce_Description": "Verify that upon logon the operator is able to select which mode they would like to operate their shift in. The Revenue Mode should allow the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Training Mode Functionality",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. This allows for thorough training directly at the SA Tool. Payment by credit /debit should not be enabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Alternate Flow Functionality",
        "Test_Sce_Description": "Verify that the operator can switch to a third party application on SA Tool. The SA Tool application should run in the background and therefore go into standby state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Exception Flow Functionality",
        "Test_Sce_Description": "Verify that when the operator attempts to change SP on the login screen, the SA Tool application notifies the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training and FAQ Functionality",
        "Test_Sce_Description": "Verify that the operator can access in-app training and frequently asked questions (FAQs). The in-app training and FAQs should assist the operator and answer common questions on CLIENT and CLIENT products, as well as the usage of the application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Offline SA Tool Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool is offline, the operator can select the FAQ and Training option. The SA Tool should launch a lockdown browser. The SA Tool should load and display the last saved content (homepage) on the device."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training Update Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool receives updated training content, the training being played by the operator continues to play while the new content is downloaded to the device. Once the download has completed it should be available the next time the In-App Training and FAQ is launched."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the SA Tool shuts down correctly when the physical power button is pressed and held. The tool should display a confirmation message with options including 'Power off'. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sign In",
        "Test_Sce_Description": "Verify that a new operator can sign in to the SA Tool even if a current operator is already signed in. The tool should display a message indicating that another operator is signed in and ask if the new operator wants to sign in anyway. Upon selecting 'Yes', the current operator should be signed off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any functionality and may require maintenance. If an operator is signed in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Standby State",
        "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state after remaining inactive for a configurable period of time. In this state, the screen should turn off and the tool should disconnect from all peripherals to conserve battery life. An operator should be able to bring the device back into In-Service state by pressing the physical power button and signing in to the device lock screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Reboot",
        "Test_Sce_Description": "Verify that the SA Tool can be manually rebooted at any time. The operator should be able to press and hold the physical power button to display a confirmation message with options including 'Restart'. Upon selecting 'Restart', the device should turn off and power on again."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Modes",
        "Test_Sce_Description": "Verify that the SA Tool operates correctly in both 'Revenue' and 'Training' modes. Operators with access to both modes should be able to select which mode they want to operate their shift in upon logon. In 'Revenue' mode, the operator should be able to interact with customers and perform various functions. In 'Training' mode, the operator should be able to mimic all functionality available within Sales Mode without accepting payment."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool User Access",
        "Test_Sce_Description": "Verify that different types of users have appropriate access to the SA Tool. For example, SA Tool Operators should have access to Revenue Mode and be able to perform core functionality such as Sales, Fare Payment, and Inspection. They should also be able to unblock Farecards and modify Card Concession."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are correctly implemented and function as expected."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "Verify that the SA Tool reboots successfully when the operator selects the restart option from the power menu. The tool should turn off and then power on again, as described in the main use case."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Airplane Mode",
        "Test_Sce_Description": "Verify that the SA Tool disables network communications when the operator selects the 'Airplane Mode' option from the power menu. An airplane icon should be displayed in the top notification bar when this mode is enabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool. The minimum limit for volume should be configurable."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Power Off",
        "Test_Sce_Description": "Verify that the SA Tool powers off when the operator selects the 'Power Off' option from the power menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "Verify that the SA Tool handles exceptions correctly. For example, if the device is unable to restart due to a critical error, the tool should display an appropriate error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "Verify that the SA Tool reboots within an acceptable time frame. The tool should not take an excessively long time to restart."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "Verify that the SA Tool maintains security during the reboot process. For example, any sensitive data should be securely wiped from memory during the reboot."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Alternate Flow",
        "Test_Sce_Description": "Verify that the SA Tool handles alternate flows correctly. For example, if the operator selects the 'Reset' option from the power menu, the tool should perform a factory reset."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State Functionality",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State Power Button Functionality",
        "Test_Sce_Description": "Verify that the operator can press the physical power button to switch the SA Tool into standby state directly. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State Resume Functionality",
        "Test_Sce_Description": "Verify that once the SA Tool is in Standby state (screen turned off), an operator must press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "SA Tool Application Running in Background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground (i.e., the operator is using another application), the application should be in Standby State."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Resuming SA Tool Application Functionality",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode Functionality",
        "Test_Sce_Description": "Verify that upon logon the operator will be able to select which mode they would like to operate their shift in. The Revenue Mode should allow the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode Functionality",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. This should allow for thorough training directly at the SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "User Configurable Functionality",
        "Test_Sce_Description": "Verify that the SA Tool provides configurable functionality for different types of users such as SA Tool Operators, SA Tool Operators - 3rd Party, Distance based Transitrvisors, Maintenance, and Training."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device, enters the lock screen passcode and signs in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state without requiring login if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Standby State when navigating away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool successfully goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Standby State",
        "Test_Sce_Description": "Verify that all SA Tool functionality is suspended while in Standby state and the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality when running in the background",
        "Test_Sce_Description": "Verify that the SA Tool application runs in the background and goes into Standby State when the operator is using another application, and resumes functionality when the operator switches back to the SA Tool application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Revenue Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in Revenue Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Training Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in Training Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Access to Revenue Mode for different users",
        "Test_Sce_Description": "Verify that only SA Tool Operators have access to Revenue Mode and not Training users."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that an authorized operator can successfully launch the SA Tool Application from the home screen of the SA Tool device. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Unsuccessful Continuous Self-Diagnostic Check (Network Connection)",
        "Test_Sce_Description": "Verify that the SA Tool Application can operate in offline mode when the device is unable to connect to a network. The application should perform continuous diagnostic checks and indicate on the SA Tool when the network connection is not available. Forget passcode and passcode change functionalities should be unavailable in this mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Unsuccessful Initial Self-Diagnostic Check",
        "Test_Sce_Description": "Verify that the SA Tool goes to error state when the initial self-diagnostic checks find critical failures. The application should perform initial self-diagnostic checks and go to error state upon finding any critical failures."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Unsuccessful Continuous Self-Diagnostic Check (Storage, Battery or Secure Element)",
        "Test_Sce_Description": "Verify that the SA Tool goes to out-of-service state when the continuous self-diagnostic checks for storage, battery or secure element find errors or failures. A critical event should be sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that an authorized operator can switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button present on the android navigation bar."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Switching to an Application Running in the Background",
        "Test_Sce_Description": "Verify that the operator can switch to an application that is already running in the device background. The operator should be able to tap on the App Overview button on the bottom navigation bar and navigate through the list of open applications until they find the desired application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Application Running in the Background",
        "Test_Sce_Description": "Verify that the SA Tool application can run in the background while the operator is using another application. The application should be in Standby State and disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching SA Tool to Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon, the operator can select to operate their shift in Revenue Mode. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA tool should only have access to the EPT in the revenue mode and accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching SA Tool to Training Mode",
        "Test_Sce_Description": "Verify that upon logon, the operator can select to operate their shift in Training Mode. In this mode, the operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Remote Access",
        "Test_Sce_Description": "Verify that SA Tool Operators have remote access to the SA Tool. The operators should be able to perform core functionalities such as sales, fare payment, inspection, unblock farecard, and modify card concession remotely."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a split payment refund/reversal has already begun and the customer has been refunded with at least one mean of payment that is credit or debit. The operator should be able to select to cancel the transaction, and the SA Tool should inform the operator that the payment means must be reversed. The operator should be able to confirm the cancellation of the transaction, and the SA Tool should reverse non-credit and/or non-debit means of payment automatically. The operator should then choose the mean of payment and verbally prompt the customer to interact with the PIN pad to perform a refund void. The test should verify that upon successful Moneris processing, the customer has repaid for the refund amount and a customer receipt with Moneris information always prints."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a split payment refund/reversal has already begun and the customer has been refunded with at least one mean of payment that is not credit or debit. The operator should be able to select to cancel the transaction, and the SA Tool should inform the operator that the payment means must be reversed. The operator should be able to confirm the cancellation of the transaction, and the SA Tool should reverse the payment means automatically and prompt the operator to begin a refund void. The test should verify that a customer and merchant receipt print and the SA Tool returns to the home screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Product Quantity",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the quantity of product added to the cart exceeds the maximum allowable amount. The operator should be informed that they must process the customer's request in multiple transactions. The test should verify that the SA Tool does not allow the operator to add more than the maximum allowable quantity to the shopping cart and that the operator must process the customer\u2019s request in multiple transactions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund or Reversal",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when there are no eligible products for refund or reversal. The test should verify that the SA Tool displays the relevant error message and the operator must acknowledge the message. The SA Tool should then return to the main menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund or Reversal Not Requested by Customer",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when there are products available for refund or reversal other than the product requested by the customer. The operator should inform the customer their product is not eligible for reversal or refund and return to the main menu. The test should verify that all these steps are followed correctly."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Failure to Connect to Internet",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when there is no internet connection and the operator is performing an action that requires connection to the Internet. The test should verify that the SA Tool times out and displays the relevant error message with options to try again or cancel. If successful connection is restored, the test should verify that the main use case is resumed. If the action is cancelled, the test should verify that the SA Tool returns to the previous screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in an \u201cOut-of-Service\u201d state. The test should verify that the SA Tool is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the test should verify that the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in a Standby state. The test should verify that the SA Tool switches into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time. The test should also verify that the SA Tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life when in Standby state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Revenue Mode. The test should verify that the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The test should also verify that the SA Tool only has access to the EPT in the revenue mode and accepts credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Training Mode. The test should verify that the operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. The test should also verify that only non-revenue Farecard will be accepted in Training Mode and that payment by credit /debit is not enabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Out-of-Service State Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Operator Sign-in Persistence",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State Functionality",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State Power Button Functionality",
        "Test_Sce_Description": "Verify that the operator can press the physical power button to switch the SA Tool into standby state directly. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State to In-Service State Transition",
        "Test_Sce_Description": "Verify that once the SA Tool is in Standby state (screen turned off), an operator must press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "SA Tool Application Running in Background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground (i.e., the operator is using another application), the application should be in Standby State."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Resuming SA Tool Application Functionality",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Revenue Mode Functionality",
        "Test_Sce_Description": "Verify that upon logon the operator will be able to select which mode they would like to operate their shift in. The Revenue Mode should allow the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Training Mode Functionality",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. This allows for thorough training directly at the SA Tool. Payment by credit /debit should not be enabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Alternate Flow Functionality",
        "Test_Sce_Description": "Verify that the operator can switch to a third party application on SA Tool. The SA Tool application should run in the background and therefore go into standby state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Exception Flow Functionality",
        "Test_Sce_Description": "Verify that the operator can attempt to change SP on the login screen. The SA Tool application should notify the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training and FAQ Functionality",
        "Test_Sce_Description": "Verify that this Use Case describes the steps for an operator to access in-app training and frequently asked questions (FAQs). The in-app training and FAQs should assist the operator and answer common questions on CLIENT and CLIENT products, as well as the usage of the application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Offline SA Tool Functionality",
        "Test_Sce_Description": "Verify that if the SA Tool is offline, the operator can select the FAQ and Training option. The SA Tool should launch a lockdown browser. The SA Tool should load and display the last saved content (homepage) on the device."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training and FAQ Update Functionality",
        "Test_Sce_Description": "Verify that if the SA Tool receives updated training content while the training is being played by the operator, the training should continue to play while the new content is downloaded to the device. Once the download has completed it should be available the next time the In-App Training and FAQ is launched."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training Download Failure",
        "Test_Sce_Description": "Verify that if the In-App Training has not been downloaded to the SA Tool, the SA Tool should display a toast message on the Inspection home screen notifying the operator that there is no content available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training Remote Disablement",
        "Test_Sce_Description": "Verify that if the In-App Training has been remotely disabled from the SA Tool after Operator navigates to Help Screen, the SA Tool should behave as expected and not crash or show any unexpected behavior."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that an authorized operator can successfully launch the SA Tool Application from the home screen of the SA Tool device. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Power on SA Tool: continuous self-diagnostic check is unsuccessful (network connection not available)",
        "Test_Sce_Description": "Verify that the SA Tool performs the continuous diagnostic checks and determines that the device is unable to connect to a network. This should be indicated on the SA Tool. The application should still launch and display the sign-in screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Power on SA Tool: initial self-diagnostic check is unsuccessful",
        "Test_Sce_Description": "Verify that the SA Tool performs initial self-diagnostic checks and finds critical failures. The tool should go to error state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Power on SA Tool: Continuous self-diagnostic check is unsuccessful (storage, battery or secure element)",
        "Test_Sce_Description": "Verify that the SA Tool application performs the continuous self-diagnostics for storage, battery or secure element and finds errors or failures in any of these elements. The tool should go to out-of-service state and a critical event should be sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that an authorized operator can switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button present on the android navigation bar."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "The application is already launched and is running in the background",
        "Test_Sce_Description": "Verify that if the application that the operator intends to launch is already running in the device background, the operator can tap on the App Overview button on the bottom navigation bar, navigate through the list of open applications until they find the desired application, and press on the desired application to launch it."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Sign-In to SA Tool application (First-Time User)",
        "Test_Sce_Description": "Verify that a first-time user can sign-in to the SA Tool application using their operator badge ID and a temporary passcode. The application should validate the operator badge ID and temporary passcode combination based on operator credentials stored in user management service. Upon successful sign-in, the Security Setup screen should be displayed and the user should be prompted to set up security questions and a new passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Operator Enters Incorrect Username or Passcode",
        "Test_Sce_Description": "Verify that if the operator enters an incorrect username or passcode, the device informs the operator that the passcode is incorrect for the counted number of times, and a re-try is permitted after 30 seconds. During the 30-second countdown, the user should not be allowed to attempt sign on."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "First Time User Sign-In",
        "Test_Sce_Description": "Verify that a first-time user is able to sign-in to the SA Tool application using their operator badge ID and temporary passcode. The user should be prompted to change their temporary passcode upon initial log-in."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Online Authentication",
        "Test_Sce_Description": "Verify that the SA Tool communicates with the User management service to authenticate user login. This should be required when the device is online for first time users and after the local cache is cleaned based on a configurable credential caching duration."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Local Authentication",
        "Test_Sce_Description": "Verify that local authentication is used for users re-logging into the same SA Tool and whose credentials have not been cleaned based on the configurable credential caching duration. The local credential cache should only store the credentials of users who have logged in to the specific device previously."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Security Setup",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator that they will need to set up security questions and a new passcode. The new passcode must be a 4-digit number."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Passcode Validation",
        "Test_Sce_Description": "Verify that the SA Tool application validates that the new passcode meets passcode length criteria by connecting to the user management service. If the new passcode length meets the defined criteria, the SA Tool application should indicate to the operator that the passcode was successfully changed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Incorrect Username or Passcode",
        "Test_Sce_Description": "Verify that if the operator enters an incorrect username or passcode, the SA Tool application records a cumulative number of unsuccessful sign on attempts for a single valid operator badge ID on a SA Tool. When the number of unsuccessful sign-in attempts reaches the maximum number of sign-on attempts, the SA Tool application should deny access to that operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Network Unavailability",
        "Test_Sce_Description": "Verify that if the network is unavailable, the SA Tool application displays a message to the operator requesting them to sign in when network is available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "New Passcode is Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that if the new passcode is the same as the temporary passcode, the SA Tool Device informs the user of the error and clears the new passcode fields."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that if the new passcode length does not meet pre-defined criteria, the SA Tool will not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Network Unavailability during First Time Sign-in",
        "Test_Sce_Description": "Verify that the application correctly handles the situation when the network is unavailable during the first time sign-in. The application should display a message to the operator requesting them to sign in when network is available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Maximum Number of Login Attempts",
        "Test_Sce_Description": "Verify that the application correctly handles the situation when the maximum number of unsuccessful sign-in attempts has been reached. The application should lock the operator user account and inform the operator that the user account associated with the operator ID is locked."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "New Passcode is Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that the application correctly handles the situation when the new passcode entered by the operator is the same as the temporary passcode. The application should inform the user of the error and clear the new passcode fields."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that the application correctly handles the situation when the new passcode entered by the operator does not meet the pre-defined length criteria. The application should not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Incorrect Sign-on Attempts Suspension",
        "Test_Sce_Description": "Verify that the application correctly handles the situation when the operator enters an invalid passcode at the 10th attempt. The application should inform the operator that the passcode is incorrect for the counted number of times, and a re-try is permitted after 30 seconds."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Successful First-Time Sign-in",
        "Test_Sce_Description": "Verify that the application correctly handles the situation when the operator enters a valid operator badge ID and temporary passcode combination. The application should inform the operator of successful first-time sign-in and display the Security Setup screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Security Questions and New Passcode Setup",
        "Test_Sce_Description": "Verify that the application correctly handles the situation when the operator sets up security questions and a new passcode. The application should validate that the new passcode meets passcode length criteria and does not match the temporary passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Shift Parameters Selection",
        "Test_Sce_Description": "Verify that the application correctly handles the situation when the operator selects their parameters for the shift. The application should display a confirmation screen to the operator and start the operator\u2019s shift."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Incorrect Username or Passcode Entry",
        "Test_Sce_Description": "Verify that the application correctly handles the situation when the operator enters an incorrect username or passcode. The application should inform the operator that the username or passcode is incorrect."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Network Unavailability during First Time Sign In",
        "Test_Sce_Description": "Verify that the SA Tool application displays a message to the operator requesting them to sign in when network is available, when the operator tries to sign in for the first time using a temporary passcode and the network is not available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Maximum Number of Login Attempts",
        "Test_Sce_Description": "Verify that the SA Tool application records a cumulative number of unsuccessful sign on attempts for a single valid operator badge ID on a SA Tool. This counter should be maintained throughout the device reboot. When the number of unsuccessful sign-in attempts reaches the maximum number of sign-on attempts, the SA Tool application should deny access to that operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "New Passcode is the Same as The Temporary Passcode",
        "Test_Sce_Description": "Verify that the SA Tool application detects that the new passcode is the same as the temporary passcode in the Subsystem and informs the user of the error and clears the new passcode fields."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that the SA Tool will not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Reset Passcode: Operator enters an invalid operator badge ID",
        "Test_Sce_Description": "Verify that the SA Tool application checks with the User management service and determines that the operator badge ID is invalid and notifies the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Reset Passcode: Operator enters invalid security question answers",
        "Test_Sce_Description": "Verify that the SA Tool application validates that the security question answers entered do not match those stored in the User management service and notifies the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Reset Passcode: Operator enters new passcode twice, but new passcodes do not match",
        "Test_Sce_Description": "Verify that the SA Tool application validates that the new passcodes that were entered twice are not same and notifies the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Reset Passcode: Operator enters new passcode twice, but new passcodes do not meet passcode length criteria",
        "Test_Sce_Description": "Verify that the SA Tool application will not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Reset Passcode: Operator tries to reset passcode but is a first-time user",
        "Test_Sce_Description": "Verify that the SA Tool application connects to the User management service and validates that the operator badge ID entered belongs to a first-time user and notifies the operator with a corresponding error message and clears the passcode field."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Reset Passcode: Reach maximum number of forgot passcode attempts",
        "Test_Sce_Description": "Verify that the SA Tool application records a cumulative number of unsuccessful reset passcode attempts for a single valid operator ID on a specific SA Tool. This counter should be maintained throughout the device reboot. When the number of unsuccessful reset passcode attempts reaches the maximum reset passcode attempts, the SA Tool should deny access to that operator until the operator ID is unlocked by the CLIENT back-office user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Reset Passcode: Account validation fails after passcode has been reset",
        "Test_Sce_Description": "Verify that the SA Tool application validates the account after the passcode has been reset. If the validation fails, the application should notify the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "New Passcode is Same as Temporary Passcode",
        "Test_Sce_Description": "This scenario will test if the system correctly identifies when the new passcode entered by the user is the same as the temporary passcode. The system should display an error message and clear the new passcode fields."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "This scenario will test if the system correctly identifies when the new passcode entered by the user does not meet the pre-defined length criteria. The system should not enable the submit button until the passcode entered is of the correct length."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Sign-in without network connection",
        "Test_Sce_Description": "This scenario will test if the system correctly allows the user to sign-in using the local cache when there is no network connection. The system should check the operator badge ID and passcode combination entered against the operator credentials stored in the local cache."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Sign-in while another operator is signed-in to the same device",
        "Test_Sce_Description": "This scenario will test if the system correctly handles the situation when a new operator tries to sign-in while another operator is already signed-in to the same device. The system should handle this situation appropriately."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Sce_Description": "This scenario will test if the system correctly locks the operator user account when the maximum number of sign-in attempts has been reached. The system should display a message to the operator informing them that the user account associated with the operator ID is locked and clear the passcode field in the sign-in screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "First Time Sign-in with Temporary Passcode and Network is Not Available",
        "Test_Sce_Description": "This scenario will test if the system correctly handles the situation when a first-time user tries to sign-in using a temporary passcode and the network is not available. The system should display a message to the operator requesting them to sign in when network is available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Sign-In to SA Tool application at the beginning of the shift (Existing User)",
        "Test_Sce_Description": "This scenario will test if the system correctly allows an existing user to sign-in to the SA Tool application at the beginning of their shift. The system should request the user to enter the operator badge ID and passcode, and start the operator\u2019s shift upon successful sign-in."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the new passcode entered by the user does not meet the pre-defined length criteria. The test will verify if the submit button remains disabled until the passcode entered is of the correct length."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Maximum Number of Change Attempts Reached",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the user has had multiple unsuccessful change attempts for the same operator ID. The test will verify if the application correctly records the cumulative number of unsuccessful change passcode attempts and locks the operator user account when the maximum number of attempts is reached."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Account Validation Fails After Passcode Reset",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the account validation fails after the passcode has been reset. The test will verify if the application correctly redirects the user to the SA Tool home screen and informs the operator that the passcode has been successfully reset."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Passcode Expired",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator\u2019s passcode has expired. The test will verify if the application correctly detects the expired passcode and prompts the operator to enter a new one."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Passcode Will Expire in the Future",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator\u2019s passcode will expire in the future. The test will verify if the application correctly detects the upcoming expiration and prompts the operator to change their passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Secondary Transit Agency Without Open Payments",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator toggles to a secondary transit agency that does not have Open Payments enabled. The test will verify if the application correctly functions only with Farecard taps and does not respond to taps from contactless payment cards."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Secondary Transit Agency With Open Payments",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator toggles to a secondary transit agency that has Open Payments enabled. The test will verify if the application correctly functions for both Farecard s and Open Payment media."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Temporary Passcode Expires",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator\u2019s temporary passcode has expired. The test will verify if the application correctly checks that the operator badge ID and passcode combination entered are invalid and informs the operator of an expired temporary passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Incorrect Username or Passcode Entered",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator enters an incorrect username or passcode. The test will verify if the application correctly checks that the user ID and/or passcode entered is invalid and informs the operator of an invalid operator badge ID and passcode combination."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "First-time user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Maximum Number of Log-in Attempts Reached",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the maximum number of sign-in attempts for the same operator badge ID has been reached. The test will verify if the application correctly locks the operator user account and redirects the user to the sign-in screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator is able to shut down the SA Tool by pressing and holding the physical power button. The SA Tool should display a confirmation message with the options 'Power off' and other options. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sign In",
        "Test_Sce_Description": "Verify that a new operator is able to sign in to the SA Tool using their user ID and passcode. If a current operator is already signed in, a message should appear indicating that the current operator is signed in and asking if the new operator wants to sign in anyway. Upon selecting 'Yes', the current operator should be signed off from the SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Standby State",
        "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state where the screen will turn off after remaining inactive for a configurable period of time. In this state, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life. An operator should be able to press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Reboot",
        "Test_Sce_Description": "Verify that the operator is able to manually reboot the SA Tool by pressing and holding the physical power button. The SA Tool should display a confirmation message with the options 'Power off' and other options. Upon selecting the restart option, the device should restart by turning off and powering on."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator is able to select the Revenue Mode. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "Verify that the SA Tool reboots successfully when the operator selects the restart option. The device should turn off and then power on again. Check that the device is functioning normally after the reboot."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Airplane Mode",
        "Test_Sce_Description": "Verify that when the operator selects the 'Airplane Mode' during the reboot process, the device's network communications are disabled. The device should not be able to perform any inspections, counters, and queries. An airplane icon should be displayed in the top notification bar when this mode is enabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "Verify that the device's sound levels can be adjusted using the side buttons on the SA Tool during the reboot process. The minimum limit for volume should be configurable."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "Verify that the reboot process does not take an excessively long time and that the device is responsive after the reboot."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "Verify that the reboot process does not compromise the security of the device or the data stored on it. Check that no unauthorized access is possible during the reboot process."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "Verify that the device handles exceptions correctly during the reboot process. For example, if the device's battery level is too low for a reboot, the device should display an appropriate error message and not attempt to reboot."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Alternate Flow",
        "Test_Sce_Description": "Verify that the device handles alternate flows correctly during the reboot process. For example, if the operator selects an option other than 'Restart' or 'Airplane Mode', the device should perform the corresponding action correctly."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State Functionality",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State with SA Tool Application Running in Background",
        "Test_Sce_Description": "Verify that if the SA Tool PDS application is running but is not in the foreground, the application will be in Standby State. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Switching Back to SA Tool Application from Standby State",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode Functionality",
        "Test_Sce_Description": "Verify that in Revenue Mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode Functionality",
        "Test_Sce_Description": "Verify that in Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State with Customer Interaction",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state, it does not detect the media when a customer attempts to tap their Open Payments Media on the card reader."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device Configured for Farecard Reversals Only",
        "Test_Sce_Description": "Verify that when the device is configured for only farecard reversals, it provides an error message 'Only Available for Farecard' to the cardholder when they attempt to tap their Open Payments Media on the card reader."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device in Pilot Mode with Unapproved Media",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, it provides a 'Declined \u2013 Not Accepted, Tap Farecard' screen to the cardholder."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Open Payments Media on the BIN Blocking List",
        "Test_Sce_Description": "Verify that when the card\u2019s BIN is found to be on the BIN Blocking List, the device plays the decline audio tone and displays the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversing Fare Payment with Interac Card while Interac is Disabled",
        "Test_Sce_Description": "Verify that when the Cardholder taps the Interac media on the device Card Reader (CID) while the device is in reversal mode and Interac is disabled, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversing Fare Payment with Open Payment Card while Open Payments are Disabled",
        "Test_Sce_Description": "Verify that when the Cardholder taps the OP media on the device Card Reader (CID) while the device is in reversal mode and Open Payments are disabled, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversing Fare Payment with Open Payment Card while Corresponding Payment Method/Card Brand is Disabled",
        "Test_Sce_Description": "Verify that when the Cardholder taps the OP media on the device Card Reader (CID) while the device is in reversal mode and the corresponding payment method/card brand is disabled, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switch SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device, enters the lock screen passcode and signs in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switch SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state without requiring the operator to sign in if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value that requires logging in."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switch SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Operator navigates away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool application runs in the background and goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the SA Tool is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components when it is in \u201cOut-of-Service\u201d state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time or when the operator presses the physical power button."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool application is running in the background",
        "Test_Sce_Description": "Verify that the SA Tool application runs in the background and goes into standby state when the operator is using another application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in the Revenue Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in the Training Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that an authorized operator is able to launch the SA Tool Application successfully. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Unsuccessful Continuous Self-Diagnostic Check",
        "Test_Sce_Description": "Verify that the SA Tool Application is able to operate in offline mode when the continuous self-diagnostic check determines that the device is unable to connect to a network. The device should indicate this status and the sign-in screen should still be displayed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Unsuccessful Initial Self-Diagnostic Check",
        "Test_Sce_Description": "Verify that the SA Tool Application goes to error state when the initial self-diagnostic checks find critical failures. The application should not proceed to the sign-in screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Unsuccessful Continuous Self-Diagnostic Check for Storage, Battery or Secure Element",
        "Test_Sce_Description": "Verify that the SA Tool Application goes to out-of-service state when the continuous self-diagnostic checks for storage, battery or secure element find errors or failures. A critical event should be sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that an authorized operator is able to switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications, find the other apps, and launch the desired application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Switching to an Application Running in the Background",
        "Test_Sce_Description": "Verify that the operator is able to switch to an application that is already running in the device background. The operator should be able to navigate through the list of open applications and launch the desired application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Application Running in the Background",
        "Test_Sce_Description": "Verify that the SA Tool Application is able to disconnect from all the peripherals and conserve battery life when it is running in the background. The operator should be able to switch back to the SA Tool Application to resume its functionality."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Application in Revenue Mode",
        "Test_Sce_Description": "Verify that the SA Tool Application allows the operator to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in the Revenue Mode. The application should have access to the EPT and accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Application in Training Mode",
        "Test_Sce_Description": "Verify that the SA Tool Application allows the operator to mimic all functionality available within Sales Mode without accepting payment in the Training Mode. The application should only accept non-revenue Farecard and indicate that the paper tickets were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Application in Out-of-Service State",
        "Test_Sce_Description": "Verify that the SA Tool Application is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components when it is in Out-of-Service state. The application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a split payment refund/reversal has already begun and the customer has been refunded with at least one mean of payment that is credit or debit. The operator selects to cancel the transaction and the SA Tool should inform the operator that in order to cancel the transaction, the payment means must be reversed. The operator confirms the cancellation of the transaction and the SA Tool should reverse non-credit and/or non-debit means of payment automatically. The operator then has to choose mean of payment and verbally prompt the customer to interact with the PIN pad in order to perform a refund void. The test should verify that upon successful Moneris processing, the customer has repaid for the refund amount and a customer receipt with Moneris information always prints."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a split payment refund/reversal has already begun and the customer has been refunded with at least one mean of payment that is not credit or debit. The operator selects to cancel the transaction and the SA Tool should inform the operator that in order to cancel the transaction, the payment means must be reversed. The operator confirms the cancellation of the transaction and the SA Tool should reverse the payment means automatically and prompt the operator to begin a refund void. The test should verify that a customer and merchant receipt print and the SA Tool returns to the home screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Quantity",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the quantity of product added to cart exceeds product maximum. The operator has already added the maximum allowable amount of products to the shopping cart. The operator informs the customer that they must process their request in multiple transactions. The test should verify that the SA Tool will not allow the operator to add more than the maximum allowable quantity to the shopping cart and the operator must process the customer\u2019s request in multiple transactions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund or Reversal",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when no eligible products for refund or reversal are detected. If any of the reversal or refund eligibility criteria specified in the Ticketing Use Cases are not met, the Steps from the Main Use Case will be completed. The test should verify that the SA Tool displays the relevant error message and the operator must acknowledge the message. The SA Tool should return to the main menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund or Reversal Not Requested by Customer",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when products are eligible for refund or reversal, but are not what the customer requested. All products eligible are displayed. However the SA Tool Operator cannot find the product the customer requested for reversal/refund. The Operator informs the customer their product is not eligible for reversal or refund. The test should verify that the Operator returns to the main menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Failure to Connect to Internet",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when there is a failure to connect to the internet. If there is no internet connection and the SA Tool Operator is performing an action that requires connection to the Internet, the Steps from the Main Use Case will be completed. The test should verify that the SA Tool will time out and display the relevant error message with options to try again or cancel. If successful connection is restored, the main use case should resume. If the action is cancelled, the SA Tool should return to the previous screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in \u201cOut-of-Service\u201d state. It is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off. Alternatively, the operator can press the physical power button to switch the SA Tool into standby state directly. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life. Once the SA Tool is in Standby state (screen turned off), an operator must press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "SA Tool Application Running in the Background",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the SA Tool application is running in the background. The SA Tool device allows the operator to use authorized third-party applications as needed. The operator can launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground (i.e., the operator is using another application), the application should be in Standby State. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life. In order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool in Revenue Mode. Upon logon the operator should be able to select which mode they would like to operate their shift in. The Revenue Mode allows the SA Tool operator to interact with customers. In this mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool in Training Mode. The Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. This allows for thorough training directly at the SA Tool. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode. They should not be a form of valid proof of payment."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any functionality and may require maintenance to restore out-of-order components. Also, check if the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off when the device goes into out-of-service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Standby State",
        "Test_Sce_Description": "Verify that the SA Tool can switch into a Standby state after remaining inactive for a configurable period of time or by pressing the physical power button. Check if the screen turns off and the SA tool disconnects from all the peripherals to conserve battery life. Also, verify that the operator must press the physical power button and sign-in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed and can launch multiple applications on the android device and move between them. Check if the SA Tool application goes into Standby State when it is not in the foreground and disconnects from all the peripherals to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Revenue Mode",
        "Test_Sce_Description": "Verify that the operator can select the Revenue Mode upon logon and can interact with customers. Check if the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. Also, verify that the SA tool only has access to the EPT in the revenue mode and accepts the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Training Mode",
        "Test_Sce_Description": "Verify that the operator can select the Training Mode upon logon and can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Check if only non-revenue Farecard is accepted in Training Mode and payment by credit /debit is not enabled. Also, verify that all paper tickets printed from the SA Tool indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Alternate Flow",
        "Test_Sce_Description": "Verify that the operator can navigate away from the SA Tool Application and the SA Tool application runs in the background and goes into standby state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Exception Flow",
        "Test_Sce_Description": "Verify that the operator can change SP after switching device from standby to in-service state and the SA Tool application notifies the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing In-App Training and FAQ",
        "Test_Sce_Description": "Verify that the operator can access in-app training and frequently asked questions (FAQs) and the in-app training and FAQs assist the operator and answer common questions on CLIENT and CLIENT products, as well as the usage of the application. Also, verify that the In-App Training and FAQ are stored locally on the device and the SA Tool syncs with the device and updates the content when the training material is updated or changed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator is able to shut down the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with the options 'Power off' and other standard functions. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sign In",
        "Test_Sce_Description": "Verify that a new operator is able to sign in to the SA Tool using their user ID and passcode. The tool should display a message indicating that the current operator is signed in and ask if the new operator wants to sign in anyway. Upon selecting 'Yes', the current operator should be signed off from the SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Standby State",
        "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state where the screen turns off after remaining inactive for a configurable period of time. In this state, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life. An operator should be able to press the physical power button and sign-in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Reboot",
        "Test_Sce_Description": "Verify that the operator is able to manually reboot the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with the options 'Power off' and other standard functions. Upon selecting the restart option, the device should restart by turning off and powering on."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon, the operator is able to select the Revenue Mode which allows them to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA tool should only have access to the EPT in the revenue mode and accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool User Access",
        "Test_Sce_Description": "Verify that different users have different access levels to the SA Tool. For example, SA Tool Operators should have access to Revenue Mode, Core Functionality - Sales, Core Functionality - Fare Payment, Core Functionality - Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession. However, Training users should not have access to these functionalities."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are working as expected."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "This scenario tests the normal flow of rebooting the SA Tool. The operator should be able to press and hold the physical power button on the SA Tool, select the restart option from the confirmation message, and the device should restart successfully."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Airplane Mode",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Airplane Mode is enabled. The operator should be able to enable the Airplane Mode, and the device should not be able to perform any inspections, counters and queries. An airplane icon should be displayed in the top notification bar when this mode is enabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool's sound levels. The operator should be able to adjust the device sound levels using the side buttons on the SA Tool. The minimum limit for volume should be configurable."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "This scenario tests the exception flow of the SA Tool. The operator should be able to press and hold the physical power button on the SA Tool, and if any critical failures are found during the initial self-diagnostic checks, the SA Tool should go to error state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Alternate Flow",
        "Test_Sce_Description": "This scenario tests the alternate flow of the SA Tool. The operator should be able to press and hold the physical power button on the SA Tool, and if the device is unable to connect to a network, this should be indicated on the SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "This scenario tests the performance of the SA Tool during the reboot process. The reboot process should be completed within a reasonable amount of time and the device should not hang or slow down during the process."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "This scenario tests the security of the SA Tool during the reboot process. The operator should be required to enter their user ID and passcode after the device restarts to ensure that unauthorized users cannot access the SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State with Peripherals",
        "Test_Sce_Description": "Verify that once in the standby mode, the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator will be able to select which mode they would like to operate their shift in. The Revenue Mode should allow the SA Tool operator to interact with customers."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Configurable Functionality",
        "Test_Sce_Description": "Verify that the SA Tool Operators have access to Revenue Mode, Core Functionality - Sales, Core Functionality - Fare Payment, Core Functionality - Inspection, SA Tool Remote Access, Unblock Farecard, Modify Card Concession."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are working as expected."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State with Open Payments Media",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device configured for only farecard reversals",
        "Test_Sce_Description": "Verify that when the device is configured for only farecard reversals and a customer attempts to tap their Open Payments Media on the card reader, the 'Only Available for Farecards' error message is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device in Pilot mode with unapproved media",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Open Payments Media on the BIN Blocking List",
        "Test_Sce_Description": "Verify that when a customer\u2019s Open Payments Media is on the BIN Blocking List, the device plays the decline audio tone and displays the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of fare payment with Interac Card while Interac is disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Interac Card while Interac is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of fare payment with Open Payment Card while Open Payments are disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while Open Payments are disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of fare payment with Open Payment Card while corresponding payment method / card brand is disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while corresponding payment method / card brand is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switch SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device, enters the lock screen passcode and signs-in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switch SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state without requiring login if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switch SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switch SA Tool from In-Service to Standby State when operator navigates away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool successfully goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Verify SA Tool in Out-of-Service State",
        "Test_Sce_Description": "Verify that the SA Tool is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components when it is in \u201cOut-of-Service\u201d state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Verify SA Tool in Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time or when the operator presses the physical power button."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Verify SA Tool in Revenue Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in the Revenue Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Verify SA Tool in Training Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in the Training Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Verify Configurable Functionality for SA Tool Operators",
        "Test_Sce_Description": "Verify that the SA Tool Operators have access to Revenue Mode, Core Functionality - Sales, Fare Payment, Inspection, SA Tool Remote Access, Unblock Farecard, Modify Card Concession."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that an authorized operator can successfully launch the SA Tool Application from the home screen of the SA Tool device. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching SA Tool with no network connection",
        "Test_Sce_Description": "Verify that the SA Tool application can operate in offline mode. During the continuous diagnostic checks, if the device is unable to connect to a network, this should be indicated on the SA Tool. The application should still launch and the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching SA Tool with critical failures",
        "Test_Sce_Description": "Verify that the SA Tool goes to error state when it performs initial self-diagnostic checks and finds critical failures. The application should not launch in this case."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching SA Tool with storage, battery or secure element failures",
        "Test_Sce_Description": "Verify that the SA Tool goes to out-of-service state when it performs the continuous self-diagnostics for storage, battery or secure element and finds errors or failures in any of these elements. A critical event should be sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that an authorized operator can switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button present on the android navigation bar."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching to an application running in the background",
        "Test_Sce_Description": "Verify that the operator can switch to an application that is already launched and is running in the background. The operator should be able to tap on the App Overview button on the bottom navigation bar and navigate through the list of open applications until they find the desired application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool in Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in \u201cOut-of-Service\u201d state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool in Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off. The operator should be able to press the physical power button to switch the SA Tool into standby state directly."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool in Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator can select Revenue Mode to operate their shift. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool in Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a split payment refund/reversal has already begun and the customer has been refunded with at least one mean of payment that is credit or debit. The operator should be able to select to cancel the transaction, and the SA Tool should inform the operator that the payment means must be reversed. The operator should be able to confirm the cancellation of the transaction, and the SA Tool should reverse non-credit and/or non-debit means of payment automatically. The operator should then choose the mean of payment and verbally prompt the customer to interact with the PIN pad to perform a refund void. The test will verify the successful Moneris processing and the printing of a customer receipt with Moneris information."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a split payment refund/reversal has already begun and the customer has been refunded with at least one mean of payment that is not credit or debit. The operator should be able to select to cancel the transaction, and the SA Tool should inform the operator that the payment means must be reversed. The operator should be able to confirm the cancellation of the transaction, and the SA Tool should reverse the payment means automatically and prompt the operator to begin a refund void. The test will verify the printing of a customer and merchant receipt."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Quantity",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the quantity of product added to the cart exceeds the maximum allowable amount. The operator should be informed that they must process the customer's request in multiple transactions. The SA Tool should not allow the operator to add more than the maximum allowable quantity to the shopping cart."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund or Reversal",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when no eligible products for refund or reversal are detected. The SA Tool should display the relevant error message and the operator must acknowledge the message. The test will verify that the SA Tool returns to the main menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund or Reversal Not Requested by Customer",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when there are products available for refund or reversal other than the product requested by the customer. The operator should inform the customer that their product is not eligible for reversal or refund and return to the main menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Failure to Connect to Internet",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when there is no internet connection and the operator is performing an action that requires connection to the Internet. The SA Tool should time out and display the relevant error message with options to try again or cancel. The test will verify that if successful connection is restored, the main use case resumes. If the action is cancelled, the test will verify that the SA Tool returns to the previous screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in an 'Out-of-Service' state. The test will verify that the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in a Standby state. The test will verify that the SA Tool switches into a Standby state after remaining inactive for a configurable period of time or when the operator presses the physical power button. The test will also verify that the SA Tool disconnects from all the peripherals to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Revenue Mode. The test will verify that the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The test will also verify that the SA Tool only has access to the EPT in the revenue mode and accepts credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Training Mode. The test will verify that the operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. The test will also verify that only non-revenue Farecard is accepted in Training Mode and that payment by credit/debit is not enabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Out-of-Service State Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Operator Sign-in Persistence",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State Functionality",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State Power Button Functionality",
        "Test_Sce_Description": "Verify that the operator can press the physical power button to switch the SA Tool into standby state directly. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State Resume Functionality",
        "Test_Sce_Description": "Verify that once the SA Tool is in Standby state (screen turned off), an operator must press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Third-Party Application Functionality",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State with Third-Party Applications",
        "Test_Sce_Description": "Verify that if the SA Tool PDS application is running but is not in the foreground (i.e., the operator is using another application), the application will be in Standby State. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Resuming SA Tool Application Functionality",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Revenue Mode Functionality",
        "Test_Sce_Description": "Verify that upon logon the operator will be able to select which mode they would like to operate their shift in. The Revenue Mode should allow the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Training Mode Functionality",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. This allows for thorough training directly at the SA Tool. Payment by credit /debit should not be enabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Alternate Flow Functionality",
        "Test_Sce_Description": "Verify that the operator can switch to a third party application on SA Tool. The SA Tool application should run in the background and therefore go into standby state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Exception Flow Functionality",
        "Test_Sce_Description": "Verify that the operator can attempt to change SP on the login screen. The SA Tool application should notify the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training and FAQ Functionality",
        "Test_Sce_Description": "Verify that the operator can access in-app training and frequently asked questions (FAQs). The in-app training and FAQs should assist the operator and answer common questions on CLIENT and CLIENT products, as well as the usage of the application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Offline SA Tool Functionality",
        "Test_Sce_Description": "Verify that if the SA Tool is offline, the operator can select the FAQ and Training option. The SA Tool should launch a lockdown browser. The SA Tool should load and display the last saved content (homepage) on the device."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training Update Functionality",
        "Test_Sce_Description": "Verify that if the SA Tool receives updated training content, the training being played by the operator should continue to play while the new content is downloaded to the device. Once the download has completed it should be available the next time the In-App Training and FAQ is launched."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training Download Failure",
        "Test_Sce_Description": "Verify that if the In-App Training has not been downloaded to the SA Tool, the SA Tool should display a toast message on the Inspection home screen notifying the operator that there is no content available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training Disablement",
        "Test_Sce_Description": "Verify that if the In-App Training has been remotely disabled from the SA Tool after Operator navigates to Help Screen, the SA Tool should display a toast message on the Inspection home screen notifying the operator that there is no content available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator is able to shut down the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with options including 'Power off'. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sign Out Functionality",
        "Test_Sce_Description": "Verify that when a new operator attempts to sign in to the SA Tool while a current operator is signed in, a message is displayed indicating that the current operator is signed in and asking if the new operator wants to sign in anyway. Upon selecting 'Yes', the current operator should be signed off from the SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Standby State",
        "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state after remaining inactive for a configurable period of time, during which the screen turns off. In this state, the SA Tool should disconnect from all peripherals to conserve battery life. An operator should be able to bring the device back into In-Service state by pressing the physical power button and signing in to the device lock screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Reboot Functionality",
        "Test_Sce_Description": "Verify that the operator is able to manually reboot the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with options including 'Restart'. Upon selecting 'Restart', the device should turn off and power on again."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Modes Functionality",
        "Test_Sce_Description": "Verify that upon logon, operators with access to both 'Revenue' and 'Training' modes are able to select which Mode they would like to operate their shift in. In 'Revenue' mode, the operator should be able to interact with customers and perform various functions. In 'Training' mode, the operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool User Access",
        "Test_Sce_Description": "Verify that different users have access to different functionalities of the SA Tool as per their roles. For example, SA Tool Operators should have access to Revenue Mode, Sales, Fare Payment, Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession, while Training users should not have access to these functionalities."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are functioning as expected."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "Verify that the SA Tool reboots successfully when the operator selects the restart option. The tool should turn off and power on again as expected. Check the functionality of the tool post-reboot to ensure it is working as expected."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Network Communications",
        "Test_Sce_Description": "Verify that the 'Airplane Mode' disables the network communications as expected. The device should not be able to perform any inspections, counters, and queries. An airplane icon should be displayed in the top notification bar when this mode is enabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool. The minimum limit for volume should be configurable."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Restart Option",
        "Test_Sce_Description": "Verify that the restart option restarts the device as expected. This should be equivalent to powering on and off the device."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Power Off Option",
        "Test_Sce_Description": "Verify that the 'Power off' option turns off the device as expected. The device should not power on again unless manually turned on by the operator."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "Verify that the tool handles exceptions correctly. For example, if the tool is unable to connect to a network, it should indicate this on the tool and operate in offline mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Alternate Flow",
        "Test_Sce_Description": "Verify that the tool handles alternate flows correctly. For example, if the tool performs initial self-diagnostic checks and finds critical failures, it should go to an error state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "Verify that the tool maintains security during the reboot process. No sensitive data should be exposed during the reboot, and the tool should require authentication (if applicable) after the reboot."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "Verify that the tool reboots within an acceptable time frame. The tool should not take an excessively long time to reboot, and it should be responsive immediately after the reboot."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State with peripherals",
        "Test_Sce_Description": "Verify that once in the standby mode, the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Resuming SA Tool application",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator will be able to select which mode they would like to operate their shift in. The Revenue Mode should allow the SA Tool operator to interact with customers."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Configurable Functionality",
        "Test_Sce_Description": "Verify that the SA Tool Operators have access to the Revenue Mode and can perform core functionalities like Sales, Fare Payment, Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are working as expected."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State with Open Payments Media",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state, it does not detect the Open Payments Media when a customer attempts to tap their Open Payments Media on the card reader."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device configured for farecard reversals only",
        "Test_Sce_Description": "Verify that when the device is configured for only farecard reversals, it provides the 'Only Available for Farecards' error message to the cardholder when they attempt to tap their Open Payments Media on the card reader."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device in Pilot mode with unapproved Open Payments media",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Open Payments Media on the BIN Blocking List",
        "Test_Sce_Description": "Verify that when the card\u2019s BIN is found to be on the BIN Blocking List, the device plays the decline audio tone and displays the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of fare payment with Interac Card while Interac is disabled",
        "Test_Sce_Description": "Verify that when the Cardholder taps the Interac media on the device Card Reader (CID) while the device is in reversal mode, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of fare payment with Open Payment Card while Open Payments are disabled",
        "Test_Sce_Description": "Verify that when the Cardholder taps the OP media on the device Card Reader (CID) while the device is in reversal mode, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of fare payment with Open Payment Card while corresponding payment method / card brand is disabled",
        "Test_Sce_Description": "Verify that when the Cardholder taps the OP media on the device Card Reader (CID) while the device is in reversal mode, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device, enters the lock screen passcode and signs in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state without requiring the operator to sign in if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Standby State when navigating away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool successfully goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool in Out-of-Service State",
        "Test_Sce_Description": "Verify that the SA Tool is unable to accept a Farecard for any kind of functionality when it is in \u201cOut-of-Service\u201d state and requires maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool in Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time or when the operator presses the physical power button."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool in Revenue Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures when the SA Tool is in Revenue Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool in Training Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions when the SA Tool is in Training Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool Operators' Access to Revenue Mode",
        "Test_Sce_Description": "Verify that the SA Tool Operators have access to Revenue Mode and can perform core functionality such as sales, fare payment, inspection, remote access, unblock farecard, and modify card concession."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that the authorized operator is able to launch the SA Tool Application successfully. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. After successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Unsuccessful Continuous Self-Diagnostic Check",
        "Test_Sce_Description": "Verify that the SA Tool Application is able to operate in offline mode when the continuous self-diagnostic check determines that the device is unable to connect to a network. The device should indicate this status and the sign-in screen should still be displayed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Unsuccessful Initial Self-Diagnostic Check",
        "Test_Sce_Description": "Verify that the SA Tool Application goes to error state when the initial self-diagnostic checks find critical failures. The application should not proceed to the sign-in screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Unsuccessful Continuous Self-Diagnostic Check",
        "Test_Sce_Description": "Verify that the SA Tool Application goes to out-of-service state when the continuous self-diagnostic checks for storage, battery or secure element find errors or failures. A critical event should be sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that the operator is able to switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button, and launch the desired application by pressing on its icon."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Switching to an Application Running in the Background",
        "Test_Sce_Description": "Verify that the operator is able to switch to an application that is already running in the device background. The operator should be able to navigate through the list of open applications by tapping on the App Overview button on the bottom navigation bar, and launch the desired application by pressing on it."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the SA Tool Application is unable to accept a Farecard for any kind of functionality when it is in \u201cOut-of-Service\u201d state. The application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the SA Tool Application switches into a Standby state where the screen will turn off after remaining inactive for a configurable period of time. The SA tool should disconnect from all the peripherals to conserve battery life. An operator should be able to bring the device back into In-Service state by pressing the physical power button and signing in to the device lock screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Application Running in the Background",
        "Test_Sce_Description": "Verify that the SA Tool Application goes into Standby State when it is running but is not in the foreground. The SA tool should disconnect from all the peripherals to conserve battery life. The operator should be able to resume the functionality of the SA Tool application by switching back to it."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the operator is able to interact with customers in the Revenue Mode. The operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the operator is able to mimic all functionality available within Sales Mode without accepting payment in the Training Mode. Only non-revenue Farecard should be accepted. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a split payment refund/reversal has already begun and the customer has been refunded with at least one mean of payment that is credit or debit. The operator should be able to select to cancel the transaction, and the SA Tool should inform the operator that the payment means must be reversed. The operator should be able to confirm the cancellation of the transaction, and the SA Tool should reverse non-credit and/or non-debit means of payment automatically. The operator should then choose the mean of payment and verbally prompt the customer to interact with the PIN pad to perform a refund void. The test should cover both successful and unsuccessful Moneris processing scenarios."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "Test the functionality of the SA Tool when a split payment refund/reversal has already begun and the customer has been refunded with at least one mean of payment that is not credit or debit. The operator should be able to select to cancel the transaction, and the SA Tool should inform the operator that the payment means must be reversed. The operator should be able to confirm the cancellation of the transaction, and the SA Tool should reverse the payment means automatically and prompt the operator to begin a refund void."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Product Quantity",
        "Test_Sce_Description": "Test the functionality of the SA Tool when the quantity of product added to the cart exceeds the maximum allowable amount. The operator should be informed that they must process the customer's request in multiple transactions. The SA Tool should not allow the operator to add more than the maximum allowable quantity to the shopping cart."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund or Reversal",
        "Test_Sce_Description": "Test the functionality of the SA Tool when no eligible products for refund or reversal are detected. The SA Tool should display the relevant error message and the operator must acknowledge the message. The SA Tool should then return to the main menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund or Reversal Not Requested by Customer",
        "Test_Sce_Description": "Test the functionality of the SA Tool when products are eligible for refund or reversal, but are not what the customer requested. The operator should inform the customer their product is not eligible for reversal or refund and return to the main menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Failure to Connect to Internet",
        "Test_Sce_Description": "Test the functionality of the SA Tool when there is no internet connection and the operator is performing an action that requires connection to the Internet. The SA Tool should time out and display the relevant error message with options to try again or cancel. If successful connection is restored, the main use case should resume. If the action is cancelled, the SA Tool should return to the previous screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Test the functionality of the SA Tool when it is in 'Out-of-Service' state. The SA Tool should be unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Test the functionality of the SA Tool when it is in Standby state. The screen should turn off after the SA Tool remains inactive for a configurable period of time or when the operator presses the physical power button. The SA Tool should disconnect from all the peripherals to conserve battery life. An operator should be able to press the physical power button and sign-in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "SA Tool Application Running in the Background",
        "Test_Sce_Description": "Test the functionality of the SA Tool when the application is running but is not in the foreground. The application should be in Standby State and disconnect from all the peripherals to conserve battery life. The operator should be able to switch back to the SA Tool application to resume its functionality."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Test the functionality of the SA Tool in Revenue Mode. The operator should be able to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA Tool should only have access to the EPT in the revenue mode and accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Test the functionality of the SA Tool in Training Mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode and should not be a form of valid proof of payment."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any functionality and may require maintenance to restore out-of-order components. Also, if an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off. Also, verify that the operator can press the physical power button to switch the SA Tool into standby state directly. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground (i.e., the operator is using another application), the application should be in Standby State. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator will be able to select which mode they would like to operate their shift in. The Revenue Mode should allow the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. This should allow for thorough training directly at the SA Tool. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode. They should not be a form of valid proof of payment."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Alternate Flow",
        "Test_Sce_Description": "Verify that the operator can switch to a third party application on SA Tool. The SA Tool application should run in the background and therefore go into standby state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing Exception Flow",
        "Test_Sce_Description": "Verify that the operator can attempt to change SP on the login screen. SA Tool application should notify the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing In-App Training and FAQ",
        "Test_Sce_Description": "Verify that the operator can access in-app training and frequently asked questions (FAQs). The in-app training and FAQs should assist the operator and answer common questions on CLIENT and CLIENT products, as well as the usage of the application. Online web search, copy and find features should be disabled in the lockdown browser."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator is able to shut down the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with options including 'Power off'. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sign Out",
        "Test_Sce_Description": "Verify that when a new operator attempts to sign in while a current operator is signed in, a message is displayed indicating that the current operator is signed in and asking if the new operator wants to sign in anyway. Upon selecting 'Yes', the current operator should be signed off from the SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Reboot",
        "Test_Sce_Description": "Verify that the operator is able to reboot the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with options including 'Restart'. Upon selecting 'Restart', the device should turn off and power on again."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Standby State",
        "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state where the screen turns off after remaining inactive for a configurable period of time. In this state, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life. An operator should be able to bring the device back into In-Service state by pressing the physical power button and signing in to the device lock screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon, the operator is able to select 'Revenue Mode' to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA tool should only have access to the EPT in the revenue mode and should accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Training Mode",
        "Test_Sce_Description": "Verify that upon logon, the operator is able to select 'Training Mode' to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode and should not be a form of valid proof of payment."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool User Access",
        "Test_Sce_Description": "Verify that different types of users (SA Tool Operators, SA Tool Operators - 3rd Party, Distance based Transitrvisors, Maintenance, Training) have appropriate access to various functionalities of the SA Tool as per their roles."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are working as expected."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "Verify that the SA Tool reboots successfully when the operator selects the restart option from the power menu. The device should turn off and then power on again, as described in the use case UC-SA Tool-012."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Airplane Mode",
        "Test_Sce_Description": "Verify that the SA Tool disables network communications when the operator selects the 'Airplane Mode' from the power menu. An airplane icon should be displayed in the top notification bar when this mode is enabled. The device should not be able to perform any inspections, counters, and queries."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool. The minimum limit for volume should be configurable."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "Verify the time taken by the SA Tool to reboot. The reboot time should be within acceptable limits as defined by the system requirements."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "Verify that the SA Tool maintains the security and integrity of the data during the reboot process. No data should be lost or corrupted during the reboot."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "Verify the system behavior when an exception occurs during the reboot process. The system should handle the exception gracefully and provide an appropriate error message to the operator."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Alternate Flow",
        "Test_Sce_Description": "Verify the system behavior when an alternate flow is triggered during the reboot process. The system should handle the alternate flow correctly and provide the expected output."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State with SA Tool application running in the background",
        "Test_Sce_Description": "Verify that if the SA Tool PDS application is running but is not in the foreground, the application will be in Standby State. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that in the Revenue Mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State with Open Payments Media",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device configured for only farecard reversals",
        "Test_Sce_Description": "Verify that when the device is configured for only farecard reversals and a customer attempts to tap their Open Payments Media on the card reader, the 'Only Available for Farecards' error message is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device in Pilot mode with unapproved Open Payments media",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Open Payments Media on the BIN Blocking List",
        "Test_Sce_Description": "Verify that when a customer's Open Payments Media is on the BIN Blocking List, the device plays the decline audio tone and displays the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of fare payment with Interac Card while Interac is disabled on SA Tool",
        "Test_Sce_Description": "Verify that when a Cardholder taps the Interac media on the device Card Reader (CID) while the device is in reversal mode, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of fare payment with Open Payment Card while Open Payments are disabled on SA Tool",
        "Test_Sce_Description": "Verify that when a Cardholder taps the OP media on the device Card Reader (CID) while the device is in reversal mode, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of fare payment with Open Payment Card while corresponding payment method / card brand is disabled on SA Tool",
        "Test_Sce_Description": "Verify that when a Cardholder taps the OP media on the device Card Reader (CID) while the device is in reversal mode, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device, enters the lock screen passcode and signs-in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state without requiring login if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State by navigating away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool successfully goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool in Out-of-Service State",
        "Test_Sce_Description": "Verify that the SA Tool is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components when it is in \u201cOut-of-Service\u201d state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool in Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool application runs in the background and goes into standby state when the operator is using another application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool in Revenue Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures when the SA Tool is in Revenue Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool in Training Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions when the SA Tool is in Training Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool application can be successfully launched by an authorized operator from the home screen of the SA Tool device. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Power on SA Tool with no network connection",
        "Test_Sce_Description": "Verify that the SA Tool application can operate in offline mode when the device is unable to connect to a network. The application should perform continuous diagnostic checks and indicate on the SA Tool that the network connection is not available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Power on SA Tool with initial self-diagnostic check unsuccessful",
        "Test_Sce_Description": "Verify that the SA Tool goes to error state when the initial self-diagnostic checks find critical failures. The application should perform initial self-diagnostic checks and go to error state if any critical failures are found."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Power on SA Tool with continuous self-diagnostic check unsuccessful",
        "Test_Sce_Description": "Verify that the SA Tool goes to out-of-service state when the continuous self-diagnostic checks for storage, battery or secure element find errors or failures. A critical event should be sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that an authorized operator can switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button present on the android navigation bar."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Switching to an application already launched and running in the background",
        "Test_Sce_Description": "Verify that the operator can switch to an application that is already running in the device background. The operator should be able to tap on the App Overview button on the bottom navigation bar and navigate through the list of open applications until they find the desired application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in \u201cOut-of-Service\u201d state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off. The operator should be able to press the physical power button to switch the SA Tool into standby state directly."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground, the application should be in Standby State."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator can select Revenue Mode to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where at least one mean of payment is credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The system should automatically reverse non-credit and/or non-debit means of payment, and the operator should be able to choose the mean of payment for the refund void. The system should handle both successful and unsuccessful Moneris processing."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where none of the means of payment are credit or debit. The operator should be able to select to cancel the transaction, and the system should inform the operator that the payment means must be reversed. The system should automatically reverse the payment means and prompt the operator to begin a refund void."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Product Quantity",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the quantity of a product added to the cart exceeds the maximum allowable amount. The system should not allow the operator to add more than the maximum allowable quantity to the shopping cart, and the operator should be able to process the customer\u2019s request in multiple transactions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund or Reversal",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where no eligible products for refund or reversal are detected. The system should display the relevant error message and the operator must acknowledge the message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund or Reversal Not Requested by Customer",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where products are eligible for refund or reversal, but are not what the customer requested. The operator should inform the customer their product is not eligible for reversal or refund."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Failure to Connect to Internet",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where there is no internet connection and the operator is performing an action that requires connection to the Internet. The system should time out and display the relevant error message with options to try again or cancel."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device goes into out-of-service state. The system should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device goes into standby state. The system should disconnect from all the peripherals to conserve battery life, and the operator should be able to press the physical power button and sign-in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Revenue Mode. The operator should be able to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The system should only have access to the EPT in the revenue mode and accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Training Mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. The system should not accept payment by credit /debit."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Out-of-Service State Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Operator Sign-off in Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State Functionality",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State with SA Tool Application Running in Background",
        "Test_Sce_Description": "Verify that if the SA Tool PDS application is running but is not in the foreground, the application will be in Standby State. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Resuming Functionality from Standby State",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Revenue Mode Functionality",
        "Test_Sce_Description": "Verify that in Revenue Mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Training Mode Functionality",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Alternate Flow: Operator Navigates Away from the SA Tool Application",
        "Test_Sce_Description": "Verify that when the operator switches to a third party application on SA Tool, the SA Tool application runs in the background and therefore goes into standby state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Exception Flow: Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that when the operator attempts to change SP on the login screen, the SA Tool application notifies the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training and FAQs Functionality",
        "Test_Sce_Description": "Verify that the operator can access in-app training and frequently asked questions (FAQs). The in-app training and FAQs should assist the operator and answer common questions on CLIENT and CLIENT products, as well as the usage of the application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Alternate Flow: Operator attempts to launch In-App Training and FAQ when SA Tool is Offline",
        "Test_Sce_Description": "Verify that when the SA Tool is offline and the operator selects the FAQ and Training option, the SA Tool launches a lockdown browser. The SA Tool should load and display the last saved content (homepage) on the device."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Exception Flow: In-App Training has not been downloaded to the SA Tool",
        "Test_Sce_Description": "Verify that when the In-App Training has not been downloaded to the SA Tool, the SA Tool displays a toast message on the Inspection home screen notifying the operator that there is no content available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that the authorized operator is able to launch the SA Tool Application successfully. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. After successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Power on SA Tool: continuous self-diagnostic check is unsuccessful (network connection not available)",
        "Test_Sce_Description": "Verify that the SA Tool performs the continuous diagnostic checks and determines that the device is unable to connect to a network. This should be indicated on the SA Tool. The application should still be able to operate in offline mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Power on SA Tool: initial self-diagnostic check is unsuccessful",
        "Test_Sce_Description": "Verify that the SA Tool performs initial self-diagnostic checks and finds critical failures. The tool should go to error state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Power on SA Tool: Continuous self-diagnostic check is unsuccessful (storage, battery or secure element)",
        "Test_Sce_Description": "Verify that the SA Tool application performs the continuous self-diagnostics for storage, battery or secure element and finds errors or failures in any of these elements. The tool should go to out-of-service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that the authorized operator is able to switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications and launch the desired application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "The application is already launched and is running in the background",
        "Test_Sce_Description": "Verify that the operator is able to navigate through the list of open applications and launch the desired application that is already running in the background."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Sign-In to SA Tool application (First-Time User)",
        "Test_Sce_Description": "Verify that the first-time user is able to sign-in to the SA Tool application using the provided operator badge ID and temporary passcode. The operator should be required to change their temporary passcode upon initial log-in. The application should validate the operator badge ID and temporary passcode combination based on operator credentials stored in user management service."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Operator Enters Incorrect Username or Passcode",
        "Test_Sce_Description": "Verify that the application informs the operator that the passcode is incorrect for the counted number of times, and a re-try is permitted after 30 seconds. During the 30-second countdown, the user should not be allowed to attempt sign on."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify successful sign-in for first-time user",
        "Test_Sce_Description": "Test if a first-time user can successfully sign-in to the SA Tool application using a valid operator badge ID and temporary passcode. The user should be able to change their temporary passcode upon initial log-in and set up security questions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify unsuccessful sign-in with invalid passcode",
        "Test_Sce_Description": "Test if the SA Tool application correctly informs the operator that the passcode is incorrect when an invalid passcode is entered. The operator should be allowed to re-try after 30 seconds."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify unsuccessful sign-in with invalid badge ID",
        "Test_Sce_Description": "Test if the SA Tool application correctly informs the operator that the badge ID is incorrect when an invalid badge ID is entered. The operator should be allowed to re-try after 30 seconds."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify successful sign-in after 30 seconds",
        "Test_Sce_Description": "Test if the operator can successfully sign-in to the SA Tool application after waiting for 30 seconds following an unsuccessful sign-in attempt."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify account lock after maximum sign-in attempts",
        "Test_Sce_Description": "Test if the SA Tool application correctly locks the operator's account after the maximum number of sign-in attempts has been reached. The operator should be informed that their account is locked and the passcode field should be cleared."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify successful account unlock",
        "Test_Sce_Description": "Test if the operator's account can be successfully unlocked by a CLIENT Operations User after it has been locked due to maximum sign-in attempts."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify unsuccessful sign-in with temporary passcode when network is unavailable",
        "Test_Sce_Description": "Test if the SA Tool application correctly informs the operator to sign in when network is available when the operator tries to sign in for the first time using a temporary passcode and the network is unavailable."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify unsuccessful passcode change to temporary passcode",
        "Test_Sce_Description": "Test if the SA Tool application correctly informs the user of the error and clears the new passcode fields when the user tries to change their passcode to the temporary passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify unsuccessful passcode change to passcode that does not meet pre-defined criteria",
        "Test_Sce_Description": "Test if the SA Tool application correctly disables the submit button until the passcode entered is the correct length when the user tries to change their passcode to a passcode that does not meet pre-defined criteria."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify successful passcode change to passcode that meets pre-defined criteria",
        "Test_Sce_Description": "Test if the user can successfully change their passcode to a passcode that meets pre-defined criteria. The SA Tool application should indicate to the operator that the passcode was successfully changed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Network Unavailability during First Time Sign-in",
        "Test_Sce_Description": "Verify that the application displays an appropriate message to the operator requesting them to sign in when network is available, when the operator tries to sign in for the first time using a temporary passcode and the network is not available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Maximum Number of Login Attempts Reached",
        "Test_Sce_Description": "Verify that the application correctly records the number of unsuccessful sign-in attempts for a single valid operator badge ID and locks the operator user account when the maximum number of sign-in attempts is reached. Also, verify that the application informs the operator that the user account associated with the operator ID is locked and clears the passcode field in the sign-in screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "New Passcode is Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that the application detects when the new passcode entered by the operator is the same as the temporary passcode and informs the user of the error while clearing the new passcode fields."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that the application does not enable the submit button until the passcode entered by the operator is of the correct length as per the pre-defined criteria."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Incorrect Sign-on Attempts Counter",
        "Test_Sce_Description": "Verify that the application correctly counts the number of incorrect sign-on attempts and informs the operator that the passcode is incorrect for the counted number of times, and a re-try is permitted after 30 seconds. Also, verify that during the 30-second countdown, the user is not allowed to attempt sign on."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Successful First-Time Sign-in",
        "Test_Sce_Description": "Verify that the application allows the operator to successfully sign-in for the first time using a valid operator badge ID and temporary passcode, and displays the Security Setup screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Security Questions and New Passcode Setup",
        "Test_Sce_Description": "Verify that the application allows the operator to select 2 security questions from a list of pre-defined security questions and provide their answers to the questions. Also, verify that the operator is able to enter a new passcode twice to confirm the same passcode is entered twice."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "New Passcode Validation",
        "Test_Sce_Description": "Verify that the application validates that the new passcode meets passcode length criteria, does not match the temporary passcode, and that the new passcodes that were entered twice match each other."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Operator Shift Parameters Selection",
        "Test_Sce_Description": "Verify that the application allows the operator to select their parameters for the shift and displays a confirmation screen to the operator."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Incorrect Username or Passcode Entry",
        "Test_Sce_Description": "Verify that the application displays an appropriate error message when the operator enters an incorrect username or passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Network Unavailability during First Time Sign In",
        "Test_Sce_Description": "Verify that the application displays a message to the operator requesting them to sign in when network is available, when the operator tries to sign in for the first time using a temporary passcode and the network is not available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Maximum Number of Login Attempts",
        "Test_Sce_Description": "Verify that the application records a cumulative number of unsuccessful sign on attempts for a single valid operator badge ID on a SA Tool and denies access to that operator when the number of unsuccessful sign-in attempts reaches the maximum number of sign-on attempts."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Account Locking after Maximum Login Attempts",
        "Test_Sce_Description": "Verify that the application locks the operator user account when the maximum number of sign-in attempts has been reached and informs the operator that the user account associated with the operator ID is locked."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "New Passcode Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that the application detects that the new passcode is the same as the temporary passcode in the Subsystem and informs the user of the error and clears the new passcode fields."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "New Passcode Length Criteria",
        "Test_Sce_Description": "Verify that the application does not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Account Locking during Passcode Reset",
        "Test_Sce_Description": "Verify that the application detects that operator account has been locked by checking the User management service and notifies the operator with a corresponding error message when the operator tries to reset their passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Invalid Operator Badge ID during Passcode Reset",
        "Test_Sce_Description": "Verify that the application checks with the User management service and determines that the operator badge ID is invalid and notifies the operator with a corresponding error message when the operator enters an invalid operator badge ID when resetting their passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Invalid Security Question Answers during Passcode Reset",
        "Test_Sce_Description": "Verify that the application validates that the security question answers entered do not match those stored in the User management service and notifies the operator with a corresponding error message when the operator enters invalid security question answers during passcode reset."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Mismatch in New Passcodes during Passcode Reset",
        "Test_Sce_Description": "Verify that the application validates that the new passcodes that were entered twice are not same and notifies the operator with a corresponding error message when the operator enters new passcode twice, but new passcodes do not match during passcode reset."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "New Passcode Length Criteria during Passcode Reset",
        "Test_Sce_Description": "Verify that the application does not enable the submit button until the passcode entered is the correct length when the operator enters new passcode twice, but new passcodes do not meet passcode length criteria during passcode reset."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "First Time User Tries to Reset Passcode",
        "Test_Sce_Description": "Verify that the application connects to the User management service and validates that the operator badge ID entered belongs to a first-time user and notifies the operator with a corresponding error message and clears the passcode field when the operator tries to reset passcode but is a first-time user."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Maximum Number of Forgot Passcode Attempts",
        "Test_Sce_Description": "Verify that the application records a cumulative number of unsuccessful reset passcode attempts for a single valid operator ID on a specific SA Tool and denies access to that operator when the number of unsuccessful reset passcode attempts reaches the maximum reset passcode attempts."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Account Validation Failure after Passcode Reset",
        "Test_Sce_Description": "Verify that the application validates the account after the passcode has been reset and if the validation fails, the application should notify the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Verify New Passcode is the Same as The Temporary Passcode",
        "Test_Sce_Description": "This scenario is to verify that the system correctly identifies when the new passcode entered by the user is the same as the temporary passcode. The system should display an error message and clear the new passcode fields."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Verify New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "This scenario is to verify that the system correctly identifies when the new passcode entered by the user does not meet the pre-defined criteria for length. The system should not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Verify Operator Reaches the Maximum Number of Login Attempts",
        "Test_Sce_Description": "This scenario is to verify that the system correctly identifies when the operator has reached the maximum number of login attempts. The system should lock the operator user account and display a message informing the operator that the user account associated with the operator ID is locked."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Verify Sign-in without network connection: Operator\u2019s log-in details are stored in the local cache",
        "Test_Sce_Description": "This scenario is to verify that the system correctly allows the operator to sign-in without a network connection if the operator\u2019s log-in details are stored in the local cache. The system should check that the operator badge ID and passcode combination entered are valid based on operator credentials stored in the local cache."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Verify Sign-in while another operator is signed-in to the same device",
        "Test_Sce_Description": "This scenario is to verify that the system correctly handles the situation when an operator tries to sign-in while another operator is already signed-in to the same device. The system should handle this situation according to the defined use case."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Verify Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Sce_Description": "This scenario is to verify that the system correctly handles the situation when an operator tries to sign-in for the first time using a temporary passcode and the network is not available. The system should display a message to the operator requesting them to sign in when network is available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "This scenario will test if the SA Tool application correctly identifies when the new passcode entered by the user does not meet the pre-defined length criteria. The test will involve entering a new passcode that is shorter or longer than the pre-defined length and verifying that the submit button remains disabled until a passcode of the correct length is entered."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "New Passcode is Same as Current Passcode",
        "Test_Sce_Description": "This scenario will test if the SA Tool application correctly identifies when the new passcode entered by the user is the same as the current passcode. The test will involve entering the current passcode as the new passcode and verifying that the application notifies the operator of the error."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Maximum Number of Change Attempts Reached",
        "Test_Sce_Description": "This scenario will test if the SA Tool application correctly locks the operator user account after the maximum number of unsuccessful change passcode attempts has been reached. The test will involve entering an incorrect current passcode multiple times until the maximum number of attempts is reached and verifying that the application locks the operator user account and redirects the user to the sign-in screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Account Validation Fails After Passcode Reset",
        "Test_Sce_Description": "This scenario will test if the SA Tool application correctly handles a situation where the account validation check fails due to loss of connectivity after the passcode has been reset. The test will involve resetting the passcode and then simulating a loss of connectivity to verify that the application redirects the user to the home screen and informs the operator that the passcode has been successfully reset."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Passcode Expiration",
        "Test_Sce_Description": "This scenario will test if the SA Tool application correctly prompts the operator to enter a new passcode when the current passcode has expired. The test will involve setting the current passcode to an expired state and verifying that the application prompts the operator to enter a new passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Passcode Will Expire in the Future",
        "Test_Sce_Description": "This scenario will test if the SA Tool application correctly prompts the operator to change their passcode when it will expire in the future. The test will involve setting the current passcode to expire in a number of days and verifying that the application prompts the operator to change their passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Secondary Transit Agency Does Not Have Open Payments Enabled",
        "Test_Sce_Description": "This scenario will test if the SA Tool application correctly functions only with Farecard taps when the secondary transit agency does not have Open Payments enabled. The test will involve toggling to the secondary transit agency and verifying that the application does not respond to taps from contactless payment cards."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Secondary Transit Agency Has Open Payments Enabled",
        "Test_Sce_Description": "This scenario will test if the SA Tool application correctly functions for both Farecard s and Open Payment media when the secondary transit agency has Open Payments enabled. The test will involve toggling to the secondary transit agency and verifying that the application responds to both Farecard s and Open Payment media."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Temporary Passcode Expires",
        "Test_Sce_Description": "This scenario will test if the SA Tool application correctly handles a situation where the operator enters an expired temporary passcode. The test will involve entering a valid operator badge ID and an expired temporary passcode and verifying that the application informs the operator of an expired temporary passcode and increments the invalid entry counter."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Operator Enters Incorrect Username or Passcode",
        "Test_Sce_Description": "This scenario will test if the SA Tool application correctly handles a situation where the operator enters an invalid operator badge ID and/or an invalid passcode. The test will involve entering an invalid operator badge ID and/or an invalid passcode and verifying that the application informs the operator of an invalid operator badge ID and passcode combination and increments the invalid entry counter."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Maximum Number of Log-in Attempts Reached",
        "Test_Sce_Description": "This scenario will test if the SA Tool application correctly locks the operator user account after the maximum number of unsuccessful sign-in attempts has been reached. The test will involve entering an incorrect operator badge ID and/or an incorrect passcode multiple times until the maximum number of attempts is reached and verifying that the application locks the operator user account."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "SA Tool Application Launch",
        "Test_Sce_Description": "Verify that the SA Tool application launches successfully when the operator selects the SA Tool Application icon from the home screen of the SA Tool device."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "SA Tool Diagnostic Checks",
        "Test_Sce_Description": "Verify that the SA Tool application performs continuous diagnostic checks as the application is launched. These checks should include network/cellular connection, battery level, and available storage space."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "SA Tool Sign-In Screen Display",
        "Test_Sce_Description": "Verify that after the SA Tool application successfully launches, the SA Tool application sign-in screen is displayed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "SA Tool Offline Mode",
        "Test_Sce_Description": "Verify that the SA Tool can operate in offline mode when the device is unable to connect to a network."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "SA Tool Error State",
        "Test_Sce_Description": "Verify that the SA Tool goes to error state when it performs initial self-diagnostic checks and finds critical failures."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "SA Tool Out-of-Service State",
        "Test_Sce_Description": "Verify that the SA Tool goes to out-of-service state when it performs the continuous self-diagnostics for storage, battery or secure element and finds errors or failures in any of these elements."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "SA Tool First-Time User Sign-In",
        "Test_Sce_Description": "Verify that a first-time user can sign-in to the SA Tool application using their operator badge ID and temporary passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "SA Tool Online Authentication",
        "Test_Sce_Description": "Verify that the SA Tool communicates with the User management service to authenticate user login when the device is online."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "SA Tool Local Authentication",
        "Test_Sce_Description": "Verify that the SA Tool can authenticate user login locally when the device is offline."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "SA Tool Security Setup",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator that they will need to set up security questions and a new passcode after successful first-time sign-in."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "SA Tool Passcode Change",
        "Test_Sce_Description": "Verify that the operator can change their passcode and the new passcode meets the defined criteria."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "SA Tool Security Questions Setup",
        "Test_Sce_Description": "Verify that the operator can select 2 security questions from a list of pre-defined security questions and provide their answers to the questions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "SA Tool Incorrect Username or Passcode",
        "Test_Sce_Description": "Verify that the SA Tool application displays an error message when the operator enters an incorrect username or passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "First-Time User Sign-In",
        "Test_Sce_Description": "Verify that a first-time user can successfully sign in to the SA Tool application using their operator badge ID and temporary passcode. The user should be required to change their temporary passcode upon initial log-in."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Online Authentication",
        "Test_Sce_Description": "Verify that the SA Tool communicates with the User management service to authenticate user login for first-time users and after the local cache is cleaned based on a configurable credential caching duration."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Local Authentication",
        "Test_Sce_Description": "Verify that local authentication is used for users re-logging into the same SA Tool and whose credentials have not been cleaned based on the configurable credential caching duration."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Security Setup",
        "Test_Sce_Description": "Verify that the SA Tool application informs the operator of successful first-time sign-in and displays the Security Setup screen. The operator should be required to set up security questions and a new passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Passcode Validation",
        "Test_Sce_Description": "Verify that the SA Tool application validates that the new passcode meets passcode length criteria by connecting to the user management service. If the new passcode length meets the defined criteria, the SA Tool application should indicate to the operator that the passcode was successfully changed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Incorrect Username or Passcode",
        "Test_Sce_Description": "Verify that if the operator enters an incorrect username or passcode, the SA Tool application displays an error message and does not allow the operator to sign in."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Network Unavailability",
        "Test_Sce_Description": "Verify that if the network is unavailable, the SA Tool application displays a message to the operator requesting them to sign in when network is available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Maximum Number of Login Attempts",
        "Test_Sce_Description": "Verify that if the operator reaches the maximum number of login attempts, the SA Tool application locks the operator user account and informs the operator that the user account associated with the operator ID is locked."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "New Passcode is Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that if the new passcode is the same as the temporary passcode, the SA Tool Device informs the user of the error and clears the new passcode fields."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that if the new passcode length does not meet pre-defined criteria, the SA Tool will not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Network Unavailability during First Time Sign-in",
        "Test_Sce_Description": "Verify that the application displays an appropriate message to the operator requesting them to sign in when network is available, when the operator tries to sign in for the first time using a temporary passcode and the network is not available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Maximum Number of Login Attempts",
        "Test_Sce_Description": "Verify that the application records the number of unsuccessful sign-in attempts for a single valid operator badge ID and denies access to that operator when the maximum number of sign-in attempts is reached. Also, verify that the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "New Passcode is Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that the application detects when the new passcode is the same as the temporary passcode and informs the user of the error and clears the new passcode fields."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that the application does not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Incorrect Sign-on Attempts",
        "Test_Sce_Description": "Verify that the device informs the operator that the passcode is incorrect for the counted number of times, and a re-try is permitted after 30 seconds. During the 30-second countdown, the user is not allowed to attempt sign on. After 30 seconds, the operator can try again."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Successful First-Time Sign-in",
        "Test_Sce_Description": "Verify that the application successfully validates the operator badge ID and temporary passcode combination based on operator credentials stored in user management service and informs the operator of successful first-time sign-in."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Security Setup",
        "Test_Sce_Description": "Verify that the application notifies the operator that they will need to set up security questions and a new passcode. The new passcode must be a 4-digit number."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Security Questions Setup",
        "Test_Sce_Description": "Verify that the operator can select 2 security questions from a list of pre-defined security questions and provide their answers to the questions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Passcode Validation",
        "Test_Sce_Description": "Verify that the application validates that the new passcode meets passcode length criteria by connecting to the user management service. If the new passcode length meets the defined criteria, the application will indicate to the operator that the passcode was successfully changed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Incorrect Username or Passcode",
        "Test_Sce_Description": "Verify that the application displays an appropriate error message when the operator enters an incorrect username or passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Network Unavailability during First Time Sign In",
        "Test_Sce_Description": "Verify that the SA Tool application displays a message to the operator requesting them to sign in when network is available when the operator tries to sign in for the first time using a temporary passcode and the network is not available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Maximum Number of Unsuccessful Login Attempts",
        "Test_Sce_Description": "Verify that the SA Tool application records a cumulative number of unsuccessful sign on attempts for a single valid operator badge ID on a SA Tool and denies access to that operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time when the number of unsuccessful sign-in attempts reaches the maximum number of sign-on attempts."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "New Passcode is Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that the SA Tool application detects that the new passcode is the same as the temporary passcode in the Subsystem and informs the user of the error and clears the new passcode fields."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that the SA Tool will not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Reset Passcode with Locked Operator Account",
        "Test_Sce_Description": "Verify that the SA Tool application detects that operator account has been locked by checking the User management service and notifies the operator with a corresponding error message when the operator tries to reset their passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Reset Passcode with Invalid Operator Badge ID",
        "Test_Sce_Description": "Verify that the SA Tool application checks with the User management service and determines that the operator badge ID is invalid and notifies the operator with a corresponding error message when the operator enters an invalid operator badge ID when resetting their passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Reset Passcode with Invalid Security Question Answers",
        "Test_Sce_Description": "Verify that the SA Tool application validates that the security question answers entered do not match those stored in the User management service and notifies the operator with a corresponding error message when the operator enters invalid security question answers when resetting their passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Reset Passcode with Mismatched New Passcodes",
        "Test_Sce_Description": "Verify that the SA Tool application validates that the new passcodes that were entered twice are not same and notifies the operator with a corresponding error message when the operator enters new passcode twice, but new passcodes do not match."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Reset Passcode with Incorrect Passcode Length",
        "Test_Sce_Description": "Verify that the SA Tool application will not enable the submit button until the passcode entered is the correct length when the operator enters new passcode twice, but new passcodes do not meet passcode length criteria."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Reset Passcode for First-Time User",
        "Test_Sce_Description": "Verify that the SA Tool application connects to the User management service and validates that the operator badge ID entered belongs to a first-time user and notifies the operator with a corresponding error message and clears the passcode field when the operator tries to reset passcode but is a first-time user."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Maximum Number of Unsuccessful Reset Passcode Attempts",
        "Test_Sce_Description": "Verify that the SA Tool application records a cumulative number of unsuccessful reset passcode attempts for a single valid operator ID on a specific SA Tool and denies access to that operator until the operator ID is unlocked by the CLIENT back-office user or automatically unlocked after a configurable amount of time when the number of unsuccessful reset passcode attempts reaches the maximum reset passcode attempts."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Account Validation Fails After Passcode Reset",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the user has entered all fields correctly in the Reset Passcode screen and has successfully reset their passcode but the account validation fails."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "New Passcode is Same as Temporary Passcode",
        "Test_Sce_Description": "This scenario is to test the functionality where the system should not allow the user to set a new passcode that is the same as the temporary passcode. The system should detect this and inform the user of the error, clearing the new passcode fields."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "This scenario is to test the functionality where the system should not enable the submit button until the passcode entered meets the pre-defined length criteria. The system should detect this and prevent the user from submitting the new passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Sign-in without network connection",
        "Test_Sce_Description": "This scenario is to test the functionality where the system should allow the user to sign-in using the local cache when there is no network connection. The system should check the operator badge ID and passcode combination entered against the credentials stored in the local cache."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Sign-in while another operator is signed-in to the same device",
        "Test_Sce_Description": "This scenario is to test the functionality where the system should allow a new operator to sign-in even when another operator is already signed-in to the same device. The system should handle this scenario without any issues."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Sce_Description": "This scenario is to test the functionality where the system should lock the operator user account when the maximum number of sign-in attempts has been reached. The system should inform the operator that the user account is locked and clear the passcode field in the sign-in screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "First Time Sign-in with Temporary Passcode and Network is Not Available",
        "Test_Sce_Description": "This scenario is to test the functionality where the system should display a message to the operator requesting them to sign in when network is available if they are signing in for the first time using a temporary passcode and the network is not available. The operator should not be signed in."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that the SA Tool application does not enable the submit button until the passcode entered is the correct length. The user should be notified if the passcode length does not meet the pre-defined criteria."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Same New and Current Passcode",
        "Test_Sce_Description": "Verify that the SA Tool application detects when the new passcode is the same as the current passcode in the User management service. The operator should be notified of this error."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Maximum Number of Change Attempts Reached",
        "Test_Sce_Description": "Verify that the SA Tool application records a cumulative number of unsuccessful change passcode attempts for a single valid operator ID on a specific SA Tool. The operator should be denied access when the maximum number of change passcode attempts is reached."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Account Validation Fails After Passcode Reset",
        "Test_Sce_Description": "Verify that the SA Tool application performs the account validation check and fails due to loss of connectivity. The operator should be redirected to the SA Tool home screen and informed that the passcode has been successfully reset."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Expired Passcode",
        "Test_Sce_Description": "Verify that the SA Tool detects when the Operator\u2019s current passcode has expired and prompts the Operator to enter a new passcode. The new passcode should be saved successfully."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Passcode Will Expire in the Future",
        "Test_Sce_Description": "Verify that the SA Tool detects that the Operator\u2019s passcode will expire in a number of days and prompts the Operator to change their passcode. The operator should have the option to change their passcode or dismiss the message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Secondary Transit Agency Without Open Payments",
        "Test_Sce_Description": "Verify that the application functions only with Farecard taps when the secondary transit agency does not have Open Payments enabled. The application should not respond to taps from contactless payment cards."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Secondary Transit Agency With Open Payments",
        "Test_Sce_Description": "Verify that the application functions for both Farecard s and Open Payment media when the secondary transit agency has Open Payments enabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Temporary Passcode Expires",
        "Test_Sce_Description": "Verify that the SA Tool application checks that the operator badge ID and passcode combination entered are invalid based on operator credentials stored in the Subsystem when the operator\u2019s temporary passcode has expired. The operator should be informed of an expired temporary passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Incorrect Username or Passcode",
        "Test_Sce_Description": "Verify that the SA Tool application checks that the user ID and/or passcode entered is invalid based on operator credentials stored in the Subsystem or the local cache. The operator should be informed of an invalid operator badge ID and passcode combination."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Existing user",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Maximum Number of Log-in Attempts Reached",
        "Test_Sce_Description": "Verify that the SA Tool has had multiple unsuccessful sign-in attempts for the same operator badge ID. The operator should be denied access when the maximum number of sign-in attempts is reached."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator can manually shut down the SA Tool by pressing and holding the physical power button. The SA Tool should display a confirmation message with options such as 'Power off' and other standard functions. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sign Off on Shutdown",
        "Test_Sce_Description": "Verify that when the SA Tool is shut down, the current operator is signed off from the tool. The operator's shift should not be closed if it is still open."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Restart Option",
        "Test_Sce_Description": "Verify that the restart option on the SA Tool works as expected. The device should turn off and power on again when this option is selected."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Airplane Mode",
        "Test_Sce_Description": "Verify that the 'Airplane Mode' option on the SA Tool disables network communications. The device should not be able to perform any inspections, card query and counters when this mode is enabled. An airplane icon should be displayed in the top notification bar."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels on the SA Tool can be adjusted using the side buttons. The minimum limit for volume should be configurable."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. The SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Standby State",
        "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state where the screen will turn off after remaining inactive for a configurable period of time. In this state, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Revenue Mode",
        "Test_Sce_Description": "Verify that in the Revenue Mode, the SA Tool operator can interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Training Mode",
        "Test_Sce_Description": "Verify that in the Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool User Access",
        "Test_Sce_Description": "Verify that different users have different access rights on the SA Tool. For example, SA Tool Operators should have access to Revenue Mode, Core Functionality - Sales, Core Functionality - Fare Payment, Core Functionality - Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession. Training users should not have access to these functionalities."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "Verify that the SA Tool reboots successfully when the operator selects the restart option. The tool should turn off and power on again as expected. This test will check the functionality of the reboot process."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Airplane Mode",
        "Test_Sce_Description": "Verify that the SA Tool disables network communications when the Airplane Mode is selected. The device should not be able to perform any inspections, counters, and queries. An airplane icon should be displayed in the top notification bar when this mode is enabled. This test will check the functionality of the Airplane Mode during the reboot process."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool during the reboot process. The minimum limit for volume should be configurable. This test will check the functionality of the sound level adjustments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "Verify that the SA Tool reboots within an acceptable time frame. This test will check the performance of the reboot process."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "Verify that the SA Tool maintains all security protocols during the reboot process. No data should be lost or compromised. This test will check the security of the reboot process."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "Verify that the SA Tool handles exceptions correctly during the reboot process. For example, if the device is unable to connect to a network, the tool should indicate this on the SA Tool and continue to operate in offline mode. This test will check the functionality of the exception flow."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Alternate Flow",
        "Test_Sce_Description": "Verify that the SA Tool handles alternate flows correctly during the reboot process. For example, if the device is already running in the background, the operator should be able to tap on the App Overview button on the bottom navigation bar, navigate through the list of open applications, and select the desired application. This test will check the functionality of the alternate flow."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in Out-of-Service state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State with peripherals",
        "Test_Sce_Description": "Verify that once in the standby mode, the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator can launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground (i.e., the operator is using another application), the application will be in Standby State."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator will be able to select which mode they would like to operate their shift in. The Revenue Mode allows the SA Tool operator to interact with customers. In this mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard will be accepted in Training Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State with Open Payments Media",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device configured for farecard reversals only",
        "Test_Sce_Description": "Verify that when the device is configured for only farecard reversals and a customer attempts to tap their Open Payments Media on the card reader, the 'Only Available for Farecards' error message is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device in Pilot mode with unapproved Open Payments media",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Open Payments Media on the BIN Blocking List",
        "Test_Sce_Description": "Verify that when a customer\u2019s Open Payments Media is on the BIN Blocking List, the device plays the decline audio tone and displays the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of fare payment with Interac Card while Interac is disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Interac Card while Interac is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of fare payment with Open Payment Card while Open Payments are disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while Open Payments are disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of fare payment with Open Payment Card while corresponding payment method / card brand is disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while corresponding payment method / card brand is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device, enters the lock screen passcode and signs-in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state without requiring login if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Standby State when navigating away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Standby State after inactivity",
        "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Standby State when running in the background",
        "Test_Sce_Description": "Verify that the SA Tool goes into Standby State when the SA Tool application is running but is not in the foreground."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Revenue Mode",
        "Test_Sce_Description": "Verify that the operator can select Revenue Mode upon logon and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Training Mode",
        "Test_Sce_Description": "Verify that the operator can select Training Mode upon logon and mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Accessing Configurable Functionality",
        "Test_Sce_Description": "Verify that the SA Tool Operators have access to Revenue Mode, Core Functionality - Sales, Core Functionality - Fare Payment, Core Functionality - Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that an authorized operator is able to successfully launch the SA Tool application from the home screen of the SA Tool device. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Network Connection Unavailable during Launch",
        "Test_Sce_Description": "Verify that if the SA Tool application is unable to connect to a network during the continuous diagnostic checks, this is indicated on the SA Tool. The application should still launch and operate in offline mode, with certain functionalities unavailable."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Critical Failures during Initial Self-Diagnostic Check",
        "Test_Sce_Description": "Verify that if the SA Tool application finds critical failures during the initial self-diagnostic checks, the tool goes to an error state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Unsuccessful Continuous Self-Diagnostic Check",
        "Test_Sce_Description": "Verify that if the SA Tool application finds errors or failures in storage, battery or secure element during the continuous self-diagnostic checks, the tool goes to an out-of-service state and a critical event is sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that an authorized operator is able to switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button present on the android navigation bar."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching to an Already Launched Application",
        "Test_Sce_Description": "Verify that if the application that the operator intends to launch is already running in the device background, the operator can navigate through the list of open applications and press on the desired application to launch it."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool in Out-of-Service State",
        "Test_Sce_Description": "Verify that if a SA Tool is in \u201cOut-of-Service\u201d state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool in Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool in Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator is able to select Revenue Mode to operate their shift in. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool in Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where at least one payment method is credit or debit. The system should prompt the operator to confirm cancellation, automatically reverse non-credit/debit payments, and require the operator to manually reverse credit/debit payments. The system should also handle both successful and unsuccessful Moneris processing, with appropriate receipts printed and the operator returned to the home screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where none of the payment methods are credit or debit. The system should prompt the operator to confirm cancellation and automatically reverse all payment methods. A customer and merchant receipt should be printed and the operator should be returned to the home screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Product Quantity",
        "Test_Sce_Description": "Verify that the system correctly prevents the operator from adding more than the maximum allowable quantity of a product to the shopping cart. The operator should be informed that they must process the customer's request in multiple transactions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund/Reversal",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where no products are eligible for refund or reversal. The system should display an error message which the operator must acknowledge, and then return to the main menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund/Reversal Not Requested by Customer",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the products eligible for refund or reversal are not what the customer requested. The operator should inform the customer that their product is not eligible and return to the main menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Internet Connection Failure",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the internet connection is lost during a flow that requires internet. The system should time out and display an error message with options to try again or cancel. If the connection is restored, the main use case should resume. If the action is cancelled, the system should return to the previous screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device goes into an out-of-service state. The application should not close the operator's shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the system correctly enters and exits a standby state, where the screen is turned off and all peripherals are disconnected to conserve battery life. The operator should be able to press the power button and sign-in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Revenue Mode, allowing the operator to interact with customers, perform inspections, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The system should only have access to the EPT in this mode and accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Training Mode, allowing the operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. The system should not accept payment by credit/debit and all paper tickets printed should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. Also, if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground, the application should be in Standby State."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator is able to select which mode they would like to operate their shift in. The Revenue Mode should allow the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. This allows for thorough training directly at the SA Tool. Payment by credit /debit should not be enabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Alternate Flow - Operator navigates away from the SA Tool Application",
        "Test_Sce_Description": "Verify that when the operator switches to a third party application on SA Tool, the SA Tool application runs in the background and therefore goes into standby state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Exception Flow - Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that when the operator attempts to change SP on the login screen, the SA Tool application notifies the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training and FAQ",
        "Test_Sce_Description": "Verify that the operator can access in-app training and frequently asked questions (FAQs). The in-app training and FAQs should assist the operator and answer common questions on CLIENT and CLIENT products, as well as the usage of the application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Alternate Flow - Operator attempts to launch In-App Training and FAQ when SA Tool is Offline",
        "Test_Sce_Description": "Verify that when the SA Tool is offline and the operator selects the FAQ and Training option, the SA Tool launches a lockdown browser. The SA Tool should load and display the last saved content (homepage) on the device."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Exception Flow - In-App Training has not been downloaded to the SA Tool",
        "Test_Sce_Description": "Verify that when the In-App Training has not been downloaded to the SA Tool and the operator tries to access it, the SA Tool displays a toast message on the Inspection home screen notifying the operator that there is no content available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator is able to shut down the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with options including 'Power off'. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sign Out Confirmation",
        "Test_Sce_Description": "Verify that when a new operator tries to sign in while the current operator is still signed in, a message is displayed indicating that the current operator is signed in and asking if the new operator wants to sign in anyway. Upon selecting 'Yes', the current operator should be signed off from the SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Standby State",
        "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state where the screen will turn off after remaining inactive for a configurable period of time. In this state, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life. An operator should be able to bring the device back into In-Service state by pressing the physical power button and signing in to the device lock screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Reboot",
        "Test_Sce_Description": "Verify that the operator is able to reboot the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with options including 'Restart'. Upon selecting 'Restart', the device should turn off and power on again."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon, the operator is able to select the Revenue Mode which allows them to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA tool should only have access to the EPT in the revenue mode and should accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool User Access",
        "Test_Sce_Description": "Verify that different users have access to different functionalities of the SA Tool. For example, SA Tool Operators should have access to Revenue Mode, Sales, Fare Payment, Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession, while Training users should not have access to these functionalities."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are correctly implemented and functioning as expected."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "Verify that the SA Tool reboots successfully when the operator selects the restart option. The tool should turn off and power on again as expected. This test will ensure the functionality of the reboot process."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Airplane Mode",
        "Test_Sce_Description": "Verify that the SA Tool disables network communications when the 'Airplane Mode' is selected. The device should not be able to perform any inspections, counters, and queries. An airplane icon should be displayed in the top notification bar when this mode is enabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool. The minimum limit for volume should be configurable. This test will ensure the functionality of the sound adjustment feature."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "Verify that the SA Tool reboots within an acceptable time frame. This test will measure the performance of the reboot process."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "Verify that the SA Tool maintains all security features and data protection during and after the reboot process. This test will ensure the security of the tool during the reboot process."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "Verify that the SA Tool handles exceptions correctly during the reboot process. For example, if the device is unable to connect to a network, the tool should still be able to operate in offline mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Alternate Flow",
        "Test_Sce_Description": "Verify that the SA Tool handles alternate flows correctly during the reboot process. For example, if the application that the operator intends to launch is already running in the device background, the operator should be able to tap on the App Overview button on the bottom navigation bar and select the desired application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State with SA Tool application running in the background",
        "Test_Sce_Description": "Verify that if the SA Tool PDS application is running but is not in the foreground, the application will be in Standby State. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Resuming functionality of SA Tool application",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that in Revenue Mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that in Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State with Open Payments Media",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device configured for only farecard reversals",
        "Test_Sce_Description": "Verify that when the device is configured for only farecard reversals and a customer attempts to tap their Open Payments Media on the card reader, the 'Only Available for Farecards' error message is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device in Pilot mode with unapproved Open Payments media",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Open Payments Media on the BIN Blocking List",
        "Test_Sce_Description": "Verify that when a customer\u2019s Open Payments Media is on the BIN Blocking List, the device plays the decline audio tone and displays the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversing fare payment with Interac Card while Interac is disabled on SA Tool",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Interac Card while Interac is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversing fare payment with Open Payment Card while Open Payments are disabled on SA Tool",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while Open Payments are disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversing fare payment with Open Payment Card while corresponding payment method / card brand is disabled on SA Tool",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while corresponding payment method / card brand is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device, enters the lock screen passcode and signs-in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state without requiring login if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Standby State when navigating away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Out-of-Service State",
        "Test_Sce_Description": "Verify that the SA Tool is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components when it is in \u201cOut-of-Service\u201d state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Standby State",
        "Test_Sce_Description": "Verify that the SA Tool suspends all functionality and disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life when it is in Standby state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Revenue Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures when the SA Tool is in Revenue Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Training Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions when the SA Tool is in Training Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool Remote Access",
        "Test_Sce_Description": "Verify that the SA Tool Operators have remote access to the SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that an authorized operator can successfully launch the SA Tool Application from the home screen of the SA Tool device. Check if the application performs continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Ensure that the sign-in screen is displayed after the application successfully launches."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Power on SA Tool: continuous self-diagnostic check is unsuccessful (network connection not available)",
        "Test_Sce_Description": "Verify that the SA Tool performs the continuous diagnostic checks and determines that the device is unable to connect to a network. Check if this is indicated on the SA Tool. Ensure that the SA Tool can operate in offline mode and that forget passcode and passcode change functionalities are unavailable when the device is offline."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Power on SA Tool: initial self-diagnostic check is unsuccessful",
        "Test_Sce_Description": "Verify that the SA Tool performs initial self-diagnostic checks and finds critical failures. Check if the SA Tool goes to error state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Power on SA Tool: Continuous self-diagnostic check is unsuccessful (storage, battery or secure element)",
        "Test_Sce_Description": "Verify that the SA Tool application performs the continuous self-diagnostics for storage, battery or secure element and finds errors or failures in any of these elements. Check if the SA Tool goes to out-of-service state and a critical event is sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that an authorized operator can switch between the SA Tool Application and the whitelisted third-party applications on the device. Check if the operator can navigate to the list of whitelisted third-party applications by tapping on the home button present on the android navigation bar. Ensure that the operator can launch the desired application from the home screen of the SA Tool device."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "The application is already launched and is running in the background",
        "Test_Sce_Description": "Verify that the operator can navigate through the list of open applications until they find the desired application if the application that the operator intends to launch is already running in the device background. Check if the operator can launch the desired application by pressing on it."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the SA Tool is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components when it is in \u201cOut-of-Service\u201d state. Check if the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off when an operator is signed-in and the device goes into out-of-service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. Check if the SA Tool switches into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time. Ensure that the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life when it is in Standby state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool application is running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. Check if the operator can launch multiple applications on the android device and move between them. Ensure that the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life when the SA Tool PDS application is running but is not in the foreground."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can interact with customers in the Revenue Mode. Check if the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. Ensure that the SA tool only has access to the EPT in the revenue mode and accepts the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in the Training Mode. Check if only non-revenue Farecard is accepted in Training Mode. Ensure that all paper tickets printed from the SA Tool indicate that they were printed while in training mode and are not a form of valid proof of payment."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "Verify that the system handles split payment refunds/reversals correctly when at least one mean of payment is credit or debit. The system should prompt the operator to confirm cancellation, reverse non-credit/debit payments automatically, and require the operator to choose a mean of payment for a refund void. The system should also handle both successful and unsuccessful Moneris processing correctly."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "Verify that the system handles split payment refunds/reversals correctly when none of the means of payment are credit or debit. The system should prompt the operator to confirm cancellation, reverse the payment means automatically, and prompt the operator to begin a refund void."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Product Quantity",
        "Test_Sce_Description": "Verify that the system prevents the operator from adding more than the maximum allowable quantity of a product to the shopping cart. The system should inform the operator that they must process the customer's request in multiple transactions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund/Reversal",
        "Test_Sce_Description": "Verify that the system correctly identifies when no products are eligible for refund or reversal based on the criteria specified in the Ticketing Use Cases. The system should display an error message and return to the main menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund/Reversal Not Requested by Customer",
        "Test_Sce_Description": "Verify that the system correctly handles situations where the products eligible for refund or reversal are not the ones requested by the customer. The operator should inform the customer that their product is not eligible and return to the main menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Internet Connection Failure",
        "Test_Sce_Description": "Verify that the system handles internet connection failures correctly during flows that require internet connection. The system should time out, display an error message, and provide options to try again or cancel."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the system correctly handles situations where the SA Tool is in an 'Out-of-Service' state. The system should not close the operator's shift unless they request to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the system correctly enters and exits Standby state, disconnecting from peripherals to conserve battery life and requiring the operator to sign-in to return to In-Service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "SA Tool Running in Background",
        "Test_Sce_Description": "Verify that the system correctly handles situations where the SA Tool application is running in the background. The system should disconnect from peripherals to conserve battery life and resume functionality when the operator switches back to the application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Revenue Mode, allowing the operator to interact with customers, perform inspections, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Training Mode, allowing the operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "User Access and Functionality",
        "Test_Sce_Description": "Verify that the system correctly provides access and functionality to different types of users, including SA Tool Operators, 3rd Party Operators, Supervisors, Maintenance, and Training."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the system correctly applies the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the Out-of-Service State",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in the 'Out-of-Service' state. The test will ensure that the tool does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. It will also verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the Standby State",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in the 'Standby' state. The test will ensure that the screen is turned off after the SA Tool remains inactive for a configurable period of time, or when the operator presses the physical power button. It will also verify that the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the SA Tool application running in the background",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when the application is running in the background. The test will ensure that the SA Tool goes into Standby State when the application is not in the foreground and disconnects from all the peripherals. It will also verify that the operator can resume the functionality of the SA Tool application by switching back to it."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the Revenue Mode",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in the 'Revenue' mode. The test will ensure that the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. It will also verify that the SA tool only has access to the EPT in the revenue mode and will accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the Training Mode",
        "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in the 'Training' mode. The test will ensure that the operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. It will also verify that only non-revenue Farecard will be accepted in Training Mode and payment by credit /debit will not be enabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the Alternate Flow",
        "Test_Sce_Description": "This scenario will test the alternate flow where the operator navigates away from the SA Tool Application. The test will ensure that the SA Tool application runs in the background and therefore goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the Exception Flow",
        "Test_Sce_Description": "This scenario will test the exception flow where the operator attempts to change SP on the login screen after switching device from standby to in-service state. The test will ensure that the SA Tool application notifies the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Testing the In-App Training and FAQ",
        "Test_Sce_Description": "This scenario will test the functionality of the In-App Training and FAQ. The test will ensure that the operator can access in-app training and frequently asked questions (FAQs) and that the content is stored locally on the device. It will also verify that the SA Tool syncs with the device and updates the content anytime the training material is updated or changed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator is able to shut down the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with options including 'Power off'. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sign Out",
        "Test_Sce_Description": "Verify that when a new operator attempts to sign in, a message is displayed indicating that the current operator is signed in and asking if the new operator wants to sign in anyway. Upon selecting 'Yes', the current operator should be signed off from the SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Standby State",
        "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state after remaining inactive for a configurable period of time. In this state, the screen should turn off and the tool should disconnect from all peripherals to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Reboot",
        "Test_Sce_Description": "Verify that the operator is able to reboot the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with options including 'Restart'. Upon selecting 'Restart', the device should turn off and power on again."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon, the operator is able to select 'Revenue Mode' to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The tool should only have access to the EPT in the revenue mode and should accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Training Mode",
        "Test_Sce_Description": "Verify that upon logon, the operator is able to select 'Training Mode' to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode and should not be a form of valid proof of payment."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool User Access",
        "Test_Sce_Description": "Verify that different users have access to different functionalities of the SA Tool as per their roles. For example, SA Tool Operators should have access to Revenue Mode, Sales, Fare Payment, Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession, while Training users should not have access to these functionalities."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are working as expected."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "Verify that the SA Tool reboots correctly when the operator selects the restart option. The tool should turn off and then power back on. This test will ensure that the reboot functionality is working as expected."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Airplane Mode",
        "Test_Sce_Description": "Verify that the SA Tool correctly enters Airplane Mode when this option is selected during the reboot process. The tool should disable network communications and display an airplane icon in the notification bar. This test will ensure that the Airplane Mode functionality is working as expected."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "Verify that the SA Tool correctly adjusts sound levels when the side buttons are used during the reboot process. The tool should allow for sound level adjustment within a pre-determined range. This test will ensure that the sound level adjustment functionality is working as expected."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles exceptions during the reboot process. For example, if the tool encounters a critical failure during reboot, it should go into an error state. This test will ensure that the tool's exception handling functionality is working as expected."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Alternate Flow",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles alternate flows during the reboot process. For example, if the tool is unable to connect to a network during reboot, it should still be able to operate in offline mode. This test will ensure that the tool's alternate flow handling functionality is working as expected."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "Verify that the SA Tool reboots within an acceptable time frame. The tool should not take an excessively long time to reboot. This test will ensure that the tool's performance during reboot is within acceptable parameters."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "Verify that the SA Tool maintains security during the reboot process. For example, the tool should not allow unauthorized access during reboot. This test will ensure that the tool's security measures are working as expected during reboot."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in the 'Out-of-Service' state, it does not accept a Farecard for any functionality and may require maintenance to restore out-of-order components. Also, if an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground, the application should be in Standby State."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator is able to select which mode they would like to operate their shift in. The Revenue Mode should allow the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Configurable Functionality",
        "Test_Sce_Description": "Verify that the SA Tool Operators have access to Revenue Mode, Core Functionality - Sales, Core Functionality - Fare Payment, Core Functionality - Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are working as expected."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State with Open Payments Media",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device configured for only farecard reversals",
        "Test_Sce_Description": "Verify that when the device is configured for only farecard reversals and a customer attempts to tap their Open Payments Media on the card reader, the 'Only Available for Farecards' error message is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device in Pilot mode with unapproved media",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Open Payments Media on the BIN Blocking List",
        "Test_Sce_Description": "Verify that when a customer's Open Payments Media is on the BIN Blocking List, the device plays the decline audio tone and displays the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of fare payment with Interac Card while Interac is disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Interac Card while Interac is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of fare payment with Open Payment Card while Open Payments are disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while Open Payments are disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversal of fare payment with Open Payment Card while corresponding payment method / card brand is disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while the corresponding payment method / card brand is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switch SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device, enters the lock screen passcode and signs in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switch SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state without requiring login if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switch SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Operator navigates away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool application runs in the background and goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the SA Tool is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components when it is in \u201cOut-of-Service\u201d state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time or when the operator presses the physical power button."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool application is running in the background",
        "Test_Sce_Description": "Verify that the SA Tool application runs in the background and goes into standby state when the operator is using another application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in the Revenue Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in the Training Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool application launches successfully when the operator selects the SA Tool Application icon from the home screen of the device. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Power on SA Tool with no network connection",
        "Test_Sce_Description": "Verify that the SA Tool application can operate in offline mode when the device is unable to connect to a network. The application should perform continuous diagnostic checks and indicate on the SA Tool that the device is unable to connect to a network."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Power on SA Tool with initial self-diagnostic check unsuccessful",
        "Test_Sce_Description": "Verify that the SA Tool goes to error state when the initial self-diagnostic checks find critical failures. The application should perform initial self-diagnostic checks and go to error state if any critical failures are found."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Power on SA Tool with continuous self-diagnostic check unsuccessful",
        "Test_Sce_Description": "Verify that the SA Tool goes to out-of-service state when the continuous self-diagnostic checks for storage, battery or secure element find errors or failures. A critical event should be sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that the operator can switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to tap on the home button to navigate to the list of whitelisted third-party applications and launch the desired application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Switching to an application already launched and running in the background",
        "Test_Sce_Description": "Verify that the operator can switch to an application that is already running in the device background. The operator should be able to tap on the App Overview button on the bottom navigation bar, navigate through the list of open applications, and launch the desired application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool application can run in the background while the operator is using another application. The application should disconnect from all the peripherals to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool in Revenue Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can interact with customers in Revenue Mode. The operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool in Training Mode",
        "Test_Sce_Description": "Verify that the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment in Training Mode. Only non-revenue Farecard should be accepted in this mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool Operators' Access to Revenue Mode",
        "Test_Sce_Description": "Verify that SA Tool Operators have access to Revenue Mode. The operators should be able to access core functionality such as sales, fare payment, inspection, remote access, unblock farecard, and modify card concession."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where at least one mean of payment is credit or debit. The system should prompt the operator to confirm cancellation, reverse non-credit/debit payments automatically, and require the operator to choose a mean of payment for a refund void. Upon successful processing, the customer should be repaid and a receipt printed. If processing is unsuccessful, the operator should have the option to prompt the customer to return the refunded payment in cash."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where none of the means of payment are credit or debit. The system should prompt the operator to confirm cancellation, reverse the payment means automatically, and prompt the operator to begin a refund void. A customer and merchant receipt should be printed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Product Quantity",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the quantity of a product added to the cart exceeds the maximum allowable amount. The system should not allow the operator to add more than the maximum quantity to the cart and should require the operator to process the customer's request in multiple transactions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund or Reversal",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where no products are eligible for refund or reversal. The system should display an error message which the operator must acknowledge, and then return to the main menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund/Reversal Not Requested by Customer",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where products are eligible for refund or reversal, but are not what the customer requested. The operator should inform the customer that their product is not eligible and return to the main menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Internet Connection Failure",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where there is no internet connection during a flow that requires it. The system should time out and display an error message with options to try again or cancel. If the connection is restored, the main use case should resume. If the action is cancelled, the system should return to the previous screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device goes into an out-of-service state. The system should not close the operator's shift unless the operator has requested to sign off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device goes into a standby state. The system should disconnect from all peripherals to conserve battery life and require the operator to press the power button and sign in to return to the in-service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "SA Tool Application Running in Background",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool application is running in the background. The system should disconnect from all peripherals to conserve battery life and require the operator to switch back to the SA Tool application to resume functionality."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Revenue Mode. The operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The system should only have access to the EPT and accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Training Mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. The system should only accept non-revenue Farecard and not enable payment by credit/debit."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Out-of-Service State Functionality",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Operator Sign-off in Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State Functionality",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State Power Button Functionality",
        "Test_Sce_Description": "Verify that the operator can press the physical power button to switch the SA Tool into standby state directly. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Standby State to In-Service State Transition",
        "Test_Sce_Description": "Verify that once the SA Tool is in Standby state (screen turned off), an operator must press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "SA Tool Application Running in Background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground (i.e., the operator is using another application), the application should be in Standby State."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Resuming SA Tool Application Functionality",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Revenue Mode Functionality",
        "Test_Sce_Description": "Verify that upon logon the operator is able to select which mode they would like to operate their shift in. The Revenue Mode should allow the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Training Mode Functionality",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. This should allow for thorough training directly at the SA Tool. Payment by credit /debit should not be enabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Alternate Flow Functionality",
        "Test_Sce_Description": "Verify that the operator can switch to a third party application on SA Tool. The SA Tool application should run in the background and therefore go into standby state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Exception Flow Functionality",
        "Test_Sce_Description": "Verify that if the operator attempts to change SP on the login screen, the SA Tool application should notify the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training and FAQ Functionality",
        "Test_Sce_Description": "Verify that this Use Case describes the steps for an operator to access in-app training and frequently asked questions (FAQs). The in-app training and FAQs should assist the operator and answer common questions on CLIENT and CLIENT products, as well as the usage of the application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Offline SA Tool Functionality",
        "Test_Sce_Description": "Verify that if the SA Tool is offline, the operator should be able to select the FAQ and Training option. The SA Tool should launch a lockdown browser. The SA Tool should load and display the last saved content (homepage) on the device."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training Update Functionality",
        "Test_Sce_Description": "Verify that if the SA Tool receives updated training content, the training being played by the operator should continue to play while the new content is downloaded to the device. Once the download has completed it should be available the next time the In-App Training and FAQ is launched."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "In-App Training Download Functionality",
        "Test_Sce_Description": "Verify that if the In-App Training has not been downloaded to the SA Tool, the SA Tool should display a toast message on the Inspection home screen notifying the operator that there is no content available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator is able to shut down the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with options including 'Power off'. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Confirmation Message Display",
        "Test_Sce_Description": "Verify that upon pressing and holding the physical power button, the SA Tool displays a confirmation message with the following options: Power off, Reset, Airplane Mode, etc. These options should be standard functions from the device\u2019s operating system and cannot be modified."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Operator Shift Closure",
        "Test_Sce_Description": "Verify that if the operator shift is open when the device is turned off, the operator shift will not be closed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Reboot SA Tool",
        "Test_Sce_Description": "Verify that the operator is able to reboot the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with options including 'Restart'. Upon selecting 'Restart', the device should turn off and power on again."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Airplane Mode Functionality",
        "Test_Sce_Description": "Verify that selecting 'Airplane Mode' from the power options disables the network communications. The device should not be able to perform any inspections, counters and queries. An airplane icon should be displayed in the top notification bar when this mode is enabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Sound Levels Adjustment",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool. The minimum limit for volume should be configurable."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Standby State Functionality",
        "Test_Sce_Description": "Verify that after the SA Tool remains inactive for a configurable period of time, the SA Tool switches into a Standby state where the screen turns off. In this state, the SA Tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Out-of-Service State Functionality",
        "Test_Sce_Description": "Verify that if a SA Tool is in \u201cOut-of-Service\u201d state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Revenue Mode Functionality",
        "Test_Sce_Description": "Verify that in Revenue Mode, the SA Tool operator can interact with customers. The operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Training Mode Functionality",
        "Test_Sce_Description": "Verify that in Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode. They should not be a form of valid proof of payment."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "Verify that the SA Tool reboots successfully when the operator selects the restart option. The tool should turn off and power on again as expected. This test will cover the main functionality of the reboot process."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Airplane Mode",
        "Test_Sce_Description": "Verify that the SA Tool disables network communications when the 'Airplane Mode' is selected. The device should not be able to perform any inspections, counters, and queries. An airplane icon should be displayed in the top notification bar when this mode is enabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool. The minimum limit for volume should be configurable. This test will cover the functionality of the sound adjustment feature."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "Verify that the SA Tool reboots within an acceptable time frame. This test will cover the performance aspect of the reboot process."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "Verify that the SA Tool maintains all security features and data integrity during and after the reboot process. This test will cover the security aspect of the reboot process."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "Verify that the SA Tool handles exceptions properly during the reboot process. For example, if the device is unable to connect to a network, the tool should still be able to operate in offline mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Alternate Flow",
        "Test_Sce_Description": "Verify that the SA Tool can handle alternate flows during the reboot process. For example, if the device is already running in the background, the operator should be able to tap on the App Overview button on the bottom navigation bar and select the desired application to launch it."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State with SA Tool application running in the background",
        "Test_Sce_Description": "Verify that if the SA Tool PDS application is running but is not in the foreground (i.e., the operator is using another application), the application will be in Standby State."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Resuming functionality from Standby State",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that in Revenue Mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that in Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State with Open Payments Media",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device configured for only farecard reversals",
        "Test_Sce_Description": "Verify that when the device is configured for only farecard reversals and a customer attempts to tap their Open Payments Media on the card reader, the 'Only Available for Farecards' error message is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device in Pilot mode with unapproved Open Payments media",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device, enters the lock screen passcode and signs in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool Display after Switching from Standby to In-Service State",
        "Test_Sce_Description": "Verify that upon successful sign-in, the SA Tool enters the in-service state and displays the shift preferences screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State before Threshold",
        "Test_Sce_Description": "Verify that if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value that requires logging in, the SA Tool displays the home screen without requiring sign-in and navigation to the home screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool State after Switching from In-Service to Standby State",
        "Test_Sce_Description": "Verify that after switching from in-service to standby state, the SA Tool turns off the screen and goes into standby state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching to Third Party Application on SA Tool",
        "Test_Sce_Description": "Verify that the operator can successfully switch to a third party application on SA Tool and the SA Tool application runs in the background and goes into standby state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after Switching Device from Standby to In-Service State",
        "Test_Sce_Description": "Verify that if the operator attempts to change SP on the login screen after switching the device from standby to in-service state, the SA Tool application notifies the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool Functionality in Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully suspends all functionality while in Standby state and disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Resuming Functionality of SA Tool Application",
        "Test_Sce_Description": "Verify that the operator can successfully resume the functionality of the SA Tool application by switching back to the SA Tool application from a third-party application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool Functionality in Revenue Mode",
        "Test_Sce_Description": "Verify that in the Revenue Mode, the SA Tool operator can successfully interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool Functionality in Training Mode",
        "Test_Sce_Description": "Verify that in the Training Mode, the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that an authorized operator is able to launch the SA Tool Application from the home screen of the SA Tool device. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Unsuccessful Continuous Self-Diagnostic Check",
        "Test_Sce_Description": "Verify that if the SA Tool performs the continuous diagnostic checks and determines that the device is unable to connect to a network, this is indicated on the SA Tool. The application should still launch and the sign-in screen should be displayed, indicating that the SA Tool can operate in offline mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Unsuccessful Initial Self-Diagnostic Check",
        "Test_Sce_Description": "Verify that if the SA Tool performs initial self-diagnostic checks and finds critical failures, the SA Tool goes to error state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Exception Flow: Unsuccessful Continuous Self-Diagnostic Check",
        "Test_Sce_Description": "Verify that if the SA Tool application performs the continuous self-diagnostics for storage, battery or secure element and finds errors or failures in any of these elements, the SA Tool goes to out-of-service state and a critical event is sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that an authorized operator is able to switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button present on the android navigation bar."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Alternate Flow: Switching to an Application Running in the Background",
        "Test_Sce_Description": "Verify that if the application that the operator intends to launch is already running in the device background, the operator can tap on the App Overview button on the bottom navigation bar, navigate through the list of open applications until they find the desired application, and press on the desired application to launch it."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that if a SA Tool is in \u201cOut-of-Service\u201d state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off. The operator should be able to press the physical power button to switch the SA Tool into standby state directly. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator should be able to launch multiple applications on the android device and move between them. If the SA Tool PDS application is running but is not in the foreground, the application should be in Standby State. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator is able to select which mode they would like to operate their shift in. The Revenue Mode should allow the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "SA Tool application is running in the background",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. This should allow for thorough training directly at the SA Tool. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode. They should not be a form of valid proof of payment."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal with Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where at least one mean of payment is credit or debit. The system should prompt the operator to confirm cancellation, reverse non-credit/debit payments automatically, and require the operator to choose a mean of payment for a refund void. The system should also handle both successful and unsuccessful Moneris processing correctly."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Split Payment Refund/Reversal without Credit/Debit",
        "Test_Sce_Description": "Verify that the system correctly handles a split payment refund/reversal where none of the means of payment are credit or debit. The system should prompt the operator to confirm cancellation and reverse the payment means automatically. The system should also prompt the operator to begin a refund void."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Exceeding Maximum Product Quantity",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the quantity of a product added to the cart exceeds the maximum allowable amount. The system should not allow the operator to add more than the maximum quantity and should require the operator to process the customer's request in multiple transactions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "No Eligible Products for Refund/Reversal",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where no products are eligible for refund or reversal. The system should display an error message and return to the main menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Eligible Products for Refund/Reversal Not Requested by Customer",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the products eligible for refund or reversal are not what the customer requested. The operator should inform the customer and return to the main menu."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Internet Connection Failure",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the internet connection is lost during a flow that requires internet connection. The system should time out, display an error message, and provide options to try again or cancel."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device goes into an out-of-service state. The system should not close the operator's shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the device goes into a standby state. The system should disconnect from all peripherals to conserve battery life and require the operator to press the power button and sign-in to return to the in-service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "SA Tool Application Running in Background",
        "Test_Sce_Description": "Verify that the system correctly handles a situation where the SA Tool application is running in the background. The system should disconnect from all peripherals to conserve battery life and require the operator to switch back to the SA Tool application to resume functionality."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Revenue Mode. The operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The system should only have access to the EPT in this mode and should accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Revenue Mode",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the system correctly operates in Training Mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. The system should not accept credit/debit payments and all paper tickets printed should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Verify Out-of-Service State",
        "Test_Sce_Description": "Check if the SA Tool is unable to accept a Farecard when it is in the 'Out-of-Service' state. Also, verify if the SA Tool application does not close the operator's shift unless the operator has requested to sign-off when the device goes into out-of-service state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Verify Standby State",
        "Test_Sce_Description": "Check if the SA Tool suspends all functionality and the screen turns off when it is in Standby state. Also, verify if the SA Tool disconnects from all the peripherals to conserve battery life."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Verify SA Tool application running in the background",
        "Test_Sce_Description": "Check if the SA Tool allows the operator to use authorized third-party applications and if it goes into Standby State when the SA Tool PDS application is running in the background."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Verify Revenue Mode",
        "Test_Sce_Description": "Check if the operator can interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in the Revenue Mode. Also, verify if the SA tool only has access to the EPT in the revenue mode and accepts the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Verify Training Mode",
        "Test_Sce_Description": "Check if the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Also, verify if all paper tickets printed from the SA Tool indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Verify Configurable Functionality",
        "Test_Sce_Description": "Check if the SA Tool Operators, SA Tool Operators - 3rd Party, SDistance based Transitrvisors, Maintenance, Training have the correct access and functionality as per the requirements."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Verify Alternate Flow",
        "Test_Sce_Description": "Check if the SA Tool application runs in the background and goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Verify Exception Flow",
        "Test_Sce_Description": "Check if the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Verify In-App Training and FAQ",
        "Test_Sce_Description": "Check if the operator can access in-app training and frequently asked questions (FAQs) and if the content is updated or changed the SA Tool syncs with the device and updates the content."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Verify Alternate Flow for In-App Training and FAQ",
        "Test_Sce_Description": "Check if the SA Tool loads and displays the last saved content (homepage) on the device when it is offline and if the training being played by the operator continues to play while the new content is downloaded to the device."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Training Mode",
        "Test_Scnario": "Verify Exception Flow for In-App Training and FAQ",
        "Test_Sce_Description": "Check if the SA Tool displays a toast message on the Inspection home screen notifying the operator that there is no content available when the In-App Training has not been downloaded to the SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that the authorized operator is able to launch the SA Tool Application successfully from the home screen of the SA Tool device. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Unsuccessful Continuous Self-Diagnostic Check",
        "Test_Sce_Description": "Verify that if the SA Tool performs the continuous diagnostic checks and determines that the device is unable to connect to a network, this is indicated on the SA Tool. The application should still be able to operate in offline mode, but forget passcode and passcode change functionalities should be unavailable."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Unsuccessful Initial Self-Diagnostic Check",
        "Test_Sce_Description": "Verify that if the SA Tool performs initial self-diagnostic checks and finds critical failures, the tool goes to error state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Unsuccessful Continuous Self-Diagnostic Check for Storage, Battery or Secure Element",
        "Test_Sce_Description": "Verify that if the SA Tool application performs the continuous self-diagnostics for storage, battery or secure element and finds errors or failures in any of these elements, the tool goes to out-of-service state. A critical event should be sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that the authorized operator is able to switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button present on the android navigation bar."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Launching Already Opened Application",
        "Test_Sce_Description": "Verify that if the application that the operator intends to launch is already running in the device background, the operator can tap on the App Overview button on the bottom navigation bar, swipe to navigate through the list of open applications until they find the desired application, and press on the desired application to launch it."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Sign-In to SA Tool application (First-Time User)",
        "Test_Sce_Description": "Verify that the first-time user is able to sign-in to the SA Tool application using their operator badge ID and temporary passcode. Upon successful sign-in, the user should be required to change their temporary passcode and set up security questions. The new passcode must be a 4-digit number."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Incorrect Username or Passcode Entry",
        "Test_Sce_Description": "Verify that if the operator enters an incorrect username or passcode, the device informs the operator that the passcode is incorrect for the counted number of times, and a re-try is permitted after 30 seconds. During the 30-second countdown, the user should not be allowed to attempt sign on."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "First-Time User Sign-In",
        "Test_Sce_Description": "Verify that a first-time user can successfully sign in to the SA Tool application using their operator badge ID and temporary passcode. The user should be prompted to change their temporary passcode upon initial log-in."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Online Authentication",
        "Test_Sce_Description": "Verify that the SA Tool communicates with the User management service to authenticate user login for first-time users and after the local cache is cleaned based on a configurable credential caching duration."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Local Authentication",
        "Test_Sce_Description": "Verify that the SA Tool can authenticate users re-logging into the same SA Tool and whose credentials have not been cleaned based on the configurable credential caching duration. The local credential cache should only store the credentials of users who have logged in to the specific device previously."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Security Setup",
        "Test_Sce_Description": "Verify that the SA Tool application informs the operator of successful first-time sign-in and displays the Security Setup screen. The operator should be prompted to set up security questions and a new passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Passcode Validation",
        "Test_Sce_Description": "Verify that the SA Tool application validates that the new passcode meets passcode length criteria by connecting to the user management service. The application should also validate that the new passcode does not match the temporary passcode, and that the new passcodes that were entered twice match each other."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Incorrect Username or Passcode",
        "Test_Sce_Description": "Verify that the SA Tool application records a cumulative number of unsuccessful sign on attempts for a single valid operator badge ID on a SA Tool. When the number of unsuccessful sign-in attempts reaches the maximum number of sign-on attempts, the SA Tool application should deny access to that operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Network Unavailability",
        "Test_Sce_Description": "Verify that the SA Tool application displays a message to the operator requesting them to sign in when network is available if the network is unavailable during the first-time sign-in process."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "New Passcode is Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that the SA Tool application detects that the new passcode is the same as the temporary passcode in the Subsystem and informs the user of the error and clears the new passcode fields."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that the SA Tool will not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Network Unavailability during First Time Sign-in",
        "Test_Sce_Description": "Verify that the application correctly handles the scenario when the network is unavailable during the first time sign-in. The application should display a message to the operator requesting them to sign in when network is available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Maximum Number of Login Attempts",
        "Test_Sce_Description": "Verify that the application correctly handles the scenario when the maximum number of unsuccessful sign-in attempts is reached. The application should lock the operator user account and inform the operator that the user account associated with the operator ID is locked."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "New Passcode is Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that the application correctly handles the scenario when the new passcode entered by the operator is the same as the temporary passcode. The application should inform the user of the error and clear the new passcode fields."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that the application correctly handles the scenario when the new passcode entered by the operator does not meet the pre-defined length criteria. The application should not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Incorrect Sign-on Attempts",
        "Test_Sce_Description": "Verify that the application correctly handles the scenario when the operator enters an invalid passcode at the 10th attempt. The application should inform the operator that the passcode is incorrect for the counted number of times, and a re-try is permitted after 30 seconds."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Successful First-Time Sign-in",
        "Test_Sce_Description": "Verify that the application correctly handles the scenario when the operator enters a valid operator badge ID and temporary passcode combination for the first time. The application should inform the operator of successful first-time sign-in and display the Security Setup screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Security Questions and New Passcode Setup",
        "Test_Sce_Description": "Verify that the application correctly handles the scenario when the operator sets up security questions and a new passcode. The application should validate that the new passcode meets passcode length criteria and does not match the temporary passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Shift Parameters Selection",
        "Test_Sce_Description": "Verify that the application correctly handles the scenario when the operator selects their parameters for the shift. The application should display a confirmation screen to the operator and start the operator\u2019s shift."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Operator Enters Incorrect Username or Passcode",
        "Test_Sce_Description": "Verify that the application correctly handles the scenario when the operator enters an incorrect username or passcode. The application should inform the operator that the username or passcode is incorrect."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Network Unavailability during First Time Sign In",
        "Test_Sce_Description": "Verify that the application displays a message to the operator requesting them to sign in when network is available, when the operator tries to sign in for the first time using a temporary passcode and the network is not available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Maximum Number of Login Attempts",
        "Test_Sce_Description": "Verify that the application records a cumulative number of unsuccessful sign on attempts for a single valid operator badge ID on a SA Tool. This counter should be maintained throughout the device reboot. When the number of unsuccessful sign-in attempts reaches the maximum number of sign-on attempts, the application should deny access to that operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "New Passcode is the Same as The Temporary Passcode",
        "Test_Sce_Description": "Verify that the application detects that the new passcode is the same as the temporary passcode in the Subsystem and informs the user of the error and clears the new passcode fields."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that the application does not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Operator Account Locked during Passcode Reset",
        "Test_Sce_Description": "Verify that the application detects that operator account has been locked by checking the User management service and notifies the operator with a corresponding error message, when the operator has reached the maximum number of operator account log-in attempts and has been locked out and is trying to reset their passcode on any SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Invalid Operator Badge ID during Passcode Reset",
        "Test_Sce_Description": "Verify that the application checks with the User management service and determines that the operator badge ID is invalid and notifies the operator with a corresponding error message, when the operator enters an invalid operator badge ID when resetting their passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Invalid Security Question Answers during Passcode Reset",
        "Test_Sce_Description": "Verify that the application validates that the security question answers entered do not match those stored in the User management service and notifies the operator with a corresponding error message, when the operator enters invalid security question answers when resetting their passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Mismatch in New Passcodes during Passcode Reset",
        "Test_Sce_Description": "Verify that the application validates that the new passcodes that were entered twice are not same and notifies the operator with a corresponding error message, when the operator enters new passcode twice, but new passcodes do not match."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "New Passcodes Do Not Meet Length Criteria during Passcode Reset",
        "Test_Sce_Description": "Verify that the application does not enable the submit button until the passcode entered is the correct length, when the operator enters new passcode twice, but new passcodes do not meet passcode length criteria."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "First-Time User Tries to Reset Passcode",
        "Test_Sce_Description": "Verify that the application connects to the User management service and validates that the operator badge ID entered belongs to a first-time user and notifies the operator with a corresponding error message and clears the passcode field, when the operator tries to reset passcode but is a first-time user."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Maximum Number of Forgot Passcode Attempts",
        "Test_Sce_Description": "Verify that the application records a cumulative number of unsuccessful reset passcode attempts for a single valid operator ID on a specific SA Tool. This counter should be maintained throughout the device reboot. When the number of unsuccessful reset passcode attempts reaches the maximum reset passcode attempts, the application should deny access to that operator until the operator ID is unlocked by the CLIENT back-office user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Account Validation Fails after Passcode Reset",
        "Test_Sce_Description": "Verify that the application validates the account after the user has entered all fields correctly in the Reset Passcode screen and has successfully reset their passcode. If the validation fails, the application should notify the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "New Passcode is Same as Temporary Passcode",
        "Test_Sce_Description": "This scenario will test if the system correctly identifies when the new passcode entered by the user is the same as the temporary passcode. The system should display an error message and clear the new passcode fields."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "This scenario will test if the system correctly identifies when the new passcode entered by the user does not meet the pre-defined length criteria. The system should not enable the submit button until the passcode entered is of the correct length."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Sign-in without network connection",
        "Test_Sce_Description": "This scenario will test if the system allows the operator to sign-in using the local cache when there is no network connection. The system should validate the operator badge ID and passcode combination based on the credentials stored in the local cache."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Sign-in while another operator is signed-in to the same device",
        "Test_Sce_Description": "This scenario will test if the system allows a new operator to sign-in while another operator is already signed-in to the same device. The system should handle this scenario correctly without causing any data conflicts."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Sce_Description": "This scenario will test if the system correctly locks the operator account when the maximum number of unsuccessful sign-in attempts has been reached. The system should display a message informing the operator that the account is locked and clear the passcode field."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "First Time Sign-in with Temporary Passcode and No Network",
        "Test_Sce_Description": "This scenario will test if the system correctly handles the situation when a first-time operator tries to sign-in using a temporary passcode and there is no network available. The system should display a message requesting the operator to sign-in when network is available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Sign-In to SA Tool application at the beginning of the shift",
        "Test_Sce_Description": "This scenario will test if the system correctly allows authorized operators to sign-in to the SA Tool application at the beginning of their shift. The system should validate the operator badge ID and passcode, and start the operator\u2019s shift."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Operator Selects Route Parameters for the Shift",
        "Test_Sce_Description": "This scenario will test if the system correctly allows the operator to select their route parameters for the shift after sign-in. The system should display a confirmation screen to the operator and start the operator\u2019s shift."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "This scenario will test if the SA Tool application correctly identifies when the new passcode entered by the user does not meet the pre-defined length criteria. The test will involve entering a new passcode that is shorter or longer than the pre-defined length and verifying that the submit button remains disabled until a passcode of the correct length is entered."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Maximum Number of Change Attempts Reached",
        "Test_Sce_Description": "This scenario will test if the SA Tool application correctly locks the operator account after the maximum number of unsuccessful change passcode attempts has been reached. The test will involve entering an incorrect current passcode multiple times until the maximum number of attempts is reached, and verifying that the operator account is locked and the user is redirected to the sign-in screen with an appropriate error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Account Validation Fails After Passcode Reset",
        "Test_Sce_Description": "This scenario will test if the SA Tool application correctly handles a situation where account validation fails due to loss of connectivity after the passcode has been reset. The test will involve resetting the passcode, simulating a loss of connectivity, and verifying that the user is redirected to the home screen with a message that the passcode has been successfully reset."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Passcode Expiry",
        "Test_Sce_Description": "This scenario will test if the SA Tool application correctly prompts the operator to enter a new passcode when the current passcode has expired. The test will involve setting the current passcode to an expired state, and verifying that the operator is prompted to enter a new passcode upon sign-in."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Passcode Will Expire in the Future",
        "Test_Sce_Description": "This scenario will test if the SA Tool application correctly prompts the operator to change their passcode when it is set to expire in the future. The test will involve setting the current passcode to expire in a certain number of days, and verifying that the operator is prompted to change their passcode upon sign-in."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Secondary Transit Agency Without Open Payments",
        "Test_Sce_Description": "This scenario will test if the SA Tool application correctly functions only with Farecard taps when the secondary transit agency does not have Open Payments enabled. The test will involve toggling to the secondary transit agency and verifying that the application does not respond to taps from contactless payment cards."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Secondary Transit Agency With Open Payments",
        "Test_Sce_Description": "This scenario will test if the SA Tool application correctly functions with both Farecard and Open Payment media when the secondary transit agency has Open Payments enabled. The test will involve toggling to the secondary transit agency and verifying that the application responds to taps from both Farecard and contactless payment cards."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Temporary Passcode Expires",
        "Test_Sce_Description": "This scenario will test if the SA Tool application correctly identifies when a temporary passcode has expired. The test will involve entering an expired temporary passcode and verifying that the operator is informed of the expired passcode and the invalid entry counter is incremented."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Incorrect Username or Passcode",
        "Test_Sce_Description": "This scenario will test if the SA Tool application correctly identifies when an incorrect operator badge ID or passcode is entered. The test will involve entering an incorrect operator badge ID or passcode and verifying that the operator is informed of the invalid entry and the invalid entry counter is incremented."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Maximum Number of Login Attempts Reached",
        "Test_Sce_Description": "This scenario will test if the SA Tool application correctly locks the operator account after the maximum number of unsuccessful login attempts has been reached. The test will involve entering an incorrect operator badge ID or passcode multiple times until the maximum number of attempts is reached, and verifying that the operator account is locked."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Launching the SA Tool Application",
        "Test_Sce_Description": "Verify that the authorized operator is able to launch the SA Tool Application successfully. The application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. Upon successful launch, the sign-in screen should be displayed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Power on SA Tool: continuous self-diagnostic check is unsuccessful (network connection not available)",
        "Test_Sce_Description": "Verify that the SA Tool performs the continuous diagnostic checks and determines that the device is unable to connect to a network. This should be indicated on the SA Tool. The application should still be able to operate in offline mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Power on SA Tool: initial self-diagnostic check is unsuccessful",
        "Test_Sce_Description": "Verify that the SA Tool performs initial self-diagnostic checks and finds critical failures. The tool should go to error state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Power on SA Tool: Continuous self-diagnostic check is unsuccessful (storage, battery or secure element)",
        "Test_Sce_Description": "Verify that the SA Tool application performs the continuous self-diagnostics for storage, battery or secure element and finds errors or failures in any of these elements. The tool should go to out-of-service state and a critical event should be sent to SOTI Mobicontrol and CSM."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications",
        "Test_Sce_Description": "Verify that the authorized operator is able to switch between the SA Tool Application and the whitelisted third-party applications on the device. The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button present on the android navigation bar."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "The application is already launched and is running in the background",
        "Test_Sce_Description": "Verify that if the application that the operator intends to launch is already running in the device background, the operator should be able to tap on the App Overview button on the bottom navigation bar and navigate through the list of open applications until they find the desired application."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Sign-In to SA Tool application (First-Time User)",
        "Test_Sce_Description": "Verify that the first-time user is able to sign-in to the SA Tool application using their operator badge ID and temporary passcode. The application should validate the operator badge ID and temporary passcode combination based on operator credentials stored in user management service. Upon successful sign-in, the Security Setup screen should be displayed."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)",
        "Test_Scnario": "Operator Enters Incorrect Username or Passcode",
        "Test_Sce_Description": "Verify that if the operator enters an incorrect username or passcode, the device informs the operator that the passcode is incorrect for the counted number of times, and a re-try is permitted after 30 seconds. During the 30-second countdown, the user should not be allowed to attempt sign on."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify successful sign-in for first-time user",
        "Test_Sce_Description": "Test if a first-time user can successfully sign-in using a valid operator badge ID and temporary passcode. The user should be able to change their temporary passcode upon initial log-in and set up security questions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify unsuccessful sign-in with invalid passcode",
        "Test_Sce_Description": "Test if the system correctly identifies an invalid passcode during sign-in. The system should inform the operator that the passcode is incorrect and allow a re-try after 30 seconds."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify unsuccessful sign-in with invalid badge ID",
        "Test_Sce_Description": "Test if the system correctly identifies an invalid badge ID during sign-in. The system should inform the operator that the badge ID is incorrect and allow a re-try after 30 seconds."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify sign-in attempt after maximum number of failed attempts",
        "Test_Sce_Description": "Test if the system correctly locks the operator account after the maximum number of failed sign-in attempts. The system should deny access to the operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify sign-in with network unavailable",
        "Test_Sce_Description": "Test if the system correctly informs the operator to sign in when network is available when trying to sign-in for the first time using a temporary passcode and the network is not available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify new passcode is not the same as the temporary passcode",
        "Test_Sce_Description": "Test if the system correctly detects that the new passcode is the same as the temporary passcode. The system should inform the user of the error and clear the new passcode fields."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify new passcode length meets pre-defined criteria",
        "Test_Sce_Description": "Test if the system correctly validates that the new passcode meets passcode length criteria. The system should not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify successful storage of language preference",
        "Test_Sce_Description": "Test if the system correctly stores the user selected Language preference in the user management service upon successful validation of the credentials."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify successful display of Security Setup screen",
        "Test_Sce_Description": "Test if the system correctly displays the Security Setup screen upon successful first-time sign-in."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters Incorrect Username or Passcode",
        "Test_Scnario": "Verify successful setup of security questions and new passcode",
        "Test_Sce_Description": "Test if the operator can successfully set up security questions and a new passcode. The new passcode must be a 4-digit number."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Network Unavailability during First Time Sign-in",
        "Test_Sce_Description": "Verify that the application correctly handles a situation where the network is unavailable during the first time sign-in. The application should display a message to the operator requesting them to sign in when network is available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Maximum Number of Login Attempts",
        "Test_Sce_Description": "Verify that the application correctly handles a situation where the maximum number of login attempts has been reached. The application should lock the operator user account and inform the operator that the user account associated with the operator ID is locked."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "New Passcode is Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that the application correctly handles a situation where the new passcode entered by the operator is the same as the temporary passcode. The application should inform the user of the error and clear the new passcode fields."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that the application correctly handles a situation where the new passcode entered by the operator does not meet the pre-defined length criteria. The application should not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Incorrect Sign-on at 10th Attempt",
        "Test_Sce_Description": "Verify that the application correctly handles a situation where the operator enters an invalid passcode at the 10th attempt. The application should inform the operator that the passcode is incorrect for the counted number of times, and a re-try is permitted after 30 seconds."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Successful First-Time Sign-in",
        "Test_Sce_Description": "Verify that the application correctly handles a situation where the operator successfully signs in for the first time. The application should inform the operator of successful first-time sign-in and display the Security Setup screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Setting Up Security Questions and New Passcode",
        "Test_Sce_Description": "Verify that the application correctly handles a situation where the operator sets up security questions and a new passcode. The application should validate that the new passcode meets passcode length criteria and does not match the temporary passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Scnario": "Operator Enters Incorrect Username or Passcode",
        "Test_Sce_Description": "Verify that the application correctly handles a situation where the operator enters an incorrect username or passcode. The application should inform the operator that the username or passcode is incorrect."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Network Unavailability during First Time Sign In",
        "Test_Sce_Description": "Verify that the SA Tool application displays a message to the operator requesting them to sign in when network is available, when the operator tries to sign in for the first time using a temporary passcode and the network is not available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Maximum Number of Unsuccessful Login Attempts",
        "Test_Sce_Description": "Verify that the SA Tool application records a cumulative number of unsuccessful sign on attempts for a single valid operator badge ID on a SA Tool and denies access to that operator when the number of unsuccessful sign-in attempts reaches the maximum number of sign-on attempts."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Locking of Operator Account after Maximum Unsuccessful Attempts",
        "Test_Sce_Description": "Verify that the SA Tool application locks the operator user account and informs the operator that the user account associated with the operator ID is locked when the maximum number of sign-in attempts has been reached."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "New Passcode is Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that the SA Tool application detects that the new passcode is the same as the temporary passcode in the Subsystem and informs the user of the error and clears the new passcode fields."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that the SA Tool will not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Reset Passcode when Operator Account is Locked",
        "Test_Sce_Description": "Verify that the SA Tool application detects that operator account has been locked by checking the User management service and notifies the operator with a corresponding error message when the operator tries to reset their passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Reset Passcode with Invalid Operator Badge ID",
        "Test_Sce_Description": "Verify that the SA Tool application checks with the User management service and determines that the operator badge ID is invalid and notifies the operator with a corresponding error message when the operator tries to reset their passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Reset Passcode with Invalid Security Question Answers",
        "Test_Sce_Description": "Verify that the SA Tool application validates that the security question answers entered do not match those stored in the User management service and notifies the operator with a corresponding error message when the operator tries to reset their passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Reset Passcode with Mismatched New Passcodes",
        "Test_Sce_Description": "Verify that the SA Tool application validates that the new passcodes that were entered twice are not same and notifies the operator with a corresponding error message when the operator tries to reset their passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Reset Passcode with Incorrect Passcode Length",
        "Test_Sce_Description": "Verify that the SA Tool application will not enable the submit button until the passcode entered is the correct length when the operator tries to reset their passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Reset Passcode for First-Time User",
        "Test_Sce_Description": "Verify that the SA Tool application connects to the User management service and validates that the operator badge ID entered belongs to a first-time user and notifies the operator with a corresponding error message and clears the passcode field when the operator tries to reset their passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Maximum Number of Unsuccessful Reset Passcode Attempts",
        "Test_Sce_Description": "Verify that the SA Tool application records a cumulative number of unsuccessful reset passcode attempts for a single valid operator ID on a specific SA Tool and denies access to that operator when the number of unsuccessful reset passcode attempts reaches the maximum reset passcode attempts."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Scnario": "Account Validation Failure after Passcode Reset",
        "Test_Sce_Description": "Verify that the SA Tool application validates the operator account after the passcode has been reset and if the validation fails, the application should notify the operator with a corresponding error message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Validating the same temporary and new passcode",
        "Test_Sce_Description": "This scenario is to validate the functionality where the system should not allow the user to set the new passcode same as the temporary passcode. The user tries to set the new passcode same as the temporary one, the system should detect this and display an error message to the user and clear the new passcode fields."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Validating the passcode length criteria",
        "Test_Sce_Description": "This scenario is to validate the functionality where the system should not enable the submit button until the passcode entered meets the pre-defined length criteria. The user tries to enter a passcode that does not meet the length criteria, the system should detect this and keep the submit button disabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Validating the maximum number of login attempts",
        "Test_Sce_Description": "This scenario is to validate the functionality where the system should lock the user account if the maximum number of unsuccessful login attempts is reached. The user tries to login multiple times with incorrect credentials, the system should detect this and lock the user account after the maximum number of attempts is reached."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Validating the sign-in without network connection",
        "Test_Sce_Description": "This scenario is to validate the functionality where the system should allow the user to sign-in without network connection if the user's login details are stored in the local cache. The user tries to sign-in without network connection, the system should check the local cache and allow the user to sign-in if the details are found."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Validating the sign-in while another operator is signed-in",
        "Test_Sce_Description": "This scenario is to validate the functionality where the system should allow a new operator to sign-in while another operator is already signed-in to the same device. The new operator tries to sign-in, the system should allow this and switch the session to the new operator."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Validating the first time sign-in with temporary passcode without network",
        "Test_Sce_Description": "This scenario is to validate the functionality where the system should not allow the user to sign-in for the first time using a temporary passcode if the network is not available. The user tries to sign-in for the first time using a temporary passcode without network, the system should display a message to the user requesting them to sign-in when network is available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Validating the route parameters selection during sign-in",
        "Test_Sce_Description": "This scenario is to validate the functionality where the system should allow the operator to select their route parameters for the shift during sign-in. The operator tries to select the route parameters, the system should allow this and start the operator's shift."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode",
        "Test_Scnario": "Validating the language toggle functionality during sign-in",
        "Test_Sce_Description": "This scenario is to validate the functionality where the system should allow the operator to switch between English and French during sign-in. The operator tries to switch the language, the system should allow this and apply the language change to the sign-on page."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the new passcode entered by the user does not meet the pre-defined criteria. The application should not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Maximum Number of Change Attempts Reached",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the user has had multiple unsuccessful change attempts for the same operator ID. The application should record a cumulative number of unsuccessful change passcode attempts for a single valid operator ID on a specific SA Tool. When the number of unsuccessful change passcode attempts reaches the maximum change passcode attempts, the SA Tool should deny access to that operator until the operator ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Account Validation Fails After Passcode Has Been Reset",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the account validation fails after the passcode has been reset. The application may lose connectivity, or the Operator account may be locked when performing the final account validation after the passcode has been reset. The SA Tool application should redirect the user to the SA Tool home screen and inform the operator that the passcode has been successfully reset."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Operator\u2019s Passcode Has Expired",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the Operator\u2019s passcode has expired. The SA Tool should detect that the Operator\u2019s current passcode has expired and prompt the Operator to enter a new passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the Operator\u2019s passcode will expire in the future. The SA Tool should detect that the Operator\u2019s passcode will expire in a number of days and prompt the Operator to change their passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Temporary Passcode Expires",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the Operator\u2019s temporary passcode has expired. The SA Tool should inform the operator of an expired temporary passcode and increment the invalid entry counter by one to track the number of invalid sign-ins."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Operator Enters Incorrect Username or Passcode",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the Operator enters an incorrect username or passcode. The SA Tool should inform the operator of an invalid operator badge ID and passcode combination, and increment the invalid entry counter by one to track the number of invalid sign-ins."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Scnario": "Maximum Number of Log-in Attempts Reached",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the maximum number of log-in attempts has been reached. The SA Tool should deny access to the operator and inform them of the maximum number of log-in attempts reached."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in without network connection",
        "Test_Scnario": "Sign-in without network connection",
        "Test_Sce_Description": "Verify that the operator can sign-in to the SA Tool application without a network connection using the operator's login details stored in the local cache. The application should validate the operator's badge ID and passcode combination based on the credentials stored in the local cache."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in without network connection",
        "Test_Scnario": "Sign-in while another operator is signed-in",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator when another operator is currently signed-in to the same device. The application should ask the operator if they would like to continue signing in with their credentials. If the operator chooses to continue, the application should close the shift of the currently signed-in operator and open a shift for the new operator."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in without network connection",
        "Test_Scnario": "Sign-in while the device is on standby state",
        "Test_Sce_Description": "Verify that the operator can activate the device from standby state and sign-in to the SA Tool application. The device should require the operator to enter a passcode at the device lock screen. After a valid passcode is entered, the device should display the SA Tool application sign-in screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in without network connection",
        "Test_Scnario": "Sign-in with no network connectivity after passcode reset",
        "Test_Sce_Description": "Verify that the operator can sign-in to the SA Tool application with no network connectivity after the passcode has been reset. The new login credentials should be stored in the SA Tool application after the passcode reset, allowing the operator to log-in."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in without network connection",
        "Test_Scnario": "Operator enters new security questions/answers and passcode",
        "Test_Sce_Description": "Verify that the SA Tool application prompts the operator to select 2 new security questions and provide a new passcode when the operator's security questions/answers and passcode had been reset by a CLIENT Operations user. The operator should be able to update the security questions/answers and passcode successfully."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in without network connection",
        "Test_Scnario": "Operator's current passcode has expired",
        "Test_Sce_Description": "Verify that the SA Tool application prompts the operator to enter a new passcode when the operator's current passcode has expired. The operator should be able to submit and save the new passcode successfully."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in without network connection",
        "Test_Scnario": "Operator's passcode will expire in the future",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator when their passcode will expire in the future. The operator should be able to update their passcode before it expires."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in without network connection",
        "Test_Scnario": "Operator signs in for the first time using a temporary passcode and network is not available",
        "Test_Sce_Description": "Verify that the SA Tool application displays a message to the operator requesting them to sign in when network is available if the operator is signing in for the first time using a temporary passcode and the network is not available. The operator should not be signed in."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in without network connection",
        "Test_Scnario": "Operator reaches the maximum number of login attempts",
        "Test_Sce_Description": "Verify that the SA Tool application locks the operator user account when the number of unsuccessful sign-in attempts reaches the maximum number of sign-on attempts. The application should deny access to that operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in without network connection",
        "Test_Scnario": "New passcode is the same as the temporary passcode",
        "Test_Sce_Description": "Verify that the SA Tool application detects that the new passcode is the same as the temporary passcode in the Subsystem. The application should inform the user of the error and clear the new passcode fields."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in without network connection",
        "Test_Scnario": "New passcode length does not meet pre-defined criteria",
        "Test_Sce_Description": "Verify that the SA Tool application does not enable the submit button until the passcode entered is the correct length. The application should validate the length of the new passcode against the pre-defined criteria."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in while another operator is signed-in to the same device",
        "Test_Scnario": "First-Time User Sign-In",
        "Test_Sce_Description": "Verify that a first-time user can successfully sign-in to the SA Tool application using their operator badge ID and temporary passcode. The user should be able to change their temporary passcode upon initial log-in and set up security questions."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in while another operator is signed-in to the same device",
        "Test_Scnario": "Online Authentication",
        "Test_Sce_Description": "Verify that the SA Tool communicates with the User management service to authenticate user login. This should be required when the device is online for first-time users and after the local cache is cleaned based on a configurable credential caching duration."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in while another operator is signed-in to the same device",
        "Test_Scnario": "Local Authentication",
        "Test_Sce_Description": "Verify that local authentication is used for users re-logging into the same SA Tool and whose credentials have not been cleaned based on the configurable credential caching duration. The local credential cache should only store the credentials of users who have logged in to the specific device previously."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in while another operator is signed-in to the same device",
        "Test_Scnario": "Incorrect Username or Passcode",
        "Test_Sce_Description": "Verify that if an operator enters an incorrect username or passcode, the SA Tool application displays a message to the operator informing them of the incorrect entry."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in while another operator is signed-in to the same device",
        "Test_Scnario": "Network Unavailability",
        "Test_Sce_Description": "Verify that if the network is unavailable, the SA Tool application displays a message to the operator requesting them to sign in when network is available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in while another operator is signed-in to the same device",
        "Test_Scnario": "Maximum Number of Login Attempts",
        "Test_Sce_Description": "Verify that when the number of unsuccessful sign-in attempts reaches the maximum number of sign-on attempts, the SA Tool application denies access to that operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in while another operator is signed-in to the same device",
        "Test_Scnario": "New Passcode is Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that if the new passcode is the same as the temporary passcode, the SA Tool Device informs the user of the error and clears the new passcode fields."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in while another operator is signed-in to the same device",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "Verify that if the new passcode length does not meet the pre-defined criteria, the SA Tool will not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in while another operator is signed-in to the same device",
        "Test_Scnario": "Sign-in while another operator is signed-in",
        "Test_Sce_Description": "Verify that if another operator is already signed-in to the same device, the SA Tool application should not allow a new operator to sign-in until the previous operator has signed out."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in while the device is on standby state (screen off) and is signed-in to the current operator\u2019s shift",
        "Test_Scnario": "Switch SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the operator is able to switch the SA Tool from standby to in-service state by pressing the physical power button on the device, entering the lock screen passcode, and signing in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in while the device is on standby state (screen off) and is signed-in to the current operator\u2019s shift",
        "Test_Scnario": "Switch SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the operator is able to switch the SA Tool from standby to in-service state without requiring to log in if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in while the device is on standby state (screen off) and is signed-in to the current operator\u2019s shift",
        "Test_Scnario": "Switch SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the operator is able to switch the SA Tool from in-service to standby state by pressing the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in while the device is on standby state (screen off) and is signed-in to the current operator\u2019s shift",
        "Test_Scnario": "Operator navigates away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool application goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in while the device is on standby state (screen off) and is signed-in to the current operator\u2019s shift",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in while the device is on standby state (screen off) and is signed-in to the current operator\u2019s shift",
        "Test_Scnario": "New Operator signs in",
        "Test_Sce_Description": "Verify that a new operator is able to sign in to the SA Tool by entering own user ID and passcode and selecting Sign In, and that the current Operator is signed off from the SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in while the device is on standby state (screen off) and is signed-in to the current operator\u2019s shift",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator is able to manually shut down the SA Tool by pressing and holding the physical power button on the SA Tool, selecting \u201cPower off\u201d and confirming shut-down."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in while the device is on standby state (screen off) and is signed-in to the current operator\u2019s shift",
        "Test_Scnario": "Reboot SA Tool",
        "Test_Sce_Description": "Verify that the operator is able to manually reboot the SA Tool by pressing and holding the physical power button on the SA Tool, selecting the restart option, and confirming the restart."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in the SA Tool with no network connectivity after passcode has been reset",
        "Test_Scnario": "Reset Passcode: Account validation fails after passcode has been reset",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when it loses connectivity or the Operator account is locked after resetting the passcode. The application should redirect the user to the sign-in screen and inform the operator that the passcode has been successfully reset. The operator should be able to sign in to the SA Tool application with their new passcode when connectivity is reached, or account is unlocked."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in the SA Tool with no network connectivity after passcode has been reset",
        "Test_Scnario": "Forgot Passcode - New passcode is the same as the current passcode",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the new passcode entered by the operator is the same as the current passcode. The application should detect this and notify the operator with a corresponding error message, clear the new passcode fields, and increment the invalid answer counter by one to track the number of invalid reset passcode attempts."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in the SA Tool with no network connectivity after passcode has been reset",
        "Test_Scnario": "Operator Sign-Off",
        "Test_Sce_Description": "This scenario tests the procedures for authorized operators to sign-off the SA Tool application. The application should request for a confirmation that the Operator would like to sign-out of their current shift, display a digital end-of-shift statistics report to the operator, and send a shift statistics email to the established email distribution list once the operator successfully signs-off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in the SA Tool with no network connectivity after passcode has been reset",
        "Test_Scnario": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the network is unavailable and the operator is signing in for the first time using a temporary passcode. The application should display a message to the operator requesting them to sign in when network is available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in the SA Tool with no network connectivity after passcode has been reset",
        "Test_Scnario": "Operator Reaches the Maximum Number of Login Attempts",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator reaches the maximum number of login attempts. The application should deny access to that operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in the SA Tool with no network connectivity after passcode has been reset",
        "Test_Scnario": "New Passcode is the Same as The Temporary Passcode",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the new passcode entered by the operator is the same as the temporary passcode. The application should detect this, inform the user of the error, and clear the new passcode fields."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Sign-in the SA Tool with no network connectivity after passcode has been reset",
        "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria",
        "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the new passcode entered by the operator does not meet the pre-defined criteria. The application should not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters New Security Questions/Answers and Passcode",
        "Test_Scnario": "First-Time User Sign-In",
        "Test_Sce_Description": "Verify that a first-time user can successfully sign-in to the SA Tool application using their operator badge ID and temporary passcode. The user should be prompted to change their temporary passcode upon initial log-in."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters New Security Questions/Answers and Passcode",
        "Test_Scnario": "Online Authentication",
        "Test_Sce_Description": "Verify that the SA Tool communicates with the User management service to authenticate user login. This should be required when the device is online for first time users and after the local cache is cleaned based on a configurable credential caching duration."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters New Security Questions/Answers and Passcode",
        "Test_Scnario": "Local Authentication",
        "Test_Sce_Description": "Verify that local authentication is used for users re-logging into the same SA Tool and whose credentials have not been cleaned based on the configurable credential caching duration. The local credential cache should only store the credentials of users who have logged in to the specific device previously."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters New Security Questions/Answers and Passcode",
        "Test_Scnario": "Security Setup",
        "Test_Sce_Description": "Verify that the SA Tool application informs the operator of successful first-time sign-in and displays the Security Setup screen. The operator should be notified that they will need to set up security questions and a new passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters New Security Questions/Answers and Passcode",
        "Test_Scnario": "Passcode Validation",
        "Test_Sce_Description": "Verify that the SA Tool application validates that the new passcode meets passcode length criteria by connecting to the user management service. The application should also validate that the new passcode does not match the temporary passcode, and that the new passcodes that were entered twice match each other."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters New Security Questions/Answers and Passcode",
        "Test_Scnario": "Expired Passcode",
        "Test_Sce_Description": "Verify that the SA Tool detects that the Operator\u2019s current passcode has expired and prompts the Operator to enter a new passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters New Security Questions/Answers and Passcode",
        "Test_Scnario": "Future Passcode Expiry",
        "Test_Sce_Description": "Verify that the SA Tool detects that the Operator\u2019s passcode will expire in a number of days and prompts the Operator to change their passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters New Security Questions/Answers and Passcode",
        "Test_Scnario": "Secondary Transit Agency Toggle",
        "Test_Sce_Description": "Verify that the application functions correctly when the operator toggles to a secondary Transit Agency. The application should function only with Farecard taps if Open Payments is not enabled for the secondary transit agency, and should function for both Farecard s and Open Payment media if Open Payments is enabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters New Security Questions/Answers and Passcode",
        "Test_Scnario": "Expired Temporary Passcode",
        "Test_Sce_Description": "Verify that the SA Tool informs the operator of an expired temporary passcode and increments the invalid entry counter by one to track the number of invalid sign-ins when the operator enters an expired temporary passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters New Security Questions/Answers and Passcode",
        "Test_Scnario": "Incorrect Username or Passcode",
        "Test_Sce_Description": "Verify that the SA Tool informs the operator of an invalid operator badge ID and passcode combination, and increments the invalid entry counter by one to track the number of invalid sign-ins when the operator enters an invalid operator badge ID and/or an invalid passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator Enters New Security Questions/Answers and Passcode",
        "Test_Scnario": "Maximum Number of Log-in Attempts",
        "Test_Sce_Description": "Verify that the SA Tool correctly handles the situation when the maximum number of unsuccessful sign-in attempts for the same operator badge ID has been reached."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator\u2019s Current Passcode Has Expired",
        "Test_Scnario": "Expired Passcode",
        "Test_Sce_Description": "Verify that the system correctly identifies an expired passcode and prompts the operator to enter a new one. The system should not allow the operator to proceed without entering a new passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator\u2019s Current Passcode Has Expired",
        "Test_Scnario": "Passcode Submission",
        "Test_Sce_Description": "Verify that the system correctly saves the new passcode when the operator selects Submit. The system should allow the operator to proceed with the new passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator\u2019s Current Passcode Has Expired",
        "Test_Scnario": "Passcode Expiry Notification",
        "Test_Sce_Description": "Verify that the system correctly identifies a passcode that will expire in the future and prompts the operator to change it. The system should allow the operator to either change the passcode or dismiss the message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator\u2019s Current Passcode Has Expired",
        "Test_Scnario": "Secondary Transit Agency without Open Payments",
        "Test_Sce_Description": "Verify that the system correctly functions only with Farecard taps when the secondary transit agency does not have Open Payments enabled. The system should not respond to taps from contactless payment cards."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator\u2019s Current Passcode Has Expired",
        "Test_Scnario": "Secondary Transit Agency with Open Payments",
        "Test_Sce_Description": "Verify that the system correctly functions for both Farecard taps and Open Payment media when the secondary transit agency has Open Payments enabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator\u2019s Current Passcode Has Expired",
        "Test_Scnario": "Expired Temporary Passcode",
        "Test_Sce_Description": "Verify that the system correctly identifies an expired temporary passcode and informs the operator of the expired passcode. The system should not allow the operator to proceed with the expired temporary passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator\u2019s Current Passcode Has Expired",
        "Test_Scnario": "Incorrect Username or Passcode",
        "Test_Sce_Description": "Verify that the system correctly identifies an incorrect username or passcode and informs the operator of the invalid credentials. The system should not allow the operator to proceed with the invalid credentials."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator\u2019s Current Passcode Has Expired",
        "Test_Scnario": "Maximum Number of Login Attempts",
        "Test_Sce_Description": "Verify that the system correctly locks the operator account after the maximum number of unsuccessful login attempts has been reached. The system should not allow the operator to proceed without unlocking the account."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator\u2019s Current Passcode Has Expired",
        "Test_Scnario": "First Time Sign-in without Network",
        "Test_Sce_Description": "Verify that the system correctly displays a message requesting the operator to sign in when network is available if the operator is signing in for the first time using a temporary passcode and the network is not available. The system should not allow the operator to sign in without network."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator\u2019s Current Passcode Has Expired",
        "Test_Scnario": "New Passcode Same as Temporary Passcode",
        "Test_Sce_Description": "Verify that the system correctly identifies when the new passcode is the same as the temporary passcode and informs the user of the error. The system should not allow the operator to proceed with the same passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator\u2019s Current Passcode Has Expired",
        "Test_Scnario": "New Passcode Length",
        "Test_Sce_Description": "Verify that the system correctly checks the length of the new passcode and does not enable the submit button until the passcode entered is the correct length."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Sce_Description": "Verify that the SA Tool correctly detects that the Operator\u2019s passcode will expire in a number of days and prompts the Operator to change their passcode. The operator should have the option to change their passcode or dismiss the message."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Passcode Change Functionality",
        "Test_Sce_Description": "Verify that the operator can successfully change their passcode when prompted by the SA Tool. The new passcode should be saved successfully and the operator should be able to log in with the new passcode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Passcode Expiry Notification",
        "Test_Sce_Description": "Verify that the SA Tool sends a notification to the operator when their passcode is about to expire. The notification should be sent a certain number of days before the passcode expires."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Passcode Expiry Dismissal",
        "Test_Sce_Description": "Verify that the operator can dismiss the passcode expiry notification and continue using the SA Tool. The notification should not appear again until the next login session."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Passcode Expiry After Dismissal",
        "Test_Sce_Description": "Verify that the operator can still use the SA Tool after dismissing the passcode expiry notification. The operator should be prompted to change their passcode when they log in after the passcode has expired."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Passcode Change Validation",
        "Test_Sce_Description": "Verify that the SA Tool validates the new passcode entered by the operator. The new passcode should meet the pre-defined criteria for length and complexity."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Passcode Change Error Handling",
        "Test_Sce_Description": "Verify that the SA Tool handles errors correctly when the operator tries to change their passcode. The operator should be informed of any errors and the passcode fields should be cleared."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Passcode Expiry in Offline Mode",
        "Test_Sce_Description": "Verify that the SA Tool handles passcode expiry correctly when the network is unavailable. The operator should be prompted to sign in when the network is available."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Maximum Number of Login Attempts",
        "Test_Sce_Description": "Verify that the SA Tool locks the operator's account after a certain number of unsuccessful login attempts. The operator should be informed that their account is locked and the passcode field should be cleared."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future",
        "Test_Scnario": "Account Unlocking",
        "Test_Sce_Description": "Verify that the operator's account can be unlocked by a CLIENT Operations User after it has been locked due to too many unsuccessful login attempts. The operator should be able to log in again after their account has been unlocked."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator is able to shut down the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with options such as 'Power off' and other standard functions. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sign In",
        "Test_Sce_Description": "Verify that a new operator is able to sign in to the SA Tool using their user ID and passcode. The tool should display a message indicating that the current operator is signed in and ask if the new operator wants to sign in anyway. Upon selecting 'Yes', the current operator should be signed off from the SA Tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Session Timeout",
        "Test_Sce_Description": "Verify that the SA Tool login screen is displayed due to session timeout. The tool should automatically sign out the current operator after a period of inactivity and require the operator to sign in again to access the tool."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign off."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Standby State",
        "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state where the screen will turn off after a period of inactivity. In this state, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life. An operator should be able to bring the device back into In-Service state by pressing the physical power button and signing in to the device lock screen."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Reboot",
        "Test_Sce_Description": "Verify that the operator is able to manually reboot the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with options such as 'Restart' and other standard functions. Upon selecting 'Restart', the device should turn off and power on again."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon, the operator is able to select the Revenue Mode which allows them to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA tool should only have access to the EPT in the revenue mode and accept credit and debit payments."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "Verify that the SA Tool reboots successfully when the operator selects the restart option. The tool should turn off and power on again as expected. Check that the tool is functional after the reboot."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Airplane Mode",
        "Test_Sce_Description": "Verify that when the operator selects the 'Airplane Mode' during the reboot process, the network communications are disabled as expected. The device should not be able to perform any inspections, counters, and queries. An airplane icon should be displayed in the top notification bar when this mode is enabled."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool during the reboot process. The minimum limit for volume should be configurable."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Power Off",
        "Test_Sce_Description": "Verify that when the operator selects the 'Power off' option during the reboot process, the device turns off as expected. The device should not power on again."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "Verify that the SA Tool handles exceptions correctly during the reboot process. For example, if there is a critical failure during the reboot, the tool should go to an error state."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Alternate Flow",
        "Test_Sce_Description": "Verify that the SA Tool handles alternate flows correctly during the reboot process. For example, if the operator selects an option other than 'Restart', 'Airplane Mode', or 'Power off', the tool should handle this selection appropriately."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "Verify that the SA Tool reboots within an acceptable time frame. The tool should not take an excessively long time to reboot."
    },
    {
        "Function_Flow_Name": "Operator sign-in",
        "Sub_Flow_Name": "Operator sign-off",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "Verify that the SA Tool maintains security during the reboot process. For example, any sensitive data should be securely stored and not be accessible during the reboot."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Shut-Down SA Tool via Physical Device Button",
        "Test_Sce_Description": "Verify that the operator is able to shut down the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with options including 'Power off'. Upon selecting 'Power off' and confirming shut-down, the device should turn off."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Sign Out on Shut Down",
        "Test_Sce_Description": "Verify that when the SA Tool is shut down, the current operator is signed off from the tool. The operator's shift should not be closed if it is still open."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Other Options Functionality",
        "Test_Sce_Description": "Verify that the other options displayed on the shut-down confirmation message, such as 'Reset', 'Airplane Mode', etc., function as expected. These options should not be required for running the SA Tool application and should not be used by the operators."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "Reboot SA Tool",
        "Test_Sce_Description": "Verify that the operator is able to reboot the SA Tool by pressing and holding the physical power button. The tool should display a confirmation message with options including 'Restart'. Upon selecting 'Restart', the device should turn off and power on again."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components. The SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Standby State",
        "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state where the screen will turn off after remaining inactive for a configurable period of time. In this state, the SA tool should disconnect from all the peripherals to conserve battery life."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Revenue Mode",
        "Test_Sce_Description": "Verify that in the Revenue Mode, the SA Tool operator is able to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Training Mode",
        "Test_Sce_Description": "Verify that in the Training Mode, the SA Tool operator is able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool User Access",
        "Test_Sce_Description": "Verify that different users have appropriate access to the SA Tool functionalities. For example, SA Tool Operators should have access to Revenue Mode, Sales, Fare Payment, Inspection, SA Tool Remote Access, Unblock Farecard, and Modify Card Concession."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button",
        "Test_Scnario": "SA Tool Device Parameter Tool Configurations",
        "Test_Sce_Description": "Verify that the configurations for the SA Tool introduced under the Open Payments release in the Device Parameter Tool are functioning as expected."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Normal Flow",
        "Test_Sce_Description": "Verify that the SA Tool reboots successfully when the operator selects the restart option. The device should turn off and then power on again. Check that the device is responsive after reboot and all functionalities are working as expected."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Airplane Mode",
        "Test_Sce_Description": "Verify that when the operator selects the 'Airplane Mode' during the reboot process, the device disables the network communications. The device should not be able to perform any inspections, counters, and queries. An airplane icon should be displayed in the top notification bar when this mode is enabled."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Sound Levels",
        "Test_Sce_Description": "Verify that the device sound levels can be adjusted using the side buttons on the SA Tool during the reboot process. The minimum limit for volume should be configurable."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Exception Flow",
        "Test_Sce_Description": "Verify that the SA Tool handles exceptions properly during the reboot process. For instance, if the device's battery level is too low for a reboot, the SA Tool should display an appropriate error message and prevent the reboot process."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Performance",
        "Test_Sce_Description": "Verify that the reboot process is completed within an acceptable time frame. The device should not hang or become unresponsive during the reboot process."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Security",
        "Test_Sce_Description": "Verify that the reboot process does not compromise the security of the device. No data should be lost or corrupted during the reboot process, and no unauthorized access should be possible."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Reboot SA Tool",
        "Test_Scnario": "Reboot SA Tool - Alternate Flow",
        "Test_Sce_Description": "Verify that the SA Tool handles alternate flows properly during the reboot process. For instance, if the operator selects the 'Power off' option instead of the 'Restart' option, the device should power off instead of rebooting."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State",
        "Test_Sce_Description": "Verify that when the SA Tool is in 'Out-of-Service' state, it does not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Operator Sign-in during Out-of-Service State",
        "Test_Sce_Description": "Verify that if an operator is signed-in and the device goes into out-of-service state, the SA Tool application does not close the operator\u2019s shift unless the operator has requested to sign-off."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State",
        "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Standby State with peripherals",
        "Test_Sce_Description": "Verify that once in the standby mode, the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Resuming from Standby State",
        "Test_Sce_Description": "Verify that once the SA Tool is in Standby state (screen turned off), an operator must press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "SA Tool application running in the background",
        "Test_Sce_Description": "Verify that the SA Tool device allows the operator to use authorized third-party applications as needed. The operator can launch multiple applications on the android device and move between them."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Resuming SA Tool application from Standby State",
        "Test_Sce_Description": "Verify that in order to resume the functionality of the SA Tool application, the operator merely needs to switch back to the SA Tool application. The third-party applications may continue to run in the background."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Revenue Mode",
        "Test_Sce_Description": "Verify that upon logon the operator will be able to select which mode they would like to operate their shift in. The Revenue Mode allows the SA Tool operator to interact with customers."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Training Mode",
        "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Out-of-Service State with Open Payments Media",
        "Test_Sce_Description": "Verify that when the device is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader, the device does not detect the media and remains in Out-of-Service State."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device configured for only farecard reversals",
        "Test_Sce_Description": "Verify that when the device is configured for only farecard reversals and a customer attempts to tap their Open Payments Media on the card reader, the 'Only Available for Farecards' error message is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Device in Pilot mode with unapproved media",
        "Test_Sce_Description": "Verify that when the device is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device, the 'Declined \u2013 Not Accepted, Tap Farecard' screen is provided to the cardholder."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Open Payments Media on the BIN Blocking List",
        "Test_Sce_Description": "Verify that when a customer's Open Payments Media is on the BIN Blocking List, the device plays the decline audio tone and displays the 'Declined \u2013 Try Another Card (BIN Blocked)' screen."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversing fare payment with Interac Card while Interac is disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Interac Card while Interac is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversing fare payment with Open Payment Card while Open Payments are disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while Open Payments are disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Out-of-Service State",
        "Test_Scnario": "Reversing fare payment with Open Payment Card while corresponding payment method / card brand is disabled",
        "Test_Sce_Description": "Verify that when a customer attempts to reverse fare payment with Open Payment Card while corresponding payment method / card brand is disabled on SA Tool, the device determines that the media tapped is not supported and displays an error message."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state when the operator presses the physical power button on the device, enters the lock screen passcode and signs in to the SA Tool application as an existing user."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from standby to in-service state without requiring login if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool from In-Service to Standby State",
        "Test_Sce_Description": "Verify that the SA Tool successfully switches from in-service to standby state when the operator presses the physical power button on the device once."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Switching SA Tool to Standby State when navigating away from the SA Tool Application",
        "Test_Sce_Description": "Verify that the SA Tool goes into standby state when the operator switches to a third party application on SA Tool."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Change SP after switching device from standby to in-service state",
        "Test_Sce_Description": "Verify that the SA Tool application notifies the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool functionality in Standby State",
        "Test_Sce_Description": "Verify that all SA Tool functionality is suspended while in Standby state and the SA tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Resuming functionality of the SA Tool application",
        "Test_Sce_Description": "Verify that the operator can resume the functionality of the SA Tool application by switching back to the SA Tool application when it is running in the background."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool operation in Revenue Mode",
        "Test_Sce_Description": "Verify that the operator can interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in the Revenue Mode."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "SA Tool operation in Training Mode",
        "Test_Sce_Description": "Verify that the operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in the Training Mode."
    },
    {
        "Function_Flow_Name": "Reversals",
        "Sub_Flow_Name": "e-Purse payment reversal",
        "Use_Case_Name": "Standby State",
        "Test_Scnario": "Access to Revenue Mode for different users",
        "Test_Sce_Description": "Verify that only SA Tool Operators have access to Revenue Mode and not the Training users."
    }
]