[{"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is outside of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service class route and the farecard has a valid special event transfer product and the tap is within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service class route after previously riding on a special event service route and the tap is within the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid non-adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Performance Test", "Test_Sce_Description": "Verify that the system can handle a high volume of fare payments simultaneously without any degradation in performance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Security Test", "Test_Sce_Description": "Verify that the system securely processes fare payments and protects customer data, including ePurse balance and concession information."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a tap is made during peak hours after previously reaching off peak daily cap (outside the transfer window). The fare payment should be made on the SA Tool, the farecard should have reached off peak Daily Cap Limit, not reached Peak Daily Cap limit and be out of transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a tap is made on a premium service route/location after previously riding on a Special Event service route (within the transfer window). The fare payment should be made on the SA Tool, the Service Class should be Premium, the farecard should have a valid Special Event Transfer Product and the tap should be within Transfer Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the Upgrade fare when the customer's farecard has a Valid Non-Adult concession. The SA Tool should accurately display the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly deducts the correct Child Concession fare when a valid Child Concession is found on the customer's farecard. The SA Tool should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly records both the fare payment and inspection transactions when the operator inspects a customer\u2019s farecard and determines that they have not paid a fare. The operator should select the payment function on the SA Tool inspection results screen and the SA Tool application should return to the Tap Card screen. A toast notification should be displayed of the corresponding inspection action."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Performance of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is completed within the acceptable time frame, ensuring that the system can handle the load during peak hours."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Security of Fare Payment Process", "Test_Sce_Description": "Verify that the fare payment process is secure and that customer's farecard information is not compromised during the transaction. The system should have measures in place to prevent unauthorized access and data breaches."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made during peak hours after the off peak daily cap has been reached and the farecard is out of the transfer window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is higher than the Special Event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Class and Special Event Transfer Product with lower fare", "Test_Sce_Description": "Verify that the system correctly computes and provides a free transfer when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window and the premium fare is lower than the Special Event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Non-Adult Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the upgrade fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Non-Adult concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment with Child Concession", "Test_Sce_Description": "Verify that the system correctly computes and deducts the child concession fare from the ePurse balance when a fare payment is made and the customer's farecard has a valid Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "Verify that the system correctly computes and deducts the fare from the ePurse balance when a fare payment is made as a result of a failed inspection. The system should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Performance Test", "Test_Sce_Description": "Verify that the system can handle a high volume of fare payments simultaneously without any degradation in performance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Security Test", "Test_Sce_Description": "Verify that the system securely processes fare payments and that sensitive customer information such as ePurse balance is not exposed during the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult, Non-Child, Non-discreet concession", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and deducts the correct Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of ePurse balance less than fare amount", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of valid transfer product", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies a valid transfer product on the customer's Farecard and computes the free transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Inter-agency transfer processing", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of Autoload threshold", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies when the ePurse balance (after deducting the travel fare) is under the Autoload threshold and adds the Autoload amount to the ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of Action or Load Value list", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies when the Farecard is on the Action or Load Value List and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Handling of fare payment during peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on peak hours is made after previously reaching off peak daily cap."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Processing of Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly computes the fare and deducts the amount from the Virtual Card E-Purse when a tap on a premium service route/location is made after previously riding on a Special Event service route."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating Non-Adult concession", "Test_Sce_Description": "This scenario is to validate that the SA Tool correctly identifies and processes a Valid Non-Adult concession on the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Temporal Class Supplement Tap-On Transaction", "Test_Sce_Description": "Verify that the device correctly reflects the Temporal Class Supplement when a Farecard is tapped on during a time period that contains an associated Temporal Class Supplement. The device should process the Tap-On Transaction as a normal tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Autoload Enabled Farecard Transaction", "Test_Sce_Description": "Verify that when a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold, the Farecard will have the Autoload amount automatically added to the E-Purse balance. The device should deduct the Fare from the Farecard E-Purse balance and provide the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the autoload was successful."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Override Default Trip", "Test_Sce_Description": "Verify that if the Farecard with no Default O/D is tapped on while the device is in Override mode, the device will process the tap as a result tap-on. The device should provide the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the Default Trip was overridden."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Audio Messages Request", "Test_Sce_Description": "Verify that when the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Farecard Validation Failure", "Test_Sce_Description": "Verify that if the Farecard fails validation checks at Tap-On, the device provides the cardholder with the appropriate feedback without updating the Farecard. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Blocked Farecard", "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. The Device should provide the appropriate feedback to the Cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Exceeding Max Travel Duration", "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. The Device should Auto-settle the Underpayment and deduct the value from the Farecard E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Multiple NFC Media Presentation", "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality and presents Anti-Collision HMI to customer. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Non-Activated Farecard", "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. The device should provide feedback to the Cardholder of an unsuccessful transaction. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Card Reading Error", "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device should provide feedback to the Cardholder of an unsuccessful transaction. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold", "Test_Sce_Description": "This scenario will test the functionality of the device when a Farecard with Autoload Enabled is tapped on it and the Fare amount crosses the Auto-load threshold. The device should detect that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, which triggers the Autoload amount to be added to the Farecard. The device should then deduct the Fare from the Farecard E-Purse balance and provide the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the autoload was successful."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Farecard with Autoload Enabled is tapped on a device and the Fare amount does not cross the Auto-load threshold", "Test_Sce_Description": "This scenario will test the functionality of the device when a Farecard with Autoload Enabled is tapped on it and the Fare amount does not cross the Auto-load threshold. The device should not trigger the Autoload amount to be added to the Farecard and should only deduct the Fare from the Farecard E-Purse balance. The device should then provide the appropriate feedback to the Cardholder of a successful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Farecard with Autoload Disabled is tapped on a device and the Fare amount crosses the Auto-load threshold", "Test_Sce_Description": "This scenario will test the functionality of the device when a Farecard with Autoload Disabled is tapped on it and the Fare amount crosses the Auto-load threshold. The device should not trigger the Autoload amount to be added to the Farecard and should only deduct the Fare from the Farecard E-Purse balance. The device should then provide the appropriate feedback to the Cardholder of a successful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Performance test for Autoload functionality", "Test_Sce_Description": "This scenario will test the performance of the device when processing multiple transactions where the Farecard with Autoload Enabled is tapped on it and the Fare amount crosses the Auto-load threshold. The device should be able to handle multiple transactions simultaneously without any degradation in performance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Security test for Autoload functionality", "Test_Sce_Description": "This scenario will test the security of the device when a Farecard with Autoload Enabled is tapped on it and the Fare amount crosses the Auto-load threshold. The device should securely process the transaction and ensure that the Autoload amount is securely added to the Farecard. The device should also ensure that the Farecard E-Purse balance is securely updated."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Exception flow when Farecard fails validation checks at Tap-On", "Test_Sce_Description": "This scenario will test the exception flow of the device when a Farecard fails validation checks at Tap-On. The device should handle the exception appropriately and provide the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Alternate flow when Customer Overrides the Default Trip prior to tapping-off", "Test_Sce_Description": "This scenario will test the alternate flow of the device when the Customer Overrides the Default Trip prior to tapping-off. The device should process the override request appropriately and update the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Full Fare-by-Zone transaction processing", "Test_Sce_Description": "Verify that the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. The default trip should use PAR as the card identifier."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Override Default O/D", "Test_Sce_Description": "Verify that the device correctly overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on when the customer requests the override of a Default Trip by interacting with the Device."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Eligibility for capping discount", "Test_Sce_Description": "Verify that when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list and complete the fare processing. ATS should calculate the capping discount and apply to the fare calculation."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Eligibility for multiple capping discounts", "Test_Sce_Description": "Verify that when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly), the device sends the tap to Accenture Ticketing Services for processing. ATS should check the online deny list and complete the fare processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS should take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Offline device processing", "Test_Sce_Description": "Verify that if the SA Tool is not online and not connected to ATS, the device checks the local deny list if the media is on the local deny list. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services. The tap should then be rated in ATS. Capping rules should follow use-case logic outlined in ticketing use cases."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Open Payments Media fails ODA check", "Test_Sce_Description": "Verify that if an Open Payments Media fails the ODA check, the device returns the appropriate feedback. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Open Payments Media Fails Expiry Check", "Test_Sce_Description": "Verify that if the Farecard is tapped-off at the same location where tap-on occurred, the device provides the cardholder with the appropriate feedback. The device should detect that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Blocked Farecard", "Test_Sce_Description": "Verify that if the Farecard is blocked, the right to travel is not conferred. The Card reader should detect that Farecard is blocked and the Device should provide the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Exceeds Max Travel Duration", "Test_Sce_Description": "Verify that if the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and open a new trips. The Device should determine that the Tap-On Time + Max Travel Duration < Current Time and Auto-settle the Underpayment and deduct the value from the Farecard E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Multiple NFC media presented", "Test_Sce_Description": "Verify that if multiple NFC media are presented to the device at one time, the device will block all fare payment functionality. The Device should block all user functionality, and present Anti-Collision HMI to customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Non-activated Farecard", "Test_Sce_Description": "Verify that if the Farecard is not activated and is tapped on the device, the transaction is unsuccessful. The Device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Card reading error", "Test_Sce_Description": "Verify that if a Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader), the device should provide the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Non-Revenue farecard in training mode", "Test_Sce_Description": "Verify that the SA tool only accepts Non-Revenue farecard in the training mode and displays a declined HMI when the Non-Revenue card is tapped in the revenue mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard tap during Temporal Class Supplement", "Test_Sce_Description": "Verify that the device displays an HMI reflecting the Temporal Class Supplement and processes the Tap-On Transaction as a normal tap-on when a Farecard is tapped during a time period that contains an associated Temporal Class Supplement."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Autoload Enabled Farecard", "Test_Sce_Description": "Verify that if the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the Farecard will have the Autoload amount automatically added to the E-Purse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard with no Default O/D", "Test_Sce_Description": "Verify that if a Farecard with no Default O/D is tapped on while the device is in Override mode, the device processes the tap as a result tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Audio Messages request", "Test_Sce_Description": "Verify that when a customer requests audio messages for the fare payment, the operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Farecard validation checks at Tap-On", "Test_Sce_Description": "Verify that the system correctly identifies and handles a situation where a Farecard fails validation checks at Tap-On."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Fare Payment from a Virtual Card using Period Pass", "Test_Sce_Description": "Verify that the system correctly handles a situation where a Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Fare Payment from a Virtual Card using Period Pass with higher fare value", "Test_Sce_Description": "Verify that the system correctly handles a situation where a Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Fare Payment from a Virtual Card using Limited Period Pass", "Test_Sce_Description": "Verify that the system correctly handles a situation where a Farecard has a valid Limited Period Pass and the current time is within the limits of the product."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing Fare Payment from a Virtual Card using Limited Period Pass outside of valid time", "Test_Sce_Description": "Verify that the system correctly handles a situation where a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Farecard Tap-Off at Same Location", "Test_Sce_Description": "Test the functionality where the Farecard is tapped-off at the same location where tap-on occurred. The device should provide the cardholder with the appropriate feedback and an error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Blocked Farecard", "Test_Sce_Description": "Test the scenario where the Farecard is blocked. The device should not confer the right to travel and should provide the appropriate feedback to the Cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Max Travel Duration Exceeded", "Test_Sce_Description": "Test the scenario where the time since tap-on exceeds the Max Travel Duration. The Device should auto-settle the Underpayment and open a new trip."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Multiple NFC Media Presentation", "Test_Sce_Description": "Test the scenario where multiple NFC media are presented to the device at one time. The device should block all fare payment functionality and present Anti-Collision HMI to customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Non-Activated Farecard", "Test_Sce_Description": "Test the scenario where a non-activated Farecard is tapped on the device. The transaction should be unsuccessful and the device should provide feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Card Reading Error", "Test_Sce_Description": "Test the scenario where a Cardholder taps Farecard on an SA Tool and a Card reading error occurs. The device should capture and log the error in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Farecard Validation Failure", "Test_Sce_Description": "Test the scenario where a Farecard fails the necessary validation checks. The device should return the appropriate feedback, and the right to travel should not be conferred."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Cardholder Taps-On Again", "Test_Sce_Description": "Test the scenario where the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window. The device should provide the cardholder with the appropriate feedback."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Insufficient E-Purse Balance", "Test_Sce_Description": "Test the scenario where a Farecard\u2019s E-Purse balance is less than that of the Tap-On Fare. The right to travel should not be conferred and the device should provide the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Blocked Farecard", "Test_Sce_Description": "Test the scenario where the Farecard is blocked. The device should not confer the right to travel and should provide the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Multiple NFC Media Presentation", "Test_Sce_Description": "Test the scenario where multiple NFC media are presented to the device at one time. The device should block all user functionality and present Anti-Collision toast message to customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Non-Activated Farecard", "Test_Sce_Description": "Test the scenario where a non-activated Farecard is tapped on the device. The transaction should be unsuccessful and the device should provide feedback to the Cardholder of an unsuccessful transaction."}]