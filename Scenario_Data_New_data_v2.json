[{"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made during peak hours after the farecard has reached the off peak daily cap limit and is outside the transfer window.", "Expected_Results": "The SA Tool should compute the fare and deduct the amount from the Virtual Card E-Purse. The fare payment should be successful and the SA Tool should display the correct fare payment status."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and is within the transfer window.", "Expected_Results": "The SA Tool should compute the fare upgrade and deduct the amount from the Virtual Card E-Purse. The fare payment should be successful and the SA Tool should display the correct fare payment status."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment with Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made on a premium service route/location after previously riding on a Special Event service route and is within the transfer window.", "Expected_Results": "The SA Tool should compute the free transfer. The fare payment should be successful and the SA Tool should display the correct fare payment status."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment from a Farecard using ePurse Balance with Valid Non-Adult Concession on their Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made from a farecard that has a valid Non-Adult concession.", "Expected_Results": "The SA Tool should compute and deduct the Upgrade fare. The fare payment should be successful and the SA Tool should display the correct fare payment status."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment from a Farecard using ePurse Balance with Valid Child Concession on their Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made from a farecard that has a valid Child concession.", "Expected_Results": "The SA Tool should deduct the correct Child Concession fare. The fare payment should be successful and the SA Tool should display the correct fare payment status."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made as a result of a failed inspection.", "Expected_Results": "The SA Tool should record both the fare payment and inspection transactions. The fare payment should be successful and the SA Tool should display the correct fare payment status."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Verify fare deduction from ePurse Balance during Premium Service Route with higher fare than Special Event", "Test_Sce_Description": "This scenario is to verify that the fare is correctly deducted from the ePurse Balance when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The fare for the premium service route is higher than the Special Event fare.", "Expected_Results": "The fare should be correctly deducted from the ePurse Balance. The SA Tool should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Verify fare deduction from ePurse Balance during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Test_Sce_Description": "This scenario is to verify that the fare is correctly deducted from the ePurse Balance when a customer taps on peak hours after previously reaching off peak daily cap outside the transfer window.", "Expected_Results": "The fare should be correctly deducted from the ePurse Balance. The SA Tool should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Verify fare deduction from ePurse Balance for Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare", "Test_Sce_Description": "This scenario is to verify that the fare is correctly deducted from the ePurse Balance when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The fare for the premium service route is lower than the Special Event fare.", "Expected_Results": "The fare should be correctly deducted from the ePurse Balance. The SA Tool should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Verify fare deduction from ePurse Balance for Premium Service Route with Transfer where the Premium fare is equal to the Special Event fare", "Test_Sce_Description": "This scenario is to verify that the fare is correctly deducted from the ePurse Balance when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The fare for the premium service route is equal to the Special Event fare.", "Expected_Results": "The fare should be correctly deducted from the ePurse Balance. The SA Tool should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Verify fare deduction from ePurse Balance for Premium Service Route with Transfer where the Premium fare is higher than the Regular fare", "Test_Sce_Description": "This scenario is to verify that the fare is correctly deducted from the ePurse Balance when a customer taps on a premium service route after previously riding on a regular service route within the transfer window. The fare for the premium service route is higher than the regular fare.", "Expected_Results": "The fare should be correctly deducted from the ePurse Balance. The SA Tool should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Verify fare deduction from ePurse Balance for Premium Service Route with Transfer where the Premium fare is lower than the Regular fare", "Test_Sce_Description": "This scenario is to verify that the fare is correctly deducted from the ePurse Balance when a customer taps on a premium service route after previously riding on a regular service route within the transfer window. The fare for the premium service route is lower than the regular fare.", "Expected_Results": "The fare should be correctly deducted from the ePurse Balance. The SA Tool should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Scnario": "Verify fare deduction from ePurse Balance for Premium Service Route with Transfer where the Premium fare is equal to the Regular fare", "Test_Sce_Description": "This scenario is to verify that the fare is correctly deducted from the ePurse Balance when a customer taps on a premium service route after previously riding on a regular service route within the transfer window. The fare for the premium service route is equal to the regular fare.", "Expected_Results": "The fare should be correctly deducted from the ePurse Balance. The SA Tool should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Verify fare deduction from ePurse Balance during Premium Service Route with lower fare than Special Event", "Test_Sce_Description": "This scenario is to verify that the fare is correctly deducted from the ePurse Balance when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The fare for the premium service route is lower than the Special Event fare.", "Expected_Results": "The fare should be deducted from the ePurse Balance and the transaction should be communicated back to the SA Tool. The POP Print Flag should be set to 0 to accurately display the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Verify fare deduction during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Test_Sce_Description": "This scenario is to verify that the fare is correctly deducted from the ePurse Balance when a customer taps on peak hours after previously reaching off peak daily cap outside the transfer window.", "Expected_Results": "The fare should be deducted from the ePurse Balance and the transaction should be communicated back to the SA Tool."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Verify fare deduction for Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare", "Test_Sce_Description": "This scenario is to verify that the fare is correctly deducted from the ePurse Balance when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The fare for the premium service route is higher than the Special Event fare.", "Expected_Results": "The fare should be deducted from the ePurse Balance and the transaction should be communicated back to the SA Tool. The POP Print Flag should be set to 0 to accurately display the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Verify fare deduction for Premium Service Route with Transfer where the Premium fare is equal to the Special Event fare", "Test_Sce_Description": "This scenario is to verify that the fare is correctly deducted from the ePurse Balance when a customer taps on a premium service route after previously riding on a Special Event service route within the transfer window. The fare for the premium service route is equal to the Special Event fare.", "Expected_Results": "The fare should be deducted from the ePurse Balance and the transaction should be communicated back to the SA Tool. The POP Print Flag should be set to 0 to accurately display the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Scnario": "Verify fare deduction for Premium Service Route with Transfer where the Premium fare is lower than the Regular fare", "Test_Sce_Description": "This scenario is to verify that the fare is correctly deducted from the ePurse Balance when a customer taps on a premium service route after previously riding on a Regular service route within the transfer window. The fare for the premium service route is lower than the Regular fare.", "Expected_Results": "The fare should be deducted from the ePurse Balance and the transaction should be communicated back to the SA Tool. The POP Print Flag should be set to 0 to accurately display the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating the deduction of Non-Adult, Non-Child, Non-discreet Concessions", "Test_Sce_Description": "This scenario is to validate whether the SA Tool is able to correctly deduct the Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard.", "Expected_Results": "The SA Tool should correctly deduct the Non-Adult, Non-Child, Non-discreet Concessions from the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Checking the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions", "Test_Sce_Description": "This scenario is to check whether the SA Tool plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions.", "Expected_Results": "The SA Tool should play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating the overdraft functionality when ePurse balance is less than the fare amount", "Test_Sce_Description": "This scenario is to validate whether the SA Tool puts the customer's Farecard into overdraft when the ePurse balance is less than the fare amount.", "Expected_Results": "The SA Tool should put the customer's Farecard into overdraft when the ePurse balance is less than the fare amount."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Checking the computation of free transfer when a valid transfer product is found", "Test_Sce_Description": "This scenario is to check whether the SA Tool correctly computes the free transfer when a valid transfer product is found on the customer's Farecard.", "Expected_Results": "The SA Tool should correctly compute the free transfer when a valid transfer product is found on the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating the fare computation based on the transfer product and the transfer agreement between the transit agencies", "Test_Sce_Description": "This scenario is to validate whether the SA Tool correctly computes the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies.", "Expected_Results": "The SA Tool should correctly compute the fare based on the transfer product on the Farecard and the transfer agreement between the transit agencies."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Checking the Autoload functionality when the ePurse balance meets or drops below Autoload Threshold", "Test_Sce_Description": "This scenario is to check whether the SA Tool correctly adds the Autoload amount to the ePurse balance when the ePurse balance meets or drops below Autoload Threshold.", "Expected_Results": "The SA Tool should correctly add the Autoload amount to the ePurse balance when the ePurse balance meets or drops below Autoload Threshold."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating the update of Farecard when it is on the Action or Load Value list", "Test_Sce_Description": "This scenario is to validate whether the SA Tool correctly updates the Farecard when it is on the Action or Load Value list.", "Expected_Results": "The SA Tool should correctly update the Farecard when it is on the Action or Load Value list."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Checking the detection and reading of Virtual Card by the SA Tool", "Test_Sce_Description": "This scenario is to check whether the SA Tool application detects the Virtual Card and reads it correctly.", "Expected_Results": "The SA Tool application should detect the Virtual Card and read it correctly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Validating the deduction of fare from the Virtual Card e-Purse and the update of Virtual Card", "Test_Sce_Description": "This scenario is to validate whether the ATS correctly deducts the fare from the Virtual Card e-Purse and updates the Virtual Card accordingly.", "Expected_Results": "The ATS should correctly deduct the fare from the Virtual Card e-Purse and update the Virtual Card accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Scnario": "Checking the feedback to the Cardholder of a successful transaction with a transfer", "Test_Sce_Description": "This scenario is to check whether the device provides the appropriate feedback to the Cardholder of a successful transaction with a transfer.", "Expected_Results": "The device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify the functionality of Farecard on the Action or Load Value List", "Test_Sce_Description": "This scenario is to test if the SA Tool can correctly verify that the Farecard is on the Action or Load Value List and updates the Farecard accordingly.", "Expected_Results": "The SA Tool should successfully verify the Farecard's presence on the Action or Load Value List and update the Farecard as per the list."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify the functionality of audio messages for fare payment", "Test_Sce_Description": "This scenario is to test if the SA Tool can correctly play the audio messages for fare payment in the default language of the customer's Farecard.", "Expected_Results": "The SA Tool should successfully play the audio messages for fare payment in the default language of the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify the functionality when Daily Cap is reached outside of Transfer window", "Test_Sce_Description": "This scenario is to test if the SA Tool can correctly deduct no fare since the Daily Cap is reached.", "Expected_Results": "The SA Tool should successfully deduct no fare since the Daily Cap is reached."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify the functionality for Premium Service or Special Route/Location", "Test_Sce_Description": "This scenario is to test if the SA Tool can correctly compute and deduct the Premium or Special Event fare.", "Expected_Results": "The SA Tool should successfully compute and deduct the Premium or Special Event fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify the functionality for Premium Service or Special Route/Location with Fare Upgrade", "Test_Sce_Description": "This scenario is to test if the SA Tool can correctly compute and deduct the Upgrade fare.", "Expected_Results": "The SA Tool should successfully compute and deduct the Upgrade fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify the functionality for payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window", "Test_Sce_Description": "This scenario is to test if the SA Tool can correctly compute and deduct the fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window.", "Expected_Results": "The SA Tool should successfully compute and deduct the fare payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify the functionality for Service Class Route/Location which is higher fare value than the Period Pass Service Class fare", "Test_Sce_Description": "This scenario is to test if the SA Tool can correctly compute and deduct the Upgrade fare when the Service class fare value is lower than the current route/location Service Class fare value.", "Expected_Results": "The SA Tool should successfully compute and deduct the Upgrade fare when the Service class fare value is lower than the current route/location Service Class fare value."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify the functionality for Service Class Route/Location which is lower fare value than the Period Pass Service Class fare", "Test_Sce_Description": "This scenario is to test if the SA Tool can correctly identify that the customer\u2019s Period Pass is valid and accepts the period pass fare payment.", "Expected_Results": "The SA Tool should successfully identify that the customer\u2019s Period Pass is valid and accepts the period pass fare payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify the functionality for Limited Period Pass", "Test_Sce_Description": "This scenario is to test if the SA Tool can correctly accept the fare payment when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product.", "Expected_Results": "The SA Tool should successfully accept the fare payment when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Scnario": "Verify the functionality for Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario is to test if the SA Tool can correctly compute and deduct the fare payment when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring outside of the time limit of the Limited Period Pass Product but the farecard has sufficient e-Purse balance to cover the transaction.", "Expected_Results": "The SA Tool should successfully compute and deduct the fare payment when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring outside of the time limit of the Limited Period Pass Product but the farecard has sufficient e-Purse balance to cover the transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Daily Cap Reached outside of Transfer window on SA Tool", "Test_Scnario": "Verify fare payment during peak hours after reaching off peak daily cap outside of transfer window", "Test_Sce_Description": "This scenario is to test if the fare payment is correctly computed and deducted from the ePurse balance when a tap is made during peak hours after previously reaching off peak daily cap and the farecard is out of transfer window.", "Expected_Results": "The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool. The SA Tool should set the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Daily Cap Reached outside of Transfer window on SA Tool", "Test_Scnario": "Verify fare payment on premium service route with transfer where premium fare is higher than special event fare", "Test_Sce_Description": "This scenario is to test if the fare payment is correctly computed and deducted from the ePurse balance when a tap is made on a premium service route/location after previously riding on a Special Event service route within the transfer window.", "Expected_Results": "The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool. The SA Tool should set the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Daily Cap Reached outside of Transfer window on SA Tool", "Test_Scnario": "Verify fare payment on premium service route with transfer where premium fare is lower than special event fare", "Test_Sce_Description": "This scenario is to test if the fare payment is correctly computed and deducted from the ePurse balance when a tap is made on a premium service route/location after previously riding on a Special Event service route within the transfer window.", "Expected_Results": "The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool. The SA Tool should set the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Daily Cap Reached outside of Transfer window on SA Tool", "Test_Scnario": "Verify fare payment when customer has a valid non-adult concession on their farecard", "Test_Sce_Description": "This scenario is to test if the fare payment is correctly computed and deducted from the ePurse balance when the customer's farecard has a valid non-adult concession.", "Expected_Results": "The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool. The SA Tool should set the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Daily Cap Reached outside of Transfer window on SA Tool", "Test_Scnario": "Verify fare payment when farecard has reached daily cap limit outside of transfer window", "Test_Sce_Description": "This scenario is to test if the fare payment is correctly computed and deducted from the ePurse balance when the farecard has reached daily cap limit and is out of transfer window.", "Expected_Results": "The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool. The SA Tool should set the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Daily Cap Reached outside of Transfer window on SA Tool", "Test_Scnario": "Verify fare payment on premium service or special route/location", "Test_Sce_Description": "This scenario is to test if the fare payment is correctly computed and deducted from the ePurse balance when a tap is made on a premium service or special route/location.", "Expected_Results": "The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool. The SA Tool should set the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Daily Cap Reached outside of Transfer window on SA Tool", "Test_Scnario": "Verify fare payment on premium service or special route/location with fare upgrade", "Test_Sce_Description": "This scenario is to test if the fare payment is correctly computed and deducted from the ePurse balance when a tap is made on a premium service or special event route/location after previously riding on a regular service route within the transfer window.", "Expected_Results": "The ATS should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool. The SA Tool should set the POP Print Flag to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location on SA Tool", "Test_Scnario": "Verify fare deduction from ePurse Balance during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Sce_Description": "This scenario is to test if the fare is correctly deducted from the ePurse balance when a tap is made during peak hours after reaching the off peak daily cap and outside of the transfer window.", "Expected_Results": "The fare should be correctly computed and deducted from the ePurse balance. The SA Tool should display the updated balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location on SA Tool", "Test_Scnario": "Verify fare payment on Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Sce_Description": "This scenario is to test if the fare upgrade is correctly applied when a tap is made on a premium service route after previously riding on a Special Event service route within the transfer window.", "Expected_Results": "The fare upgrade should be correctly computed and deducted from the ePurse balance. The SA Tool should display the updated balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location on SA Tool", "Test_Scnario": "Verify fare payment on Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Sce_Description": "This scenario is to test if the free transfer is correctly applied when a tap is made on a premium service route after previously riding on a Special Event service route within the transfer window.", "Expected_Results": "No fare should be deducted from the ePurse balance. The SA Tool should display the same balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location on SA Tool", "Test_Scnario": "Verify fare payment with a Valid Non-Adult Concession on Farecard", "Test_Sce_Description": "This scenario is to test if the fare is correctly deducted from the ePurse balance when a customer with a valid non-adult concession makes a tap.", "Expected_Results": "The fare should be correctly computed and deducted from the ePurse balance. The SA Tool should display the updated balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location on SA Tool", "Test_Scnario": "Verify fare payment with insufficient ePurse balance", "Test_Sce_Description": "This scenario is to test the system's response when a customer tries to make a fare payment with insufficient ePurse balance.", "Expected_Results": "The SA Tool should display a notification informing the operator that the ePurse balance cannot cover the price. The operator should be given options to cancel the transaction or choose another mode of payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location on SA Tool", "Test_Scnario": "Verify fare payment with a hotlisted Farecard", "Test_Sce_Description": "This scenario is to test the system's response when a customer tries to make a fare payment with a hotlisted Farecard.", "Expected_Results": "The SA Tool should display a notification informing the operator that the Farecard is hotlisted and cannot be used for payment."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location on SA Tool", "Test_Scnario": "Verify fare payment with a cheque", "Test_Sce_Description": "This scenario is to test if the system correctly processes a fare payment made with a cheque.", "Expected_Results": "The SA Tool should display a confirmation that the transaction is complete and give the operator options to print a customer receipt or return to the main menu."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made on a premium service or special event route/location after previously riding on a regular service route within the transfer window.", "Expected_Results": "The SA Tool should compute and deduct the Upgrade fare from the ePurse Balance. The POP Print Flag should be set to 0 to ensure that the device accurately displays the transfer print status if the farecard is queried."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Test_Scnario": "Performance of the SA Tool during peak hours", "Test_Sce_Description": "This scenario tests the performance of the SA Tool during peak hours when a farecard has reached off peak Daily Cap Limit, has not reached Peak Daily Cap limit and is out of transfer window.", "Expected_Results": "The SA Tool should efficiently compute the fare and deduct the amount from the ePurse Balance without any delays or performance issues."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Test_Scnario": "Security of the SA Tool during fare payment", "Test_Sce_Description": "This scenario tests the security of the SA Tool during fare payment. The test will attempt to manipulate the fare payment process or the ePurse Balance.", "Expected_Results": "The SA Tool should have robust security measures in place to prevent any unauthorized access or manipulation of the fare payment process or the ePurse Balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Test_Scnario": "Functionality of the SA Tool when Daily Cap is reached", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a farecard has reached Daily Cap Limit and is out of transfer window.", "Expected_Results": "The SA Tool should not deduct any fare since the Daily Cap is reached."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Test_Scnario": "Functionality of the SA Tool when a customer requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer requests audio messages for the fare payment.", "Expected_Results": "The SA Tool should play the corresponding audio message to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Test_Scnario": "Functionality of the SA Tool when a customer has a Valid Non-Adult Concession on their Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer\u2019s Farecard has a Valid Non-Adult concession.", "Expected_Results": "The SA Tool should recognize the Valid Non-Adult concession on the Farecard and apply the appropriate fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Test_Scnario": "Functionality of the SA Tool when a Farecard is on the Action or Load Value list", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer\u2019s Farecard is on the Action or Load Value list.", "Expected_Results": "The SA Tool should verify that the Farecard is on the Action or Load Value List and update the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment with Valid Child Concession", "Test_Sce_Description": "This scenario is to validate the fare payment process when a customer's ticket has a valid child concession. The SA Tool should be able to detect the valid child concession and process the fare payment accordingly.", "Expected_Results": "The SA Tool successfully detects the valid child concession, processes the fare payment, and displays the successful Child fare payment screen. The SA Tool also plays the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment with Empty Ride Balance", "Test_Sce_Description": "This scenario is to validate the fare payment process when a customer's ride balance is empty. The SA Tool should be able to detect the empty ride balance and decline the transaction.", "Expected_Results": "The SA Tool successfully detects the empty ride balance, declines the transaction, and displays a declined message to the customer. The SA Tool also plays the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment with Low Battery Threshold", "Test_Sce_Description": "This scenario is to validate the fare payment process when the SA Tool device battery goes below the low battery threshold during a successful ticket tap. The application should switch to 'Out of Service' mode after processing the fare payment.", "Expected_Results": "The SA Tool successfully processes the fare payment before the low battery threshold is reached and then switches to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment with Non-CLIENT Media Card", "Test_Sce_Description": "This scenario is to validate the fare payment process when a customer taps a card that is not CLIENT media. The SA Tool should not respond and display a 'Card Read Error' message.", "Expected_Results": "The SA Tool does not respond to the non-CLIENT media card tap and displays a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment within Anti-Passback Window", "Test_Sce_Description": "This scenario is to validate the fare payment process when a customer's ticket is within the Anti-Passback Window. The SA Tool should detect that the ticket fails the Anti-Passback checks and decline the transaction.", "Expected_Results": "The SA Tool successfully detects that the ticket fails the Anti-Passback checks, declines the transaction, and displays a declined message to the customer. The SA Tool also plays the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "This scenario is to validate the fare payment process when a customer taps a non-activated ticket. The SA Tool should not respond and display a 'Card Read Error' message.", "Expected_Results": "The SA Tool does not respond to the non-activated ticket tap and displays a 'Card Read Error' message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment with Valid Non-Adult, Non-Child Concession", "Test_Sce_Description": "This scenario is to validate the fare payment process when a customer's ticket has a valid Non-Adult, Non-Child concession. The SA Tool should be able to detect the valid concession and process the fare payment accordingly.", "Expected_Results": "The SA Tool successfully detects the valid Non-Adult, Non-Child concession, processes the fare payment, and plays the successful fare payment audio tone for a concession other than Adult or Child."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment within Intra-agency Transfer Window", "Test_Sce_Description": "This scenario is to validate the fare payment process when a customer's ticket has a valid transfer product and the tap is within the Intra-agency Transfer Window. The SA Tool should compute the free transfer and process the fare payment.", "Expected_Results": "The SA Tool successfully computes the free transfer, processes the fare payment, and displays the successful fare payment screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment with Audio Messages Request", "Test_Sce_Description": "This scenario is to validate the fare payment process when a customer requests audio messages for the fare payment. The operator should enable audio mode and the SA Tool should play the corresponding audio message in the default language of the customer's Farecard.", "Expected_Results": "The operator successfully enables audio mode and the SA Tool plays the corresponding audio message in the default language of the customer's Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating Fare Payment on Premium Service or Special Route/Location", "Test_Sce_Description": "This scenario is to validate the fare payment process when the fare payment is being made on the FLATFARE BASED SA Tool and the Service Class is Premium or Special Event. The SA Tool should process the fare payment without differentiating between service class for CLIENT Ticket.", "Expected_Results": "The SA Tool successfully processes the fare payment without differentiating between service class for CLIENT Ticket."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Validating Fare Payment with Valid Child Concession", "Test_Sce_Description": "In this scenario, the customer's ticket has a valid child concession. The SA Tool should be able to detect this and process the fare payment accordingly.", "Expected_Results": "The SA Tool successfully processes the fare payment and displays the successful Child fare payment screen. The SA Tool also plays the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "In this scenario, the customer's ride balance is empty. The SA Tool should detect this and decline the fare payment.", "Expected_Results": "The SA Tool detects the empty ride balance, declines the fare payment, and displays a declined message to the customer. The SA Tool also plays the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment during Low Battery", "Test_Sce_Description": "In this scenario, the SA Tool device battery goes below the low battery threshold during a successful ticket tap. The application should switch to 'Out of Service' mode after processing the fare payment.", "Expected_Results": "The SA Tool processes the fare payment and then switches to 'Out of Service' mode due to low battery."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "In this scenario, the customer taps a card that is not CLIENT media. The SA Tool should not respond to this.", "Expected_Results": "The SA Tool does not respond and the device error message 'Card Read Error' is displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with TICKET within Anti-Passback Window", "Test_Sce_Description": "In this scenario, the customer's ticket is within the Anti-Passback Window. The SA Tool should detect this and decline the fare payment.", "Expected_Results": "The SA Tool detects that the ticket is within the Anti-Passback Window, declines the fare payment, and displays a declined message to the customer. The SA Tool also plays the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "In this scenario, the customer taps a non-activated ticket. The SA Tool should detect this and decline the fare payment.", "Expected_Results": "The SA Tool detects that the ticket is not activated, declines the fare payment, and displays a declined message to the customer. The SA Tool also plays the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with TICKET Period Pass Not Valid on Current Date", "Test_Sce_Description": "In this scenario, the customer has a period pass ticket that is outside the validity period. The SA Tool should detect this and decline the fare payment.", "Expected_Results": "The SA Tool detects that the ticket period pass is not valid on the current date, declines the fare payment, and displays a declined message to the customer. The SA Tool also plays the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Fare Payment with Expired Ticket", "Test_Sce_Description": "In this scenario, the customer taps an expired ticket. The SA Tool should detect this and decline the fare payment.", "Expected_Results": "The SA Tool detects that the ticket is expired, declines the fare payment, and displays a declined message to the customer. The SA Tool also plays the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment with a TICKET that has no ride balance remaining.", "Expected_Results": "The SA Tool should detect that the ride balance is empty and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the device battery goes below the low battery threshold during a successful TICKET tap.", "Expected_Results": "If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode. Else, the customers fare payment should be processed as per Step 5. The application should then switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a card that is not CLIENT media.", "Expected_Results": "The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer\u2019s TICKET is within the Anti-Passback Window.", "Expected_Results": "The device should detect that the TICKET fails the Anti-Passback checks. The SA Tool application should display a declined message the customer. The transaction should not be conducted. The SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a non-activated Ticket.", "Expected_Results": "The SA Tool should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, and detect that farecard is in overdraft. The SA Tool application should display a declined message to the customer. The transaction should not be conducted. The SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the farecard is currently locked.", "Expected_Results": "SA Tool should read the Farecard and determine that it is locked. The device should display a declined screen to the operator and should not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Unreadable TICKET", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the TICKET is unreadable.", "Expected_Results": "The SA Tool NFC reader should detect the TICKET but should be unable to read it. SA Tool application should indicate to the operator that the TICKET is unreadable. The customer should tap on the NFC reader again. If the tap is successful, steps 4 \u2013 9 should be conducted. If the tap is unsuccessful, the SA Tool application should indicate to the operator that the TICKET is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Scnario": "Fare Payment with Valid Non-Adult, Non-Child Concession", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer\u2019s TICKET has a Valid Non-Adult, Non-Child concession.", "Expected_Results": "The SA Tool should process the fare payment according to the concession rules for non-adult, non-child concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when the battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the battery goes below the low battery threshold during payment. The tester will initiate a fare payment and during the process, the battery level will be manually reduced to below the low battery threshold.", "Expected_Results": "The SA Tool should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If the low battery threshold is reached after Step 5, the customer's fare payment should be processed and then the application should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when the customer's card is not CLIENT media", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the customer's card is not CLIENT media. The tester will initiate a fare payment with a card that is not CLIENT media.", "Expected_Results": "The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when the customer's Ticket is within the Anti-Passback Window", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the customer's Ticket is within the Anti-Passback Window. The tester will initiate a fare payment with a Ticket that is within the Anti-Passback Window.", "Expected_Results": "The device should detect that the TICKET fails the Anti-Passback checks. The SA Tool application should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when the customer's Ticket is not activated", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the customer's Ticket is not activated. The tester will initiate a fare payment with a Ticket that is not activated.", "Expected_Results": "The SA Tool application should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the performance of the SA Tool when processing fare payments", "Test_Sce_Description": "This scenario is to test the performance of the SA Tool when processing fare payments. The tester will initiate multiple fare payments in a short period of time to test the performance of the SA Tool.", "Expected_Results": "The SA Tool should be able to process all fare payments without any delays or errors."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the security of the SA Tool during fare payment", "Test_Sce_Description": "This scenario is to test the security of the SA Tool during fare payment. The tester will attempt to initiate a fare payment with a fraudulent card to test the security measures of the SA Tool.", "Expected_Results": "The SA Tool should detect the fraudulent card and decline the fare payment. The SA Tool should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Valid Child Concession", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a valid child concession attempts to make a fare payment.", "Expected_Results": "The SA Tool should successfully process the fare payment, display the successful Child fare payment screen, and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made as a result of a failed ticket inspection.", "Expected_Results": "The SA Tool should successfully process the fare payment and record both the fare payment and inspection transactions. A toast notification of the corresponding inspection action should be displayed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with an empty ride balance attempts to make a fare payment.", "Expected_Results": "The SA Tool should detect that the Ride Balance is empty and display a declined message to the customer. The transaction should not be conducted and the declined audio tone should be played."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Low Battery", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the device battery goes below the low battery threshold during a fare payment.", "Expected_Results": "If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode. Else, the customers fare payment should be processed as per Step 5. The application should then switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Non-CLIENT Media", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a card that is not CLIENT media.", "Expected_Results": "The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's TICKET is within the Anti-Passback Window.", "Expected_Results": "The device should detect that the TICKET fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the declined audio tone should be played."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a non-activated Ticket.", "Expected_Results": "The SA Tool should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, and detect that farecard is in overdraft. A declined message should be displayed to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a farecard is currently locked.", "Expected_Results": "The SA Tool should read the Farecard and determine that it is locked. The device should display a declined screen to the operator and not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Unreadable TICKET", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a TICKET is unreadable.", "Expected_Results": "The SA Tool NFC reader should detect the TICKET but be unable to read it. The SA Tool application should indicate to the operator that the TICKET is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Fare Payment with Non-Adult, Non-Child Concession", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a valid non-adult, non-child concession attempts to make a fare payment.", "Expected_Results": "The SA Tool should successfully process the fare payment, display the successful fare payment screen, and play the successful fare payment audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-Activated Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to pay for a fare using a non-activated ticket. The SA Tool should detect that the ticket is not activated and display a declined message to the customer.", "Expected_Results": "The SA Tool detects the non-activated ticket, displays a declined message to the customer, and plays a declined audio tone. The transaction is not conducted and the app returns to the SA Tool application Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Empty Ride Balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to pay for a fare using a ticket with an empty ride balance. The SA Tool should detect the empty ride balance and display a declined message to the customer.", "Expected_Results": "The SA Tool detects the empty ride balance, displays a declined message to the customer, and plays a declined audio tone. The transaction is not conducted and the app returns to the SA Tool application Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Low Battery Threshold", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the device's battery goes below the low battery threshold during a fare payment. The SA Tool should switch to 'Out of Service' mode.", "Expected_Results": "If the low battery threshold is reached before Step 5, the application switches to 'Out of Service' mode. If not, the customer's fare payment is processed as per Step 5 and then the application switches to 'Out of Service' mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Non-CLIENT Media Card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to pay for a fare using a non-CLIENT media card. The SA Tool should not respond and display a 'Card Read Error' message.", "Expected_Results": "The SA Tool does not respond, but the device error message 'Card Read Error' is displayed for a short period of time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment within Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to pay for a fare with a ticket that is within the Anti-Passback Window. The SA Tool should detect the Anti-Passback violation and display a declined message to the customer.", "Expected_Results": "The SA Tool detects the Anti-Passback violation, displays a declined message to the customer, and plays a declined audio tone. The transaction is not conducted and the app returns to the SA Tool application Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Scnario": "Fare Payment with Locked Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to pay for a fare with a locked farecard. The SA Tool should detect the locked farecard and display a declined screen to the operator.", "Expected_Results": "The SA Tool detects the locked farecard, displays a declined screen to the operator, and does not proceed with the inspection."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Testing the functionality of SA Tool when Virtual Card is unreadable", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when it detects the Virtual Card but is unable to read it. The customer will tap on the NFC reader again and the application should indicate to the operator that the Virtual Card is unreadable.", "Expected_Results": "The SA Tool application should correctly indicate to the operator that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Testing the functionality of SA Tool when Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions.", "Expected_Results": "The SA Tool should correctly display the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Testing the functionality of SA Tool when customer's ePurse balance is less than the fare amount", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount. The device should send the tap to ATS for processing and ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft.", "Expected_Results": "The device should correctly send the tap to ATS for processing and ATS should correctly remove the fare from the Virtual Card e-Purse and put the card into overdraft."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Testing the functionality of SA Tool when transaction is within Intra-SP Transfer window", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the transaction is within Intra-SP Transfer window. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse.", "Expected_Results": "ATS should correctly read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Testing the functionality of SA Tool when transaction is within Inter-SP Transfer window", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the transaction is within Inter-SP Transfer window. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse.", "Expected_Results": "ATS should correctly read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Scnario": "Testing the functionality of SA Tool when customer requests Audio Messages", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the customer requests Audio Messages. The operator should enable audio mode and the SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message.", "Expected_Results": "The operator should correctly enable audio mode and the SA Tool should correctly display the fare payment screen to the operator and customer for the duration of the audio message."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a valid non-adult, non-child, non-discreet concession on their virtual card attempts to make a fare payment using their ePurse balance.", "Expected_Results": "The SA Tool should successfully deduct the correct non-adult, non-child, non-discreet concession fare from the customer's ePurse balance and display the successful fare payment screen for non-adult concession. The SA Tool should also play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Performance of SA Tool during peak hours", "Test_Sce_Description": "This scenario tests the performance of the SA Tool during peak hours when multiple customers are attempting to make fare payments using their virtual cards.", "Expected_Results": "The SA Tool should be able to handle multiple fare payment requests simultaneously without any delays or errors."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Security of customer's ePurse balance during fare payment", "Test_Sce_Description": "This scenario tests the security measures in place to protect the customer's ePurse balance during a fare payment transaction.", "Expected_Results": "The customer's ePurse balance should be securely deducted during the fare payment transaction. There should be no unauthorized access or manipulation of the customer's ePurse balance."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it detects a customer's virtual card but is unable to read it correctly.", "Expected_Results": "The SA Tool should indicate to the operator that the Virtual Card is unreadable. If the customer taps on the NFC reader again and the tap is successful, the SA Tool should proceed with the fare payment transaction. If the tap is unsuccessful, the SA Tool should again indicate to the operator that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a registered virtual card attempts to make a fare payment but their ePurse balance is less than the fare amount.", "Expected_Results": "The SA Tool should send the tap to ATS for processing. ATS should check the online hotlist, complete the fare processing, remove the fare from the Virtual Card e-Purse, and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly. The device should provide the appropriate feedback to the Cardholder of a successful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Successful Fare Payment with ePurse Balance Less Than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a registered virtual card attempts to make a fare payment, but their ePurse balance is less than the fare amount. The ATS should process the fare, put the card into overdraft, and confer the right to travel to the cardholder.", "Expected_Results": "The fare is successfully processed, the card is put into overdraft, and the cardholder is granted the right to travel. The device provides appropriate feedback to the cardholder of a successful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Unsuccessful Fare Payment with Unreadable Virtual Card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's virtual card is unreadable. The SA Tool application should indicate to the operator that the virtual card is unreadable.", "Expected_Results": "The SA Tool application correctly identifies the unreadable virtual card and provides appropriate feedback to the operator."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Successful Fare Payment with Non-Adult, Non-Child, Non-Discreet Concessions", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a valid non-adult, non-child, non-discreet concession on their virtual card attempts to make a fare payment. The SA Tool should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone.", "Expected_Results": "The fare is successfully processed, the SA Tool correctly displays the successful fare payment screen for non-adult concession, and the successful fare payment audio tone is played."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Successful Fare Payment within Intra-SP Transfer Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a valid transfer product on their virtual card attempts to make a fare payment within the intra-SP transfer window. The ATS should read the valid intra-agency transfer product and deduct $0 from the virtual card E-Purse.", "Expected_Results": "The fare is successfully processed with $0 deducted from the virtual card E-Purse, and the cardholder is granted the right to travel with a transfer. The device provides appropriate feedback to the cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Successful Fare Payment within Inter-SP Transfer Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a valid transfer product from another service provider on their virtual card attempts to make a fare payment within the inter-SP transfer window. The ATS should read the valid inter-agency transfer product and deduct $0 from the virtual card E-Purse.", "Expected_Results": "The fare is successfully processed with $0 deducted from the virtual card E-Purse, and the cardholder is granted the right to travel with a transfer. The device provides appropriate feedback to the cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Testing the functionality of the SA Tool when the Virtual Card is unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Virtual Card is unreadable. The SA Tool NFC reader should detect the Virtual Card but fail to read it correctly. The customer will then tap on the NFC reader again.", "Expected_Results": "The SA Tool application should indicate to the operator that the Virtual Card is unreadable. If the tap is successful, the application should proceed with steps 4 \u2013 7. If the tap is unsuccessful, the application should again indicate that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Testing the functionality of the SA Tool when the customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card. The SA Tool should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions.", "Expected_Results": "The SA Tool should correctly display the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Testing the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount. The device should send the tap to ATS for processing. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft.", "Expected_Results": "The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly. The device should provide the appropriate feedback to the Cardholder of a successful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Testing the functionality of the SA Tool when the transaction is within Intra-SP Transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the transaction is within Intra-SP Transfer window. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse.", "Expected_Results": "The right to travel should be conferred to the Cardholder by updating the Virtual Card. The device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Testing the functionality of the SA Tool when the transaction is within Inter-SP Transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the transaction is within Inter-SP Transfer window. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse.", "Expected_Results": "The right to travel should be conferred to the Cardholder by updating the Virtual Card. The device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Testing the functionality of the SA Tool when the customer requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer requests Audio Messages. The operator should enable audio mode and change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case.", "Expected_Results": "The SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message. The corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Testing the functionality of the SA Tool when the Daily Cap is reached outside of Transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Daily Cap is reached outside of Transfer window. ATS should deduct no fare since the Daily Cap is reached.", "Expected_Results": "The SA Tool should correctly process the fare payment and provide the appropriate feedback to the operator and the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Testing the functionality of the SA Tool when a tap on a premium service or special route/location results in a fare payment for the premium or special event fare amount and Transfer Product creation for the Premium Service or special event Class", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a tap on a premium service or special route/location results in a fare payment for the premium or special event fare amount and Transfer Product creation for the Premium Service or special event Class. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse.", "Expected_Results": "The SA Tool should correctly process the fare payment and provide the appropriate feedback to the operator and the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Scnario": "Testing the functionality of the SA Tool when a tap on a premium service or special event route/location after previously riding on a regular service route (within the transfer window) results in a fare upgrade", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a tap on a premium service or special event route/location after previously riding on a regular service route (within the transfer window) results in a fare upgrade. ATS should compute the fare and deduct the amount from the Virtual Card E-Purse.", "Expected_Results": "The SA Tool should correctly process the fare payment and provide the appropriate feedback to the operator and the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Virtual Card has a valid transfer product from another service provider and a transfer agreement between the service providers has been established. The customer taps their Virtual Card on the SA Tool's NFC reader.", "Expected_Results": "The ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Virtual Card; the device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it detects the Virtual Card but fails to read it correctly. The customer taps their Virtual Card on the SA Tool's NFC reader.", "Expected_Results": "The SA Tool application should indicate to the operator that the Virtual Card is unreadable. The customer should be prompted to tap on the NFC reader again. If the tap is successful, the fare payment process should continue. If the tap is unsuccessful, the SA Tool application should again indicate to the operator that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's ePurse balance is less than the fare amount. The customer taps their Virtual Card on the SA Tool's NFC reader.", "Expected_Results": "The device should send the tap to ATS for processing. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card accordingly. The device should provide the appropriate feedback to the Cardholder of a successful transaction."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer requests audio messages for fare payment. The customer taps their Virtual Card on the SA Tool's NFC reader and asks for audio messages.", "Expected_Results": "The operator should enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion. The SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message. The corresponding audio message should be played to the customer in the default language of their Farecard. After the audio ends, the SA Tool screen should return to the application Tap Card screen."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Daily Cap Reached outside of Transfer window on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Farecard has reached the Daily Cap Limit and is out of the transfer window. The customer taps their Farecard on the SA Tool's NFC reader.", "Expected_Results": "ATS should deduct no fare since the Daily Cap is reached. The fare payment process should continue as normal."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass within valid time", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a farecard with a valid Limited Period Pass is used within the time limit of the pass. The farecard is tapped on the SA Tool and the transaction is processed.", "Expected_Results": "The transaction is successful and the fare is deducted from the farecard. The SA Tool updates accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a farecard with a valid Limited Period Pass is used outside the time limit of the pass but has sufficient e-Purse balance. The farecard is tapped on the SA Tool and the transaction is processed.", "Expected_Results": "The transaction is successful and the fare is deducted from the e-Purse. The SA Tool updates accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with an anonymous farecard with an expired period pass and ePurse balance less than the fare amount attempts to make a transaction. The farecard is tapped on the SA Tool and the transaction is processed.", "Expected_Results": "The transaction is declined and the SA Tool displays a declined message to the customer. The SA Tool updates accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a blocked Virtual Card attempts to make a transaction. The farecard is tapped on the SA Tool and the transaction is processed.", "Expected_Results": "The transaction is declined and the SA Tool displays a declined message to the customer. The SA Tool updates accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a Virtual Card on the Deny List attempts to make a transaction. The farecard is tapped on the SA Tool and the transaction is processed.", "Expected_Results": "The transaction is declined, the card is removed from the Deny List and set to blocked. The SA Tool displays a declined message to the customer. The SA Tool updates accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a transaction. The farecard is tapped on the SA Tool and the transaction is processed.", "Expected_Results": "The transaction is successful and the fare is deducted from the farecard. The SA Tool updates accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card Has Sufficient ePurse Balance and an Expired Period Pass", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a Virtual Card with sufficient ePurse balance and an expired period pass attempts to make a transaction. The farecard is tapped on the SA Tool and the transaction is processed.", "Expected_Results": "The transaction is successful and the fare is deducted from the e-Purse. The SA Tool updates accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount and an Expired Period Pass", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a registered farecard with positive ePurse balance less than the fare amount and an expired period pass attempts to make a transaction. The farecard is tapped on the SA Tool and the transaction is processed.", "Expected_Results": "The transaction is successful, the fare is deducted from the e-Purse and the Virtual Card is put into overdraft. The SA Tool updates accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Farecard using Period Pass - Transaction is within Inter-SP Transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a Virtual Card with a valid transfer product from another service provider attempts to make a transaction within the Inter-SP Transfer window. The farecard is tapped on the SA Tool and the transaction is processed.", "Expected_Results": "The transaction is successful and the right to travel is conferred to the Cardholder. The SA Tool updates accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Service Class Route/Location which is higher fare value than the Period Pass Service Class fare on SA Tool", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Farecard using Period Pass \u2013 Customer requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer requests audio messages for fare payment. The farecard is tapped on the SA Tool and the transaction is processed.", "Expected_Results": "The transaction is successful and the corresponding audio message is played to the customer in the default language of their Farecard. The SA Tool updates accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the deny list", "Test_Scnario": "Open Payments Media is on the deny list", "Test_Sce_Description": "This scenario tests the functionality of the system when the Open Payments Media is on the deny list. The system should not confer the right to travel in this case.", "Expected_Results": "The system should return a response that the media is on the deny list and provide the Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the deny list", "Test_Scnario": "Open Payments Media is on the local deny list and device is offline", "Test_Sce_Description": "This scenario tests the functionality of the system when the Open Payments Media is on the local deny list and the device is offline. The system should not confer the right to travel in this case.", "Expected_Results": "The system should check the local deny list and return a response that the media is denied. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the deny list", "Test_Scnario": "Multiple NFC media are presented to the device at one time", "Test_Sce_Description": "This scenario tests the functionality of the system when multiple NFC media are presented to the device at one time. The device should block all fare payment functionality in this case.", "Expected_Results": "The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the deny list", "Test_Scnario": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Sce_Description": "This scenario tests the functionality of the system when the SA Tool is in Out-of-Service state. The device should not detect the media in this case.", "Expected_Results": "The Not In Service Screen should be provided to the cardholder and the device should remain in Out-of-Service State."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the deny list", "Test_Scnario": "Customer attempts to tap on and an error has occurred", "Test_Sce_Description": "This scenario tests the functionality of the system when an error has occurred on the device that does not cover the exception cases above. The device should record the tap in this case.", "Expected_Results": "The Declined \u2013 See Customer Service Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the deny list", "Test_Scnario": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Sce_Description": "This scenario tests the functionality of the system when the Open Payments media is not on the approved media list and the device is in beta mode. The system should not confer the right to travel in this case.", "Expected_Results": "The system should return a response that the media is on the deny list and provide the Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the deny list", "Test_Scnario": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)", "Test_Sce_Description": "This scenario tests the functionality of the system when the cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window. The device should provide the cardholder with the appropriate feedback.", "Expected_Results": "The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the deny list", "Test_Scnario": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is offline (anti-passback)", "Test_Sce_Description": "This scenario tests the functionality of the system when the cardholder taps-on again at an SA Tool after just tapping-off at the same station and the device is offline. The system should not confer the right to travel in this case.", "Expected_Results": "The system should return a response that the media is on the deny list and provide the Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Open Payments Media is on the local deny list and device is offline", "Test_Sce_Description": "This scenario tests the functionality of the system when the Open Payments Media is on the local deny list and the device is offline. The system should not allow the right to travel.", "Expected_Results": "The system should not confer the right to travel. The Declined \u2013 Suspended: Unpaid Fares Screen or Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background and in the SOTI logs. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Multiple NFC media are presented to the device at one time", "Test_Sce_Description": "This scenario tests the functionality of the system when multiple NFC media are presented to the device at one time. The system should block all fare payment functionality.", "Expected_Results": "The system should block all fare payment functionality. The Anti-Collision Error Screen should be provided to the cardholder. An error should be captured and logged in the background and in the SOTI logs. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Sce_Description": "This scenario tests the functionality of the system when the SA Tool is in Out-of-Service state and a customer attempts to tap their Open Payments Media on the card reader.", "Expected_Results": "The system should not detect the media and remain in Out-of-Service State. The Not In Service Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Customer attempts to tap on and an error has occurred", "Test_Sce_Description": "This scenario tests the functionality of the system when an error has occurred on the device that does not cover the exception cases above.", "Expected_Results": "The system should record the tap. The Declined \u2013 See Customer Service Screen should be provided to the cardholder. An error should be captured and logged in the background and in the SOTI logs. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode", "Test_Sce_Description": "This scenario tests the functionality of the system when a customer attempts to tap an Open Payments media not on the approved media list while the device is in beta mode.", "Expected_Results": "The system should not confer the right to travel. The Declined \u2013 Suspended: Unpaid Fares Screen or the Declined \u2013 Suspended: Other Screen should be provided to the cardholder. An error should be captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online (Anti-passback)", "Test_Sce_Description": "This scenario tests the functionality of the system when a cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window.", "Expected_Results": "The system should not allow the tap. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "Open Payments", "Use_Case_Name": "Open Payments Media is on the local deny list and device is offline", "Test_Scnario": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is offline (anti-passback)", "Test_Sce_Description": "This scenario tests the functionality of the system when a cardholder taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-on anti-passback Window and the device is offline.", "Expected_Results": "The system should not allow the tap. The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass within valid time", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a Virtual Card with a valid Limited Period Pass within the valid time. The farecard has a valid Limited Period Pass product on it and the time at tap is occurring within the time limit of the Limited Period Pass Product.", "Expected_Results": "The fare payment should be accepted successfully and the SA Tool should display a successful fare payment screen and play the successful payment audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a Virtual Card with a valid Limited Period Pass outside the valid time but with sufficient e-Purse balance. The farecard has a valid Limited Period Pass product on it and the time at tap is occurring outside of the time limit of the Limited Period Pass Product.", "Expected_Results": "The fare payment should be accepted successfully by deducting the fare from the e-Purse balance and the SA Tool should display a successful fare payment screen and play the successful payment audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is attempted using an Anonymous Virtual Card with an expired Period Pass and ePurse balance less than the fare amount. The customer has an expired period pass, ePurse balance is less than the fare amount and has an anonymous Virtual Card.", "Expected_Results": "The fare payment should be declined and the SA Tool should display a declined message to the customer and play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is attempted using a blocked Virtual Card. The customer\u2019s Farecard is blocked.", "Expected_Results": "The fare payment should be declined and the SA Tool should display a declined message to the customer and play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is attempted using a Virtual Card that is on the Deny List. The customer\u2019s Virtual Card is on the Deny List.", "Expected_Results": "The fare payment should be declined, the card should be removed from the Deny List and set to blocked, and the SA Tool should display a declined message to the customer and play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a fare payment. The low battery threshold is high enough that the remote lists can be processed even after the SA Tool battery goes below the low battery threshold during a successful Farecard tap.", "Expected_Results": "The fare payment should be accepted successfully and the SA Tool should display a successful fare payment screen and play the successful payment audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Tap counter is at the configured limit", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the tap counter is at the configured limit. The tap counter is at the configured limit.", "Expected_Results": "The fare payment should be declined and the SA Tool should display a declined message to the customer and play the declined audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Virtual Card is unreadable. The SA Tool application detects the Virtual Card and fails to read it correctly.", "Expected_Results": "The SA Tool application should indicate to the operator that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card Has Sufficient ePurse Balance and an Expired Period Pass", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a Virtual Card with an expired Period Pass but with sufficient ePurse balance. The customer\u2019s Virtual Card has an expired period pass and the customer\u2019s ePurse balance is more than the fare amount.", "Expected_Results": "The fare payment should be accepted successfully by deducting the fare from the ePurse balance and the SA Tool should display a successful fare payment screen and play the successful payment audio tone."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Validating Fare Payment with Limited Period Pass within valid time", "Test_Sce_Description": "This scenario is to test if the fare payment is accepted when the farecard has a valid Limited Period Pass and the time at tap is within the time limit of the Limited Period Pass Product.", "Expected_Results": "The fare payment should be accepted and the transaction should be successful."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Validating Fare Payment with Limited Period Pass outside valid time but with sufficient e-Purse balance", "Test_Sce_Description": "This scenario is to test if the fare payment is accepted when the farecard has a valid Limited Period Pass but the time at tap is outside the time limit of the Limited Period Pass Product. However, the farecard has sufficient e-Purse balance to cover the transaction.", "Expected_Results": "The fare payment should be accepted and the transaction should be successful."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Validating Fare Payment with an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario is to test if the fare payment is declined when the customer has an expired period pass, ePurse balance is less than the fare amount and the customer has an anonymous Virtual Card.", "Expected_Results": "The fare payment should be declined and the transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Validating Fare Payment with a Blocked Virtual Card", "Test_Sce_Description": "This scenario is to test if the fare payment is declined when the customer\u2019s Virtual Card is blocked.", "Expected_Results": "The fare payment should be declined and the transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Validating Fare Payment with a Virtual Card on the Deny List", "Test_Sce_Description": "This scenario is to test if the fare payment is declined when the customer\u2019s Virtual Card is on the Deny List.", "Expected_Results": "The fare payment should be declined and the transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Validating Fare Payment when Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario is to test if the fare payment is processed when the low battery threshold is high enough that the remote lists can be processed even after the SA Tool battery goes below the low battery threshold during a successful Farecard tap.", "Expected_Results": "The fare payment should be processed and the transaction should be successful."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Validating Fare Payment with a Blocked Farecard", "Test_Sce_Description": "This scenario is to test if the fare payment is declined when the customer\u2019s Farecard is blocked.", "Expected_Results": "The fare payment should be declined and the transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Validating Fare Payment with a Farecard on the Hotlist", "Test_Sce_Description": "This scenario is to test if the fare payment is declined when the customer\u2019s Farecard is on the hotlist.", "Expected_Results": "The fare payment should be declined and the transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Validating Fare Payment with a non-activated card", "Test_Sce_Description": "This scenario is to test if the fare payment is declined when the customer\u2019s card is not activated and not on the action list available on the device.", "Expected_Results": "The fare payment should be declined and the transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Validating Fare Payment with a card that is not a Farecard", "Test_Sce_Description": "This scenario is to test if the fare payment is declined when the customer\u2019s card is not a Farecard.", "Expected_Results": "The fare payment should be declined and the transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Validating Fare Payment with a Farecard within the Anti-Passback Window", "Test_Sce_Description": "This scenario is to test if the fare payment is declined when the customer\u2019s card is within the Anti-Passback Window.", "Expected_Results": "The fare payment should be declined and the transaction should not be conducted."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Testing the functionality of Farecard tap during a time period with Temporal Class Supplement", "Test_Sce_Description": "This scenario is to test if the device correctly reflects the Temporal Class Supplement when a Farecard is tapped on it during a time period that contains an associated Temporal Class Supplement. The device should process the Tap-On Transaction as a normal tap-on.", "Expected_Results": "The device should display the Temporal Class Supplement and process the Tap-On Transaction as a normal tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Testing the Autoload feature when Fare amount crosses the Auto-load threshold", "Test_Sce_Description": "This scenario is to test if the Autoload feature works correctly when the Fare amount causes the Farecard E-Purse Balance to cross the Auto-load threshold. The Farecard should have the Autoload amount automatically added to the E-Purse balance.", "Expected_Results": "The Autoload amount should be automatically added to the E-Purse balance when the Fare amount causes the Farecard E-Purse Balance to cross the Auto-load threshold."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Testing the Override mode when Farecard does not contain a Default O/D", "Test_Sce_Description": "This scenario is to test if the device correctly processes the tap as a result tap-on when the Farecard with no Default O/D is tapped on while the device is in Override mode.", "Expected_Results": "The device should process the tap as a result tap-on when the Farecard with no Default O/D is tapped on while the device is in Override mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Testing the functionality of Farecard tap when Farecard fails validation checks at Tap-On", "Test_Sce_Description": "This scenario is to test if the device provides the cardholder with the appropriate feedback when the Farecard is tapped-off at the same location where tap-on occurred.", "Expected_Results": "The device should provide the cardholder with the appropriate feedback when the Farecard is tapped-off at the same location where tap-on occurred."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Testing the functionality when Farecard is blocked", "Test_Sce_Description": "This scenario is to test if the right to travel is not conferred when the Farecard is blocked. The device should provide the appropriate feedback to the Cardholder.", "Expected_Results": "The right to travel should not be conferred and the device should provide the appropriate feedback to the Cardholder when the Farecard is blocked."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Testing the functionality when time since Tap-On Exceeds Max Travel Duration", "Test_Sce_Description": "This scenario is to test if the Device will auto-settle the Underpayment and open a new trips when the time since tap-on exceeds the Max Travel Duration.", "Expected_Results": "The Device should auto-settle the Underpayment and open a new trips when the time since tap-on exceeds the Max Travel Duration."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Testing the functionality when multiple NFC media are presented to the device at one time", "Test_Sce_Description": "This scenario is to test if the device will block all fare payment functionality when multiple NFC media are presented to the device at one time.", "Expected_Results": "The device should block all fare payment functionality when multiple NFC media are presented to the device at one time."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Testing the functionality when a non-activated Farecard is tapped on an SA Tool", "Test_Sce_Description": "This scenario is to test if the transaction is unsuccessful when a non-activated Farecard is tapped on the device.", "Expected_Results": "The transaction should be unsuccessful when a non-activated Farecard is tapped on the device."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement", "Test_Scnario": "Testing the functionality when a Farecard is tapped on an SA Tool and card reading error occurs", "Test_Sce_Description": "This scenario is to test if a Card reading error occurs (e.g. Farecard is immediately removed from the card reader) when a Farecard is tapped on an SA Tool.", "Expected_Results": "A Card reading error should occur when a Farecard is tapped on an SA Tool and the Farecard is immediately removed from the card reader."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold", "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard with Autoload Enabled is tapped and the Fare amount crosses the Auto-load threshold. The device should detect that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, which triggers the Autoload amount to be added to the Farecard. The Device should then deduct the Fare from the Farecard E-Purse balance.", "Expected_Results": "The device should provide the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the autoload was successful. The Farecard should be updated accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Farecard fails validation checks at Tap-On", "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard fails validation checks at Tap-On. The Device should process the Load Value or Action prior to performing the Fare Validation.", "Expected_Results": "The device should provide the appropriate feedback to the Cardholder of a successful transaction in addition to the processing of a list item and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time. The Device should check the tap-on time associated to the current transaction and process the temporal class supplement in addition to the Base Fare.", "Expected_Results": "The device should provide the appropriate feedback to the Cardholder of a successful transaction in addition to the Temporal class Supplement and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Farecard taps off on a Device with a Temporal class Supplement after tapping-on outside of a Temporal class Supplement Time Profile", "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard taps off on a Device with a Temporal class Supplement after tapping-on outside of a Temporal class Supplement Time Profile. The Device should contain an HMI reflecting the Temporal class Supplement, and will process the Tap-Off Transaction as a regular fare (no temporal class supplement applied) tap-on.", "Expected_Results": "As the Temporal class Supplement utilizes the Tap-on time to compare against the CRE, if the Tap-Off is done during a Temporal class time and the Tap-On time was not, no supplemental fare should be charged to the customer."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Non-Revenue Farecard is tapped on the Device", "Test_Sce_Description": "This scenario tests the functionality of the device when a Non-Revenue Farecard is tapped on the Device. The SA tool should only accept Non-Revenue farecard in the training mode. If the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI.", "Expected_Results": "The device should display a declined HMI when a Non-Revenue card is tapped in the revenue mode."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Farecard with Fare type (either Universal or Specific) other than Default taps-off", "Test_Sce_Description": "This scenario tests the functionality of the device when a Farecard with Fare type (either Universal or Specific) other than Default taps-off. The Device should display the \u201cFare Payment with Fare type Discount\u201d HMI and account for the concession discount in the Fare.", "Expected_Results": "The device should provide the appropriate feedback to the Cardholder of a successful transaction with a fare type discount and updates the Farecard accordingly."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard with Autoload Enabled is tapped on a device which and the Fare amount crosses the Auto-load threshold", "Test_Scnario": "Customer Overrides the Default Trip prior to tapping-off", "Test_Sce_Description": "This scenario tests the functionality of the device when a Customer Overrides the Default Trip prior to tapping-off. The device should process the override and update the Farecard accordingly.", "Expected_Results": "The device should provide the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the Default Trip was overridden."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Full Fare-by-Zone transaction processing with default O/D on Farecard", "Test_Sce_Description": "This scenario is to test if the device correctly processes a full Fare-by-Zone transaction (both tap-on and tap-off) in case of a default O/D on the Farecard. The ATS should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip. Default trip will use PAR as the card identifier.", "Expected_Results": "The device should correctly process the full Fare-by-Zone transaction and deduct the Full Fare value from the Farecard. The default trip should use PAR as the card identifier."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Override of Default O/D on Open Payments Media", "Test_Sce_Description": "This scenario is to test if the device correctly overrides the default O/D contained on the Open Payments Media and process the tap as a regular tap-on. The customer should be able to request the override of a Default Trip by interacting with the Device.", "Expected_Results": "The device should correctly override the default O/D contained on the Open Payments Media and process the tap as a regular tap-on."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Eligibility for capping discount with Open Payments Media", "Test_Sce_Description": "This scenario is to test if the device correctly identifies the customer's eligibility for capping discount when capping is configured, and the customer has met any of the capping criteria (Daily, Weekly, Monthly). The device should send the tap to Accenture Ticketing Services for processing.", "Expected_Results": "The device should correctly identify the customer's eligibility for capping discount and send the tap to Accenture Ticketing Services for processing. ATS should calculate the capping discount and apply to the fare calculation."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Eligibility for multiple capping discounts with Open Payments Media", "Test_Sce_Description": "This scenario is to test if the device correctly identifies the customer's eligibility for multiple capping discounts when capping is configured, and the customer has met a combination of multiple capping criteria (Daily, Weekly, Monthly). The device should send the tap to Accenture Ticketing Services for processing.", "Expected_Results": "The device should correctly identify the customer's eligibility for multiple capping discounts and send the tap to Accenture Ticketing Services for processing. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS should take whatever Capping program which is of highest precedence (set in RE) and apply that discount to the fare."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Eligibility for Capping discount with Open Payments Media when Device is offline", "Test_Sce_Description": "This scenario is to test if the device correctly identifies the customer's eligibility for capping discount when the device is offline and not connected to Accenture Ticketing Services, and the customer has met any capping discount criteria. The device should check the local deny list if the media is on the local deny list.", "Expected_Results": "The device should correctly identify the customer's eligibility for capping discount and check the local deny list if the media is on the local deny list. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services. The tap should then be rated in ATS."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Open Payments Media fails ODA check", "Test_Sce_Description": "This scenario is to test if the device correctly returns the appropriate feedback when an Open Payments Media fails the ODA check. The device should perform the necessary validation and determine that the Open Payments Media is unable to pass the checks.", "Expected_Results": "The device should correctly return the appropriate feedback when an Open Payments Media fails the ODA check. The Declined \u2013 Failed ODA Check screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Farecard tapped does not match", "Test_Sce_Description": "This scenario is to test if the SA correctly detects that the Farecard tapped during the write tap does not match the Farecard tapped during the identification tap. The SA should check if the serial number matches the serial number detected in the identification tap.", "Expected_Results": "The SA should correctly detect that the Farecard tapped during the write tap does not match the Farecard tapped during the identification tap. The SA should display an error message and prompt the operator to tap the correct card in order to proceed."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Scnario": "Underpayment handling", "Test_Sce_Description": "This scenario is to test if the operator correctly handles the situation when the customer\u2019s Farecard is in underpayment. The operator should inform the customer that they are in underpayment and determine whether the customer has missed a tap off or just tapped on.", "Expected_Results": "The operator should correctly handle the situation when the customer\u2019s Farecard is in underpayment. The operator should inform the customer that they are in underpayment and determine whether the customer has missed a tap off or just tapped on. The operator should select to uncheck the box associated with underpayment bringing the subtotal to be zero if the customer is currently on a trip."}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of Non-Revenue farecard in training mode", "Test_Sce_Description": "In this scenario, the Non-Revenue farecard is tapped in the training mode of the SA tool to check if it is accepted", "Expected_Results": "The SA tool should accept the Non-Revenue farecard in the training mode"}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of Non-Revenue farecard in revenue mode", "Test_Sce_Description": "In this scenario, the Non-Revenue farecard is tapped in the revenue mode of the SA tool to check if it is declined", "Expected_Results": "The SA tool should decline the Non-Revenue farecard in the revenue mode and display a declined HMI"}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of Farecard with Autoload Enabled", "Test_Sce_Description": "In this scenario, a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold", "Expected_Results": "The Farecard should have the Autoload amount automatically added to the E-Purse balance"}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of Farecard with no Default O/D in Override mode", "Test_Sce_Description": "In this scenario, a Farecard with no Default O/D is tapped on while the device is in Override mode", "Expected_Results": "The device should process the tap as a result tap-on and notify the customer that the Default Trip was overridden"}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of Farecard with audio messages", "Test_Sce_Description": "In this scenario, the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment", "Expected_Results": "The operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard"}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of Farecard when it fails validation checks at Tap-On", "Test_Sce_Description": "In this scenario, the Farecard fails validation checks at Tap-On", "Expected_Results": "The SA Tool should display an error message indicating that the Farecard has failed validation checks"}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of Farecard with a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value", "Test_Sce_Description": "In this scenario, the Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value", "Expected_Results": "ATS should compute and deduct the Upgrade fare"}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of Farecard with a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value", "Test_Sce_Description": "In this scenario, the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value", "Expected_Results": "ATS should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment"}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of Farecard with a valid Limited Period Pass and the current time is within the limits of the product", "Test_Sce_Description": "In this scenario, the Farecard has a valid Limited Period Pass and the current time is within the limits of the product", "Expected_Results": "The SA Tool should accept the fare payment"}, {"Function_Flow_Name": "Fare Payment", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of Farecard with a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction", "Test_Sce_Description": "In this scenario, the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction", "Expected_Results": "The SA Tool should accept the fare payment"}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type", "Test_Scnario": "Farecard Tapped is the incorrect Farecard Type", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Farecard of incorrect type is tapped. The SA Tool should be able to identify the incorrect Farecard type and notify the operator.", "Expected_Results": "The SA Tool identifies the incorrect Farecard type and notifies the operator. The use case terminates."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type", "Test_Scnario": "Non-Farecard tapped to the reader", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Non-Farecard is tapped. The SA Tool should be able to identify the card as a non-Farecard and display an error message.", "Expected_Results": "The SA Tool identifies the card as a non-Farecard and displays an error pop up message."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type", "Test_Scnario": "Failure to read Virtual Card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it fails to read a Virtual Card. The SA Tool should indicate to the operator that the Virtual Card read has failed.", "Expected_Results": "The SA Tool indicates to the operator that the Virtual Card read has failed. The operator can try again or choose to exit the scenario."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type", "Test_Scnario": "Non-Virtual Card tapped to the reader", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Non-Virtual Card is tapped. The SA Tool should be able to identify the card as a non-Virtual Card and display an error message.", "Expected_Results": "The SA Tool identifies the card as a non-Virtual Card and displays an error pop up message."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type", "Test_Scnario": "Blocked/Hotlisted Farecard \u2013 Virtual Card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a blocked Farecard is tapped. The SA Tool should be able to detect that the Farecard is blocked and display the Farecard query screen.", "Expected_Results": "The SA Tool detects that the Farecard is blocked and displays the Farecard query screen. The operator cannot take any further actions on the Farecard."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type", "Test_Scnario": "Virtual Card \u2013 Ineligible Products", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when ineligible products are added to the shopping cart. The SA Tool should be able to detect the ineligible products and display an error message.", "Expected_Results": "The SA Tool detects the ineligible products and displays an error message. The operator removes the ineligible products from cart and reattempts the shopping flow."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type", "Test_Scnario": "ATS failure to load products", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when ATS fails to load products to the customer\u2019s account. The SA Tool should inform the operator that the products purchased were not added to the user\u2019s account.", "Expected_Results": "The SA Tool informs the operator that the products purchased were not added to the user\u2019s account. The Operator may attempt the checkout again or provide the customer a refund if the customer paid with cash."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type", "Test_Scnario": "Farecard tapped does not match", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Farecard tapped during the write tap does not match the Farecard tapped during the identification tap. The SA Tool should check if the serial number matches the serial number detected in the identification tap.", "Expected_Results": "The SA Tool detects that the Farecard tapped during the write tap does not match the Farecard tapped during the identification tap. The SA displays an error message and prompts the operator to tap the correct card in order to proceed."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Farecard Tapped is the incorrect Farecard Type", "Test_Scnario": "Underpayment handling", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer\u2019s Farecard is in underpayment. The SA Tool should detect the underpayment amount and display the Underpayment Full Screen Alert.", "Expected_Results": "The SA Tool detects the underpayment amount and displays the Underpayment Full Screen Alert. The operator informs the customer that they are in underpayment and proceeds through the main flow or exits it."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Incorrect Farecard Type Tapped", "Test_Sce_Description": "In this scenario, the Farecard tapped is of the incorrect type for the Mode. The SA Tool application should identify the Farecard Type to be incorrect for the mode the operator is currently operating in and notify the operator.", "Expected_Results": "The SA Tool application should display an error message notifying the operator of the incorrect Farecard Type. The use case should then terminate."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Non-Farecard Tapped to the Reader", "Test_Sce_Description": "In this scenario, a Non-Farecard is tapped to the reader. The SA Tool application should identify the card to be a non-Farecard and display an error pop up message.", "Expected_Results": "The SA Tool application should display an error pop up message indicating that a non-Farecard has been tapped to the reader."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Failure to Read Virtual Card", "Test_Sce_Description": "In this scenario, the SA Tool application detects the Virtual Card but fails to read it correctly. The operator should be able to close the error prompt and tap the card to try again.", "Expected_Results": "The SA Tool application should display an error message indicating that the Virtual Card read has failed. The operator should be able to close the error prompt and tap the card to try again."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Non-Virtual Card Tapped to the Reader", "Test_Sce_Description": "In this scenario, a Non-Virtual Card is tapped to the reader. The SA Tool application should identify the card to be a non-Virtual Card and display an error pop up message.", "Expected_Results": "The SA Tool application should display an error pop up message indicating that a non-Virtual Card has been tapped to the reader."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Blocked/Hotlisted Farecard \u2013 Virtual Card", "Test_Sce_Description": "In this scenario, the customer\u2019s Farecard is blocked. The SA Tool application should detect that the Farecard is blocked and display the Farecard query screen indicating that the Farecard has been blocked.", "Expected_Results": "The SA Tool application should display the Farecard query screen indicating that the Farecard has been blocked. The operator should not be able to take any further actions on the Farecard and should return to the SA Tool application home screen."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Virtual Card \u2013 Ineligible Products", "Test_Sce_Description": "In this scenario, the SA Tool shopping cart has ineligible products. The device should display an error confirming that one or more of the products are not available for sale.", "Expected_Results": "The device should display an error confirming that one or more of the products are not available for sale. The operator should remove the ineligible products from cart and reattempt the shopping flow."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "ATS Failure to Load Products", "Test_Sce_Description": "In this scenario, the ATS is unable to load products to the customer\u2019s account after the operator has completed the SA Tool shopping flow. The SA Tool should inform the operator that the products purchased were not added to the user\u2019s account.", "Expected_Results": "The SA Tool should inform the operator that the products purchased were not added to the user\u2019s account. The Operator may attempt the checkout again or provide the customer a refund if the customer paid with cash."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Farecard is Blocked", "Test_Sce_Description": "In this scenario, the Farecard is blocked and the right to travel is not conferred. The card reader should detect that the Farecard is blocked.", "Expected_Results": "The Device should provide the appropriate feedback to the Cardholder that the right to travel is not conferred. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration", "Test_Sce_Description": "In this scenario, the time since tap-on exceeds the Max Travel Duration. The Device should auto-settle the Underpayment and open a new trips.", "Expected_Results": "The Device should auto-settle the Underpayment and deduct the value from the Farecard E-Purse. A new trip should be opened."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Multiple NFC Media are Presented to the Device at One Time", "Test_Sce_Description": "In this scenario, multiple NFC media are presented to the device at one time. The device should block all fare payment functionality.", "Expected_Results": "The device should block all user functionality and present Anti-Collision HMI to customer. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Tap a Non-Activated Farecard on an SA Tool", "Test_Sce_Description": "In this scenario, a non-activated Farecard is tapped on the device. The device should detect that the Farecard is not activated.", "Expected_Results": "The device should provide feedback to the Cardholder of an unsuccessful transaction. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Non-Farecard tapped to the reader", "Test_Scnario": "Tap a Farecard on an SA Tool and Card Reading Error Occurs", "Test_Sce_Description": "In this scenario, a Cardholder taps Farecard on an SA Tool and a Card reading error occurs. The error could be due to the Farecard being immediately removed from the card reader.", "Expected_Results": "The device should provide feedback to the Cardholder of an unsuccessful transaction. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Non-Virtual Card tapped to the reader", "Test_Scnario": "Testing the successful tap of a Virtual Card", "Test_Sce_Description": "This scenario tests the successful tap of a Virtual Card on the SA Tool. The Virtual Card is in good standing according to ATS, but the scratchpad blocked parameter needs to be updated. The device should provide the appropriate feedback to the Cardholder of a successful tap and the tap counter should be reset to 0 if it isn't already at 0. The Virtual Card scratchpad should be updated to remove the block parameter and prioritize the accepted response from ATS.", "Expected_Results": "The device provides the appropriate feedback to the Cardholder of a successful tap. The FPS \u2013 Virtual Card E-Purse Flat Fare Accepted Screen is provided to the cardholder. The tap counter is checked and reset to 0 if it isn't already at 0. The Virtual Card scratchpad is updated to remove the block parameter and prioritizes the accepted response from ATS."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Non-Virtual Card tapped to the reader", "Test_Scnario": "Testing the failure of Virtual Card Media Authentication", "Test_Sce_Description": "This scenario tests the failure of Virtual Card Media Authentication. If the Virtual Card Media fails the Card Authentication check, the device should return the appropriate feedback. The Declined \u2013 Failed Card Authentication Check screen should be provided to the cardholder.", "Expected_Results": "The device returns the appropriate feedback. The Declined \u2013 Failed Card Authentication Check screen is provided to the cardholder. An error is captured and logged in the background when this occurs to help with troubleshooting the issue. This error is also captured in the SOTI logs."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Non-Virtual Card tapped to the reader", "Test_Scnario": "Testing the scenario where Virtual Media has already tapped-on using an Online Device", "Test_Sce_Description": "This scenario tests the case where the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window, whereby the initial device and secondary device tapped on were both online. The device should provide the cardholder with the appropriate feedback.", "Expected_Results": "The device sends the tap to ATS which returns a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen is provided to the cardholder. An error is captured and logged in the background when this occurs to help with troubleshooting the issue. This error is also captured in the SOTI logs."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Non-Virtual Card tapped to the reader", "Test_Scnario": "Testing the scenario where Virtual Card Media has already tapped-on using an Offline Device", "Test_Sce_Description": "This scenario tests the case where the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window whereby the initial device tapped, and secondary device(s) is the same device and is offline. The device should provide the cardholder with the appropriate feedback.", "Expected_Results": "The device checks the latent transaction processor on the same device for a previous tap within the anti-passback window. The tap is stored on the device till it is connected to ATS where the transactions will be reconciled. The Declined \u2013 Already Tapped Screen is provided to the cardholder. An error is captured and logged in the background when this occurs to help with troubleshooting the issue. This error is also captured in the SOTI logs."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Non-Virtual Card tapped to the reader", "Test_Scnario": "Testing the scenario where multiple NFC media are presented to the device at one time", "Test_Sce_Description": "This scenario tests the case where multiple NFC media are presented to the device at one time. The device should block all fare payment functionality.", "Expected_Results": "The Anti-Collision Error Screen is provided to the cardholder. An error is captured and logged in the background when this occurs to help with troubleshooting the issue. This error is also captured in the SOTI logs."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card", "Test_Scnario": "Verify the functionality of Virtual Card Media\u2019s scratchpad blocked parameter", "Test_Sce_Description": "In this scenario, the Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled. The device checks the local hotlist and does not find the Virtual Card. The device checks the Virtual Card Scratchpad and determines the card blocked parameter is set to true.", "Expected_Results": "The right to travel should not be conferred. The Declined \u2013 Blocked Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card", "Test_Scnario": "Verify the functionality of Virtual Card Media\u2019s mobile wallet blocked parameter", "Test_Sce_Description": "In this scenario, the Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled. If the Virtual Card Media is blocked in the wallet, there will not be an interaction with the device on an attempted tap.", "Expected_Results": "The device should not know a tap is attempted and should have no action. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card", "Test_Scnario": "Verify the functionality of tap counter for offline device", "Test_Sce_Description": "In this scenario, the tap counter is greater than the allowable offline taps. If the SA Tool is not online and not connected to ATS, the device will collect offline tap details and once the device returns back online, offline taps will be sent to ATS via bulk upload.", "Expected_Results": "If the Virtual Media has reached its offline tap counter limit, the right to travel should not be conferred. The device should reject the tap and the rider should not be permitted entry. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card", "Test_Scnario": "Verify the functionality of accepting fare payment from the e-Ticket", "Test_Sce_Description": "In this scenario, the customer asks to pay for the trip with their e-ticket. The operator presses the button on the side of the device to enable the barcode scanner. The E-Ticket holder scans the QR Code on their E-Ticket against the SA tool\u2019s barcode reader to validate the Ticket in Fare Payment Mode.", "Expected_Results": "The device should perform a check to ensure that the E-Ticket meets timestamp window requirements. The device should perform a check against the local deny list and confirms that the current E-Ticket being validated is not on the deny list. The right to travel should be conferred to the E-Ticket holder."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card", "Test_Scnario": "Verify the functionality of SA Tool when it is offline", "Test_Sce_Description": "In this scenario, the device is offline, the call to the Bytemark backend will fail and be unable to retrieve details regarding the E-Ticket.", "Expected_Results": "If an E-Ticket fails the necessary validation checks, the device should return the appropriate feedback, and the right to travel should not be conferred. The result should be cached in an offline database to be uploaded to Bytemark API when connection is resumed."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Blocked/Hotlisted Farecard \u2013 Virtual Card", "Test_Scnario": "Verify the functionality of Group QR Code at the SA Tool Barcode Reader", "Test_Sce_Description": "In this scenario, the E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader.", "Expected_Results": "The device should be able to read the Group QR Code and validate the E-Ticket. The right to travel should be conferred to the E-Ticket holder."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Virtual Card \u2013 Ineligible Products", "Test_Scnario": "ATS failure to load products", "Test_Sce_Description": "This scenario tests the exception flow when ATS fails to load products onto a customer\u2019s account after checkout. The operator has completed the SA Tool shopping flow and attempts to load the products.", "Expected_Results": "The SA Tool should inform the operator that the products purchased were not added to the user\u2019s account. The operator should have the option to attempt the checkout again or provide the customer a refund if the customer paid with cash."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Virtual Card \u2013 Ineligible Products", "Test_Scnario": "SVC / VC Shopping Cart", "Test_Sce_Description": "This scenario tests the exception flow when the device has either SVC or VC products in the shopping cart but not both at the same time. The customer taps their media (VC or SVC) on the reader.", "Expected_Results": "If the cart has ineligible products, the Operator should receive an error providing them the option to clear the cart. If the customer tapped a VC, clearing cart should remove SVC products. If the customer tapped an SVC, clearing cart should remove VC products."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Virtual Card \u2013 Ineligible Products", "Test_Scnario": "ECP is disabled and Customer\u2019s Artemis device is locked or asleep", "Test_Sce_Description": "This scenario tests the exception flow when the user\u2019s device is locked or asleep and ECP is disabled for the users Virtual Card. The user presents their device to the reader.", "Expected_Results": "Virtual card media should not be detected and the screen remains the same. Artemis device should prompt user to provide authentication. Customer should be able to provide authentication for their Virtual Card media on their Artemis device."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Virtual Card \u2013 Ineligible Products", "Test_Scnario": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is disabled", "Test_Sce_Description": "This scenario tests the exception flow when the user\u2019s mobile device is in Power Reserve mode and ECP is disabled on the mobile device for the users Virtual Card. The user presents their device to the reader.", "Expected_Results": "Virtual card media should not be detected and the screen remains the same. Artemis device should prompt user to charge their device."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Virtual Card \u2013 Ineligible Products", "Test_Scnario": "Real-Time Mode for Open Payments", "Test_Sce_Description": "This scenario tests the functionality when the SA Tool is configured for Open Payments in real-time mode. The device should have an active internet connection to ATS.", "Expected_Results": "Open Payments fare payments & inspections should provide a near real-time response to the Operator of the result for the customer\u2019s media. If the device does not have an active internet connection, it should default to Queued mode."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Virtual Card \u2013 Ineligible Products", "Test_Scnario": "Queued Mode for Open Payments", "Test_Sce_Description": "This scenario tests the functionality when the device is configured for Open Payments in queued mode. The device sends the taps collected to ATS.", "Expected_Results": "No true inspection or fare payment result should be provided to the Operator. The Operator should rely on the local deny list in order to retrieve the tap results such as declined."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Virtual Card \u2013 Ineligible Products", "Test_Scnario": "Real-Time Mode for Virtual Cards", "Test_Sce_Description": "This scenario tests the functionality when the SA Tool is configured for Virtual Cards in real-time mode. The device should have an active internet connection to ATS.", "Expected_Results": "VC taps should provide a near real-time response to the Operator of the result for the customer\u2019s media. If the device does not have an active internet connection, it should default to Queued state."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Virtual Card \u2013 Ineligible Products", "Test_Scnario": "Queued Mode for Virtual Cards", "Test_Sce_Description": "This scenario tests the functionality when the device is configured for Virtual Cards in queued mode. The device evaluates the tap result offline based on the scratchpad and the local deny list, then sends the taps collected to ATS.", "Expected_Results": "ATS should confirm the tap result and may override the result if required. If the device remains offline for a period greater than the configured \u201cmaximum offline period\u201d time, the device should provide a notification to the Operator that their local deny list may be unreliable."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "Virtual Card \u2013 Ineligible Products", "Test_Scnario": "Degraded Mode for Virtual Cards", "Test_Sce_Description": "This scenario tests the functionality when the device is configured in degraded mode. It can only accept Farecard taps. This mode can either be set through a configuration when Virtual Card is disabled, or after a configurable period of time the device is offline.", "Expected_Results": "In this state, a Virtual Card should not be accepted."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "ATS failure to load products", "Test_Scnario": "ATS failure to load products", "Test_Sce_Description": "This scenario tests the situation where the ATS fails to load products onto a customer's account after the operator has completed the SA Tool shopping flow. The operator should be informed that the products purchased were not added to the user's account.", "Expected_Results": "The SA Tool should display an error message informing the operator that the products were not added to the user's account. The operator should have the option to attempt the checkout again or provide the customer a refund if the customer paid with cash."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "ATS failure to load products", "Test_Scnario": "SVC / VC Shopping Cart", "Test_Sce_Description": "This scenario tests the condition where the shopping cart must only include Virtual Card or Stored Value Card Products. The device should not have both SVC and VC products in the shopping cart at the same time.", "Expected_Results": "If the cart has ineligible products, the Operator should receive an error providing them the option to clear the cart. If the customer tapped a VC, clearing cart should remove SVC products. If the customer tapped an SVC, clearing cart should remove VC products."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "ATS failure to load products", "Test_Scnario": "ECP is disabled and Customer's Artemis device is locked or asleep", "Test_Sce_Description": "This scenario tests the condition where the user's device is locked or asleep and ECP is disabled for the users Virtual Card. The user should be prompted to provide authentication for their Virtual Card media on their Artemis device.", "Expected_Results": "The Virtual card media should not be detected and the screen should remain the same. The Artemis device should prompt the user to provide authentication."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "ATS failure to load products", "Test_Scnario": "Customer's Artemis device is in Power Reserve mode and ECP is disabled", "Test_Sce_Description": "This scenario tests the condition where the user's mobile device is in Power Reserve mode and ECP is disabled on the mobile device for the users Virtual Card. The user should be prompted to charge their device.", "Expected_Results": "The Virtual card media should not be detected and the screen should remain the same. The Artemis device should prompt the user to charge their device."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "ATS failure to load products", "Test_Scnario": "Open Payments Media fails ODA check", "Test_Sce_Description": "This scenario tests the condition where an Open Payments Media fails the ODA check. The device should return the appropriate feedback.", "Expected_Results": "The Declined \u2013 Failed ODA Check Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "ATS failure to load products", "Test_Scnario": "Open Payments Media Fails Expiry Check", "Test_Sce_Description": "This scenario tests the condition where an Open Payments Media fails the Expiry Check. The device should return the appropriate feedback.", "Expected_Results": "The Declined \u2013 Card Expired Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "ATS failure to load products", "Test_Scnario": "Open Payments Media has already tapped-on using an Online Device within Anti-Passback Window", "Test_Sce_Description": "This scenario tests the interactions of the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window, whereby the initial device and secondary device(s) tapped on were all online. The device should provide the cardholder with the appropriate feedback.", "Expected_Results": "The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "ATS failure to load products", "Test_Scnario": "Open Payments Media has already tapped-on using an Offline Device", "Test_Sce_Description": "This scenario tests the interactions of the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window whereby the initial device tapped, and secondary device(s) is the same device and is offline. The device should provide the cardholder with the appropriate feedback.", "Expected_Results": "The Declined \u2013 Already Tapped Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "Virtual Card", "Use_Case_Name": "ATS failure to load products", "Test_Scnario": "Open Payments Media is on the ATS deny list and the SA Tool is online", "Test_Sce_Description": "This scenario tests the condition where Open Payments Media is on the deny list and the SA Tool is online. The device should return the appropriate feedback.", "Expected_Results": "The Declined \u2013 Denied List Screen should be provided to the cardholder. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Farecard fails validation checks at Tap-On", "Test_Sce_Description": "In this scenario, the tester will attempt to tap-on a farecard that fails the necessary validation checks. The device should return the appropriate feedback, and the right to travel should not be conferred.", "Expected_Results": "The device should provide the appropriate feedback to the cardholder indicating that the farecard has failed the validation checks. The right to travel should not be conferred."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Cardholder has already tapped-on", "Test_Sce_Description": "In this scenario, the tester will attempt to tap-on a farecard at the same station within the SA Tool Tap-on anti-passback Window. The device should provide the cardholder with the appropriate feedback.", "Expected_Results": "The device should provide the appropriate feedback to the cardholder without updating the Farecard. An error should be captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Farecard has insufficient E-Purse to cover the Tap-On Fare", "Test_Sce_Description": "In this scenario, the tester will attempt to tap-on a farecard whose E-Purse balance is less than that of the Tap-On Fare. The right to travel should not be conferred.", "Expected_Results": "The device should provide the appropriate feedback to the cardholder indicating that the E-Purse balance is insufficient. The right to travel should not be conferred. An error should be captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Farecard is blocked", "Test_Sce_Description": "In this scenario, the tester will attempt to tap-on a blocked farecard. The right to travel should not be conferred.", "Expected_Results": "The device should provide the appropriate feedback to the cardholder indicating that the farecard is blocked. The right to travel should not be conferred. An error should be captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Multiple NFC media are presented to the device at one time", "Test_Sce_Description": "In this scenario, the tester will present multiple NFC medias to the card reader at once. The device should block all fare payment functionality.", "Expected_Results": "The device should block all user functionality and present Anti-Collision toast message to the customer. An error should be captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Query a Farecard", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Farecard fails validation checks at Tap-On", "Test_Scnario": "Tap a non-activated Farecard on an SA Tool", "Test_Sce_Description": "In this scenario, the tester will attempt to tap-on a non-activated farecard on the device. The transaction should be unsuccessful.", "Expected_Results": "The device should provide feedback to the Cardholder of an unsuccessful transaction. An error should be captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Fare Payment with Fare type Discount", "Test_Scnario": "Fare Payment with Fare type Discount", "Test_Sce_Description": "The Device reads the concession value from the Farecard and passes this information to the CRE. The CRE then utilizes this concession information to determine the appropriate fare and deduct this value from the Farecard E-Purse", "Expected_Results": "The device provides the appropriate feedback to the Cardholder of a successful transaction with a fare type discount and updates the Farecard accordingly"}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Fare Payment with Fare type Discount", "Test_Scnario": "Customer Overrides the Default Trip prior to tapping-off", "Test_Sce_Description": "Customer requests the override of a Default Trip by interacting with the Device. Device HMI informs the customer that the Device is prepared to override the Default Trip. The Cardholder presents Farecard to the Device CID", "Expected_Results": "The device should process the tap as a normal tap-off if the tap-off occurs while the device is in Override mode"}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Fare Payment with Fare type Discount", "Test_Scnario": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Sce_Description": "The customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment. Operator enables audio mode. The operator can change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case", "Expected_Results": "Corresponding audio message is played to the customer in the default language of their Farecard. After the audio message ends, the screen returns to the application Tap Card screen"}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Fare Payment with Fare type Discount", "Test_Scnario": "Farecard fails validation checks at Tap-On", "Test_Sce_Description": "The device performs the necessary validation and determines that the Farecard is unable to pass the checks", "Expected_Results": "The device provides the appropriate feedback to the Cardholder. An error will be captured and logged in the background when this occurs to help with troubleshooting the issue. This error will also be captured in the SOTI logs"}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Fare Payment with Fare type Discount", "Test_Scnario": "Farecard is tapped at the same station as the Tap-On", "Test_Sce_Description": "The device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window", "Expected_Results": "The device provides the appropriate feedback to the cardholder without updating the Farecard. An error will be captured and logged in the background when this occurs to help with troubleshooting the issue. This error will also be captured in the SOTI logs"}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Fare Payment with Fare type Discount", "Test_Scnario": "Farecard is blocked", "Test_Sce_Description": "The fare payment is being made on the SA Tool. Service Class is Premium or Special Event. Farecard has a valid Regular Service Transfer Product. Tap is within Transfer Window", "Expected_Results": "ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool"}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Fare Payment with Fare type Discount", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Sce_Description": "The fare payment is being made on the SA Tool. Farecard has reached off peak Daily Cap Limit. Farecard has not reached Peak Daily Cap limit. Farecard is out of transfer window", "Expected_Results": "ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool"}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Fare Payment with Fare type Discount", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Sce_Description": "The fare payment is being made on the SA Tool. Service Class is Premium. Farecard has a valid Special Event Transfer Product. Tap is within Transfer Window", "Expected_Results": "ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool"}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Fare Payment with Fare type Discount", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Sce_Description": "The fare payment is being made on the SA Tool. Service Class is Premium. Farecard has a valid Special Event Transfer Product. Tap is within Transfer Window", "Expected_Results": "ATS will compute the fare and deduct the amount from the Virtual Card E-Purse. This will be communicated back to the SA Tool"}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Fare Payment with Fare type Discount", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Sce_Description": "Customer\u2019s Farecard has a Valid Non-Adult concession", "Expected_Results": "The device should accept the fare payment and provide the appropriate feedback to the customer"}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing the Full Fare Deduction for Default O/D", "Test_Sce_Description": "This scenario is to test if the ATS deducts the full fare value for the station-to-station trip accounting for all fare considerations associated to the trip when a default O/D is used on the Farecard.", "Expected_Results": "The ATS should successfully deduct the full fare value from the Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing the Override of Default O/D", "Test_Sce_Description": "This scenario is to test if the device overrides the default O/D contained on the Open Payments Media and processes the tap as a regular tap-on when the customer requests the override of a Default Trip.", "Expected_Results": "The device should successfully override the default O/D and process the tap as a regular tap-on."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing the Capping Discount Calculation", "Test_Sce_Description": "This scenario is to test if the ATS calculates the capping discount and applies it to the fare calculation when capping is configured and the customer has met any of the capping criteria.", "Expected_Results": "The ATS should successfully calculate the capping discount and apply it to the fare calculation."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing the Multiple Capping Discounts Calculation", "Test_Sce_Description": "This scenario is to test if the ATS calculates the capping discount and applies it to the fare calculation when multiple capping criteria are met. The ATS should take the capping program of highest precedence and apply that discount to the fare.", "Expected_Results": "The ATS should successfully calculate the capping discount and apply the highest precedence discount to the fare calculation."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing the Offline Capping Discount Calculation", "Test_Sce_Description": "This scenario is to test if the device checks the local deny list and stores the tap till the device goes back online and connects to ATS when the device is offline and not connected to ATS and the customer has met any capping discount criteria.", "Expected_Results": "The device should successfully check the local deny list and store the tap till it goes back online and connects to ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing the ODA Check Failure", "Test_Sce_Description": "This scenario is to test if the device returns the appropriate feedback when an Open Payments Media fails the ODA check.", "Expected_Results": "The device should successfully return the appropriate feedback when the Open Payments Media fails the ODA check."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing the Load Value or Action Processing", "Test_Sce_Description": "This scenario is to test if the device processes the Load or Action Transaction prior to continuing the validation Use Case.", "Expected_Results": "The device should successfully process the Load or Action Transaction prior to continuing the validation Use Case."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing the Transfer Discount Calculation", "Test_Sce_Description": "This scenario is to test if the Tap-On Fare configured on the device as well as the Underpayment Value is reduced to account for the Transfer Discount when a valid transfer product is contained on the Farecard.", "Expected_Results": "The device should successfully reduce the Tap-On Fare and the Underpayment Value to account for the Transfer Discount."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing the Default Trip Override", "Test_Sce_Description": "This scenario is to test if the device overrides the default O/D contained on the Farecard and provides the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the Default Trip was Overridden.", "Expected_Results": "The device should successfully override the default O/D and provide the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Customer Overrides the Default Trip prior to tapping-off", "Test_Scnario": "Testing the Underpayment Deduction", "Test_Sce_Description": "This scenario is to test if the device deducts the Underpayment Value from the Farecard E-Purse prior to performing the Fare Validation when the Farecard has a value contained in the Underpayment Block.", "Expected_Results": "The device should successfully deduct the Underpayment Value from the Farecard E-Purse prior to performing the Fare Validation."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of Non-Revenue farecard in the training mode", "Test_Sce_Description": "In this scenario, the Non-Revenue farecard is tapped in the training mode of the SA tool to check if it is accepted.", "Expected_Results": "The SA tool should accept the Non-Revenue farecard in the training mode."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of Non-Revenue farecard in the revenue mode", "Test_Sce_Description": "In this scenario, the Non-Revenue farecard is tapped in the revenue mode of the SA tool to check if it is declined.", "Expected_Results": "The SA tool should decline the Non-Revenue farecard in the revenue mode and display a declined HMI."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of Farecard with Autoload Enabled", "Test_Sce_Description": "In this scenario, a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold.", "Expected_Results": "The Farecard should have the Autoload amount automatically added to the E-Purse balance."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of Farecard with no Default O/D in Override mode", "Test_Sce_Description": "In this scenario, a Farecard with no Default O/D is tapped on while the device is in Override mode.", "Expected_Results": "The device should process the tap as a result tap-on and notify the customer that the Default Trip was overridden."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of Farecard with Audio Messages request", "Test_Sce_Description": "In this scenario, a customer requests to pay for the trip with their Farecard and requests audio messages for the fare payment.", "Expected_Results": "The operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of Farecard failing validation checks at Tap-On", "Test_Sce_Description": "In this scenario, a Farecard is tapped on the device Card Reader (CID) while the device is in reversal mode and fails the validation checks.", "Expected_Results": "The device should determine that the media tapped is not supported and display an error message."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of Virtual Card Transaction Reversal on an Online SA Tool", "Test_Sce_Description": "In this scenario, a SP operator manually performs a Virtual Card transaction reversal with the SA Tool.", "Expected_Results": "The SA Tool should read the Virtual Card information, send transaction to ATS to be processed, and display successful fare reversal screen to the operator and customer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of Transaction Reversal with Unreadable Farecard", "Test_Sce_Description": "In this scenario, a customer attempts to reverse a fare with an unreadable Farecard.", "Expected_Results": "The SA Tool NFC reader should detect the Farecard but be unable to read it, and indicate to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of Transaction Reversal with SA Tool Offline", "Test_Sce_Description": "In this scenario, a customer attempts to reverse a fare while the SA Tool is offline and not connected to ATS.", "Expected_Results": "The SA Tool should store request for reversal and send bulk upload of transactions to ATS for processing when it comes back online."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change universal concession", "Use_Case_Name": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of Transaction Reversal with Customer Requests Audio Messages", "Test_Sce_Description": "In this scenario, a customer requests to reverse a fare and requests audio messages for fare reversal.", "Expected_Results": "The operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Farecard is blocked", "Test_Scnario": "Multiple NFC media presented to the device at once", "Test_Sce_Description": "This scenario will test the device's response when multiple NFC media are presented to the card reader at once. The device should block all user functionality and present an Anti-Collision toast message to the customer.", "Expected_Results": "The device blocks all user functionality and presents an Anti-Collision toast message to the customer. An error is captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Farecard is blocked", "Test_Scnario": "Tapping a non-activated Farecard on an SA Tool", "Test_Sce_Description": "This scenario will test the device's response when a non-activated Farecard is tapped on the device. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction.", "Expected_Results": "The device detects that the Farecard is not activated and provides feedback to the Cardholder of an unsuccessful transaction. An error is captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Farecard is blocked", "Test_Scnario": "Tapping a Farecard on an SA Tool and card reading error occurs", "Test_Sce_Description": "This scenario will test the device's response when a Farecard is tapped on an SA Tool and a Card reading error occurs. The device should not provide any feedback and screen remains \u201cIn-Service\u201d display.", "Expected_Results": "The device does not provide any feedback and screen remains \u201cIn-Service\u201d display. An error is captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Farecard is blocked", "Test_Scnario": "Tapping a Farecard on an SA Tool and card write error occurs", "Test_Sce_Description": "This scenario will test the device's response when a Farecard is tapped on an SA Tool and a card write error occurs. The device should not provide any feedback and screen remains \u201cIn-Service\u201d display.", "Expected_Results": "The device does not provide any feedback and screen remains \u201cIn-Service\u201d display. The device deletes the transaction information. An error is captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Farecard is blocked", "Test_Scnario": "Tapping a Farecard when SA Tool is in Out-of-Service state", "Test_Sce_Description": "This scenario will test the device's response when a Farecard is tapped while the SA Tool is in Out-of-Service state. The device should provide appropriate \u2018Out-of-Service\u2019 display to customers.", "Expected_Results": "The device provides appropriate \u2018Out-of-Service\u2019 display to customers."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Farecard is blocked", "Test_Scnario": "Tapping a Farecard at the same location where tap-on occurred", "Test_Sce_Description": "This scenario will test the device's response when the Farecard is tapped-off at the same location where tap-on occurred. The device should provide the cardholder with the appropriate feedback.", "Expected_Results": "The device provides the cardholder with the appropriate feedback. An error is captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Farecard is blocked", "Test_Scnario": "Farecard is blocked", "Test_Sce_Description": "This scenario will test the device's response when the Farecard is blocked. The right to travel should not be conferred.", "Expected_Results": "The right to travel is not conferred. The Device provides the appropriate feedback to the Cardholder. An error is captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Farecard is blocked", "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration", "Test_Sce_Description": "This scenario will test the device's response when the time since tap-on exceeds the Max Travel Duration. The Device should auto-settle the Underpayment and open a new trips.", "Expected_Results": "The Device auto-settles the Underpayment and opens a new trips."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing fare payment with a registered farecard with positive ePurse balance less than the fare amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a registered farecard that has a positive ePurse balance that is less than the fare amount. The SA Tool should detect this condition and handle it appropriately.", "Expected_Results": "The SA Tool should display a declined message to the customer, indicating that the ePurse balance is insufficient for the fare payment. The transaction should not be conducted and the SA Tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing fare payment with a farecard in overdraft", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a farecard that is in overdraft. The SA Tool should detect this condition and handle it appropriately.", "Expected_Results": "The SA Tool should display a declined message to the customer, indicating that the farecard is in overdraft. The transaction should not be conducted and the SA Tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing fare payment with a blocked farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a farecard that is blocked. The SA Tool should detect this condition and handle it appropriately.", "Expected_Results": "The SA Tool should display a declined message to the customer, indicating that the farecard is blocked. The transaction should not be conducted and the SA Tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing fare payment with a farecard on the hotlist", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a farecard that is on the hotlist. The SA Tool should detect this condition and handle it appropriately.", "Expected_Results": "The SA Tool should display a declined message to the customer, indicating that the farecard is on the hotlist. The transaction should not be conducted and the SA Tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing fare payment when the SA Tool battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a fare payment. The SA Tool should detect this condition and handle it appropriately.", "Expected_Results": "If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode. Else, the customers fare payment should be processed as per Step 5. The application should then switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing fare payment with a card that is not a Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a card that is not a Farecard. The SA Tool should detect this condition and handle it appropriately.", "Expected_Results": "The SA Tool should display the \u201cCard Read Error\u201d toast message for a short period of time."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Test_Scnario": "Testing fare payment with a Farecard within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to make a fare payment with a Farecard that is within the Anti-Passback Window. The SA Tool should detect this condition and handle it appropriately.", "Expected_Results": "The SA Tool should display a declined message to the customer, indicating that the Farecard is within the Anti-Passback Window. The transaction should not be conducted and the SA Tool should play a declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Intra-agency Transfer window", "Test_Scnario": "Verify fare payment from a Farecard using ePurse Balance during Intra-agency Transfer window", "Test_Sce_Description": "This scenario is to test if the fare payment is successfully deducted from the ePurse Balance of a Farecard during the Intra-agency Transfer window. The Farecard should have a valid transfer product.", "Expected_Results": "The fare payment should be successfully deducted from the ePurse Balance of the Farecard. The ATS should read that the Farecard contains a valid intra-agency transfer product and deduct $0 from the Farecard E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Intra-agency Transfer window", "Test_Scnario": "Verify fare payment from a Farecard using ePurse Balance during Inter-agency Transfer window", "Test_Sce_Description": "This scenario is to test if the fare payment is successfully deducted from the ePurse Balance of a Farecard during the Inter-agency Transfer window. The Farecard should have a valid transfer product from other service provider and a transfer agreement between the service providers should have been established.", "Expected_Results": "The fare payment should be successfully deducted from the ePurse Balance of the Farecard. The ATS should read that the Farecard contains a valid inter-agency transfer product and deduct $0 from the Farecard E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Intra-agency Transfer window", "Test_Scnario": "Verify fare payment from a Farecard using ePurse Balance when customer has a Valid Non-Adult Concession on their Farecard", "Test_Sce_Description": "This scenario is to test if the fare payment is successfully deducted from the ePurse Balance of a Farecard when the customer has a Valid Non-Adult Concession on their Farecard.", "Expected_Results": "The fare payment should be successfully deducted from the ePurse Balance of the Farecard. The ATS should read that the Farecard contains a Valid Non-Adult Concession and deduct the appropriate fare from the Farecard E-Purse. This should be communicated back to the device. The right to travel should be conferred to the Cardholder by updating the Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Intra-agency Transfer window", "Test_Scnario": "Verify fare payment from a Farecard using ePurse Balance when customer\u2019s Virtual Card is Unreadable", "Test_Sce_Description": "This scenario is to test if the SA Tool application detects the Virtual Card and fails to read it correctly. The customer will tap on the NFC reader again. If the tap is successful, steps 4 \u2013 7 will be conducted. If the tap is unsuccessful, the SA Tool application will indicate to the operator that the CLIENT (Virtual) Card is unreadable.", "Expected_Results": "The SA Tool application should detect the Virtual Card and if it fails to read it correctly, it should indicate to the operator that the Virtual Card is unreadable. If the customer taps on the NFC reader again and the tap is successful, the fare payment should be successfully deducted from the ePurse Balance of the Virtual Card. If the tap is unsuccessful, the SA Tool application should indicate to the operator that the CLIENT (Virtual) Card is unreadable."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Intra-agency Transfer window", "Test_Scnario": "Verify fare payment from a Farecard using ePurse Balance when customer\u2019s ePurse balance is less than the fare amount", "Test_Sce_Description": "This scenario is to test if the fare payment is successfully deducted from the ePurse Balance of a Farecard when the customer\u2019s ePurse balance is less than the fare amount. The device sends the tap to ATS for processing. ATS checks the online hotlist and completes the fare processing. ATS removes the fare from the Virtual Card e-Purse and puts the card into overdraft.", "Expected_Results": "The fare payment should be successfully deducted from the ePurse Balance of the Farecard even if the customer\u2019s ePurse balance is less than the fare amount. The ATS should check the online hotlist and complete the fare processing. The ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft. The right to travel should be conferred to the Cardholder by updating the Virtual Card."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Inter-agency Transfer window", "Test_Scnario": "Verify the fare deduction from ePurse Balance during Inter-agency Transfer window", "Test_Sce_Description": "This scenario is to test if the fare is correctly deducted from the ePurse Balance when the transaction is within the Inter-agency Transfer window. The customer's Virtual Card should have a valid transfer product from other service provider and a transfer agreement between the service providers should have been established.", "Expected_Results": "The fare should be deducted from the ePurse Balance and the transaction should be successful. The device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Inter-agency Transfer window", "Test_Scnario": "Verify the fare deduction from ePurse Balance when the customer's Virtual Card is unreadable", "Test_Sce_Description": "This scenario is to test if the SA Tool application correctly detects the Virtual Card and fails to read it correctly. The customer will tap on the NFC reader again. If the tap is successful, steps 4 \u2013 7 will be conducted.", "Expected_Results": "If the tap is unsuccessful, the SA Tool application should indicate to the operator that the CLIENT (Virtual) Card is unreadable."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Inter-agency Transfer window", "Test_Scnario": "Verify the fare deduction from ePurse Balance when the customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Sce_Description": "This scenario is to test if the fare is correctly deducted from the ePurse Balance when the customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card.", "Expected_Results": "The fare should be deducted from the ePurse Balance and the transaction should be successful. The SA Tool should show the successful fare payment screen for non-adult concession, plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Inter-agency Transfer window", "Test_Scnario": "Verify the fare deduction from ePurse Balance when the customer's ePurse balance is less than the fare amount", "Test_Sce_Description": "This scenario is to test if the fare is correctly deducted from the ePurse Balance when the customer's ePurse balance is less than the fare amount. The device sends the tap to ATS for processing. ATS checks the online hotlist and completes the fare processing. ATS removes the fare from the Virtual Card e-Purse and puts the card into overdraft.", "Expected_Results": "The fare should be deducted from the ePurse Balance and the transaction should be successful. The right to travel is conferred to the Cardholder by updating the Virtual Card accordingly. The device provides the appropriate feedback to the Cardholder of a successful transaction."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Inter-agency Transfer window", "Test_Scnario": "Verify the fare deduction from ePurse Balance when the transaction is within Intra-SP Transfer window", "Test_Sce_Description": "This scenario is to test if the fare is correctly deducted from the ePurse Balance when the transaction is within the Intra-SP Transfer window. The customer's Virtual Card should have a valid transfer product.", "Expected_Results": "The fare should be deducted from the ePurse Balance and the transaction should be successful. The device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Inter-agency Transfer window", "Test_Scnario": "Verify the fare deduction from ePurse Balance when the customer requests Audio Messages", "Test_Sce_Description": "This scenario is to test if the fare is correctly deducted from the ePurse Balance when the customer requests Audio Messages.", "Expected_Results": "The fare should be deducted from the ePurse Balance and the transaction should be successful. The device should provide the appropriate feedback to the Cardholder of a successful transaction with a transfer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Autoload Threshold is met", "Test_Scnario": "Testing fare payment during peak hours after reaching off peak daily cap", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made during peak hours after the farecard has already reached the off peak daily cap limit. The farecard has not reached the peak daily cap limit and is out of the transfer window.", "Expected_Results": "The SA Tool should correctly compute the fare and deduct the amount from the Virtual Card E-Purse. The fare payment should be successful and the SA Tool should communicate this back to the user."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Autoload Threshold is met", "Test_Scnario": "Testing fare payment on a premium service route with a valid special event transfer product", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made on a premium service route/location after previously riding on a Special Event service route. The farecard has a valid Special Event Transfer Product and the tap is within the Transfer Window.", "Expected_Results": "The SA Tool should correctly compute the fare and deduct the amount from the Virtual Card E-Purse. The fare payment should be successful and the SA Tool should communicate this back to the user."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Autoload Threshold is met", "Test_Scnario": "Testing fare payment with a farecard that has a valid non-adult concession", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made with a farecard that has a valid non-adult concession. The farecard is on the Action or Load Value list.", "Expected_Results": "The SA Tool should verify that the Farecard is on the Action or Load Value List and update the Farecard accordingly. The fare payment should be successful and the SA Tool should communicate this back to the user."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Autoload Threshold is met", "Test_Scnario": "Testing fare payment on a premium service route with a fare upgrade", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made on a premium service or special event route/location after previously riding on a regular service route. The farecard has a valid Regular Service Transfer Product and the tap is within the Transfer Window.", "Expected_Results": "The SA Tool should correctly compute the Upgrade fare and deduct the amount from the Virtual Card E-Purse. The fare payment should be successful and the SA Tool should communicate this back to the user."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Autoload Threshold is met", "Test_Scnario": "Testing fare payment when daily cap is reached outside of transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made and the farecard has reached the Daily Cap Limit and is out of the transfer window.", "Expected_Results": "The SA Tool should not deduct any fare since the Daily Cap is reached. The fare payment should be successful and the SA Tool should communicate this back to the user."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Action or Load Value List", "Test_Scnario": "Verifying the Farecard is on the Action or Load Value List", "Test_Sce_Description": "The test will verify that the SA Tool checks if the Farecard is on the Action or Load Value List and updates the Farecard accordingly.", "Expected_Results": "The SA Tool should successfully verify the Farecard's presence on the Action or Load Value List and update it accordingly."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Action or Load Value List", "Test_Scnario": "Verifying the audio messages for fare payment", "Test_Sce_Description": "The test will verify that when a customer requests audio messages for fare payment, the operator enables audio mode and the corresponding audio message is played in the default language of the customer's Farecard.", "Expected_Results": "The operator should successfully enable audio mode and the corresponding audio message should be played in the default language of the customer's Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Action or Load Value List", "Test_Scnario": "Verifying the fare payment when Daily Cap is reached", "Test_Sce_Description": "The test will verify that when the Farecard has reached the Daily Cap Limit and is out of the transfer window, the SA Tool deducts no fare.", "Expected_Results": "The SA Tool should successfully deduct no fare when the Farecard has reached the Daily Cap Limit and is out of the transfer window."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Action or Load Value List", "Test_Scnario": "Verifying the fare payment for Premium Service or Special Route/Location", "Test_Sce_Description": "The test will verify that when a tap on a premium service or special route/location is made, the SA Tool computes and deducts the Premium or Special Event fare.", "Expected_Results": "The SA Tool should successfully compute and deduct the Premium or Special Event fare when a tap on a premium service or special route/location is made."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Action or Load Value List", "Test_Scnario": "Verifying the fare upgrade for Premium Service or Special Route/Location", "Test_Sce_Description": "The test will verify that when a tap on a premium service or special event route/location is made after previously riding on a regular service route (within the transfer window), the SA Tool computes and deducts the Upgrade fare.", "Expected_Results": "The SA Tool should successfully compute and deduct the Upgrade fare when a tap on a premium service or special event route/location is made after previously riding on a regular service route (within the transfer window)."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Action or Load Value List", "Test_Scnario": "Verifying the fare payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "The test will verify that when a tap on peak hours is made after previously reaching off peak daily cap (outside the transfer window), the SA Tool processes a fare payment.", "Expected_Results": "The SA Tool should successfully process a fare payment when a tap on peak hours is made after previously reaching off peak daily cap (outside the transfer window)."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Action or Load Value List", "Test_Scnario": "Verifying the Load Value or Action processing prior to performing the Fare Validation", "Test_Sce_Description": "The test will verify that the Device processes the Load or Action Transaction prior to continuing the validation Use Case.", "Expected_Results": "The Device should successfully process the Load or Action Transaction prior to continuing the validation Use Case."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Action or Load Value List", "Test_Scnario": "Verifying the fare payment when Farecard contains a valid transfer product", "Test_Sce_Description": "The test will verify that when a valid transfer product is contained on the Farecard, the Tap-On Fare configured on the device as well as the Underpayment Value will be reduced to account for the Transfer Discount.", "Expected_Results": "The Device should successfully reduce the Tap-On Fare and the Underpayment Value to account for the Transfer Discount when a valid transfer product is contained on the Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Action or Load Value List", "Test_Scnario": "Verifying the fare payment when Farecard contains a Default O/D", "Test_Sce_Description": "The test will verify that when a default O/D is contained on the Farecard, the Device processes a full Fare-by-Zone transaction (both tap-on and tap-off).", "Expected_Results": "The Device should successfully process a full Fare-by-Zone transaction (both tap-on and tap-off) when a default O/D is contained on the Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change SP specific concession", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Action or Load Value List", "Test_Scnario": "Verifying the fare payment when Farecard contains Underpayment from a previous trip", "Test_Sce_Description": "The test will verify that when the Farecard has a value contained in the Underpayment Block, the Device deducts the Underpayment Value from the Farecard E-Purse prior to performing the Fare Validation.", "Expected_Results": "The Device should successfully deduct the Underpayment Value from the Farecard E-Purse prior to performing the Fare Validation when the Farecard has a value contained in the Underpayment Block."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard Does Not Have a Valid Fare to Reverse", "Test_Scnario": "Testing the functionality of the SA Tool when a non-activated Farecard is tapped", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a non-activated Farecard. The SA Tool should detect that the Farecard is not activated and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play a declined audio tone.", "Expected_Results": "The SA Tool should correctly detect that the Farecard is not activated, display a declined message to the customer, not conduct the transaction, and play a declined audio tone."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard Does Not Have a Valid Fare to Reverse", "Test_Scnario": "Testing the functionality of the SA Tool when a Farecard is not on the action list", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a Farecard that is not on the action list available on the device. The SA Tool should not respond and display a 'Card Read Error' message.", "Expected_Results": "The SA Tool should correctly detect that the Farecard is not on the action list, not respond, and display a 'Card Read Error' message."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard Does Not Have a Valid Fare to Reverse", "Test_Scnario": "Testing the functionality of the SA Tool when a Fare Payment Reversal is performed on an Online SA Tool that is connected to ATS", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Fare Payment Reversal is performed on an Online SA Tool that is connected to ATS. The device should be in 'In-Service' state and in Reversal mode. The Open Payments Media should pass validation checks and the tap should be within the reversal window.", "Expected_Results": "The SA Tool should correctly perform a Fare Payment Reversal on an Online SA Tool that is connected to ATS, be in 'In-Service' state and in Reversal mode, and the Open Payments Media should pass validation checks and the tap should be within the reversal window."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard Does Not Have a Valid Fare to Reverse", "Test_Scnario": "Testing the functionality of the SA Tool when a Fare Payment Reversal is performed on a SA Tool with Open Payments Media and the device is offline", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Fare Payment Reversal is performed on a SA Tool with Open Payments Media and the device is offline. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services.", "Expected_Results": "The SA Tool should correctly store the tap till the device goes back online and connects to Accenture Ticketing Services when a Fare Payment Reversal is performed on a SA Tool with Open Payments Media and the device is offline."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard Does Not Have a Valid Fare to Reverse", "Test_Scnario": "Testing the functionality of the SA Tool when a Virtual Card Transaction Reversal is performed on an Online SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Virtual Card Transaction Reversal is performed on an Online SA Tool. The SA Tool should be powered on, Reversal should be enabled in the Subsystem, the last transaction should be deemed to be reversible, and the SA Tool should be online and connected to ATS.", "Expected_Results": "The SA Tool should correctly perform a Virtual Card Transaction Reversal on an Online SA Tool, be powered on, have Reversal enabled in the Subsystem, deem the last transaction to be reversible, and be online and connected to ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard Does Not Have a Valid Fare to Reverse", "Test_Scnario": "Testing the functionality of the SA Tool when a Virtual Card Transaction Reversal is performed and the SA Tool is offline", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Virtual Card Transaction Reversal is performed and the SA Tool is offline. The SA Tool should check the Tap Counter to see if it is exceeded, store request for reversal, display Request for reversal success screen, and send bulk upload of transactions to ATS for processing when it comes back online.", "Expected_Results": "The SA Tool should correctly check the Tap Counter to see if it is exceeded, store request for reversal, display Request for reversal success screen, and send bulk upload of transactions to ATS for processing when it comes back online when a Virtual Card Transaction Reversal is performed and the SA Tool is offline."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Testing the functionality of the SA Tool when a non-activated Farecard is tapped", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a non-activated Farecard. The SA Tool application should display a declined message to the customer and the transaction should not be conducted.", "Expected_Results": "The SA Tool application should display a declined message to the customer. The transaction should not be conducted. The SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Testing the functionality of the SA Tool when a Farecard not on the action list is tapped", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a Farecard that is not on the action list available on the device. The SA Tool application should display a declined message to the customer and the transaction should not be conducted.", "Expected_Results": "The SA Tool application should display a declined message to the customer. The transaction should not be conducted. The SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Testing the functionality of the SA Tool when a Fare Payment Reversal is performed on an Online SA Tool that is connected to ATS", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Fare Payment Reversal is performed on an Online SA Tool that is connected to ATS. The device should be in \u201cIn-Service\u201d state, in Reversal mode, and able to pass validation checks.", "Expected_Results": "The device should send the cardholder\u2019s reversal request tap to Accenture Ticketing Services. The Request for Reversal Recorded screen should be provided to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Testing the functionality of the SA Tool when a Fare Payment Reversal is performed on a SA Tool with Open Payments Media while the device is offline", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Fare Payment Reversal is performed on a SA Tool with Open Payments Media while the device is offline and not connected to Accenture Ticketing Services. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services.", "Expected_Results": "The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services. The tap should then be rated in ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Testing the functionality of the SA Tool when a Virtual Card Transaction Reversal is performed on an Online SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Virtual Card Transaction Reversal is performed on an Online SA Tool. The SA Tool should read the Virtual Card information and send transaction to ATS to be processed.", "Expected_Results": "ATS should verify that the last transaction is reversible. ATS should perform the reversal and send the result back to the SA Tool. The SA Tool should display successful fare reversal screen to the operator and customer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Testing the functionality of the SA Tool when a Virtual Card Transaction Reversal is performed and the Farecard is unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Virtual Card Transaction Reversal is performed and the Farecard is unreadable. The SA Tool NFC reader should detect the Farecard but be unable to read it.", "Expected_Results": "The SA Tool application should indicate to the operator that the Farecard is unreadable. The customer should tap on the NFC reader again. If the tap is successful, the transaction should be conducted. If the tap is unsuccessful, the SA Tool application should indicate to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Testing the functionality of the SA Tool when a Virtual Card Transaction Reversal is performed and the SA Tool is offline", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Virtual Card Transaction Reversal is performed and the SA Tool is offline and not connected to ATS. The device should check the Tap Counter to see if it is exceeded.", "Expected_Results": "The SA Tool should store request for reversal. The Request for reversal success screen should be displayed. The SA Tool should send bulk upload of transactions to ATS for processing when it comes back online."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Testing the functionality of the SA Tool when a Virtual Card Transaction Reversal is performed and the customer requests audio messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Virtual Card Transaction Reversal is performed and the customer requests audio messages. The operator should enable audio mode.", "Expected_Results": "The operator should be able to change the volume level using the physical device buttons at the customer\u2019s discretion. The SA Tool should display the fare reversal screen to the operator and customer for the duration of the audio message. The corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Verify the functionality of the SA Tool when a customer requests to reverse a fare", "Test_Sce_Description": "This scenario is to test if the SA Tool is able to handle a customer's request to reverse a fare. The operator should be able to select the reversal option on the SA Tool home screen and the customer should be able to tap their Virtual Card on the NFC card reader on the SA Tool.", "Expected_Results": "The SA Tool should be able to read the Virtual Card information and send the transaction to ATS to be processed. ATS should verify that the last transaction is reversible, perform the reversal and send the result back to the SA Tool."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Verify the functionality of the SA Tool when the Farecard is unreadable", "Test_Sce_Description": "This scenario is to test if the SA Tool is able to handle a situation where the Farecard is unreadable. The SA Tool NFC reader should detect the Farecard but be unable to read it.", "Expected_Results": "The SA Tool application should indicate to the operator that the Farecard is unreadable. The customer should be able to tap on the NFC reader again. If the tap is successful, the SA Tool should be able to conduct the transaction. If the tap is unsuccessful, the SA Tool application should indicate to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Verify the functionality of the SA Tool when it is offline", "Test_Sce_Description": "This scenario is to test if the SA Tool is able to handle a situation where it is offline and not connected to ATS. The operator should be able to select the reversal option on the SA Tool home screen and the customer should be able to tap their Virtual Card on the NFC card reader on the SA Tool.", "Expected_Results": "The SA Tool should check the Tap Counter to see if it is exceeded. If it is not, the SA Tool should store the request for reversal and display a request for reversal success screen. When the SA Tool comes back online, it should send a bulk upload of transactions to ATS for processing."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Verify the functionality of the SA Tool when the customer requests audio messages", "Test_Sce_Description": "This scenario is to test if the SA Tool is able to handle a customer's request for audio messages for fare reversal. The operator should be able to enable audio mode and change the volume level using the physical device buttons at the customer\u2019s discretion.", "Expected_Results": "The SA Tool should display the fare reversal screen to the operator and customer for the duration of the audio message. The corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Verify the functionality of the SA Tool when the customer taps a card that is not a Farecard", "Test_Sce_Description": "This scenario is to test if the SA Tool is able to handle a situation where the customer taps a card that is not a Farecard. The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time.", "Expected_Results": "The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Verify the functionality of the SA Tool when the customer taps a non-activated Farecard", "Test_Sce_Description": "This scenario is to test if the SA Tool is able to handle a situation where the customer taps a non-activated Farecard. The device should detect that the Farecard is not activated.", "Expected_Results": "The SA Tool application should display a declined message to the customer. The transaction should not be conducted. The SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Battery goes below the low battery threshold during reversal", "Test_Scnario": "Testing the functionality when the battery goes below the low battery threshold during reversal", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a reversal. The SA Tool should switch to 'Out of Service' mode if the low battery threshold is reached before the reversal is completed.", "Expected_Results": "The SA Tool switches to 'Out of Service' mode if the low battery threshold is reached before the reversal is completed."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Battery goes below the low battery threshold during reversal", "Test_Scnario": "Testing the functionality when the customer's card is not a Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's card is not a Farecard. The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time.", "Expected_Results": "The SA Tool application does not respond, but the device error message 'Card Read Error' is displayed for a short period of time."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Battery goes below the low battery threshold during reversal", "Test_Scnario": "Testing the functionality when the customer's card is within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's card is within the Anti-Passback Window. The SA Tool application should display a declined message to the customer and the transaction should not be conducted.", "Expected_Results": "The SA Tool application displays a declined message to the customer and the transaction is not conducted."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Battery goes below the low battery threshold during reversal", "Test_Scnario": "Testing the functionality when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring outside of the time limit of the Limited Period Pass Product", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the farecard has a valid Limited Period Pass product on it and the time at tap is occurring outside of the time limit of the Limited Period Pass Product. The SA Tool application should display a declined message to the customer and the transaction should not be conducted.", "Expected_Results": "The SA Tool application displays a declined message to the customer and the transaction is not conducted."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Battery goes below the low battery threshold during reversal", "Test_Scnario": "Testing the functionality when the SA Tool is offline and not connected to ATS", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is offline and not connected to ATS. The SA Tool should store the request for reversal and send a bulk upload of transactions to ATS for processing when it comes back online.", "Expected_Results": "The SA Tool stores the request for reversal and sends a bulk upload of transactions to ATS for processing when it comes back online."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal - Battery goes below the low battery threshold during reversal", "Test_Scnario": "Testing the functionality when the customer requests to reverse a fare and requests audio messages for fare reversal", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer requests to reverse a fare and requests audio messages for fare reversal. The operator should enable audio mode and the SA Tool should display the fare reversal screen to the operator and customer for the duration of the audio message.", "Expected_Results": "The operator enables audio mode and the SA Tool displays the fare reversal screen to the operator and customer for the duration of the audio message."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Verify the functionality of the SA Tool when a non-Farecard is tapped", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when a non-Farecard is tapped. The customer taps a card that is not a Farecard and the SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time.", "Expected_Results": "The SA Tool application does not respond and the device error message \u201cCard Read Error\u201d is displayed for a short period of time."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Verify the functionality of the SA Tool when a non-activated Farecard is tapped", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when a non-activated Farecard is tapped. The device should detect that the Farecard is not activated and the SA Tool application should display a declined message to the customer. The transaction should not be conducted.", "Expected_Results": "The device detects that the Farecard is not activated. The SA Tool application displays a declined message to the customer. The transaction is not conducted."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Verify the functionality of the SA Tool when the Farecard is unreadable", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the Farecard is unreadable. The SA Tool NFC reader should detect the Farecard but is unable to read it. SA Tool application should indicate to the operator that the Farecard is unreadable.", "Expected_Results": "The SA Tool NFC reader detects the Farecard but is unable to read it. SA Tool application indicates to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Verify the functionality of the SA Tool when it is offline", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when it is offline. The device should check the Tap Counter to see if it is exceeded and the SA Tool should store request for reversal. The request for reversal success screen should be displayed.", "Expected_Results": "The device checks the Tap Counter to see if it is exceeded. The SA Tool stores request for reversal. The request for reversal success screen is displayed."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Verify the functionality of the SA Tool when the customer requests audio messages", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the customer requests audio messages. The operator should enable audio mode and the SA Tool should display the fare reversal screen to the operator and customer for the duration of the audio message. Corresponding audio message should be played to the customer in the default language of their Farecard.", "Expected_Results": "The operator enables audio mode. The SA Tool displays the fare reversal screen to the operator and customer for the duration of the audio message. Corresponding audio message is played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a non-activated Farecard", "Test_Scnario": "Testing the functionality of fare reversal with a non-activated Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a non-activated Farecard for fare reversal. The SA Tool should detect that the Farecard is not activated and display a declined message to the customer.", "Expected_Results": "The SA Tool should correctly detect the non-activated Farecard and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a non-activated Farecard", "Test_Scnario": "Testing the functionality of fare reversal with a Virtual Card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a Virtual Card for fare reversal. The SA Tool should read the Virtual Card information and send the transaction to ATS to be processed.", "Expected_Results": "The SA Tool should correctly read the Virtual Card information and send the transaction to ATS for processing. The SA Tool should display a successful fare reversal screen to the operator and customer and play the successful fare reversal audio tone."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a non-activated Farecard", "Test_Scnario": "Testing the functionality of fare reversal with Open Payments Media on an Online SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Cardholder taps the Open Payments Media on the device Card Reader (CID) while the device is in reversal mode. The device should send the cardholder\u2019s reversal request tap to Accenture Ticketing Services.", "Expected_Results": "The device should correctly send the cardholder\u2019s reversal request tap to Accenture Ticketing Services. The Request for Reversal Recorded screen should be provided to the cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a non-activated Farecard", "Test_Scnario": "Testing the functionality of fare reversal with Open Payments Media on an Offline SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the device is offline and not connected to Accenture Ticketing Services. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services.", "Expected_Results": "The latent transaction processor should correctly store the tap till the device goes back online and connects to Accenture Ticketing Services. The tap should then be rated in ATS."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a non-activated Farecard", "Test_Scnario": "Testing the functionality of fare reversal with a Farecard that is unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps an unreadable Farecard for fare reversal. The SA Tool should detect the Farecard but fail to read it correctly.", "Expected_Results": "The SA Tool should correctly detect the Farecard but fail to read it correctly. The SA Tool application should indicate to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a non-activated Farecard", "Test_Scnario": "Testing the functionality of fare reversal with a card that is not a Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a card that is not a Farecard for fare reversal. The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time.", "Expected_Results": "The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Transaction Reversal \u2013 Customer taps a non-activated Farecard", "Test_Scnario": "Testing the functionality of fare reversal with a customer requesting audio messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer requests audio messages for fare reversal. The operator should enable audio mode and the SA Tool should display the fare reversal screen to the operator and customer for the duration of the audio message.", "Expected_Results": "The operator should correctly enable audio mode and the SA Tool should display the fare reversal screen to the operator and customer for the duration of the audio message. The corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Cardholder has already tapped-on", "Test_Scnario": "Cardholder taps-on again at the same SA Tool within the anti-passback window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a cardholder taps-on again at the same SA Tool within the anti-passback window. The device should check the latent transaction processor for a previous tap within the anti-passback window and store the tap until it is connected to ATS for reconciliation.", "Expected_Results": "The device should accept the tap, check the latent transaction processor for a previous tap within the anti-passback window, and store the tap until it is connected to ATS for reconciliation. The Declined \u2013 Already Tapped Screen should be provided to the cardholder and an error should be logged in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Cardholder has already tapped-on", "Test_Scnario": "Error occurs on the device that does not cover the exception cases", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when an error occurs on the device that does not cover the exception cases. The device should record the tap and provide the Declined \u2013 See Customer Service Screen to the cardholder.", "Expected_Results": "The device should record the tap and provide the Declined \u2013 See Customer Service Screen to the cardholder. An error should be logged in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Cardholder has already tapped-on", "Test_Scnario": "Open Payments media not on the approved media list is tapped on the device in beta mode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when an Open Payments media that is not on the approved media list is tapped on the device in beta mode. The device should check the approved media list and provide the Declined \u2013 Tap Farecard Screen to the cardholder if the media is not on the list.", "Expected_Results": "The device should check the approved media list and provide the Declined \u2013 Tap Farecard Screen to the cardholder if the media is not on the list. An error should be logged in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Cardholder has already tapped-on", "Test_Scnario": "Customer\u2019s Open Payments Media is on the BIN Blocking List", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer\u2019s Open Payments Media is on the BIN Blocking List. The device should check its local BIN Blocking list and display the Declined \u2013 BIN Blocked screen if the card\u2019s BIN is found to be on the list.", "Expected_Results": "The device should check its local BIN Blocking list and display the Declined \u2013 BIN Blocked screen if the card\u2019s BIN is found to be on the list. An error should be logged in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Cardholder has already tapped-on", "Test_Scnario": "Interac Card is on the deny list", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer is travelling with an Interac Card, and ATS returns a decline response due to Media In Debt. The device should send the tap to ATS and return a response that the Interac media is on the deny list.", "Expected_Results": "The device should send the tap to ATS and return a response that the Interac media is on the deny list. The Declined \u2013 Interac Unpaid Fares Online Screen should be provided to the cardholder and an error should be logged in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Farecard has insufficient E-Purse to cover the Tap-On Fare", "Test_Scnario": "Farecard tapped does not match", "Test_Sce_Description": "The operator taps one Farecard and intends to write to it but another Farecard is presented during the write tap. The system should detect that the Farecard tapped during the write tap does not match the Farecard tapped during the identification tap.", "Expected_Results": "The system displays an error message and prompts the operator to tap the correct card in order to proceed."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Farecard has insufficient E-Purse to cover the Tap-On Fare", "Test_Scnario": "Underpayment handling", "Test_Sce_Description": "The operator selects \u201cSell\u201d from the Main menu, then selects a product. If the operator chooses to Add Funds or Transit Pass while the card is in underpayment, the SA Tool should show the Underpayment Full Screen Alert.", "Expected_Results": "The operator informs the customer that they are in underpayment. The operator must determine whether the customer has missed a tap off or just tapped on. They can do this in two ways: Ask the customer directly or Verify by checking the last tap information on the Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Farecard has insufficient E-Purse to cover the Tap-On Fare", "Test_Scnario": "Farecard is blocked", "Test_Sce_Description": "If the Farecard is blocked, the right to travel is not conferred. The card reader should detect that the Farecard is blocked.", "Expected_Results": "Right to travel is not conferred. The Device provides the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Farecard has insufficient E-Purse to cover the Tap-On Fare", "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration", "Test_Sce_Description": "If the time since tap-on exceeds the Max Travel Duration, then the Device will auto-settle the Underpayment and deduct the value from the Farecard E-Purse.", "Expected_Results": "Device determines that the Tap-On Time + Max Travel Duration < Current Time. Device Auto-settles the Underpayment and deducts the value from the Farecard E-Purse."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Farecard has insufficient E-Purse to cover the Tap-On Fare", "Test_Scnario": "Multiple NFC media are presented to the device at one time", "Test_Sce_Description": "If multiple NFC media are presented to the device at one time, the device should block all fare payment functionality.", "Expected_Results": "Device blocks all user functionality, presents Anti-Collision HMI to customer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Farecard has insufficient E-Purse to cover the Tap-On Fare", "Test_Scnario": "Tap a non-activated Farecard on an SA Tool", "Test_Sce_Description": "If the Farecard is not activated and is tapped on the device, the transaction should be unsuccessful.", "Expected_Results": "Device detects that the Farecard is not activated. The device provides feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Farecard has insufficient E-Purse to cover the Tap-On Fare", "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Sce_Description": "Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader).", "Expected_Results": "The device provides feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Tap a non-activated Farecard on an SA Tool", "Test_Scnario": "Testing the functionality of Non-Revenue farecard in training mode", "Test_Sce_Description": "In this scenario, a Non-Revenue farecard is tapped in the training mode of the SA tool. The tool should accept the card and process the transaction.", "Expected_Results": "The SA tool should successfully accept the Non-Revenue farecard in training mode and process the transaction."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Tap a non-activated Farecard on an SA Tool", "Test_Scnario": "Testing the functionality of Non-Revenue farecard in revenue mode", "Test_Sce_Description": "In this scenario, a Non-Revenue farecard is tapped in the revenue mode of the SA tool. The tool should display a declined HMI as it should not accept the card in this mode.", "Expected_Results": "The SA tool should display a declined HMI and should not process the transaction."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Tap a non-activated Farecard on an SA Tool", "Test_Scnario": "Testing the functionality of Farecard with Autoload Enabled", "Test_Sce_Description": "In this scenario, a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold. The device should automatically add the Autoload amount to the E-Purse balance.", "Expected_Results": "The device should successfully add the Autoload amount to the E-Purse balance and provide appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Tap a non-activated Farecard on an SA Tool", "Test_Scnario": "Testing the functionality of Farecard with no Default O/D in Override mode", "Test_Sce_Description": "In this scenario, a Farecard with no Default O/D is tapped on while the device is in Override mode. The device should process the tap as a result tap-on.", "Expected_Results": "The device should successfully process the tap as a result tap-on and provide appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Tap a non-activated Farecard on an SA Tool", "Test_Scnario": "Testing the functionality of Farecard with Audio Messages", "Test_Sce_Description": "In this scenario, a Farecard is tapped on an SA Tool to a Fare-by-Zone TA and the customer requests Audio Messages. The operator should enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard.", "Expected_Results": "The operator should successfully enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Tap a non-activated Farecard on an SA Tool", "Test_Scnario": "Testing the functionality of Farecard when it fails validation checks at Tap-On", "Test_Sce_Description": "In this scenario, a Farecard is tapped-off at the same location where tap-on occurred. The device should provide the cardholder with the appropriate feedback.", "Expected_Results": "The device should provide the cardholder with the appropriate feedback and should not update the Farecard."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Tap a non-activated Farecard on an SA Tool", "Test_Scnario": "Testing the functionality of blocked Farecard", "Test_Sce_Description": "In this scenario, a blocked Farecard is tapped on the device. The device should not confer the right to travel.", "Expected_Results": "The device should not confer the right to travel and should provide the appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Tap a non-activated Farecard on an SA Tool", "Test_Scnario": "Testing the functionality of Farecard when time since Tap-On Exceeds Max Travel Duration", "Test_Sce_Description": "In this scenario, the time since tap-on exceeds the Max Travel Duration. The Device should auto-settle the Underpayment and open a new trips.", "Expected_Results": "The Device should auto-settle the Underpayment, deduct the value from the Farecard E-Purse and open a new trips."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Tap a non-activated Farecard on an SA Tool", "Test_Scnario": "Testing the functionality of device when multiple NFC media are presented at one time", "Test_Sce_Description": "In this scenario, multiple NFC media are presented to the device at one time. The device should block all fare payment functionality.", "Expected_Results": "The device should block all fare payment functionality and present Anti-Collision HMI to customer."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Tap a non-activated Farecard on an SA Tool", "Test_Scnario": "Testing the functionality of non-activated Farecard", "Test_Sce_Description": "In this scenario, a non-activated Farecard is tapped on the device. The device should not process the transaction.", "Expected_Results": "The device should not process the transaction and should provide feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Change card language profile", "Use_Case_Name": "Tap a non-activated Farecard on an SA Tool", "Test_Scnario": "Testing the functionality of device when a Card reading error occurs", "Test_Sce_Description": "In this scenario, a Cardholder taps Farecard on an SA Tool and a Card reading error occurs. The device should not process the transaction.", "Expected_Results": "The device should not process the transaction and should provide feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Tap-off and Virtual Card Media\u2019s blocked parameter on the mobile wallet is enabled", "Test_Scnario": "Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled", "Test_Sce_Description": "This scenario tests the functionality of the system when the Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled. The system should not confer the right to travel if the card is blocked.", "Expected_Results": "The system should not confer the right to travel. The Declined \u2013 Blocked Screen should be provided to the cardholder. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Tap-off and Virtual Card Media\u2019s blocked parameter on the mobile wallet is enabled", "Test_Scnario": "Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled", "Test_Sce_Description": "This scenario tests the functionality of the system when the Virtual Card Media\u2019s mobile wallet blocked parameter is set to enabled. The system should not confer the right to travel if the card is blocked in the wallet.", "Expected_Results": "The system should not confer the right to travel. The device should not know a tap is attempted and should have no action."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Tap-off and Virtual Card Media\u2019s blocked parameter on the mobile wallet is enabled", "Test_Scnario": "Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps", "Test_Sce_Description": "This scenario tests the functionality of the system when the Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps. The system should not confer the right to travel if the tap counter limit has been reached.", "Expected_Results": "The system should not confer the right to travel. The offline device should reject the tap and the rider should not be permitted entry. An error should be captured and logged in the background."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Tap-off and Virtual Card Media\u2019s blocked parameter on the mobile wallet is enabled", "Test_Scnario": "Accepting Fare Payment from the E-Ticket", "Test_Sce_Description": "This scenario tests the functionality of the system when accepting a fare payment from an e-Ticket. The system should confer the right to travel if the E-Ticket is valid for travel.", "Expected_Results": "The system should confer the right to travel. The device should provide the appropriate feedback to the user of a successful transaction."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Tap-off and Virtual Card Media\u2019s blocked parameter on the mobile wallet is enabled", "Test_Scnario": "E-Ticket holder scans QR Code against the SA Tool reader and the SA Tool is Offline", "Test_Sce_Description": "This scenario tests the functionality of the system when an E-Ticket holder scans QR Code against the SA Tool reader and the SA Tool is Offline. The system should not confer the right to travel if the necessary validation checks fail.", "Expected_Results": "The system should not confer the right to travel. The device should return the appropriate feedback."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Tap-off and Virtual Card Media\u2019s blocked parameter on the mobile wallet is enabled", "Test_Scnario": "E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader", "Test_Sce_Description": "This scenario tests the functionality of the system when an E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader. The system should confer the right to travel if the Group QR Code is valid.", "Expected_Results": "The system should confer the right to travel. The device should provide the appropriate feedback to the user of a successful transaction."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps", "Test_Scnario": "Offline tap counter limit reached", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Virtual Card Media is tapped off an offline device and the tap counter is greater than the allowable offline taps. The device should reject the tap and not permit entry to the rider.", "Expected_Results": "The device rejects the tap and does not permit entry to the rider. An error is captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps", "Test_Scnario": "Offline tap counter limit not reached", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Virtual Card Media is tapped off an offline device and the tap counter is less than the allowable offline taps. The device should accept the tap and permit entry to the rider.", "Expected_Results": "The device accepts the tap and permits entry to the rider. No error is captured or logged."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps", "Test_Scnario": "Offline tap counter limit reset", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Virtual Card Media is tapped off an offline device and the tap counter is reset to 0. The device should accept the tap and permit entry to the rider.", "Expected_Results": "The device accepts the tap and permits entry to the rider. The tap counter is reset to 0."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps", "Test_Scnario": "Offline tap counter limit reached with online device", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Virtual Card Media is tapped off an online device and the tap counter is greater than the allowable offline taps. The device should reject the tap and not permit entry to the rider.", "Expected_Results": "The device rejects the tap and does not permit entry to the rider. An error is captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps", "Test_Scnario": "Offline tap counter limit not reached with online device", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Virtual Card Media is tapped off an online device and the tap counter is less than the allowable offline taps. The device should accept the tap and permit entry to the rider.", "Expected_Results": "The device accepts the tap and permits entry to the rider. No error is captured or logged."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps", "Test_Scnario": "Offline tap counter limit reset with online device", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Virtual Card Media is tapped off an online device and the tap counter is reset to 0. The device should accept the tap and permit entry to the rider.", "Expected_Results": "The device accepts the tap and permits entry to the rider. The tap counter is reset to 0."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps", "Test_Scnario": "Performance of SA Tool with high volume of offline taps", "Test_Sce_Description": "This scenario tests the performance of the SA Tool when a high volume of offline taps are made in a short period of time. The device should be able to handle the load and function as expected.", "Expected_Results": "The device handles the high volume of offline taps without any performance issues or errors."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Virtual Card Media is tapped off an offline device and tap counter is greater than allowable offline taps", "Test_Scnario": "Security of SA Tool during offline taps", "Test_Sce_Description": "This scenario tests the security of the SA Tool during offline taps. The device should securely store the offline tap details and send them to ATS via bulk upload when it returns back online.", "Expected_Results": "The device securely stores the offline tap details and sends them to ATS via bulk upload when it returns back online. No security breaches or data leaks occur."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Deny List", "Test_Scnario": "Testing the functionality of the SA Tool application when the customer's Farecard is on the Deny List", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the customer's Farecard is on the Deny List. The SA Tool application should detect that the Farecard is on the Deny List and display a declined message to the customer. The transaction should not be conducted.", "Expected_Results": "The SA Tool application should correctly identify that the Farecard is on the Deny List and display a declined message to the customer. The transaction should not be conducted."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Deny List", "Test_Scnario": "Testing the performance of the SA Tool application when the customer's Farecard is on the Deny List", "Test_Sce_Description": "This scenario is to test the performance of the SA Tool application when the customer's Farecard is on the Deny List. The SA Tool application should quickly detect that the Farecard is on the Deny List and display a declined message to the customer.", "Expected_Results": "The SA Tool application should quickly detect that the Farecard is on the Deny List and display a declined message to the customer. The performance of the application should not be affected."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Deny List", "Test_Scnario": "Testing the security of the SA Tool application when the customer's Farecard is on the Deny List", "Test_Sce_Description": "This scenario is to test the security of the SA Tool application when the customer's Farecard is on the Deny List. The SA Tool application should securely handle the customer's Farecard information and not allow any unauthorized access.", "Expected_Results": "The SA Tool application should securely handle the customer's Farecard information and not allow any unauthorized access. The security of the application should not be compromised."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Deny List", "Test_Scnario": "Testing the exception flow of the SA Tool application when the customer's Farecard is on the Deny List", "Test_Sce_Description": "This scenario is to test the exception flow of the SA Tool application when the customer's Farecard is on the Deny List. The SA Tool application should handle the exception correctly and not crash.", "Expected_Results": "The SA Tool application should handle the exception correctly and not crash. The application should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Deny List", "Test_Scnario": "Testing the alternate flow of the SA Tool application when the customer's Farecard is on the Deny List", "Test_Sce_Description": "This scenario is to test the alternate flow of the SA Tool application when the customer's Farecard is on the Deny List. The SA Tool application should handle the alternate flow correctly and not crash.", "Expected_Results": "The SA Tool application should handle the alternate flow correctly and not crash. The application should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the battery goes below the low battery threshold during a successful Farecard tap. The application should switch to 'Out of Service' mode after processing the payment.", "Expected_Results": "The SA Tool application should successfully process the payment and then switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using Period Pass - Customer taps a card that is not a Farecard", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when a customer taps a card that is not a Farecard. The application should display a 'Card Read Error' message.", "Expected_Results": "The SA Tool application should display a 'Card Read Error' message."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using Period Pass - Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when a customer's Farecard is within the Anti-Passback Window. The application should display a declined message to the customer and the transaction should not be conducted.", "Expected_Results": "The SA Tool application should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time while card is in overdraft", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, and the farecard is in overdraft. The application should display a declined message to the customer and the transaction should not be conducted.", "Expected_Results": "The SA Tool application should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when it detects the Virtual Card and fails to read it correctly. The application should indicate to the operator that the Virtual Card is unreadable.", "Expected_Results": "The SA Tool application should indicate to the operator that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when a customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession.", "Expected_Results": "The SA Tool should show the successful fare payment screen for non-adult concession."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when a customer's ePurse balance is less than the fare amount. The device should send the tap to ATS for processing and put the card into overdraft.", "Expected_Results": "The device should send the tap to ATS for processing and put the card into overdraft."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when a customer's Virtual Card has a valid intra-agency transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse.", "Expected_Results": "ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when a customer's Virtual Card has a valid transfer product from other service provider. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse.", "Expected_Results": "ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when a customer requests Audio Messages. The application should play the requested audio messages.", "Expected_Results": "The application should play the requested audio messages."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when it detects a Virtual Card but fails to read it correctly. The customer will tap on the NFC reader again. If the tap is successful, steps 4 \u2013 7 will be conducted. If the tap is unsuccessful, the SA Tool application will indicate to the operator that the CLIENT (Virtual) Card is unreadable.", "Expected_Results": "The SA Tool application should correctly indicate to the operator that the Virtual Card is unreadable when it fails to read it. If the customer taps the NFC reader again and the tap is successful, the application should proceed with steps 4 \u2013 7. If the tap is still unsuccessful, the application should again indicate to the operator that the CLIENT (Virtual) Card is unreadable."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession, play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions.", "Expected_Results": "The SA Tool should correctly display the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions when the customer\u2019s Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer\u2019s ePurse balance is less than the fare amount. The device sends the tap to ATS for processing. ATS checks the online hotlist and completes the fare processing. ATS removes the fare from the Virtual Card e-Purse and puts the card into overdraft.", "Expected_Results": "The SA Tool should correctly send the tap to ATS for processing when the customer\u2019s ePurse balance is less than the fare amount. ATS should check the online hotlist and complete the fare processing. ATS should remove the fare from the Virtual Card e-Purse and put the card into overdraft."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer\u2019s Virtual Card has a valid transfer product. ATS will read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse.", "Expected_Results": "The SA Tool should correctly read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse when the customer\u2019s Virtual Card has a valid transfer product."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer\u2019s Virtual Card has a valid transfer product from other service provider and a transfer agreement between the service providers has been established. ATS will read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse.", "Expected_Results": "The SA Tool should correctly read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse when the customer\u2019s Virtual Card has a valid transfer product from other service provider and a transfer agreement between the service providers has been established."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer\u2019s Virtual Card is Unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when it detects a Virtual Card but fails to read it correctly. The customer will tap on the NFC reader again and the application should indicate to the operator that the Virtual Card is unreadable.", "Expected_Results": "The SA Tool application should correctly indicate to the operator that the Virtual Card is unreadable when it fails to read the card correctly."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a Valid Non-Adult, Non-Child, non-discreet concessions. The SA Tool should show the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions.", "Expected_Results": "The SA Tool should correctly display the successful fare payment screen for non-adult concession and play the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Customer Has a Registered Virtual Card with Positive ePurse Balance Less Than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's ePurse balance is less than the fare amount. The device should send the tap to ATS for processing, ATS should check the online hotlist and complete the fare processing, and then remove the fare from the Virtual Card e-Purse and put the card into overdraft.", "Expected_Results": "The device should correctly send the tap to ATS for processing, ATS should check the online hotlist and complete the fare processing, and then remove the fare from the Virtual Card e-Purse and put the card into overdraft."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product. ATS should read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse.", "Expected_Results": "ATS should correctly read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Accepting Fare Payment from a Virtual Card using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card has a valid transfer product from other service provider. ATS should read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse.", "Expected_Results": "ATS should correctly read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Cardholder profile changes", "Sub_Flow_Name": "Block/Unblock", "Use_Case_Name": "Accepting Fare Payment from a Virtual Card using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer requests audio messages. The SA Tool should provide audio messages to the customer as requested.", "Expected_Results": "The SA Tool should correctly provide audio messages to the customer as requested."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is locked", "Test_Scnario": "Farecard is locked", "Test_Sce_Description": "The user tries to travel with a locked Farecard. The card reader should detect that the Farecard is locked and not confer the right to travel.", "Expected_Results": "The device should provide appropriate feedback to the Cardholder that the Farecard is locked and the right to travel is not conferred. An error should be captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is locked", "Test_Scnario": "Non-Recognizable media is tapped on SA Tool", "Test_Sce_Description": "The user taps a card that is not recognizable to the reader on the SA Tool.", "Expected_Results": "The SA Tool should display the applicable \u201cTry Another Card\u201d screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is locked", "Test_Scnario": "Cardholder Taps-Off SA Tool with Farecard", "Test_Sce_Description": "The Cardholder ends a trip and taps the Farecard on the device Card Reader (CID). The device checks that the card is valid and deducts the appropriate final configured fare.", "Expected_Results": "The device should provide the appropriate feedback to the Cardholder of a successful transaction and update the Farecard accordingly."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is locked", "Test_Scnario": "Farecard is in the Load Value List or Action List", "Test_Sce_Description": "The Device processes the Load or Action Transaction prior to continuing the validation Use Case.", "Expected_Results": "The device should provide the appropriate feedback to the Cardholder of a successful transaction in addition to the processing of a list item and update the Farecard accordingly."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is locked", "Test_Scnario": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Sce_Description": "The user taps off on a Device after the tap-on occurred during a temporal class Supplement time.", "Expected_Results": "The device should provide the appropriate feedback to the Cardholder and an error should be captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is locked", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance", "Test_Sce_Description": "The customer asks to pay for the trip with their Farecard. The operator selects the payment function on the SA Tool application home screen. The SA Tool reads the Farecard information and performs all the necessary validation checks.", "Expected_Results": "The device should compute the value to be deducted from the e-Purse and deduct the fare accordingly. The SA Tool should update the Farecard accordingly and display the successful fare payment screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is locked", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is Unreadable", "Test_Sce_Description": "The SA Tool NFC reader detects the Farecard but is unable to read it. The customer will tap on the NFC reader again.", "Expected_Results": "If the tap is successful, steps 4 \u2013 9 will be conducted. If the tap is unsuccessful, the SA Tool application will indicate to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is locked", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Farecard", "Test_Sce_Description": "The customer has a Valid Non-Adult, Non-Child, non-discreet concession on their Farecard.", "Expected_Results": "The device should provide the appropriate feedback to the Cardholder and an error should be captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Testing the offline functionality of the SA Tool", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when it is offline and not connected to ATS. The device should collect offline tap details and once the device returns back online, offline taps should be sent to ATS via bulk upload.", "Expected_Results": "The SA Tool should successfully collect offline tap details and once the device is back online, it should successfully upload the offline taps to ATS."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Testing the audio assist mode of the SA Tool", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when a customer uses audio jack to hear instructions. The device should automatically switch into audio assist mode when headphones are inserted into the Audio jack.", "Expected_Results": "The SA Tool should successfully switch into audio assist mode when headphones are inserted into the Audio jack and provide audio instructions to the customer."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Testing the processing of Non-Revenue media taps", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when a Non-Revenue Virtual Card Media is tapped on the Device. The device should send the tap like any other Virtual Card Media to ATS.", "Expected_Results": "The SA Tool should successfully process the Non-Revenue media taps and send the tap to ATS."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Testing the override functionality of the SA Tool", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when a customer overrides the Default Trip prior to tapping-off. The device should process the tap as a normal tap-off.", "Expected_Results": "The SA Tool should successfully process the tap as a normal tap-off when the Default Trip is overridden by the customer."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Testing the Card Authentication check of the SA Tool", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the Virtual Card Media fails the Card Authentication check. The device should return the appropriate feedback.", "Expected_Results": "The SA Tool should successfully return the appropriate feedback when the Virtual Card Media fails the Card Authentication check."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Testing the processing of multiple NFC media", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when multiple NFC media are presented to the device at one time. The device should process the NFC media accordingly.", "Expected_Results": "The SA Tool should successfully process the multiple NFC media presented to the device at one time."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Testing the Autoload functionality of the SA Tool", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold. The Farecard should have the Autoload amount automatically added to the E-Purse balance.", "Expected_Results": "The SA Tool should successfully add the Autoload amount to the E-Purse balance when the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Testing the audio messages functionality of the SA Tool", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when a customer requests audio messages for the fare payment. The device should provide audio messages to the customer in the default language of their Farecard.", "Expected_Results": "The SA Tool should successfully provide audio messages to the customer in the default language of their Farecard when requested."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Non-Recognizable media is tapped on SA Tool", "Test_Scnario": "Testing the validation checks of the SA Tool", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the Farecard fails validation checks at Tap-On. The device should provide the appropriate feedback.", "Expected_Results": "The SA Tool should successfully provide the appropriate feedback when the Farecard fails validation checks at Tap-On."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-Off on a SA Tool in a Fare-by-Zone TA with Farecard", "Test_Scnario": "Testing the functionality of Non-Revenue farecard in the training mode", "Test_Sce_Description": "In this scenario, the Non-Revenue farecard is tapped in the training mode of the SA tool. The tool should accept the card and process the transaction.", "Expected_Results": "The SA tool should accept the Non-Revenue farecard in the training mode and process the transaction successfully."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-Off on a SA Tool in a Fare-by-Zone TA with Farecard", "Test_Scnario": "Testing the functionality of Non-Revenue farecard in the revenue mode", "Test_Sce_Description": "In this scenario, the Non-Revenue farecard is tapped in the revenue mode of the SA tool. The tool should decline the card and display a declined HMI.", "Expected_Results": "The SA tool should decline the Non-Revenue farecard in the revenue mode and display a declined HMI."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-Off on a SA Tool in a Fare-by-Zone TA with Farecard", "Test_Scnario": "Testing the functionality of Farecard with Autoload Enabled", "Test_Sce_Description": "In this scenario, a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold. The device should detect this and automatically add the Autoload amount to the E-Purse balance.", "Expected_Results": "The device should detect that the Fare amount has crossed the Auto-load threshold and automatically add the Autoload amount to the E-Purse balance."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-Off on a SA Tool in a Fare-by-Zone TA with Farecard", "Test_Scnario": "Testing the functionality of Farecard with no Default O/D in Override mode", "Test_Sce_Description": "In this scenario, a Farecard with no Default O/D is tapped on while the device is in Override mode. The device should process the tap as a result tap-on.", "Expected_Results": "The device should process the tap as a result tap-on when the Farecard with no Default O/D is tapped on while the device is in Override mode."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-Off on a SA Tool in a Fare-by-Zone TA with Farecard", "Test_Scnario": "Testing the functionality of Farecard when time since Tap-On Exceeds Max Travel Duration", "Test_Sce_Description": "In this scenario, the time since tap-on exceeds the Max Travel Duration. The Device should auto-settle the Underpayment and open a new trip.", "Expected_Results": "The Device should auto-settle the Underpayment and open a new trip when the time since tap-on exceeds the Max Travel Duration."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-Off on a SA Tool in a Fare-by-Zone TA with Farecard", "Test_Scnario": "Testing the functionality of Farecard when multiple NFC media are presented to the device at one time", "Test_Sce_Description": "In this scenario, multiple NFC media are presented to the device at one time. The device should block all fare payment functionality.", "Expected_Results": "The device should block all fare payment functionality when multiple NFC media are presented to the device at one time."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-Off on a SA Tool in a Fare-by-Zone TA with Farecard", "Test_Scnario": "Testing the functionality of non-activated Farecard", "Test_Sce_Description": "In this scenario, a non-activated Farecard is tapped on the device. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction.", "Expected_Results": "The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Cardholder Taps-Off on a SA Tool in a Fare-by-Zone TA with Farecard", "Test_Scnario": "Testing the functionality of Farecard when card reading error occurs", "Test_Sce_Description": "In this scenario, a Cardholder taps Farecard on an SA Tool and a Card reading error occurs. The device should detect the error and provide feedback to the Cardholder.", "Expected_Results": "The device should detect the Card reading error and provide feedback to the Cardholder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is in the Load Value List or Action List", "Test_Scnario": "Load Value or Action Transaction Processing", "Test_Sce_Description": "This scenario is to test if the device processes the Load or Action Transaction prior to continuing the validation Use Case.", "Expected_Results": "The device should successfully process the Load or Action Transaction before continuing with the validation Use Case."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is in the Load Value List or Action List", "Test_Scnario": "Feedback to Cardholder", "Test_Sce_Description": "This scenario is to test if the device provides the appropriate feedback to the Cardholder of a successful transaction in addition to a List Item processing.", "Expected_Results": "The device should provide the appropriate feedback to the Cardholder of a successful transaction in addition to a List Item processing."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is in the Load Value List or Action List", "Test_Scnario": "Transfer Product Fare Calculation", "Test_Sce_Description": "This scenario is to test if the Tap-On Fare configured on the device as well as the Underpayment Value will be reduced to account for the Transfer Discount.", "Expected_Results": "The Tap-On Fare and the Underpayment Value should be reduced to account for the Transfer Discount."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is in the Load Value List or Action List", "Test_Scnario": "Full Fare-by-Zone Transaction Processing", "Test_Sce_Description": "This scenario is to test if the Device will deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip.", "Expected_Results": "The Device should deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is in the Load Value List or Action List", "Test_Scnario": "Default Trip Override", "Test_Sce_Description": "This scenario is to test if the Device will override the default O/D contained on the Farecard and process the tap as a regular tap-on.", "Expected_Results": "The Device should override the default O/D contained on the Farecard and process the tap as a regular tap-on."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is in the Load Value List or Action List", "Test_Scnario": "Underpayment Deduction", "Test_Sce_Description": "This scenario is to test if the Device will deduct the Underpayment Value from the Farecard E-Purse prior to performing the Fare Validation.", "Expected_Results": "The Device should deduct the Underpayment Value from the Farecard E-Purse prior to performing the Fare Validation."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is in the Load Value List or Action List", "Test_Scnario": "Non-Revenue Farecard Processing", "Test_Sce_Description": "This scenario is to test if the SA tool will only accept Non-Revenue farecard in the training mode and display a declined HMI in the revenue mode.", "Expected_Results": "The SA tool should only accept Non-Revenue farecard in the training mode and display a declined HMI in the revenue mode."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is in the Load Value List or Action List", "Test_Scnario": "Temporal Class Supplement Processing", "Test_Sce_Description": "This scenario is to test if the Device will process the temporal class supplement in addition to the Base Fare.", "Expected_Results": "The Device should process the temporal class supplement in addition to the Base Fare."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is in the Load Value List or Action List", "Test_Scnario": "Autoload Processing", "Test_Sce_Description": "This scenario is to test if the Device detects that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, which triggers the Autoload amount to be added to the Farecard.", "Expected_Results": "The Device should detect that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, which triggers the Autoload amount to be added to the Farecard."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard is in the Load Value List or Action List", "Test_Scnario": "Fare Type Discount Processing", "Test_Sce_Description": "This scenario is to test if the Device will display the \u201cFare Payment with Fare type Discount\u201d HMI and account for the concession discount in the Fare.", "Expected_Results": "The Device should display the \u201cFare Payment with Fare type Discount\u201d HMI and account for the concession discount in the Fare."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Scnario": "Farecard Tapped-off at the Same Location Where Tap-on Occurred", "Test_Sce_Description": "In this scenario, the cardholder taps off at the same location where they initially tapped on. The device should detect this and provide the appropriate feedback to the cardholder without updating the Farecard.", "Expected_Results": "The device detects the same location tap-off and provides the appropriate feedback to the cardholder. No update is made to the Farecard. An error is captured and logged in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Scnario": "Farecard is Blocked", "Test_Sce_Description": "In this scenario, the cardholder attempts to use a blocked Farecard. The device should detect this and not confer the right to travel.", "Expected_Results": "The device detects the blocked Farecard and does not confer the right to travel. The device provides the appropriate feedback to the cardholder. An error is captured and logged in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Scnario": "Time Since Tap-On Exceeds Max Travel Duration", "Test_Sce_Description": "In this scenario, the time since the cardholder tapped on exceeds the Max Travel Duration. The device should auto-settle the Underpayment and open a new trip.", "Expected_Results": "The device detects that the Max Travel Duration has been exceeded, auto-settles the Underpayment, and opens a new trip."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Scnario": "Multiple NFC Media Presented to the Device at One Time", "Test_Sce_Description": "In this scenario, the cardholder presents multiple NFC media to the device at one time. The device should block all fare payment functionality.", "Expected_Results": "The device detects multiple NFC media and blocks all fare payment functionality. An error is captured and logged in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Scnario": "Non-Activated Farecard Tapped on Device", "Test_Sce_Description": "In this scenario, a non-activated Farecard is tapped on the device. The transaction should be unsuccessful.", "Expected_Results": "The device detects the non-activated Farecard and provides feedback to the cardholder of an unsuccessful transaction. An error is captured and logged in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Scnario": "Card Reading Error Occurs", "Test_Sce_Description": "In this scenario, a card reading error occurs when the cardholder taps the Farecard on the device. The device should capture and log this error.", "Expected_Results": "The device detects the card reading error and captures and logs it in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Scnario": "Farecard Tapped on Device During Temporal Class Supplement Time", "Test_Sce_Description": "In this scenario, the Farecard is tapped on the device during a time period that contains an associated Temporal Class Supplement. The device should process the Tap-On Transaction as a normal tap-on.", "Expected_Results": "The device detects the Temporal Class Supplement time and processes the Tap-On Transaction as a normal tap-on."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Scnario": "Fare Amount Crosses the Auto-load Threshold", "Test_Sce_Description": "In this scenario, the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold. The Farecard should have the Autoload amount automatically added to the E-Purse balance.", "Expected_Results": "The device detects that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold and adds the Autoload amount to the Farecard."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Scnario": "Customer Overrides the Default Trip Prior to Tapping-on", "Test_Sce_Description": "In this scenario, the Farecard with no Default O/D is tapped on while the device is in Override mode. The device should process the tap as a result tap-on.", "Expected_Results": "The device detects the Override mode and processes the tap as a result tap-on."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Scnario": "Customer Requests Audio Messages", "Test_Sce_Description": "In this scenario, the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment. The device should play the corresponding audio message in the default language of their Farecard.", "Expected_Results": "The device plays the corresponding audio message in the default language of the Farecard."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Farecard", "Use_Case_Name": "Farecard taps off on a Device after the tap-on occurred during a temporal class Supplement time", "Test_Scnario": "Farecard Fails Validation Checks at Tap-On", "Test_Sce_Description": "In this scenario, the Farecard fails validation checks at Tap-On. The device should capture and log this error.", "Expected_Results": "The device detects the validation failure and captures and logs it in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to pay for a fare using a TICKET with a Period Pass that is not valid on the current date.", "Expected_Results": "The SA Tool should detect that the Period Pass is not valid and display an error message to the operator. The transaction should not be conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is Unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to pay for a fare using a TICKET that is unreadable.", "Expected_Results": "The SA Tool should detect that the TICKET is unreadable and display an error message to the operator. The transaction should not be conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer requests audio messages for the fare payment.", "Expected_Results": "The SA Tool should enable audio mode and play the corresponding audio message in the default language of the customer's Farecard."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a valid Period Pass tries to pay for a fare on a route/location with Premium or Special Event Service Class.", "Expected_Results": "The SA Tool should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a Valid Child concession tries to pay for a fare.", "Expected_Results": "The SA Tool should detect the Valid Child Concession and display the successful Child fare payment screen. The successful fare payment audio tone for Child concession should be played."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment results from a failed inspection.", "Expected_Results": "The SA Tool should record both the fare payment and inspection transactions and return to the Tap Card screen. A toast notification of the corresponding inspection action should be displayed."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a valid Limited Period Pass tries to pay for a fare outside the time limits of the product, but has sufficient e-Purse balance to cover the transaction.", "Expected_Results": "The SA Tool should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, and deduct the fare."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount tries to pay for a fare.", "Expected_Results": "The SA Tool should detect the card is Anonymous and the ePurse Balance is less than the fare amount, and display a declined message to the customer. The transaction should not be conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a blocked Virtual Card tries to pay for a fare.", "Expected_Results": "The SA Tool should detect the card is blocked and display a declined message to the customer. The transaction should not be conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a Virtual Card on the Deny List tries to pay for a fare.", "Expected_Results": "The SA Tool should detect the card is on the Deny List, remove the card from the Deny List and set it to blocked, and display a declined message to the customer. The transaction should not be conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a successful Farecard tap.", "Expected_Results": "The SA Tool should continue to process the transaction and the remote lists even after the battery goes below the low battery threshold."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a successful Farecard tap. The test will involve a customer attempting to make a fare payment on an online SA Tool using a virtual card with a period pass. During the payment process, the battery of the SA Tool will be intentionally drained below the low battery threshold.", "Expected_Results": "The SA Tool should be able to process the remote lists even after the battery goes below the low battery threshold. After the successful Farecard tap, the application should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's virtual card is on the Deny List. The test will involve a customer attempting to make a fare payment on an online SA Tool using a virtual card that is on the Deny List.", "Expected_Results": "The SA Tool should send the transaction to ATS for processing. ATS should detect that the card is on the Deny List, remove the card from the Deny List, set it to blocked, and return a declined result back to the SA Tool. The SA Tool should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's virtual card is blocked. The test will involve a customer attempting to make a fare payment on an online SA Tool using a blocked virtual card.", "Expected_Results": "The SA Tool should send the transaction to ATS for processing. ATS should detect that the card is blocked and return a declined result back to the SA Tool. The SA Tool should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer has an anonymous Farecard with an expired period pass and ePurse balance less than the fare amount. The test will involve a customer attempting to make a fare payment on an online SA Tool using an anonymous Farecard with an expired period pass and insufficient ePurse balance.", "Expected_Results": "The SA Tool should send the transaction to ATS for processing. ATS should detect that the card is anonymous and the ePurse balance is less than the fare amount, and return a declined result back to the SA Tool. The SA Tool should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer has a Farecard with a valid Limited Period Pass and the current time is outside the time limits of the product, but the Farecard has sufficient e-Purse balance to cover the transaction. The test will involve a customer attempting to make a fare payment on an online SA Tool using a Farecard with a valid Limited Period Pass outside of its valid time but with sufficient e-Purse balance.", "Expected_Results": "The SA Tool should send the transaction to ATS for processing. ATS should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, and deduct the fare. The transaction should be conducted successfully."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when it detects a TICKET but fails to read it correctly. The customer will tap on the NFC reader again. If the tap is successful, steps 4 \u2013 9 will be conducted. If the tap is unsuccessful, the SA Tool application will indicate to the operator that the TICKET is unreadable.", "Expected_Results": "The SA Tool application should correctly indicate to the operator that the TICKET is unreadable when it fails to read the TICKET. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the customer asks to pay for the trip with their TICKET and requests audio messages for the fare payment. The operator enables audio mode and can change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case.", "Expected_Results": "The SA Tool application should correctly enable audio mode when requested by the customer. The operator should be able to change the volume level using the physical device buttons. The SA Tool should display the TICKET fare payment screen to the operator and customer for the duration of the audio message. Corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the fare payment is being made on the FLATFARE BASED SA Tool and the Ticket has a valid Period Pass. The SA Tool identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment.", "Expected_Results": "The SA Tool application should correctly identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the customer\u2019s TICKET has a Valid Child concession. The SA Tool displays the successful Child fare payment screen and plays the successful fare payment audio tone for Child concession.", "Expected_Results": "The SA Tool application should correctly display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession when the customer\u2019s TICKET has a Valid Child concession."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Tickets", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator inspects a customer\u2019s TICKET and determines that they have not paid a fare. The operator selects the payment function on the SA Tool inspection results screen.", "Expected_Results": "The SA Tool application should correctly record both the fare payment and inspection transactions when the operator selects the payment function on the SA Tool inspection results screen after inspecting a customer\u2019s TICKET and determining that they have not paid a fare."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket fails validation checks", "Test_Scnario": "E-Ticket fails validation checks", "Test_Sce_Description": "In this scenario, the E-Ticket is scanned at the SA Tool Barcode Reader but it fails the necessary validation checks. The device should return the appropriate feedback and the right to travel should not be conferred.", "Expected_Results": "The device should provide the appropriate feedback to the user indicating that the E-Ticket is not valid for travel. The right to travel should not be conferred."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket fails validation checks", "Test_Scnario": "E-Ticket holder scans Group QR Code", "Test_Sce_Description": "In this scenario, the E-Ticket holder scans the Group QR Code on their E-Ticket against the SA Tool\u2019s barcode reader to validate the Ticket in Fare Payment Mode. The device should check each ticket within the group against the deny list to determine if E-Ticket is valid for travel.", "Expected_Results": "The device should provide the appropriate feedback to the user of a successful transaction if the Group QR Code is valid for travel. The right to travel should be conferred to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket fails validation checks", "Test_Scnario": "Pass holder E-Ticket is scanned", "Test_Sce_Description": "In this scenario, a pass type E-ticket is scanned at the SA Tool barcode reader to validate the pass. The device should check that the E-Ticket pass is valid for travel.", "Expected_Results": "The device should provide the appropriate feedback to the user of a successful transaction if the E-Ticket pass is valid for travel. The right to travel should be conferred to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket fails validation checks", "Test_Scnario": "Scanner does not scan E-Ticket QR Code multiple times in a row", "Test_Sce_Description": "In this scenario, an E-ticket is scanned at the SA Tool barcode reader to validate the pass in fare payment mode. If the pass-holder does not remove the QR code from view of the scanner after the initial scan, withdrawal logic should apply.", "Expected_Results": "The scanner should not respond to the scan if the last scanned E-Ticket ID is the same as the next scanned E-Ticket ID within 3 seconds after the initial scan."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket fails validation checks", "Test_Scnario": "Child E-Ticket is scanned", "Test_Sce_Description": "In this scenario, a Child E-Ticket is scanned at the SA Tool Barcode Reader. The device should provide the appropriate feedback to the user of a successful Child E-Ticket transaction.", "Expected_Results": "The device should provide the appropriate feedback to the user of a successful Child E-Ticket transaction. The right to travel should be conferred to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket fails validation checks", "Test_Scnario": "E-Ticket QR Code fails timestamp validation", "Test_Sce_Description": "In this scenario, the device checks the timestamp of the QR code against the maximum allowable time window in the device config to determine if the E-Ticket is valid for travel.", "Expected_Results": "If the timestamp of the QR code does not meet the timestamp validation requirements, the user\u2019s E-Ticket should not be valid for travel. The device should provide the appropriate decline feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket fails validation checks", "Test_Scnario": "E-Ticket QR Code fails deny list validation", "Test_Sce_Description": "In this scenario, the device performs a check against the local deny list and confirms that the E-Ticket ID is on the current deny list.", "Expected_Results": "If the E-Ticket ID is on the current deny list, the device should provide the appropriate decline feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket fails validation checks", "Test_Scnario": "E-Ticket QR Code fails validation (response from API)", "Test_Sce_Description": "In this scenario, the device calls the Bytemark API and receives a response that determines that the E-Ticket is not valid for travel.", "Expected_Results": "If the E-Ticket is not valid for travel, the device should provide the appropriate feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket fails validation checks", "Test_Scnario": "E-Ticket QR Code fails to scan", "Test_Sce_Description": "In this scenario, the device attempts to decrypt a scanned E-ticket QR code or any QR code using the Bytemark key. In the event of a failure an invalid ticket screen should be displayed.", "Expected_Results": "If the device fails to decrypt the QR code, an invalid ticket screen should be displayed."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket fails validation checks", "Test_Scnario": "Bytemark API call returns error code \u201c401 Unauthorized User\u201d or Bytemark error code 50032 (unauthorized access)", "Test_Sce_Description": "In this scenario, the call to the Bytemark API returns 401, or Bytemark error code 50032. The device should read/log the error code and begin error handling process.", "Expected_Results": "The device should renew authentication token and retry API call. If API call is successful, it should follow the normal process, else it should act as if it is offline."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket fails validation checks", "Test_Scnario": "Bytemark API call returns other HTTP error code", "Test_Sce_Description": "In this scenario, the call to the Bytemark API returns an HTTP error code other than 401 or 50032. The device should handle the error appropriately.", "Expected_Results": "The device should handle the error appropriately and provide the appropriate feedback to the user."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket holder scans Group QR Code", "Test_Scnario": "E-Ticket holder scans Group QR Code at the SA Tool Barcode Reader", "Test_Sce_Description": "The E-Ticket holder scans the Group QR Code on their E-Ticket against the SA Tool\u2019s barcode reader to validate the Ticket in Fare Payment Mode. The device will check each ticket within the group against the deny list to determine if E-Ticket is valid for travel.", "Expected_Results": "The right to travel is conferred to the E-Ticket holder, the device provides the appropriate feedback to the user of a successful transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket holder scans Group QR Code", "Test_Scnario": "Pass holder E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Sce_Description": "A pass type E-ticket is scanned at the SA Tool barcode reader to validate the pass. The device sends and receives a response from Bytemark API and checks that the E-Ticket pass is valid for travel.", "Expected_Results": "The right to travel is conferred to the E-Ticket holder, the device provides the appropriate feedback to the user of a successful transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket holder scans Group QR Code", "Test_Scnario": "Scanner does not scan E-Ticket QR Code multiple times in a row", "Test_Sce_Description": "An E-ticket is scanned at the SA Tool barcode reader to validate the pass in fare payment mode. If the pass-holder does not remove the QR code from view of the scanner after the initial scan, withdrawal logic will apply.", "Expected_Results": "Withdrawal logic will check the last scanned E-Ticket ID against the next scanned E-Ticket ID and if the same will not respond to the scan."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket holder scans Group QR Code", "Test_Scnario": "Child E-Ticket is scanned at the SA Tool Barcode Reader", "Test_Sce_Description": "The user scans a Child E-Ticket at the SA Tool Barcode Reader. The right to travel is conferred to the E-Ticket holder, the device provides the appropriate feedback to the user of a successful Child E-Ticket transaction.", "Expected_Results": "A Child E-Ticket scan will have a unique HMI and will use the Child audio tone. Also, while the feedback screen is presented to the Cardholder, the device will still be able to process another Farecard at the same time."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket holder scans Group QR Code", "Test_Scnario": "E-Ticket QR Code fails timestamp validation", "Test_Sce_Description": "The device checks the timestamp of the QR code against the maximum allowable time window in the device config to determine if the E-Ticket is valid for travel.", "Expected_Results": "If the timestamp of the QR code does not meet the timestamp validation requirements, the user\u2019s E-Ticket will not be valid for travel"}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket holder scans Group QR Code", "Test_Scnario": "E-Ticket QR Code fails deny list validation", "Test_Sce_Description": "The device performs a check against the local deny list and confirms that the E-Ticket ID is on the current deny list.", "Expected_Results": "The device provides the appropriate decline feedback to the E-Ticket holder"}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket holder scans Group QR Code", "Test_Scnario": "E-Ticket QR Code fails validation (response from API)", "Test_Sce_Description": "The device calls the Bytemark API and receives a response that determines that the E-Ticket is not valid for travel", "Expected_Results": "The device provides the appropriate feedback to the E-Ticket holder"}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket holder scans Group QR Code", "Test_Scnario": "E-Ticket QR Code fails to scan", "Test_Sce_Description": "The device shall attempt to decrypt a scanned E-ticket QR code or any QR code using the Bytemark key. In the event of a failure an invalid ticket screen shall be displayed.", "Expected_Results": "An invalid ticket screen is displayed"}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket holder scans Group QR Code", "Test_Scnario": "Bytemark API call returns error code \u201c401 Unauthorized User\u201d or Bytemark error code 50032 (unauthorized access)", "Test_Sce_Description": "If the API call to Bytemark fails an error code will be returned to the device that made the call. If the HTTP code is \u201c401\u201d or Bytemark error code 50032\u201d the device will read/log the error code and begin error handling process", "Expected_Results": "The device will renew authentication token and will retry API call"}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket holder scans Group QR Code", "Test_Scnario": "Bytemark API call returns other HTTP error code", "Test_Sce_Description": "If the API call to Bytemark fails an error code will be returned to the device that made the call. The device will read/log the error code and begin error handling process", "Expected_Results": "The device will renew authentication token and will retry API call"}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Pass holder E-Ticket is scanned", "Test_Scnario": "Pass holder E-Ticket validation", "Test_Sce_Description": "A pass holder E-Ticket is scanned at the SA Tool barcode reader to validate the pass. The device sends and receives a response from Bytemark API and checks that the E-Ticket pass is valid for travel.", "Expected_Results": "The right to travel is conferred to the E-Ticket holder, the device provides the appropriate feedback to the user of a successful transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Pass holder E-Ticket is scanned", "Test_Scnario": "Group QR Code validation", "Test_Sce_Description": "The E-Ticket holder scans the Group QR Code on their E-Ticket against the SA Tool\u2019s barcode reader to validate the Ticket in Fare Payment Mode. The device checks each ticket within the group against the deny list to determine if E-Ticket is valid for travel.", "Expected_Results": "The right to travel is conferred to the E-Ticket holder, the device provides the appropriate feedback to the user of a successful transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Pass holder E-Ticket is scanned", "Test_Scnario": "Child E-Ticket validation", "Test_Sce_Description": "The user scans a Child E-Ticket at the SA Tool Barcode Reader. The device checks the validity of the E-Ticket.", "Expected_Results": "The right to travel is conferred to the E-Ticket holder, the device provides the appropriate feedback to the user of a successful Child E-Ticket transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Pass holder E-Ticket is scanned", "Test_Scnario": "E-Ticket QR Code fails timestamp validation", "Test_Sce_Description": "The device checks the timestamp of the QR code against the maximum allowable time window in the device config to determine if the E-Ticket is valid for travel.", "Expected_Results": "If the timestamp of the QR code does not meet the timestamp validation requirements, the user\u2019s E-Ticket will not be valid for travel and the device provides the appropriate decline feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Pass holder E-Ticket is scanned", "Test_Scnario": "E-Ticket QR Code fails deny list validation", "Test_Sce_Description": "The device performs a check against the local deny list and confirms that the E-Ticket ID is on the current deny list.", "Expected_Results": "If the E-Ticket ID is on the deny list, the user\u2019s E-Ticket will not be valid for travel and the device provides the appropriate decline feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Pass holder E-Ticket is scanned", "Test_Scnario": "E-Ticket QR Code fails validation (response from API)", "Test_Sce_Description": "The device calls the Bytemark API and receives a response that determines that the E-Ticket is not valid for travel.", "Expected_Results": "If the E-Ticket is not valid for travel, the device provides the appropriate feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Pass holder E-Ticket is scanned", "Test_Scnario": "E-Ticket QR Code fails to scan", "Test_Sce_Description": "The device shall attempt to decrypt a scanned E-ticket QR code or any QR code using the Bytemark key. In the event of a failure an invalid ticket screen shall be displayed.", "Expected_Results": "If the QR code fails to scan, an invalid ticket screen is displayed."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Pass holder E-Ticket is scanned", "Test_Scnario": "Bytemark API call returns error code \u201c401 Unauthorized User\u201d or Bytemark error code 50032 (unauthorized access)", "Test_Sce_Description": "If the API call to Bytemark fails an error code will be returned to the device that made the call. If the HTTP code is \u201c401\u201d or Bytemark error code 50032\u201d the device will read/log the error code and begin error handling process.", "Expected_Results": "If the API call is unsuccessful, the device will renew authentication token and will retry API call. If the retry is also unsuccessful, the device will move to offline validation steps."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Pass holder E-Ticket is scanned", "Test_Scnario": "Bytemark API call returns other HTTP error code", "Test_Sce_Description": "If the API call to Bytemark fails with an HTTP error code other than \u201c401\u201d or Bytemark error code 50032\u201d, the device will handle the error accordingly.", "Expected_Results": "The device should handle the error and provide appropriate feedback to the user."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Scanner does not scan E-Ticket QR Code multiple times", "Test_Scnario": "Validation of E-Ticket in offline mode", "Test_Sce_Description": "This scenario is to test the functionality of the device when it is offline and unable to retrieve details regarding the E-Ticket from the Bytemark backend.", "Expected_Results": "The device should cache the result in an offline database to be uploaded to Bytemark API when connection is resumed."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Scanner does not scan E-Ticket QR Code multiple times", "Test_Scnario": "Validation of Group QR Code E-Ticket", "Test_Sce_Description": "This scenario is to test the functionality of the device when a Group QR Code E-Ticket is scanned. The device should check each ticket within the group against the deny list to determine if E-Ticket is valid for travel.", "Expected_Results": "The device should send and receive a response from Bytemark API and check that the Group QR Code is valid for travel. The right to travel should be conferred to the E-Ticket holder, and the device should provide the appropriate feedback to the user of a successful transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Scanner does not scan E-Ticket QR Code multiple times", "Test_Scnario": "Validation of Pass holder E-Ticket", "Test_Sce_Description": "This scenario is to test the functionality of the device when a pass type E-ticket is scanned. The device should check that the E-Ticket pass is valid for travel.", "Expected_Results": "The right to travel should be conferred to the E-Ticket holder, and the device should provide the appropriate feedback to the user of a successful transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Scanner does not scan E-Ticket QR Code multiple times", "Test_Scnario": "Validation of Child E-Ticket", "Test_Sce_Description": "This scenario is to test the functionality of the device when a Child E-Ticket is scanned. The device should check that the Child E-Ticket is valid for travel.", "Expected_Results": "The right to travel should be conferred to the E-Ticket holder, and the device should provide the appropriate feedback to the user of a successful Child E-Ticket transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Scanner does not scan E-Ticket QR Code multiple times", "Test_Scnario": "Validation of E-Ticket QR Code timestamp", "Test_Sce_Description": "This scenario is to test the functionality of the device when the timestamp of the QR code is checked against the maximum allowable time window in the device config to determine if the E-Ticket is valid for travel.", "Expected_Results": "If the timestamp of the QR code does not meet the timestamp validation requirements, the user\u2019s E-Ticket should not be valid for travel and the device should provide the appropriate decline feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Scanner does not scan E-Ticket QR Code multiple times", "Test_Scnario": "Validation of E-Ticket QR Code against deny list", "Test_Sce_Description": "This scenario is to test the functionality of the device when the E-Ticket ID is checked against the local deny list.", "Expected_Results": "If the E-Ticket ID is on the current deny list, the device should provide the appropriate decline feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Scanner does not scan E-Ticket QR Code multiple times", "Test_Scnario": "Validation of E-Ticket QR Code response from API", "Test_Sce_Description": "This scenario is to test the functionality of the device when the Bytemark API returns a response that determines that the E-Ticket is not valid for travel.", "Expected_Results": "The device should provide the appropriate feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Scanner does not scan E-Ticket QR Code multiple times", "Test_Scnario": "Validation of E-Ticket QR Code scan", "Test_Sce_Description": "This scenario is to test the functionality of the device when it attempts to decrypt a scanned E-ticket QR code or any QR code using the Bytemark key.", "Expected_Results": "In the event of a failure, an invalid ticket screen should be displayed."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Scanner does not scan E-Ticket QR Code multiple times", "Test_Scnario": "Validation of Bytemark API call error code", "Test_Sce_Description": "This scenario is to test the functionality of the device when the API call to Bytemark returns an error code.", "Expected_Results": "If the HTTP code is \u201c401\u201d or Bytemark error code 50032\u201d, the device should renew authentication token and retry API call. If API call is successful, it should follow Step 4 as stated in Main Use Case, else it should act as if it is offline again."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Scanner does not scan E-Ticket QR Code multiple times", "Test_Scnario": "Validation of other HTTP error code from Bytemark API call", "Test_Sce_Description": "This scenario is to test the functionality of the device when the API call to Bytemark returns other HTTP error code.", "Expected_Results": "The device should handle the error code appropriately."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Child E-Ticket is scanned", "Test_Scnario": "E-Ticket Validation Check", "Test_Sce_Description": "Validate the functionality of the E-Ticket validation check. The E-Ticket should fail the necessary validation checks and the device should return the appropriate feedback, and the right to travel should not be conferred.", "Expected_Results": "The E-Ticket fails the validation checks and the device returns the appropriate feedback. The right to travel is not conferred."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Child E-Ticket is scanned", "Test_Scnario": "Offline Device Functionality", "Test_Sce_Description": "Validate the functionality of the device when it is offline. The call to the Bytemark backend should fail and be unable to retrieve details regarding the E-Ticket.", "Expected_Results": "The device is unable to retrieve details regarding the E-Ticket when it is offline. The result is cached in an offline database to be uploaded to Bytemark API when connection is resumed."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Child E-Ticket is scanned", "Test_Scnario": "Group QR Code Validation", "Test_Sce_Description": "Validate the functionality of the Group QR Code validation. The E-Ticket holder should scan the Group QR Code on their E-Ticket against the SA Tool\u2019s barcode reader to validate the Ticket in Fare Payment Mode.", "Expected_Results": "The Group QR Code is valid for travel. The right to travel is conferred to the E-Ticket holder, the device provides the appropriate feedback to the user of a successful transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Child E-Ticket is scanned", "Test_Scnario": "Pass Holder E-Ticket Validation", "Test_Sce_Description": "Validate the functionality of the pass holder E-Ticket validation. A pass type E-ticket should be scanned at the SA Tool barcode reader to validate the pass.", "Expected_Results": "The E-Ticket pass is valid for travel. The right to travel is conferred to the E-Ticket holder, the device provides the appropriate feedback to the user of a successful transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Child E-Ticket is scanned", "Test_Scnario": "Child E-Ticket Validation", "Test_Sce_Description": "Validate the functionality of the Child E-Ticket validation. The user should scan a Child E-Ticket at the SA Tool Barcode Reader.", "Expected_Results": "The right to travel is conferred to the E-Ticket holder, the device provides the appropriate feedback to the user of a successful Child E-Ticket transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Child E-Ticket is scanned", "Test_Scnario": "E-Ticket QR Code Timestamp Validation", "Test_Sce_Description": "Validate the functionality of the E-Ticket QR Code timestamp validation. The device should check the timestamp of the QR code against the maximum allowable time window in the device config to determine if the E-Ticket is valid for travel.", "Expected_Results": "If the timestamp of the QR code does not meet the timestamp validation requirements, the user\u2019s E-Ticket will not be valid for travel. The device provides the appropriate decline feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Child E-Ticket is scanned", "Test_Scnario": "E-Ticket QR Code Deny List Validation", "Test_Sce_Description": "Validate the functionality of the E-Ticket QR Code deny list validation. The device should perform a check against the local deny list and confirm that the E-Ticket ID is on the current deny list.", "Expected_Results": "If the E-Ticket ID is on the current deny list, the device provides the appropriate decline feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Child E-Ticket is scanned", "Test_Scnario": "E-Ticket QR Code API Response Validation", "Test_Sce_Description": "Validate the functionality of the E-Ticket QR Code API response validation. The device should call the Bytemark API and receive a response that determines that the E-Ticket is not valid for travel.", "Expected_Results": "If the E-Ticket is not valid for travel, the device provides the appropriate feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Child E-Ticket is scanned", "Test_Scnario": "E-Ticket QR Code Scan Failure", "Test_Sce_Description": "Validate the functionality of the E-Ticket QR Code scan failure. The device should attempt to decrypt a scanned E-ticket QR code or any QR code using the Bytemark key.", "Expected_Results": "In the event of a failure, an invalid ticket screen should be displayed."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Child E-Ticket is scanned", "Test_Scnario": "Bytemark API Call Error Code Validation", "Test_Sce_Description": "Validate the functionality of the Bytemark API call error code validation. If the API call to Bytemark fails an error code should be returned to the device that made the call.", "Expected_Results": "If the HTTP code is \u201c401\u201d or Bytemark error code 50032\u201d, the device should read/log the error code and begin error handling process. The device should renew authentication token and retry API call."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails timestamp validation", "Test_Scnario": "E-Ticket QR Code fails timestamp validation", "Test_Sce_Description": "This scenario is to test the functionality of the device when the E-Ticket QR code fails the timestamp validation. The device should check the timestamp of the QR code against the maximum allowable time window in the device config to determine if the E-Ticket is valid for travel.", "Expected_Results": "If the timestamp of the QR code does not meet the timestamp validation requirements, the user\u2019s E-Ticket will not be valid for travel and the device should provide the appropriate decline feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails timestamp validation", "Test_Scnario": "E-Ticket QR Code fails deny list validation", "Test_Sce_Description": "This scenario is to test the functionality of the device when the E-Ticket QR code fails the deny list validation. The device should perform a check against the local deny list and confirm that the E-Ticket ID is on the current deny list.", "Expected_Results": "If the E-Ticket ID is on the deny list, the device should provide the appropriate decline feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails timestamp validation", "Test_Scnario": "E-Ticket QR Code fails validation (response from API)", "Test_Sce_Description": "This scenario is to test the functionality of the device when the E-Ticket QR code fails the validation from the response of the Bytemark API. The device should call the Bytemark API and receive a response that determines that the E-Ticket is not valid for travel.", "Expected_Results": "If the E-Ticket is not valid for travel, the device should provide the appropriate feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails timestamp validation", "Test_Scnario": "E-Ticket QR Code fails to scan", "Test_Sce_Description": "This scenario is to test the functionality of the device when the E-Ticket QR code fails to scan. The device should attempt to decrypt a scanned E-ticket QR code or any QR code using the Bytemark key.", "Expected_Results": "In the event of a failure, an invalid ticket screen should be displayed."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails timestamp validation", "Test_Scnario": "Bytemark API call returns error code \u201c401 Unauthorized User\u201d or Bytemark error code 50032 (unauthorized access)", "Test_Sce_Description": "This scenario is to test the functionality of the device when the API call to Bytemark returns an error code. If the HTTP code is \u201c401\u201d or Bytemark error code 50032, the device should read/log the error code and begin the error handling process.", "Expected_Results": "The device should renew the authentication token and retry the API call. If the API call is successful, it should follow the main use case, else it should act as if it is offline again and move to offline validation steps."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails timestamp validation", "Test_Scnario": "Bytemark API call returns other HTTP error code", "Test_Sce_Description": "This scenario is to test the functionality of the device when the API call to Bytemark returns other HTTP error codes. The device should handle the error appropriately.", "Expected_Results": "The device should provide the appropriate feedback to the user based on the error code received."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails deny list validation", "Test_Scnario": "E-Ticket QR Code fails deny list validation", "Test_Sce_Description": "In this scenario, the E-Ticket QR code is scanned by the SA Tool Barcode Reader and the device performs a check against the local deny list. The E-Ticket ID is confirmed to be on the current deny list.", "Expected_Results": "The device should provide the appropriate decline feedback to the E-Ticket holder. The right to travel is not conferred."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails deny list validation", "Test_Scnario": "E-Ticket QR Code fails timestamp validation", "Test_Sce_Description": "In this scenario, the E-Ticket QR code is scanned by the SA Tool Barcode Reader and the device checks the timestamp of the QR code against the maximum allowable time window in the device config.", "Expected_Results": "If the timestamp of the QR code does not meet the timestamp validation requirements, the user\u2019s E-Ticket will not be valid for travel and the device should provide the appropriate decline feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails deny list validation", "Test_Scnario": "E-Ticket QR Code fails validation (response from API)", "Test_Sce_Description": "In this scenario, the E-Ticket QR code is scanned by the SA Tool Barcode Reader and the device calls the Bytemark API and receives a response that determines that the E-Ticket is not valid for travel.", "Expected_Results": "The device should provide the appropriate feedback to the E-Ticket holder. The right to travel is not conferred."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails deny list validation", "Test_Scnario": "E-Ticket QR Code fails to scan", "Test_Sce_Description": "In this scenario, the device attempts to decrypt a scanned E-ticket QR code or any QR code using the Bytemark key. In the event of a failure an invalid ticket screen is displayed.", "Expected_Results": "The device should display an invalid ticket screen. The right to travel is not conferred."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails deny list validation", "Test_Scnario": "Bytemark API call returns error code \u201c401 Unauthorized User\u201d or Bytemark error code 50032 (unauthorized access)", "Test_Sce_Description": "In this scenario, the API call to Bytemark fails and an error code is returned to the device that made the call. If the HTTP code is \u201c401\u201d or Bytemark error code 50032, the device will read/log the error code and begin error handling process.", "Expected_Results": "The device should renew authentication token and retry API call. If API call is successful, it should follow Step 4 as stated in Main Use Case, else it should act as if it is offline again and move to offline validation steps."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails deny list validation", "Test_Scnario": "Bytemark API call returns other HTTP error code", "Test_Sce_Description": "In this scenario, the API call to Bytemark fails and an error code other than \u201c401\u201d or Bytemark error code 50032 is returned to the device that made the call.", "Expected_Results": "The device should handle the error appropriately based on the error code returned. The right to travel may or may not be conferred based on the error code."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails validation (response from API)", "Test_Scnario": "Testing the functionality of the E-Ticket QR Code validation", "Test_Sce_Description": "This scenario is to test the functionality of the E-Ticket QR Code validation. The E-Ticket QR Code is scanned at the SA Tool Barcode Reader and the device calls the Bytemark API and receives a response that determines that the E-Ticket is not valid for travel.", "Expected_Results": "The device should provide the appropriate feedback to the E-Ticket holder indicating that the E-Ticket is not valid for travel."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails validation (response from API)", "Test_Scnario": "Testing the performance of the E-Ticket QR Code validation", "Test_Sce_Description": "This scenario is to test the performance of the E-Ticket QR Code validation. The E-Ticket QR Code is scanned at the SA Tool Barcode Reader and the device calls the Bytemark API and receives a response that determines that the E-Ticket is not valid for travel.", "Expected_Results": "The device should provide the appropriate feedback to the E-Ticket holder in a timely manner indicating that the E-Ticket is not valid for travel."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails validation (response from API)", "Test_Scnario": "Testing the security of the E-Ticket QR Code validation", "Test_Sce_Description": "This scenario is to test the security of the E-Ticket QR Code validation. The E-Ticket QR Code is scanned at the SA Tool Barcode Reader and the device calls the Bytemark API and receives a response that determines that the E-Ticket is not valid for travel.", "Expected_Results": "The device should securely handle the E-Ticket QR Code data and the communication with the Bytemark API should be secure."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails validation (response from API)", "Test_Scnario": "Testing the exception flow of the E-Ticket QR Code validation", "Test_Sce_Description": "This scenario is to test the exception flow of the E-Ticket QR Code validation. The E-Ticket QR Code is scanned at the SA Tool Barcode Reader and the device calls the Bytemark API and receives a response that determines that the E-Ticket is not valid for travel.", "Expected_Results": "The device should handle the exception properly and provide the appropriate feedback to the E-Ticket holder indicating that the E-Ticket is not valid for travel."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails validation (response from API)", "Test_Scnario": "Testing the alternate flow of the E-Ticket QR Code validation", "Test_Sce_Description": "This scenario is to test the alternate flow of the E-Ticket QR Code validation. The E-Ticket QR Code is scanned at the SA Tool Barcode Reader and the device calls the Bytemark API and receives a response that determines that the E-Ticket is not valid for travel.", "Expected_Results": "The device should handle the alternate flow properly and provide the appropriate feedback to the E-Ticket holder indicating that the E-Ticket is not valid for travel."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails to scan", "Test_Scnario": "E-Ticket QR Code fails timestamp validation", "Test_Sce_Description": "In this scenario, the E-Ticket QR code is scanned at the SA Tool Barcode Reader. The device checks the timestamp of the QR code against the maximum allowable time window in the device config to determine if the E-Ticket is valid for travel.", "Expected_Results": "If the timestamp of the QR code does not meet the timestamp validation requirements, the user\u2019s E-Ticket will not be valid for travel and the device provides the appropriate decline feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails to scan", "Test_Scnario": "E-Ticket QR Code fails deny list validation", "Test_Sce_Description": "In this scenario, the E-Ticket QR code is scanned at the SA Tool Barcode Reader. The device performs a check against the local deny list and confirms that the E-Ticket ID is on the current deny list.", "Expected_Results": "If the E-Ticket ID is on the deny list, the E-Ticket will not be valid for travel and the device provides the appropriate decline feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails to scan", "Test_Scnario": "E-Ticket QR Code fails validation (response from API)", "Test_Sce_Description": "In this scenario, the E-Ticket QR code is scanned at the SA Tool Barcode Reader. The device calls the Bytemark API and receives a response that determines that the E-Ticket is not valid for travel.", "Expected_Results": "If the response from the Bytemark API determines that the E-Ticket is not valid for travel, the device provides the appropriate feedback to the E-Ticket holder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails to scan", "Test_Scnario": "E-Ticket QR Code fails to scan", "Test_Sce_Description": "In this scenario, the device attempts to decrypt a scanned E-ticket QR code or any QR code using the Bytemark key. In the event of a failure, an invalid ticket screen is displayed.", "Expected_Results": "If the device fails to decrypt the QR code, an invalid ticket screen is displayed."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails to scan", "Test_Scnario": "Bytemark API call returns error code \u201c401 Unauthorized User\u201d or Bytemark error code 50032 (unauthorized access)", "Test_Sce_Description": "In this scenario, the device makes an API call to Bytemark. If the API call fails, an error code is returned to the device.", "Expected_Results": "If the HTTP code is \u201c401\u201d or Bytemark error code 50032, the device will read/log the error code and begin the error handling process. The device will renew the authentication token and will retry the API call. If the API call is successful, it will follow Step 4 as stated in Main Use Case, else it will act as if it is offline again and move to offline validation steps."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "E-Ticket QR Code fails to scan", "Test_Scnario": "Bytemark API call returns other HTTP error code", "Test_Sce_Description": "In this scenario, the device makes an API call to Bytemark. If the API call fails, an error code is returned to the device.", "Expected_Results": "If the API call returns an HTTP error code other than \u201c401\u201d or Bytemark error code 50032, the device will read/log the error code and begin the error handling process."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns error code", "Test_Scnario": "Bytemark API call returns error code 401 or 50032", "Test_Sce_Description": "This scenario tests the functionality of the device when the Bytemark API call returns error code 401 or 50032. The device should log the error code and begin the error handling process. It should then renew the authentication token and retry the API call.", "Expected_Results": "The device successfully logs the error code, renews the authentication token, and retries the API call. If the API call is successful, the device follows the main use case. If not, the device acts as if it is offline and moves to offline validation steps."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns error code", "Test_Scnario": "Bytemark API call returns other HTTP error code", "Test_Sce_Description": "This scenario tests the functionality of the device when the Bytemark API call returns any other HTTP error code. The device should act as if it is offline and move to offline validation steps.", "Expected_Results": "The device successfully acts as if it is offline and moves to offline validation steps."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns error code", "Test_Scnario": "Bytemark API call is successful but response contains internal error code", "Test_Sce_Description": "This scenario tests the functionality of the device when the Bytemark API call is successful but the response contains an internal error code. The device should act as if it is offline and move to offline validation steps.", "Expected_Results": "The device successfully acts as if it is offline and moves to offline validation steps."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns error code", "Test_Scnario": "Bytemark API call is successful but response contains error code for Wrong Transit Agency", "Test_Sce_Description": "This scenario tests the functionality of the device when the Bytemark API call is successful but the response contains an error code for Wrong Transit Agency. The device should treat this error code as an invalid result and the E-Ticket will be deemed invalid for travel.", "Expected_Results": "The device successfully treats the error code as an invalid result and the E-Ticket is deemed invalid for travel."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns error code", "Test_Scnario": "Bytemark API Call is unsuccessful due to Timeout", "Test_Sce_Description": "This scenario tests the functionality of the device when the Bytemark API call is unsuccessful due to a response timeout. The device should act as if it is offline and move to offline validation steps.", "Expected_Results": "The device successfully acts as if it is offline and moves to offline validation steps."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns error code", "Test_Scnario": "Transaction Reversal", "Test_Sce_Description": "This scenario tests the functionality of the device when a transaction reversal is requested. The device should process the fare reversal and update the customer\u2019s Farecard to reflect the fare reversal.", "Expected_Results": "The device successfully processes the fare reversal and updates the customer\u2019s Farecard to reflect the fare reversal."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns error code", "Test_Scnario": "Transaction Reversal - Customer\u2019s Farecard is Unreadable", "Test_Sce_Description": "This scenario tests the functionality of the device when the customer\u2019s Farecard is unreadable. The device should indicate to the operator that the Farecard is unreadable.", "Expected_Results": "The device successfully indicates to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns error code", "Test_Scnario": "Transaction Reversal - Customer Requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the device when the customer requests audio messages for fare reversal. The device should play the corresponding audio message to the customer in the default language of their Farecard.", "Expected_Results": "The device successfully plays the corresponding audio message to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns other HTTP error code", "Test_Scnario": "Bytemark API call returns HTTP error code 401 or 50032", "Test_Sce_Description": "This scenario tests the functionality of the device when the Bytemark API call returns HTTP error code 401 or 50032. The device should log the error code and begin the error handling process. It should then renew the authentication token and retry the API call. If the API call is successful, it should follow the main use case. If not, it should act as if it is offline and move to offline validation steps.", "Expected_Results": "The device correctly logs the error code, renews the authentication token, retries the API call, and follows the appropriate steps based on the success or failure of the API call."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns other HTTP error code", "Test_Scnario": "Bytemark API call returns other HTTP error code", "Test_Sce_Description": "This scenario tests the functionality of the device when the Bytemark API call returns any other HTTP error code. The device should act as if it is offline and move to offline validation steps.", "Expected_Results": "The device correctly acts as if it is offline and moves to offline validation steps when any other HTTP error code is returned."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns other HTTP error code", "Test_Scnario": "Bytemark API call is successful but response contains internal error code", "Test_Sce_Description": "This scenario tests the functionality of the device when the Bytemark API call is successful but the response contains an internal error code. The device should act as if it is offline and move to offline validation steps.", "Expected_Results": "The device correctly acts as if it is offline and moves to offline validation steps when the API call is successful but the response contains an internal error code."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns other HTTP error code", "Test_Scnario": "Bytemark API call is successful but response contains error code for Wrong Transit Agency", "Test_Sce_Description": "This scenario tests the functionality of the device when the Bytemark API call is successful but the response contains an error code for Wrong Transit Agency. The device should treat this error code as an invalid result and the E-Ticket will be deemed invalid for travel.", "Expected_Results": "The device correctly treats the error code as an invalid result and the E-Ticket is deemed invalid for travel."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns other HTTP error code", "Test_Scnario": "Bytemark API Call is unsuccessful due to Timeout", "Test_Sce_Description": "This scenario tests the functionality of the device when the Bytemark API call is unsuccessful due to a response timeout. The device should act as if it is offline and move to offline validation steps.", "Expected_Results": "The device correctly acts as if it is offline and moves to offline validation steps when the API call is unsuccessful due to a response timeout."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns other HTTP error code", "Test_Scnario": "Transaction Reversal - Customer\u2019s Farecard is Unreadable", "Test_Sce_Description": "This scenario tests the functionality of the device when the customer's Farecard is unreadable. The device should indicate to the operator that the Farecard is unreadable.", "Expected_Results": "The device correctly indicates to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "e-Tickets", "Use_Case_Name": "Bytemark API call returns other HTTP error code", "Test_Scnario": "Transaction Reversal - Customer Requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the device when the customer requests audio messages for fare reversal. The device should play the corresponding audio message in the default language of the customer's Farecard.", "Expected_Results": "The device correctly plays the corresponding audio message in the default language of the customer's Farecard."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on a SA Tool with Open Payments Media \u2013 Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Testing the functionality of SA Tool when offline and not connected to ATS", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when it is offline and not connected to Accenture Ticketing Services (ATS). The latent transaction processor should store the tap until the device goes back online and connects to ATS. The tap should then be rated in ATS.", "Expected_Results": "The SA Tool should be able to store the tap when offline and process it once it goes back online and connects to ATS."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on a SA Tool with Open Payments Media \u2013 Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Testing the functionality of SA Tool when Open Payments Media fails ODA check", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when an Open Payments Media fails the ODA check. The device should return the appropriate feedback and the Declined \u2013 Try Another Card (Failed ODA Check) screen should be provided to the cardholder.", "Expected_Results": "The SA Tool should be able to detect the failure of the ODA check and provide the appropriate feedback to the cardholder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on a SA Tool with Open Payments Media \u2013 Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Testing the functionality of SA Tool when Open Payments Media fails Expiry Check", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when an Open Payments Media fails the Expiry Check. The device should return the appropriate feedback and the Declined \u2013 Card Expired Screen should be provided to the cardholder.", "Expected_Results": "The SA Tool should be able to detect the failure of the Expiry Check and provide the appropriate feedback to the cardholder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on a SA Tool with Open Payments Media \u2013 Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Testing the functionality of SA Tool when multiple NFC media are presented at one time", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when multiple NFC media are presented to the device at one time. The device should block all fare payment functionality and display an error toast message.", "Expected_Results": "The SA Tool should be able to detect multiple NFC media and block all fare payment functionality."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on a SA Tool with Open Payments Media \u2013 Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Testing the functionality of SA Tool when it is in Out-of-Service state", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when it is in Out-of-Service state. The Not In Service Screen should be provided to the cardholder and the device should not detect the media.", "Expected_Results": "The SA Tool should be able to detect its Out-of-Service state and provide the appropriate feedback to the cardholder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on a SA Tool with Open Payments Media \u2013 Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Testing the functionality of SA Tool when it is configured for only farecard reversals", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when it is configured for only farecard reversals. The device should check the local deny list if the media is on the local deny list.", "Expected_Results": "The SA Tool should be able to detect its configuration for only farecard reversals and check the local deny list accordingly."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on a SA Tool with Open Payments Media \u2013 Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Testing the functionality of SA Tool when customer is eligible for capping discount", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the customer is eligible for capping discount. ATS should calculate the capping discount and apply to the fare calculation.", "Expected_Results": "The SA Tool should be able to detect the customer's eligibility for capping discount and ATS should apply the discount to the fare calculation."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on a SA Tool with Open Payments Media \u2013 Device is offline and not connected to Accenture Ticketing Services", "Test_Scnario": "Testing the functionality of SA Tool when customer is eligible for multiple capping discounts", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the customer is eligible for multiple capping discounts. ATS should calculate the capping discount and apply to the fare calculation. When multiple caps are met ATS should take whatever Capping program which is of highest precedence and apply that discount to the fare.", "Expected_Results": "The SA Tool should be able to detect the customer's eligibility for multiple capping discounts and ATS should apply the highest precedence discount to the fare calculation."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on SA Tool with Open Payments Media \u2013 Customer requests audio messages", "Test_Scnario": "Testing the functionality of SA Tool when device is offline", "Test_Sce_Description": "This scenario is to test the functionality of SA Tool when the device is offline and not connected to Accenture Ticketing Services. The device should check the local deny list if the media is on the local deny list. The latent transaction processor should store the tap till the device goes back online and connects to Accenture Ticketing Services. The tap should then be rated in ATS.", "Expected_Results": "The device should successfully check the local deny list and store the tap till it goes back online. The tap should be rated in ATS once the device is back online."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on SA Tool with Open Payments Media \u2013 Customer requests audio messages", "Test_Scnario": "Testing the functionality of SA Tool when customer requests audio messages", "Test_Sce_Description": "This scenario is to test the functionality of SA Tool when the customer requests audio messages for fare payment. The operator should enable audio mode and change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case.", "Expected_Results": "The operator should successfully enable audio mode and adjust the volume level as per the customer's request. The SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on SA Tool with Open Payments Media \u2013 Customer requests audio messages", "Test_Scnario": "Testing the functionality of SA Tool when Open Payments Media fails ODA check", "Test_Sce_Description": "This scenario is to test the functionality of SA Tool when an Open Payments Media fails the ODA check. The device should return the appropriate feedback and the Declined \u2013 Try Another Card (Failed ODA Check) screen should be provided to the cardholder.", "Expected_Results": "The device should successfully return the appropriate feedback and the Declined \u2013 Try Another Card (Failed ODA Check) screen should be provided to the cardholder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on SA Tool with Open Payments Media \u2013 Customer requests audio messages", "Test_Scnario": "Testing the functionality of SA Tool when Open Payments Media fails Expiry Check", "Test_Sce_Description": "This scenario is to test the functionality of SA Tool when an Open Payments Media fails the Expiry Check. The device should return the appropriate feedback and the Declined \u2013 Card Expired Screen should be provided to the cardholder.", "Expected_Results": "The device should successfully return the appropriate feedback and the Declined \u2013 Card Expired Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "With/Without audio messages", "Use_Case_Name": "Tap on SA Tool with Open Payments Media \u2013 Customer requests audio messages", "Test_Scnario": "Testing the functionality of SA Tool when Open Payments Media is on the ATS deny list", "Test_Sce_Description": "This scenario is to test the functionality of SA Tool when an Open Payments Media is on the ATS deny list and the SA Tool is online. The device should check the online deny list and complete the fare processing.", "Expected_Results": "The device should successfully check the online deny list and complete the fare processing."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it detects a TICKET but fails to read it correctly. The customer will tap on the NFC reader again. If the tap is successful, steps 4 \u2013 9 will be conducted. If the tap is unsuccessful, the SA Tool application will indicate to the operator that the TICKET is unreadable.", "Expected_Results": "The SA Tool should correctly indicate to the operator that the TICKET is unreadable. An error should be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer asks to pay for the trip with their TICKET and requests audio messages for the fare payment. The operator enables audio mode and can change the volume level using the physical device buttons at the customer\u2019s discretion or proceed with the use case.", "Expected_Results": "The SA Tool should correctly enable audio mode and allow the operator to change the volume level. The corresponding audio message should be played to the customer in the default language of their Farecard. After the audio message ends, the screen should return to the application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the fare payment is being made on the FLATFARE BASED SA Tool and the customer\u2019s Period Pass is valid. The SA Tool identifies that the customer\u2019s Period Pass is valid and accepts the period pass fare payment.", "Expected_Results": "The SA Tool should correctly identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer\u2019s TICKET has a Valid Child concession. The SA Tool displays the successful Child fare payment screen and plays the successful fare payment audio tone for Child concession.", "Expected_Results": "The SA Tool should correctly display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the operator inspects a customer\u2019s TICKET and determines that they have not paid a fare. The operator selects the payment function on the SA Tool inspection results screen.", "Expected_Results": "The SA Tool should correctly allow the operator to select the payment function on the SA Tool inspection results screen. The SA Tool should record both the fare payment and inspection transactions and return to the Tap Card screen. A toast notification should be displayed of the corresponding inspection action."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer\u2019s TICKET is Unreadable", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer has a period pass Ticket that is outside the validity period.", "Expected_Results": "The SA Tool should correctly identify that the customer\u2019s period pass Ticket is outside the validity period and indicate this to the operator."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of the audio mode", "Test_Sce_Description": "This scenario tests the functionality of the audio mode when a customer requests audio messages for fare payment. The operator enables the audio mode and adjusts the volume level using the physical device buttons at the customer\u2019s discretion.", "Expected_Results": "The audio mode should be enabled successfully and the volume level should be adjustable. The corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of the SA Tool when the TICKET is unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it detects the TICKET but fails to read it correctly. The SA Tool application should indicate to the operator that the TICKET is unreadable.", "Expected_Results": "The SA Tool should correctly indicate that the TICKET is unreadable. An error should be captured and logged in the background to help with troubleshooting the issue."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of the SA Tool when accepting fare payment from a TICKET with a valid Period Pass", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when accepting fare payment from a TICKET with a valid Period Pass. The SA Tool should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment.", "Expected_Results": "The SA Tool should correctly identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of the SA Tool when the customer has a Valid Child Concession on their TICKET", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer has a Valid Child Concession on their TICKET. The SA Tool should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession.", "Expected_Results": "The SA Tool should correctly display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of the SA Tool when accepting fare payment resulting from failed inspection", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when accepting fare payment resulting from failed inspection. The operator should be able to select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions.", "Expected_Results": "The operator should be able to select the payment function on the SA Tool inspection results screen and the SA Tool should record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages", "Test_Scnario": "Testing the functionality of the SA Tool when the customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer\u2019s TICKET Period Pass is not valid on the current date. The SA Tool should correctly identify that the Period Pass is not valid.", "Expected_Results": "The SA Tool should correctly identify that the customer\u2019s TICKET Period Pass is not valid on the current date."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a premium or special event service class ticket makes a fare payment on a flatfare based SA Tool. The ticket has a valid transfer product and the tap is within the transfer window.", "Expected_Results": "The SA Tool should compute the free transfer and display the successful fare payment screen. The SA Tool should also play the successful fare payment audio tone."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Scnario": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a valid child concession on their client ticket makes a fare payment using ride balance.", "Expected_Results": "The SA Tool should detect the valid child concession, display the successful child fare payment screen and play the successful fare payment audio tone for child concession."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Scnario": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made from a ticket using ride balance after a failed inspection.", "Expected_Results": "The SA Tool should record both the fare payment and inspection transactions and return to the Tap Card screen. A toast notification of the corresponding inspection action should be displayed."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Scnario": "Accepting Fare Payment from a TICKET using Ride Balance - Customer has a TICKET with no Ride Balance remaining", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with no ride balance remaining on their ticket attempts to make a fare payment.", "Expected_Results": "The SA Tool should detect that the ride balance is empty, display a declined message to the customer and play the declined audio tone. The transaction should not be conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Scnario": "Accepting Fare Payment from a TICKET using Ride Balance - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the device battery goes below the low battery threshold during a fare payment from a ticket using ride balance.", "Expected_Results": "The SA Tool should switch to 'Out of Service' mode if the low battery threshold is reached before the fare payment is processed. If the fare payment is processed before the low battery threshold is reached, the application should then switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Scnario": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a card that is not CLIENT media", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a card that is not client media to make a fare payment using ride balance.", "Expected_Results": "The SA Tool should not respond and the device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Scnario": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a ticket within the Anti-Passback Window attempts to make a fare payment using ride balance.", "Expected_Results": "The SA Tool should detect that the ticket fails the Anti-Passback checks, display a declined message to the customer and play the declined audio tone. The transaction should not be conducted."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Scnario": "Accepting Fare Payment from a TICKET using Ride Balance \u2013 Customer taps a non-activated Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a non-activated ticket to make a fare payment using ride balance.", "Expected_Results": "The SA Tool should not respond and the device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating the functionality of the SA Tool when a valid Non-Adult, Non-Child concession is found", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly identifies a valid Non-Adult, Non-Child concession and plays the successful fare payment audio tone for a concession other than Adult or Child.", "Expected_Results": "The SA Tool should correctly identify the concession and play the successful fare payment audio tone for a concession other than Adult or Child."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Testing the functionality of the SA Tool when a valid transfer product is found", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly identifies a valid transfer product and computes the free transfer.", "Expected_Results": "The SA Tool should correctly identify the transfer product and compute the free transfer."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating the functionality of the SA Tool when a customer requests audio messages", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly enables audio mode when a customer requests audio messages for the fare payment.", "Expected_Results": "The SA Tool should correctly enable audio mode and play the corresponding audio message in the default language of the customer's Farecard."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Testing the functionality of the SA Tool when a Fixed Ride Ticket tap on a premium service or special route/location", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly results in a regular ride balance fare payment and Transfer Product creation when a Fixed Ride Ticket tap on a premium service or special route/location.", "Expected_Results": "The SA Tool should correctly result in a regular ride balance fare payment and Transfer Product creation."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating the functionality of the SA Tool when a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly results in a free transfer when a Ticket tap on a premium service or special event route/location after previously riding on a regular, premium, or special event route.", "Expected_Results": "The SA Tool should correctly result in a free transfer."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Testing the functionality of the SA Tool when a customer has a Valid Child concession on their CLIENT Ticket", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly identifies that the customer\u2019s TICKET has a Valid Child concession.", "Expected_Results": "The SA Tool should correctly identify that the customer\u2019s TICKET has a Valid Child concession."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating the functionality of the SA Tool when a customer has a Valid Child concession on their Farecard", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly identifies that the customer\u2019s Farecard has a Valid Child concession and displays the successful Child Transit Pass fare payment screen.", "Expected_Results": "The SA Tool should correctly identify that the customer\u2019s Farecard has a Valid Child concession and display the successful Child Transit Pass fare payment screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Testing the functionality of the SA Tool when a customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly identifies that the customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount and displays a declined message to the customer.", "Expected_Results": "The SA Tool should correctly identify that the customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount and display a declined message to the customer."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Scnario": "Validating the functionality of the SA Tool when a customer\u2019s Farecard is blocked", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly identifies that the customer\u2019s Farecard is blocked.", "Expected_Results": "The SA Tool should correctly identify that the customer\u2019s Farecard is blocked."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Testing the fare payment function on the SA Tool inspection results screen", "Test_Sce_Description": "This scenario tests the functionality of the fare payment function on the SA Tool inspection results screen. The operator inspects a customer\u2019s TICKET and determines that they have not paid a fare. The operator then selects the payment function on the SA Tool inspection results screen.", "Expected_Results": "The SA Tool should successfully record both the fare payment and inspection transactions. The application should return to the Tap Card screen and display a toast notification of the corresponding inspection action."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Testing the TICKET Period Pass validity check", "Test_Sce_Description": "This scenario tests the functionality of the TICKET Period Pass validity check. The customer has a period pass Ticket that is outside the validity period. The SA Tool application should detect that the TICKET Period Pass is not valid on the current date.", "Expected_Results": "The SA Tool application should display a declined message to the customer. The transaction should not be conducted. The SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Testing the low battery threshold functionality during payment", "Test_Sce_Description": "This scenario tests the functionality of the low battery threshold during payment. The low battery threshold is high enough that the remote lists can be processed even after the SA Tool device battery goes below the low battery threshold during a successful TICKET tap.", "Expected_Results": "If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode. Else, the customers fare payment should be processed as per Step 5. The application should then switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Testing the TICKET Anti-Passback Window functionality", "Test_Sce_Description": "This scenario tests the functionality of the TICKET Anti-Passback Window. The customer\u2019s card is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks.", "Expected_Results": "The SA Tool application should display a declined message the customer. The transaction should not be conducted. The SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Testing the TICKET activation check", "Test_Sce_Description": "This scenario tests the functionality of the TICKET activation check. The customer\u2019s Ticket is not activated. The device should detect that the TICKET is not activated.", "Expected_Results": "The SA Tool application should display a declined message the customer. The transaction should not be conducted. The SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Testing the TICKET expiry check", "Test_Sce_Description": "This scenario tests the functionality of the TICKET expiry check. The customer\u2019s Ticket is expired. The device should detect that the TICKET is expired.", "Expected_Results": "The SA Tool application should display a declined message the customer. The transaction should not be conducted. The SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Testing the TICKET readability check", "Test_Sce_Description": "This scenario tests the functionality of the TICKET readability check. The SA Tool application detects the TICKET and fails to read it correctly. The SA Tool NFC reader should detect the TICKET but is unable to read it.", "Expected_Results": "The SA Tool application should indicate to the operator that the TICKET is unreadable. An error should still be captured and logged in the background when this occurs to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Testing the audio messages functionality", "Test_Sce_Description": "This scenario tests the functionality of the audio messages. The customer asks to pay for the trip with their TICKET and requests audio messages for the fare payment. The operator should enable audio mode.", "Expected_Results": "The SA Tool should display the TICKET fare payment screen to the operator and customer for the duration of the audio message. Corresponding audio message should be played to the customer in the default language of their Farecard. After the audio message ends, the screen should return to the application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Testing the TICKET fare payment with valid Child concession", "Test_Sce_Description": "This scenario tests the functionality of the TICKET fare payment with valid Child concession. The customer\u2019s TICKET has a Valid Child concession. A Valid Child Concession should be found.", "Expected_Results": "The SA Tool should display the successful Child fare payment screen. The SA Tool should play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Testing the TICKET fare payment on Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the TICKET fare payment on Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool. The fare payment is being made on the FLATFARE BASED SA Tool. Ticket has a valid Period Pass. The SA Tool should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment.", "Expected_Results": "The SA Tool should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a non-activated CLIENT Ticket. The SA Tool should detect that the TICKET is not activated and display a declined message to the customer.", "Expected_Results": "The SA Tool application should display a declined message to the customer. The transaction should not be conducted. The SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is Unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer\u2019s TICKET is unreadable. The SA Tool should detect the TICKET but fail to read it correctly.", "Expected_Results": "The SA Tool application should indicate to the operator that the TICKET is unreadable. An error should be captured and logged in the background to help with troubleshooting the issue. This error should also be captured in the SOTI logs."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer requests audio messages for the fare payment. The operator should enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion.", "Expected_Results": "The SA Tool should display the TICKET fare payment screen to the operator and customer for the duration of the audio message. The corresponding audio message should be played to the customer in the default language of their Farecard. After the audio message ends, the screen should return to the application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Premium or Special Event Service Class Route/Location on FLATFARE BASED SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a TICKET with a valid Period Pass on a route/location with Premium or Special Event Service Class.", "Expected_Results": "The SA Tool should identify that the customer\u2019s Period Pass is valid and accept the period pass fare payment."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass - Customer has a Valid Child Concession on their CLIENT Ticket", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a Valid Child concession taps their CLIENT Ticket. The SA Tool should detect the Valid Child Concession.", "Expected_Results": "The SA Tool should display the successful Child fare payment screen and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer\u2019s TICKET fails inspection and the operator selects the payment function on the SA Tool inspection results screen.", "Expected_Results": "The SA Tool should record both the fare payment and inspection transactions. The SA Tool application should return to the Tap Card screen. A toast notification should be displayed of the corresponding inspection action."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET Period Pass is not valid on the current date", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer has a period pass Ticket that is outside the validity period. The SA Tool should detect that the TICKET Period Pass is not valid on the current date.", "Expected_Results": "The SA Tool application should display a declined message to the customer. The transaction should not be conducted. The SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the device battery goes below the low battery threshold during a successful TICKET tap. The application should switch to \u201cOut of Service\u201d mode.", "Expected_Results": "If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode. Else, the customers fare payment should be processed as per Step 5. The application should then switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a card that is not CLIENT media", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer\u2019s card is not CLIENT media. The SA Tool should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time.", "Expected_Results": "The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated CLIENT Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s TICKET is within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer\u2019s card is within the Anti-Passback Window. The device should detect that the TICKET fails the Anti-Passback checks.", "Expected_Results": "The SA Tool application should display a declined message the customer. The transaction should not be conducted. The SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket", "Test_Sce_Description": "In this scenario, the customer has an expired ticket and tries to make a fare payment using the Period Pass. The system should detect that the ticket is expired and decline the transaction.", "Expected_Results": "The system should decline the transaction and display a message to the customer that the ticket is expired."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a Ticket with insufficient balance", "Test_Sce_Description": "In this scenario, the customer has a ticket with insufficient balance and tries to make a fare payment using the Period Pass. The system should detect that the balance is insufficient and decline the transaction.", "Expected_Results": "The system should decline the transaction and display a message to the customer that the balance is insufficient."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a blocked Ticket", "Test_Sce_Description": "In this scenario, the customer has a blocked ticket and tries to make a fare payment using the Period Pass. The system should detect that the ticket is blocked and decline the transaction.", "Expected_Results": "The system should decline the transaction and display a message to the customer that the ticket is blocked."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a Ticket on the Deny List", "Test_Sce_Description": "In this scenario, the customer has a ticket that is on the Deny List and tries to make a fare payment using the Period Pass. The system should detect that the ticket is on the Deny List, remove it from the list, set it to blocked, and decline the transaction.", "Expected_Results": "The system should decline the transaction, display a message to the customer that the ticket is on the Deny List, and update the status of the ticket to blocked."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Battery goes below the low battery threshold during payment", "Test_Sce_Description": "In this scenario, the battery of the device goes below the low battery threshold during a fare payment transaction. The system should detect the low battery status and switch to 'Out of Service' mode.", "Expected_Results": "The system should switch to 'Out of Service' mode and display a message to the customer that the device is out of service due to low battery."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps a non-activated card", "Test_Sce_Description": "In this scenario, the customer has a non-activated card and tries to make a fare payment using the Period Pass. The system should detect that the card is not activated and decline the transaction.", "Expected_Results": "The system should decline the transaction and display a message to the customer that the card is not activated."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Accept inspection", "Use_Case_Name": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer taps an expired Ticket", "Test_Scnario": "Accepting Fare Payment from a TICKET using Period Pass \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Sce_Description": "In this scenario, the customer\u2019s card is within the Anti-Passback Window and tries to make a fare payment using the Period Pass. The system should detect that the card is within the Anti-Passback Window and decline the transaction.", "Expected_Results": "The system should decline the transaction and display a message to the customer that the card is within the Anti-Passback Window."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out", "Test_Scnario": "Verify the sign-in functionality of a new operator when the current operator is already signed in", "Test_Sce_Description": "A new operator tries to sign in to the SA Tool while the current operator is already signed in. The system should display a message indicating that the current operator is already signed in and ask if the new operator wants to sign in anyway.", "Expected_Results": "The system should successfully sign in the new operator and sign out the current operator."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out", "Test_Scnario": "Verify the shut-down functionality of the SA Tool via the physical device button", "Test_Sce_Description": "The operator presses and holds the physical power button on the SA Tool. The system should display a confirmation message with the option to power off. The operator selects 'Power off' and confirms shut-down.", "Expected_Results": "The system should successfully shut down the SA Tool."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out", "Test_Scnario": "Verify the reboot functionality of the SA Tool", "Test_Sce_Description": "The operator presses and holds the physical power button on the SA Tool. The system should display a confirmation message with the option to restart. The operator selects 'Restart' and the device should restart.", "Expected_Results": "The system should successfully reboot the SA Tool."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out", "Test_Scnario": "Verify the functionality of the SA Tool in 'Out-of-Service' state", "Test_Sce_Description": "If a SA Tool is in 'Out-of-Service' state, it should be unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components.", "Expected_Results": "The system should not accept any Farecard and should indicate that it is in 'Out-of-Service' state."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out", "Test_Scnario": "Verify the functionality of the SA Tool in 'Standby' state", "Test_Sce_Description": "When the SA Tool is in 'Standby' state, the screen should be turned off and the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life.", "Expected_Results": "The system should successfully enter 'Standby' state and disconnect from all peripherals."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out", "Test_Scnario": "Verify the functionality of the SA Tool in 'Revenue' mode", "Test_Sce_Description": "In 'Revenue' mode, the SA Tool operator should be able to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures.", "Expected_Results": "The system should successfully perform all the functions in 'Revenue' mode."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Device is turned off after the operator confirms that they would like to sign-out", "Test_Scnario": "Verify the functionality of the SA Tool in 'Training' mode", "Test_Sce_Description": "In 'Training' mode, the SA Tool operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions.", "Expected_Results": "The system should successfully perform all the functions in 'Training' mode without accepting any payment."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline", "Test_Scnario": "Verify the functionality of SA Tool in Out-of-Service state", "Test_Sce_Description": "Test the functionality of SA Tool when it is in Out-of-Service state. The tool should not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components.", "Expected_Results": "The SA Tool should not accept any Farecard and should indicate that it requires maintenance."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline", "Test_Scnario": "Verify the operator's shift status when SA Tool goes into Out-of-Service state", "Test_Sce_Description": "Test if the operator's shift remains open when the SA Tool goes into Out-of-Service state. The operator's shift should not close unless the operator has requested to sign-off.", "Expected_Results": "The operator's shift should remain open unless the operator has requested to sign-off."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline", "Test_Scnario": "Verify the functionality of SA Tool in Standby state", "Test_Sce_Description": "Test the functionality of SA Tool when it is in Standby state. The screen should turn off and the SA Tool should disconnect from all peripherals to conserve battery life.", "Expected_Results": "The SA Tool's screen should turn off and it should disconnect from all peripherals."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline", "Test_Scnario": "Verify the functionality of SA Tool when it is running in the background", "Test_Sce_Description": "Test the functionality of SA Tool when it is running in the background. The SA Tool should disconnect from all peripherals to conserve battery life.", "Expected_Results": "The SA Tool should disconnect from all peripherals."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline", "Test_Scnario": "Verify the functionality of SA Tool in Revenue mode", "Test_Sce_Description": "Test the functionality of SA Tool in Revenue mode. The operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures.", "Expected_Results": "The operator should be able to perform all the functions mentioned in the Revenue mode."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline", "Test_Scnario": "Verify the functionality of SA Tool in Training mode", "Test_Sce_Description": "Test the functionality of SA Tool in Training mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions.", "Expected_Results": "The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline", "Test_Scnario": "Verify the functionality of SA Tool when a new operator signs in", "Test_Sce_Description": "Test the functionality of SA Tool when a new operator signs in. The current operator should be signed off from the SA Tool.", "Expected_Results": "The current operator should be signed off from the SA Tool."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline", "Test_Scnario": "Verify the functionality of SA Tool when it is manually shut down", "Test_Sce_Description": "Test the functionality of SA Tool when it is manually shut down. The device should turn off and if the operator shift is open, the operator shift should not be closed.", "Expected_Results": "The device should turn off and if the operator shift is open, the operator shift should not be closed."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Operator Signs-Off while the SA Tool is Offline", "Test_Scnario": "Verify the functionality of SA Tool when it is manually rebooted", "Test_Sce_Description": "Test the functionality of SA Tool when it is manually rebooted. The device should restart by turning off and powering on.", "Expected_Results": "The device should restart by turning off and powering on."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "New operator signs into current operator\u2019s shift", "Test_Scnario": "New operator signs into current operator's shift", "Test_Sce_Description": "This scenario tests the functionality of a new operator signing into the SA Tool while the current operator is still signed in. The new operator should be able to sign in successfully and the current operator should be signed out automatically.", "Expected_Results": "The new operator is successfully signed in and the current operator is signed out."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "New operator signs into current operator\u2019s shift", "Test_Scnario": "SA Tool application closes the current shift and generates the shift statistics email", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application closing the current shift and generating the shift statistics email when the device is turned off or goes offline. The email should be stored on the device and sent once the device is powered on and re-establishes connection to the network.", "Expected_Results": "The SA Tool application successfully closes the current shift, generates the shift statistics email, and stores it on the device. The email is sent once the device is powered on and re-establishes connection to the network."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "New operator signs into current operator\u2019s shift", "Test_Scnario": "SA Tool stores a configurable number of shift report emails on the device", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool storing a configurable number of shift report emails on the device. Once the configurable limit is reached, the SA Tool should purge the first record created to replace it with the latest email.", "Expected_Results": "The SA Tool successfully stores a configurable number of shift report emails on the device and purges the first record created to replace it with the latest email once the limit is reached."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "New operator signs into current operator\u2019s shift", "Test_Scnario": "Operator signs in for the first time using a temporary passcode and network is not available", "Test_Sce_Description": "This scenario tests the functionality of an operator signing in for the first time using a temporary passcode when the network is not available. The SA Tool application should display a message to the operator requesting them to sign in when network is available.", "Expected_Results": "The SA Tool application successfully displays a message to the operator requesting them to sign in when network is available."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "New operator signs into current operator\u2019s shift", "Test_Scnario": "Operator reaches the maximum number of login attempts", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool recording a cumulative number of unsuccessful sign on attempts for a single valid operator badge ID. When the number of unsuccessful sign-in attempts reaches the maximum number of sign-on attempts, the SA Tool application should deny access to that operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time.", "Expected_Results": "The SA Tool application successfully records a cumulative number of unsuccessful sign on attempts for a single valid operator badge ID and denies access to that operator when the maximum number of sign-on attempts is reached."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "New operator signs into current operator\u2019s shift", "Test_Scnario": "New passcode is the same as the temporary passcode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool detecting that the new passcode is the same as the temporary passcode. The SA Tool Device should inform the user of the error and clear the new passcode fields.", "Expected_Results": "The SA Tool Device successfully detects that the new passcode is the same as the temporary passcode, informs the user of the error, and clears the new passcode fields."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "New operator signs into current operator\u2019s shift", "Test_Scnario": "New passcode length does not meet pre-defined criteria", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool not enabling the submit button until the passcode entered is the correct length.", "Expected_Results": "The SA Tool successfully does not enable the submit button until the passcode entered is the correct length."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button", "Test_Scnario": "Shut-Down SA Tool via Physical Device Button", "Test_Sce_Description": "This scenario tests the functionality of the physical power button on the SA Tool. The operator presses and holds the physical power button on the SA Tool. The SA Tool should display a confirmation message with the following options: Power off, Other options (e.g. Reset, Airplane Mode, etc.). The operator selects \u201cPower off\u201d and confirms shut-down. The SA Tool will ask the operator to confirm the shut-down. The operator confirms the shut-down. The device should turn off.", "Expected_Results": "The SA Tool should successfully turn off after the operator confirms the shut-down."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button", "Test_Scnario": "SA Tool in Out-of-Service State", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in \u201cOut-of-Service\u201d state. If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off.", "Expected_Results": "The SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off when the device is in out-of-service state."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button", "Test_Scnario": "SA Tool in Standby State", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off. The operator can press the physical power button to switch the SA Tool into standby state directly. Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life.", "Expected_Results": "The SA Tool should successfully switch into a Standby state and disconnect from all the peripherals after remaining inactive for a configurable period of time or when the operator presses the physical power button."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button", "Test_Scnario": "SA Tool in Revenue Mode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Revenue Mode. Upon logon the operator should be able to select which mode they would like to operate their shift in. The Revenue Mode allows the SA Tool operator to interact with customers. In this mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments.", "Expected_Results": "The SA Tool should successfully allow the operator to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in the Revenue Mode."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Shut-Down SA Tool via Physical Device Button", "Test_Scnario": "SA Tool in Training Mode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Training Mode. The Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode. They should not be a form of valid proof of payment.", "Expected_Results": "The SA Tool should successfully allow the operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in the Training Mode."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Reboot SA Tool", "Test_Scnario": "Reboot SA Tool - Successful Reboot", "Test_Sce_Description": "This scenario tests the successful reboot of the SA Tool. The operator presses and holds the physical power button on the SA Tool, selects the restart option, and the device successfully restarts.", "Expected_Results": "The SA Tool should successfully restart and be ready for use."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Reboot SA Tool", "Test_Scnario": "Reboot SA Tool - Unsuccessful Reboot", "Test_Sce_Description": "This scenario tests the unsuccessful reboot of the SA Tool. The operator presses and holds the physical power button on the SA Tool, selects the restart option, but the device fails to restart.", "Expected_Results": "The SA Tool should display an error message indicating that the reboot was unsuccessful."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Reboot SA Tool", "Test_Scnario": "Reboot SA Tool - Network Communications Disabled", "Test_Sce_Description": "This scenario tests the reboot of the SA Tool when network communications are disabled. The operator presses and holds the physical power button on the SA Tool, selects the restart option, but the device is in Airplane Mode.", "Expected_Results": "The SA Tool should display a message indicating that network communications are disabled and the device will not be able to perform any inspections, counters and queries."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Reboot SA Tool", "Test_Scnario": "Reboot SA Tool - Device Sound Levels", "Test_Sce_Description": "This scenario tests the reboot of the SA Tool when device sound levels are adjusted. The operator presses and holds the physical power button on the SA Tool, selects the restart option, and adjusts the device sound levels.", "Expected_Results": "The SA Tool should successfully restart with the adjusted sound levels."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Reboot SA Tool", "Test_Scnario": "Reboot SA Tool - Exception Flow", "Test_Sce_Description": "This scenario tests the reboot of the SA Tool when an exception occurs. The operator presses and holds the physical power button on the SA Tool, selects the restart option, but an exception occurs during the reboot process.", "Expected_Results": "The SA Tool should display an error message indicating that an exception occurred during the reboot process."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Written warning", "Use_Case_Name": "Reboot SA Tool", "Test_Scnario": "Reboot SA Tool - Alternate Flow", "Test_Sce_Description": "This scenario tests the reboot of the SA Tool when an alternate flow is triggered. The operator presses and holds the physical power button on the SA Tool, selects the restart option, but an alternate flow is triggered during the reboot process.", "Expected_Results": "The SA Tool should successfully restart following the alternate flow."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has an Anonymous Farecard with an ePurse Balance Less than the Fare Amount", "Test_Scnario": "Verify the functionality of SA Tool when customer's farecard has not paid a fare", "Test_Sce_Description": "The operator inspects a customer\u2019s farecard and determines that they have not paid a fare. The operator then selects the payment function on the SA Tool inspection results screen.", "Expected_Results": "The SA Tool should record both the fare payment and inspection transactions and return to the Tap Card screen. A toast notification should be displayed of the corresponding inspection action."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has an Anonymous Farecard with an ePurse Balance Less than the Fare Amount", "Test_Scnario": "Verify the functionality of SA Tool when customer's anonymous farecard has an ePurse balance less than the fare amount", "Test_Sce_Description": "The operator inspects a customer\u2019s farecard and determines that the customer has an anonymous farecard with an ePurse balance less than the fare amount.", "Expected_Results": "The SA Tool should detect the Card is Anonymous and the ePurse Balance is less than the fare amount. It should display a declined message to the customer and play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has an Anonymous Farecard with an ePurse Balance Less than the Fare Amount", "Test_Scnario": "Verify the functionality of SA Tool when customer's farecard is in overdraft", "Test_Sce_Description": "The operator inspects a customer\u2019s farecard and determines that the customer's farecard is in overdraft.", "Expected_Results": "The SA Tool should detect that the Farecard is in overdraft. It should display a declined message to the customer and play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has an Anonymous Farecard with an ePurse Balance Less than the Fare Amount", "Test_Scnario": "Verify the functionality of SA Tool when customer's farecard is blocked", "Test_Sce_Description": "The operator inspects a customer\u2019s farecard and determines that the customer's farecard is blocked.", "Expected_Results": "The SA Tool should detect that the Farecard is blocked. It should display a declined message to the customer and play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has an Anonymous Farecard with an ePurse Balance Less than the Fare Amount", "Test_Scnario": "Verify the functionality of SA Tool when customer's farecard is on the hotlist", "Test_Sce_Description": "The operator inspects a customer\u2019s farecard and determines that the customer's farecard is on the hotlist.", "Expected_Results": "The SA Tool should detect that the Farecard is on the hotlist and update the card\u2019s status to blocked. It should display a declined message to the customer and play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has an Anonymous Farecard with an ePurse Balance Less than the Fare Amount", "Test_Scnario": "Verify the functionality of SA Tool when battery goes below the low battery threshold during payment", "Test_Sce_Description": "The operator inspects a customer\u2019s farecard and during the payment process, the battery goes below the low battery threshold.", "Expected_Results": "If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode. Else, the customers fare payment should be processed as per Step 5. The application should then switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has an Anonymous Farecard with an ePurse Balance Less than the Fare Amount", "Test_Scnario": "Verify the functionality of SA Tool when customer taps a card that is not a Farecard", "Test_Sce_Description": "The operator inspects a customer\u2019s card and determines that the customer's card is not a Farecard.", "Expected_Results": "The SA Tool should display the \u201cCard Read Error\u201d toast message for a short period of time."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has an Anonymous Farecard with an ePurse Balance Less than the Fare Amount", "Test_Scnario": "Verify the functionality of SA Tool when customer's farecard is within the Anti-Passback Window", "Test_Sce_Description": "The operator inspects a customer\u2019s farecard and determines that the customer's card is within the Anti-Passback Window.", "Expected_Results": "The device should detect that the Farecard fails the Anti-Passback checks. The SA Tool application should display a declined message the customer and play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has an Anonymous Farecard with an ePurse Balance Less than the Fare Amount", "Test_Scnario": "Verify the functionality of SA Tool when customer taps a non-activated card", "Test_Sce_Description": "The operator inspects a customer\u2019s card and determines that the customer's card is not activated and not on the action list available on the device.", "Expected_Results": "The SA Tool should display the \u201cCard Read Error\u201d toast message for a short period of time."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has an Overdraft on their Registered Farecard", "Test_Scnario": "Overdraft Handling - Farecard in Overdraft", "Test_Sce_Description": "Verify that the system correctly identifies a Farecard in overdraft and displays the corresponding negative balance in the card query.", "Expected_Results": "The system should correctly identify the Farecard in overdraft and display the corresponding negative balance in the card query."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has an Overdraft on their Registered Farecard", "Test_Scnario": "Overdraft Handling - Overdraft Full Screen Alert", "Test_Sce_Description": "Verify that the system shows the Overdraft Full Screen Alert when the operator chooses to sell a Farecard product while the card is in overdraft.", "Expected_Results": "The system should show the Overdraft Full Screen Alert when the operator chooses to sell a Farecard product while the card is in overdraft."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has an Overdraft on their Registered Farecard", "Test_Scnario": "Overdraft Handling - Dismiss Overdraft Notice", "Test_Sce_Description": "Verify that the system allows the operator to dismiss the overdraft notice and returns to the Sell screen.", "Expected_Results": "The system should allow the operator to dismiss the overdraft notice and return to the Sell screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has an Overdraft on their Registered Farecard", "Test_Scnario": "Overdraft Handling - Add Overdraft Amount to Shopping Cart", "Test_Sce_Description": "Verify that the system automatically adds the overdraft amount to the shopping cart as an e-purse load when the operator selects 'continue'.", "Expected_Results": "The system should automatically add the overdraft amount to the shopping cart as an e-purse load when the operator selects 'continue'."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has an Overdraft on their Registered Farecard", "Test_Scnario": "Overdraft Handling - Loading e-Purse with Overdraft", "Test_Sce_Description": "Verify that the system correctly calculates and loads the e-purse amount (X-O) when the customer is loading an e-purse and paid X.", "Expected_Results": "The system should correctly calculate and load the e-purse amount (X-O) when the customer is loading an e-purse and paid X."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has an Overdraft on their Registered Farecard", "Test_Scnario": "Overdraft Handling - Loading Products without e-Purse", "Test_Sce_Description": "Verify that the system correctly loads the products onto the Card and clears the overdraft when the customer is loading products that do not include e-purse and pays the overdraft amount.", "Expected_Results": "The system should correctly load the products onto the Card and clear the overdraft when the customer is loading products that do not include e-purse and pays the overdraft amount."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has an Overdraft on their Registered Farecard", "Test_Scnario": "Overdraft Handling with Fee - Farecard in Overdraft", "Test_Sce_Description": "Verify that the system correctly identifies a Farecard in overdraft and adds an overdraft fee to the shopping cart when the TA has configured an overdraft fee in the EOD.", "Expected_Results": "The system should correctly identify the Farecard in overdraft and add an overdraft fee to the shopping cart when the TA has configured an overdraft fee in the EOD."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has an Overdraft on their Registered Farecard", "Test_Scnario": "Overdraft Handling with Fee - Waive Fee Option", "Test_Sce_Description": "Verify that the system allows the operator to waive the overdraft fee and proceed through the main flow as normal.", "Expected_Results": "The system should allow the operator to waive the overdraft fee and proceed through the main flow as normal."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has an Overdraft on their Registered Farecard", "Test_Scnario": "Overdraft Handling with Fee - Loading e-Purse with Overdraft and Fee", "Test_Sce_Description": "Verify that the system correctly calculates and loads the e-purse amount (X-O-F) when the customer is loading an e-purse and paid X.", "Expected_Results": "The system should correctly calculate and load the e-purse amount (X-O-F) when the customer is loading an e-purse and paid X."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has an Overdraft on their Registered Farecard", "Test_Scnario": "Overdraft Handling with Fee - Loading Products without e-Purse", "Test_Sce_Description": "Verify that the system correctly loads the products onto the Card and clears the overdraft when the customer is loading products that do not include e-purse and pays the overdraft amount plus fee.", "Expected_Results": "The system should correctly load the products onto the Card and clear the overdraft when the customer is loading products that do not include e-purse and pays the overdraft amount plus fee."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Testing the functionality of the SA Tool when the Farecard is blocked", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the customer's Farecard is blocked. The SA Tool should be able to detect that the Farecard is blocked and display a declined message to the customer.", "Expected_Results": "The SA Tool application should detect that the Farecard is blocked and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Testing the performance of the SA Tool when the Farecard is blocked", "Test_Sce_Description": "This scenario is to test the performance of the SA Tool application when the customer's Farecard is blocked. The SA Tool should be able to quickly detect that the Farecard is blocked and display a declined message to the customer.", "Expected_Results": "The SA Tool application should quickly detect that the Farecard is blocked and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Testing the security of the SA Tool when the Farecard is blocked", "Test_Sce_Description": "This scenario is to test the security of the SA Tool application when the customer's Farecard is blocked. The SA Tool should securely handle the blocked Farecard and not allow any unauthorized transactions.", "Expected_Results": "The SA Tool application should securely handle the blocked Farecard and not allow any unauthorized transactions. The transaction should not be conducted and the SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Testing the alternate flow of the SA Tool when the Farecard is unreadable", "Test_Sce_Description": "This scenario is to test the alternate flow of the SA Tool application when the Farecard is unreadable. The SA Tool should be able to detect that the Farecard is unreadable and indicate to the operator that the Farecard is unreadable.", "Expected_Results": "The SA Tool application should detect that the Farecard is unreadable and indicate to the operator that the Farecard is unreadable. The customer should tap on the NFC reader again. If the tap is successful, steps 4 \u2013 9 should be conducted. If the tap is unsuccessful, the SA Tool application should indicate to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is Blocked", "Test_Scnario": "Testing the exception flow of the SA Tool when the customer has a Concession other than Adult, Child, or Discreet Concessions on their Farecard", "Test_Sce_Description": "This scenario is to test the exception flow of the SA Tool application when the customer has a Concession other than Adult, Child, or Discreet Concessions on their Farecard. The SA Tool should be able to detect the non-standard concession and handle it appropriately.", "Expected_Results": "The SA Tool application should detect the non-standard concession and handle it appropriately. The transaction should not be conducted and the SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made during peak hours after the farecard has reached its off peak daily cap limit and is outside the transfer window.", "Expected_Results": "The SA Tool should compute the fare and deduct the amount from the Virtual Card E-Purse. The fare payment should be successful and the SA Tool should communicate this back to the user."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window.", "Expected_Results": "The SA Tool should compute the fare difference and deduct the upgrade amount from the Virtual Card E-Purse. The fare payment should be successful and the SA Tool should communicate this back to the user."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made on a premium service route after previously riding on a Special Event service route within the transfer window.", "Expected_Results": "The SA Tool should not deduct any fare from the Virtual Card E-Purse as the premium fare is lower than the special event fare. The fare payment should be successful and the SA Tool should communicate this back to the user."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a farecard that has a valid non-adult concession.", "Expected_Results": "The SA Tool should compute the fare based on the non-adult concession and deduct the amount from the Virtual Card E-Purse. The fare payment should be successful and the SA Tool should communicate this back to the user."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer requests audio messages for the fare payment.", "Expected_Results": "The SA Tool should enable audio mode and play the corresponding audio message in the default language of the farecard. The fare payment should be successful and the SA Tool should communicate this back to the user."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Daily Cap Reached outside of Transfer window on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made after the farecard has reached its daily cap limit and is outside the transfer window.", "Expected_Results": "The SA Tool should not deduct any fare from the Virtual Card E-Purse as the daily cap is reached. The fare payment should be successful and the SA Tool should communicate this back to the user."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made on a premium service or special route/location.", "Expected_Results": "The SA Tool should compute the premium or special event fare and deduct the amount from the Virtual Card E-Purse. The fare payment should be successful and the SA Tool should communicate this back to the user."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is on the Hotlist", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Premium Service or Special Route/Location with Fare Upgrade on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made on a premium service or special event route/location after previously riding on a regular service route within the transfer window.", "Expected_Results": "The SA Tool should compute the fare difference and deduct the upgrade amount from the Virtual Card E-Purse. The fare payment should be successful and the SA Tool should communicate this back to the user."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when the battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a successful Farecard tap. The test will involve initiating a fare payment and allowing the device's battery to drop below the low battery threshold during the process.", "Expected_Results": "If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode. If not, the customers fare payment should be processed as per Step 5. After this, the application should switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when the customer's card is not a Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's card is not a Farecard. The test will involve a customer attempting to tap a card that is not a Farecard.", "Expected_Results": "The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when the customer's Farecard is within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Farecard is within the Anti-Passback Window. The test will involve a customer attempting to tap a Farecard that is within the Anti-Passback Window.", "Expected_Results": "The SA Tool application should detect that the Farecard fails the Anti-Passback checks and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when the customer's Farecard is blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Farecard is blocked. The test will involve a customer attempting to tap a blocked Farecard.", "Expected_Results": "The SA Tool application should detect that the Farecard is blocked and display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when the customer's Farecard is on the hotlist", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Farecard is on the hotlist. The test will involve a customer attempting to tap a Farecard that is on the hotlist.", "Expected_Results": "The SA Tool application should detect that the Farecard is on the hotlist, update the card\u2019s status to blocked, display a declined message to the customer, and not conduct the transaction. The SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer taps a card that is not a Farecard", "Test_Sce_Description": "In this scenario, the customer taps a card that is not a Farecard on the SA Tool. The system should recognize that the card is not a Farecard and display an appropriate error message.", "Expected_Results": "The SA Tool displays the 'Try Another Card' screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s Farecard is Unreadable", "Test_Sce_Description": "In this scenario, the customer taps their Farecard on the SA Tool, but the system is unable to read the card. The system should recognize this issue and display an appropriate error message.", "Expected_Results": "The SA Tool indicates to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Concession other than Adult, Child, or Discreet Concessions on their Farecard", "Test_Sce_Description": "In this scenario, the customer has a concession on their Farecard that is not Adult, Child, or Discreet. The system should recognize this and process the fare payment accordingly.", "Expected_Results": "The SA Tool shows the successful fare payment screen for non-adult concession, plays the successful fare payment audio tone for a concession other than Adult, Child, or Discreet Concessions."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer\u2019s ePurse balance is less than the fare amount", "Test_Sce_Description": "In this scenario, the customer's ePurse balance is less than the fare amount. The system should recognize this and process the fare payment accordingly.", "Expected_Results": "The device sends the tap to ATS for processing. ATS checks the online hotlist and completes the fare processing. ATS removes the fare from the Virtual Card e-Purse and puts the card into overdraft."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Intra-SP Transfer window", "Test_Sce_Description": "In this scenario, the customer's transaction is within the Intra-SP Transfer window. The system should recognize this and process the fare payment accordingly.", "Expected_Results": "ATS will read that the Virtual Card contains a valid intra-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Inter-SP Transfer window", "Test_Sce_Description": "In this scenario, the customer's transaction is within the Inter-SP Transfer window. The system should recognize this and process the fare payment accordingly.", "Expected_Results": "ATS will read that the Virtual Card contains a valid inter-agency transfer product and deduct $0 from the Virtual Card E-Purse."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer requests Audio Messages", "Test_Sce_Description": "In this scenario, the customer requests audio messages. The system should recognize this and provide the requested audio messages.", "Expected_Results": "The SA Tool Device plays the successful fare payment audio tone."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Flat Fare TA", "Test_Sce_Description": "In this scenario, the customer pays a flat fare using their Farecard. The system should recognize this and process the fare payment accordingly.", "Expected_Results": "The SA Tool displays the successful fare payment screen."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Farecard is within the Anti-Passback Window. The SA Tool should detect that the Farecard fails the Anti-Passback checks and display a declined message to the customer.", "Expected_Results": "The SA Tool detects that the Farecard is within the Anti-Passback Window, displays a declined message to the customer, and does not conduct the transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Performance of the SA Tool during peak hours", "Test_Sce_Description": "This scenario tests the performance of the SA Tool during peak hours when the system is expected to handle a high volume of transactions. The SA Tool should be able to process transactions quickly and without errors.", "Expected_Results": "The SA Tool processes transactions quickly and without errors during peak hours."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Security of the SA Tool when processing transactions", "Test_Sce_Description": "This scenario tests the security of the SA Tool when processing transactions. The SA Tool should securely process transactions and protect customer data.", "Expected_Results": "The SA Tool securely processes transactions and protects customer data."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer has a Valid Non-Adult Concession on their Farecard. The SA Tool should recognize the concession and apply the appropriate fare.", "Expected_Results": "The SA Tool recognizes the Valid Non-Adult Concession on the Farecard and applies the appropriate fare."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer's Farecard is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Farecard is blocked. The SA Tool should detect that the Farecard is blocked and display a declined message to the customer.", "Expected_Results": "The SA Tool detects that the Farecard is blocked, displays a declined message to the customer, and does not conduct the transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer's Farecard is on the Hotlist", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Farecard is on the hotlist. The SA Tool should detect that the Farecard is on the hotlist, update the card's status to blocked, and display a declined message to the customer.", "Expected_Results": "The SA Tool detects that the Farecard is on the hotlist, updates the card's status to blocked, displays a declined message to the customer, and does not conduct the transaction."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a successful Farecard tap. The SA Tool should switch to 'Out of Service' mode.", "Expected_Results": "The SA Tool switches to 'Out of Service' mode when the battery goes below the low battery threshold during a successful Farecard tap."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer taps a card that is not a Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a card that is not a Farecard. The SA Tool should display the 'Card Read Error' toast message for a short period of time.", "Expected_Results": "The SA Tool displays the 'Card Read Error' toast message for a short period of time when a customer taps a card that is not a Farecard."}, {"Function_Flow_Name": "Inspection", "Sub_Flow_Name": "Pay Fare", "Use_Case_Name": "Accepting Fare Payment from a Farecard using ePurse Balance \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer taps a non-activated card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a non-activated card. The SA Tool should detect that the card is not activated and display a declined message to the customer.", "Expected_Results": "The SA Tool detects that the card is not activated, displays a declined message to the customer, and does not conduct the transaction."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by e-Purse", "Test_Scnario": "Payment by e-Purse with sufficient balance", "Test_Sce_Description": "The customer chooses to pay by e-Purse and has sufficient balance to cover the cost of the transaction. The operator places the customer\u2019s Farecard on the NFC card reader and selects to pay by e-Purse.", "Expected_Results": "The SA Tool should successfully deduct the balance from the e-purse and complete the transaction. The SA Tool should display the option to print a customer receipt or return to the main menu."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by e-Purse", "Test_Scnario": "Payment by e-Purse with insufficient balance", "Test_Sce_Description": "The customer chooses to pay by e-Purse but does not have sufficient balance to cover the cost of the transaction. The operator places the customer\u2019s Farecard on the NFC card reader and selects to pay by e-Purse.", "Expected_Results": "The SA Tool should display a notification informing the operator that the e-Purse balance cannot cover the price. The operator should be able to cancel the transaction or choose another mode of payment."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by e-Purse", "Test_Scnario": "Payment by Cheque", "Test_Sce_Description": "The customer chooses to pay with a cheque. The operator enters the balance and confirms the final sale on the pop up.", "Expected_Results": "The operator should successfully receive the cheque and store it. The SA Tool should display the option to print a customer receipt or return to the main menu."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by e-Purse", "Test_Scnario": "Payment during Peak hours after reaching Off Peak Daily Cap outside of Transfer Window on SA Tool", "Test_Sce_Description": "The customer taps on peak hours after previously reaching off peak daily cap (outside the transfer window) which results in a fare payment.", "Expected_Results": "ATS should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by e-Purse", "Test_Scnario": "Premium Service Route with Transfer where the Premium fare is higher than the Special Event fare on SA Tool", "Test_Sce_Description": "The customer taps on a premium service route/location after previously riding on a Special Event service route (within the transfer window) which results in a fare upgrade.", "Expected_Results": "ATS should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by e-Purse", "Test_Scnario": "Premium Service Route with Transfer where the Premium fare is lower than the Special Event fare on SA Tool", "Test_Sce_Description": "The customer taps on a premium service route/location after previously riding on a Special Event service route (within the transfer window) which results in a free transfer.", "Expected_Results": "ATS should compute the fare and deduct the amount from the Virtual Card E-Purse. This should be communicated back to the SA Tool."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by e-Purse", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer has a Valid Non-Adult Concession on their Farecard", "Test_Sce_Description": "The customer has a Valid Non-Adult concession on their Farecard and chooses to pay by e-Purse.", "Expected_Results": "The SA Tool should successfully deduct the balance from the e-purse and complete the transaction. The SA Tool should display the option to print a customer receipt or return to the main menu."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by Cheque", "Test_Scnario": "Payment by Cheque - Successful Transaction", "Test_Sce_Description": "This scenario tests the successful completion of a transaction when a customer decides to pay with a cheque. The operator proceeds to payment, the SA Tool populates the full payment amount, the operator receives the cheque and stores it, and finally indicates the transaction is complete.", "Expected_Results": "The transaction should be successfully completed, and the SA Tool should display the option to print a customer receipt or return to the main menu."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by Cheque", "Test_Scnario": "Payment by Cheque - Split Payment", "Test_Sce_Description": "This scenario tests the functionality of split payment when a customer decides to pay with a cheque and another form of payment. The operator proceeds to payment, the SA Tool populates the full payment amount, the operator edits the amount for the cheque payment, and finally confirms the sale.", "Expected_Results": "The transaction should be successfully completed with split payment, and the SA Tool should display the option to print a customer receipt or return to the main menu."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by Cheque", "Test_Scnario": "Payment by Cheque - Insufficient Funds", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to pay with a cheque that has insufficient funds. The operator proceeds to payment, the SA Tool populates the full payment amount, the operator receives the cheque and attempts to store it.", "Expected_Results": "The SA Tool should display an error message indicating that the cheque has insufficient funds, and the operator should be prompted to request another form of payment from the customer."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by Cheque", "Test_Scnario": "Split Payment - Successful Transaction", "Test_Sce_Description": "This scenario tests the successful completion of a transaction when a customer decides to pay with several forms of payment. The operator proceeds to payment, the SA Tool populates the full payment amount, the operator edits the amount for each payment method, and finally confirms the sale.", "Expected_Results": "The transaction should be successfully completed with split payment, and the SA Tool should display the option to print a customer receipt or return to the main menu."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by Cheque", "Test_Scnario": "Split Payment - Payment Amount Greater than Total Shopping Cart Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to pay an amount greater than the total shopping cart amount using split payment. The operator proceeds to payment, the SA Tool populates the full payment amount, the operator edits the amount for each payment method.", "Expected_Results": "The SA Tool should display an error notification to the operator indicating that they cannot select a payment amount greater than the total shopping cart amount."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "E-Purse load", "Use_Case_Name": "Payment by Cheque", "Test_Scnario": "Split Refunds - Successful Transaction", "Test_Sce_Description": "This scenario tests the successful completion of a refund transaction when a customer decides to get a refund via several forms of payment. The operator proceeds to refund, the SA Tool populates the full refund amount, the operator edits the amount for each refund method, and finally confirms the refund.", "Expected_Results": "The refund transaction should be successfully completed with split refund, and the SA Tool should display the option to print a customer receipt or return to the main menu."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass within valid time", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a farecard with a valid Limited Period Pass is used within the valid time limit.", "Expected_Results": "The SA Tool should successfully accept the fare payment from the farecard. The transaction should be conducted smoothly without any errors."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass outside valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance.", "Expected_Results": "The SA Tool should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, and deduct the fare successfully."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with an anonymous farecard with an expired period pass and ePurse balance less than the fare amount tries to make a payment.", "Expected_Results": "The SA Tool should detect that the card is Anonymous and the ePurse Balance is less than the fare amount. It should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer\u2019s Farecard is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a blocked farecard tries to make a payment.", "Expected_Results": "The SA Tool should detect that the card is blocked. It should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a Virtual Card on the Deny List tries to make a payment.", "Expected_Results": "The SA Tool should detect that the card is on the Deny List. It should remove the card from the Deny List and set it to blocked. It should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a successful Farecard tap.", "Expected_Results": "The SA Tool should be able to process the remote lists even after the battery goes below the low battery threshold during a successful Farecard tap."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the operator inspects a customer\u2019s farecard and determines that they have not paid a fare.", "Expected_Results": "The SA Tool should record both the fare payment and inspection transactions. It should return to the Tap Card screen and display a toast notification of the corresponding inspection action."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "In this scenario, the farecard has a valid Limited Period Pass product on it but the time at tap is occurring outside of the time limit of the Limited Period Pass Product. However, the farecard has sufficient e-Purse balance to cover the transaction.", "Expected_Results": "ATS detects that the Limited Period Pass is not valid at the current time, computes the value to be deducted from the e-Purse, and deducts the fare. The transaction is successful and the SA Tool application displays a successful transaction message."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "In this scenario, the customer has an expired period pass and the ePurse balance is less than the fare amount. The customer has an anonymous Virtual Card.", "Expected_Results": "The device sends the transaction to ATS for processing. ATS detects the card is Anonymous and the ePurse Balance is less than the fare amount. ATS will return a declined result back to the SA Tool. The SA Tool application will display a declined message to the customer. The transaction is not conducted."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "In this scenario, the customer\u2019s Farecard is blocked.", "Expected_Results": "The device sends the transaction to ATS for processing. ATS detects the card is blocked. ATS will return a declined result back to the SA Tool. The SA Tool application will display a declined message to the customer. The transaction is not conducted."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "In this scenario, the customer\u2019s Virtual Card is on the Deny List.", "Expected_Results": "The device sends the transaction to ATS for processing. ATS detects the card is on the Deny List. ATS will remove the card from the Deny List and set it to blocked. ATS will return a declined result back to the SA Tool. The SA Tool application will display a declined message to the customer. The transaction is not conducted."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "In this scenario, the low battery threshold is high enough that the remote lists can be processed even after the SA Tool battery goes below the low battery threshold during a successful Farecard tap.", "Expected_Results": "If the low battery threshold is reached before Step 5, the application switches to \u201cOut of Service\u201d mode. Else, the customers fare payment is processed as per Step 5. The application then switches to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a valid child concession on their farecard attempts to make a fare payment using a period pass.", "Expected_Results": "The SA Tool should successfully accept the fare payment, display the successful Child Transit Pass fare payment screen, and play the successful fare payment audio tone for Child concession."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made as a result of a failed inspection. The operator inspects a customer\u2019s farecard and determines that they have not paid a fare.", "Expected_Results": "The SA Tool should record both the fare payment and inspection transactions and return to the Tap Card screen. A toast notification should be displayed of the corresponding inspection action."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with an anonymous farecard, an expired period pass, and an ePurse balance less than the fare amount attempts to make a fare payment.", "Expected_Results": "The SA Tool should detect that the card is anonymous and the ePurse balance is less than the fare amount, display a declined message to the customer, and not conduct the transaction. The SA Tool should play the declined audio tone and return to the Tap Card screen after a configurable timeout."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer\u2019s Farecard is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a blocked farecard attempts to make a fare payment.", "Expected_Results": "The SA Tool should detect that the farecard is blocked, display a declined message to the customer, and not conduct the transaction. The SA Tool should play the declined audio tone and return to the Tap Card screen."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario tests the functionality of the online SA Tool when a customer with a virtual card, a valid limited period pass outside of valid time, and sufficient e-Purse balance attempts to make a fare payment.", "Expected_Results": "The ATS should detect that the limited period pass is not valid at the current time, compute the value to be deducted from the e-Purse, and deduct the fare. The SA Tool should display the successful fare payment screen and play the successful fare payment audio tone."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the online SA Tool when a customer with a blocked virtual card attempts to make a fare payment.", "Expected_Results": "The ATS should detect that the virtual card is blocked, return a declined result back to the SA Tool, and not conduct the transaction. The SA Tool should display a declined message to the customer and play the declined audio tone."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario tests the functionality of the online SA Tool when a customer with a virtual card on the deny list attempts to make a fare payment.", "Expected_Results": "The ATS should detect that the virtual card is on the deny list, remove the card from the deny list and set it to blocked, and return a declined result back to the SA Tool. The SA Tool should display a declined message to the customer and play the declined audio tone."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass - Customer has a Valid Child Concession on their Farecard", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the online SA Tool when the battery goes below the low battery threshold during a fare payment.", "Expected_Results": "The SA Tool should continue to process the remote lists even after the battery goes below the low battery threshold during a successful farecard tap."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Validating Fare Payment with Valid Period Pass", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly identifies a valid period pass and accepts the fare payment.", "Expected_Results": "The SA Tool should successfully identify the valid period pass and accept the fare payment."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Validating Fare Payment with Limited Period Pass within Valid Time", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly identifies a valid Limited Period Pass and accepts the fare payment when the current time is within the limits of the product.", "Expected_Results": "The SA Tool should successfully identify the valid Limited Period Pass and accept the fare payment."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Validating Fare Payment with Limited Period Pass outside Valid Time with Sufficient e-Purse Balance", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly identifies a valid Limited Period Pass and deducts the fare from the e-Purse when the current time is outside the limits of the product but the farecard has sufficient e-Purse balance.", "Expected_Results": "The SA Tool should successfully identify the valid Limited Period Pass, compute the fare to be deducted from the e-Purse, and deduct the fare."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Validating Fare Payment with Valid Child Concession", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly identifies a valid Child Concession and accepts the fare payment.", "Expected_Results": "The SA Tool should successfully identify the valid Child Concession and accept the fare payment."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Validating Fare Payment Resulting from Failed Inspection", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly identifies a failed inspection and processes the fare payment.", "Expected_Results": "The SA Tool should successfully identify the failed inspection, process the fare payment, and record both the fare payment and inspection transactions."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Validating Fare Payment with Expired Period Pass and Insufficient e-Purse Balance", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly identifies an expired period pass and insufficient e-Purse balance and declines the transaction.", "Expected_Results": "The SA Tool should successfully identify the expired period pass and insufficient e-Purse balance, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Validating Fare Payment with Blocked Farecard", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly identifies a blocked farecard and declines the transaction.", "Expected_Results": "The SA Tool should successfully identify the blocked farecard, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Validating Fare Payment with Farecard on the Hotlist", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly identifies a farecard on the hotlist, updates the card\u2019s status to blocked, and declines the transaction.", "Expected_Results": "The SA Tool should successfully identify the farecard on the hotlist, update the card\u2019s status to blocked, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Validating Fare Payment when Battery goes below the Low Battery Threshold during Payment", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly switches to \u201cOut of Service\u201d mode when the battery goes below the low battery threshold during a successful Farecard tap.", "Expected_Results": "The SA Tool should successfully switch to \u201cOut of Service\u201d mode when the battery goes below the low battery threshold during a successful Farecard tap."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Validating Fare Payment with Non-Activated Card", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly identifies a non-activated card and displays the \u201cCard Read Error\u201d message.", "Expected_Results": "The SA Tool should successfully identify the non-activated card and display the \u201cCard Read Error\u201d message."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Period pass load", "Use_Case_Name": "Accepting Fare Payment from a Farecard using Period Pass \u2013 Fare Payment Resulting from Failed Inspection", "Test_Scnario": "Validating Fare Payment with Farecard within the Anti-Passback Window", "Test_Sce_Description": "This scenario is to test if the SA Tool correctly identifies a farecard within the Anti-Passback Window and declines the transaction.", "Expected_Results": "The SA Tool should successfully identify the farecard within the Anti-Passback Window, display a declined message, and not conduct the transaction."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Time since Tap-On Exceeds Max Travel Duration", "Test_Scnario": "Verify the device detects tap-off at the same location where tap-on occurred", "Test_Sce_Description": "The cardholder taps-on and taps-off at the same station within the Tap-on anti-passback Window. The device should detect this and provide the appropriate feedback to the cardholder without updating the Farecard.", "Expected_Results": "The device detects the same station tap-on and tap-off, provides appropriate feedback to the cardholder and does not update the Farecard. An error is captured and logged in the SOTI logs."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Time since Tap-On Exceeds Max Travel Duration", "Test_Scnario": "Verify the device blocks a blocked Farecard", "Test_Sce_Description": "The cardholder presents a blocked Farecard to the device. The device should detect that the Farecard is blocked and not confer the right to travel.", "Expected_Results": "The device detects the blocked Farecard, does not confer the right to travel and provides appropriate feedback to the cardholder. An error is captured and logged in the SOTI logs."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Time since Tap-On Exceeds Max Travel Duration", "Test_Scnario": "Verify the device auto-settles Underpayment when time since tap-on exceeds Max Travel Duration", "Test_Sce_Description": "The cardholder taps-on and the time since tap-on exceeds the Max Travel Duration. The device should auto-settle the Underpayment and deduct the value from the Farecard E-Purse.", "Expected_Results": "The device auto-settles the Underpayment, deducts the value from the Farecard E-Purse and opens a new trip."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Time since Tap-On Exceeds Max Travel Duration", "Test_Scnario": "Verify the device blocks all fare payment functionality when multiple NFC media are presented at one time", "Test_Sce_Description": "The cardholder presents multiple NFC media to the card reader at once. The device should block all user functionality and present Anti-Collision HMI to the customer.", "Expected_Results": "The device blocks all user functionality, presents Anti-Collision HMI to the customer and logs an error in the SOTI logs."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Time since Tap-On Exceeds Max Travel Duration", "Test_Scnario": "Verify the device detects a non-activated Farecard", "Test_Sce_Description": "The cardholder taps a non-activated Farecard on the device. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction.", "Expected_Results": "The device detects the non-activated Farecard, provides feedback to the Cardholder of an unsuccessful transaction and logs an error in the SOTI logs."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Time since Tap-On Exceeds Max Travel Duration", "Test_Scnario": "Verify the device handles a card reading error", "Test_Sce_Description": "The cardholder taps a Farecard on the device and a card reading error occurs. The device should capture and log the error.", "Expected_Results": "The device captures and logs the card reading error in the SOTI logs."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Time since Tap-On Exceeds Max Travel Duration", "Test_Scnario": "Verify the device processes a full Fare-by-Zone transaction in case of a default O/D on the Farecard", "Test_Sce_Description": "The cardholder taps a Farecard with a default O/D on the device. The device should process a full Fare-by-Zone transaction and deduct the Full Fare value for the station-to-station trip.", "Expected_Results": "The device processes a full Fare-by-Zone transaction, deducts the Full Fare value for the station-to-station trip and uses PAR as the card identifier."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Time since Tap-On Exceeds Max Travel Duration", "Test_Scnario": "Verify the device overrides the default O/D contained on the Open Payments Media", "Test_Sce_Description": "The cardholder requests the override of a Default Trip by interacting with the device. The device should override the default O/D and process the tap as a regular tap-on.", "Expected_Results": "The device overrides the default O/D and processes the tap as a regular tap-on."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Time since Tap-On Exceeds Max Travel Duration", "Test_Scnario": "Verify the device applies capping discount when the customer is eligible", "Test_Sce_Description": "The customer has met any capping discount criteria and capping has been configured. The device should calculate the capping discount and apply to the fare calculation.", "Expected_Results": "The device calculates the capping discount and applies it to the fare calculation."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Time since Tap-On Exceeds Max Travel Duration", "Test_Scnario": "Verify the device handles the situation when it is offline and not connected to Accenture Ticketing Services", "Test_Sce_Description": "The device is offline and not connected to Accenture Ticketing Services. The customer has met any capping discount criteria and capping has been configured. The device should check the local deny list and store the tap till it goes back online and connects to Accenture Ticketing Services.", "Expected_Results": "The device checks the local deny list, stores the tap till it goes back online and connects to Accenture Ticketing Services. The tap is then rated in ATS."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Time since Tap-On Exceeds Max Travel Duration", "Test_Scnario": "Verify the device handles the situation when an Open Payments Media fails the ODA check", "Test_Sce_Description": "The cardholder presents an Open Payments Media that fails the ODA check. The device should return the appropriate feedback.", "Expected_Results": "The device returns the appropriate feedback, logs an error in the SOTI logs and sends the declined tap to ATS."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Time since Tap-On Exceeds Max Travel Duration", "Test_Scnario": "Verify the device handles the situation when an Open Payments Media fails the Expiry Check", "Test_Sce_Description": "The cardholder presents an Open Payments Media that fails the Expiry Check. The device should return the appropriate feedback.", "Expected_Results": "The device returns the appropriate feedback, logs an error in the SOTI logs and sends the declined tap to ATS."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Scnario": "Testing the functionality of the SA Tool when a non-activated Farecard is tapped", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a non-activated Farecard is tapped. The customer's Farecard is not activated and is not on the action list available on the device. The device should detect that the Farecard is not activated and display a declined message to the customer.", "Expected_Results": "The SA Tool application should display a declined message to the customer. The transaction should not be conducted. The SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Scnario": "Testing the functionality of the SA Tool when a Farecard is tapped during a time period that contains an associated Temporal Class Supplement", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Farecard is tapped during a time period that contains an associated Temporal Class Supplement. The device should contain an HMI reflecting the Temporal Class Supplement and process the Tap-On Transaction as a normal tap-on.", "Expected_Results": "The device should contain an HMI reflecting the Temporal Class Supplement and process the Tap-On Transaction as a normal tap-on."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Scnario": "Testing the functionality of the SA Tool when a Farecard with Autoload Enabled is tapped and the Fare amount crosses the Auto-load threshold", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Farecard with Autoload Enabled is tapped and the Fare amount crosses the Auto-load threshold. The device should detect that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, which triggers the Autoload amount to be added to the Farecard.", "Expected_Results": "The device should detect that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, which triggers the Autoload amount to be added to the Farecard. The device should deduct the Fare from the Farecard E-Purse balance."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Scnario": "Testing the functionality of the SA Tool when a Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Farecard does not contain a Default O/D and the Customer Overrides the Default Trip prior to tapping-on. The device should process the tap as a result tap-on.", "Expected_Results": "The device should process the tap as a result tap-on. The right to travel should be conferred to the Cardholder by updating the Farecard. The device should provide the appropriate feedback to the Cardholder of a successful transaction in addition to notifying the customer that the Default Trip was overridden."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Scnario": "Testing the functionality of the SA Tool when a Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard and requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard and requests Audio Messages. The operator should enable audio mode and the SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message.", "Expected_Results": "The operator should enable audio mode. The SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message. The corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Farecard Sales", "Sub_Flow_Name": "Service Guarantee", "Use_Case_Name": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Scnario": "Testing the functionality of the SA Tool when a Farecard fails validation checks at Tap-On", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a Farecard fails validation checks at Tap-On. The device should detect the failure and display an error message.", "Expected_Results": "The device should detect the failure and display an error message. The transaction should not be conducted."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Cancellation of Transaction with Split Payment", "Test_Scnario": "Cancellation of Transaction with Split Payment - Integrated PIN pad", "Test_Sce_Description": "This scenario tests the cancellation of a transaction where split payment has begun and the customer has paid with at least one mean of payment that is credit or debit and the PIN pad is integrated.", "Expected_Results": "The SA Tool should inform the operator that the payment means must be reversed and prompt the operator to confirm the cancellation. Upon confirmation, the SA Tool should automatically reverse non-credit and/or non-debit means of payment. The operator should then choose the payment method and prompt the customer to interact with the PIN pad. Upon successful Moneris processing, the funds should be returned to the customer in full and a customer receipt with Moneris information should print. The operator should then be returned to the SA Tool home screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Cancellation of Transaction with Split Payment", "Test_Scnario": "Cancellation of Transaction with Split Payment - Non-integrated PIN pad", "Test_Sce_Description": "This scenario tests the cancellation of a transaction where split payment has begun and the customer has paid with at least one mean of payment that is credit or debit and the PIN pad is not integrated.", "Expected_Results": "The SA Tool should inform the operator that the payment means must be reversed and prompt the operator to confirm the cancellation. Upon confirmation, the SA Tool should automatically reverse non-credit and/or non-debit means of payment. The customer should then advise the operator which credit/debit type they would like their funds reversed to. The operator should input the amount into the PIN pad and pass it to the customer to interact with. Upon successful Moneris processing, the operator should select the credit/debit payment type on the SA Tool application to complete the cancellation of the transaction. The operator should then be returned to the Home screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Cancellation of Transaction with Split Payment", "Test_Scnario": "Cancellation of Transaction with Split Payment - Non-credit or debit payment", "Test_Sce_Description": "This scenario tests the cancellation of a transaction where split payment has begun and the customer has paid with at least one mean of payment and none of them are credit or debit.", "Expected_Results": "The SA Tool should inform the operator that the payment means must be reversed and prompt the operator to confirm the cancellation. Upon confirmation, the SA Tool should automatically reverse all the payment means and the operator should return the funds to the customer. The SA Tool should then return to the home screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Cancellation of Transaction with Split Payment", "Test_Scnario": "Cancellation of a refund/reversal transaction", "Test_Sce_Description": "This scenario tests the cancellation of a refund/reversal transaction.", "Expected_Results": "The operator should be able to cancel the transaction at any point in the Main Use Case. For all canceled refund/reversal transactions that involve Farecard products the card should be written to upon successfully returning payment (if applicable)."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Cancellation of Transaction with Split Payment", "Test_Scnario": "Quantity added to cart exceeds allowable maximum", "Test_Sce_Description": "This scenario tests the case where the quantity of product added to cart exceeds product maximum.", "Expected_Results": "The SA Tool should not allow the operator to add more than the maximum allowable quantity to the shopping cart. The operator should process the customer\u2019s request in multiple transactions as per the Main Use Case."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Cancellation of Transaction with Split Payment", "Test_Scnario": "No eligible products for refund or reversal", "Test_Sce_Description": "This scenario tests the case where no eligible products for refund or reversal are detected.", "Expected_Results": "The SA Tool should display the relevant error message and the operator must acknowledge the message. The SA Tool should then return to the main menu."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Cancellation of Transaction with Split Payment", "Test_Scnario": "Failure to connect to internet", "Test_Sce_Description": "This scenario tests the case where there is a failure to connect to the internet while the user is performing a flow which requires internet connection.", "Expected_Results": "The SA Tool should time out and display the relevant error message with options to try again or cancel. If successful connection is restored, the main use case should resume. If the action is cancelled, the SA Tool should return to the previous screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Quantity added to cart exceeds allowable maximum", "Test_Scnario": "ATS failure to load products", "Test_Sce_Description": "This scenario tests the exception flow when ATS fails to load products onto a customer\u2019s account after checkout. The operator has completed the SA Tool shopping flow and the customer has paid for the products.", "Expected_Results": "The SA Tool should inform the operator that the products purchased were not added to the user\u2019s account. The Operator should be able to attempt the checkout again or provide the customer a refund if the customer paid with cash."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Quantity added to cart exceeds allowable maximum", "Test_Scnario": "SVC / VC Shopping Cart", "Test_Sce_Description": "This scenario tests the exception flow when the device has either SVC or VC products in the shopping cart but not both at the same time. The customer taps their media (VC or SVC) on the reader.", "Expected_Results": "If the cart has ineligible products, the Operator should receive an error providing them the option to clear the cart. If the customer tapped a VC, clearing cart should remove SVC products. If the customer tapped an SVC, clearing cart should remove VC products."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Quantity added to cart exceeds allowable maximum", "Test_Scnario": "ECP is disabled and Customer\u2019s Artemis device is locked or asleep", "Test_Sce_Description": "This scenario tests the exception flow when the user\u2019s device is locked or asleep and ECP is disabled for the users Virtual Card. The user presents their device to the reader.", "Expected_Results": "Virtual card media should not be detected and the screen should remain the same. Artemis device should prompt user to provide authentication. Customer should be able to provide authentication for their Virtual Card media on their Artemis device."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Quantity added to cart exceeds allowable maximum", "Test_Scnario": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is disabled", "Test_Sce_Description": "This scenario tests the exception flow when the user\u2019s mobile device is in Power Reserve mode and ECP is disabled on the mobile device for the users Virtual Card. The user presents their device to the reader.", "Expected_Results": "Virtual card media should not be detected and the screen should remain the same. Artemis device should prompt user to charge their device."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Quantity added to cart exceeds allowable maximum", "Test_Scnario": "Required fields not filled out or not valid", "Test_Sce_Description": "This scenario tests the exception flow when the operator attempts to proceed to payment without entering required information or information is entered but does not meet validation rules.", "Expected_Results": "The SA Tool application should display screen validation rules to prompt the operator to input the correct information. The operator should be able to enter all the required information and take all required actions."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Quantity added to cart exceeds allowable maximum", "Test_Scnario": "Purchase multiple items", "Test_Sce_Description": "This scenario tests the alternate flow when the customer indicates that they would like to conduct other purchases in the same transaction. The operator returns to the SA Tool application Sales screen and selects the additional product(s) the customer would like to purchase.", "Expected_Results": "The SA Tool application should add the additional products to the shopping cart. The operator should be able to continue through Main Use Case as normal."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Quantity added to cart exceeds allowable maximum", "Test_Scnario": "Refund multiple items", "Test_Sce_Description": "This scenario tests the alternate flow when the customer requests to refund multiple products where refund criteria have been met. The operator must complete one transaction before starting the next.", "Expected_Results": "The operator should be able to confirm the reversal and a transaction successful screen should be displayed. If it is a Farecard product refund and the Farecard had been placed in the NFC reader in step #1, the SA Tool should detect and scan the card automatically. The SA Tool should update the Farecard balance, remove the products and update the transaction history as applicable."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "No eligible products for refund or reversal", "Test_Scnario": "Cancellation of transaction with split payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a transaction with split payment is cancelled. The customer has been refunded with at least one mean of payment and that mean of payment is credit or debit.", "Expected_Results": "The SA Tool should inform the operator that in order to cancel the transaction, the payment means must be reversed. Upon operator's confirmation, the SA Tool should reverse non-credit and/or non-debit means of payment automatically. The operator should be prompted to choose mean of payment and verbally prompt the customer to interact with the PIN pad in order to perform a refund void. Upon successful Moneris processing, the customer should have repaid for the refund amount and a customer receipt with Moneris information should print."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "No eligible products for refund or reversal", "Test_Scnario": "Cancellation of transaction with non-credit or non-debit refund", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a transaction with split payment is cancelled. The customer has been refunded with at least one mean of payment and none of them are credit or debit.", "Expected_Results": "The SA Tool should inform the operator that in order to cancel the transaction, the payment means must be reversed. Upon operator's confirmation, the SA Tool should reverse the payment means automatically and prompt the operator to begin a refund void. A customer and merchant receipt should print."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "No eligible products for refund or reversal", "Test_Scnario": "Adding quantity exceeding maximum limit to cart", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the operator tries to add more than the maximum allowable quantity of a product to the shopping cart.", "Expected_Results": "The SA Tool should not allow the operator to add more than the maximum allowable quantity to the shopping cart. The operator should be prompted to process the customer\u2019s request in multiple transactions."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "No eligible products for refund or reversal", "Test_Scnario": "Refund or reversal with no eligible products", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when there are no eligible products for refund or reversal.", "Expected_Results": "The SA Tool should display the relevant error message and the operator must acknowledge the message. The SA Tool should return to the main menu."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "No eligible products for refund or reversal", "Test_Scnario": "Refund or reversal with eligible products not requested by customer", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when there are products available for refund or reversal other than the product request by the customer.", "Expected_Results": "The Operator should inform the customer their product is not eligible for reversal or refund and return to the main menu."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "No eligible products for refund or reversal", "Test_Scnario": "Failure to connect to internet", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when there is no internet connection and the operator is performing an action that requires connection to the Internet.", "Expected_Results": "The SA Tool should time out and display the relevant error message with options to try again or cancel. If successful connection is restored, the main use case should resume. If the action is cancelled, the tool should return to the previous screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "No eligible products for refund or reversal", "Test_Scnario": "Proceeding without filling out required fields", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the operator attempts to proceed to the next screen or proceed to payment without entering required information.", "Expected_Results": "The SA Tool should check whether all the required fields have valid information. If not, the SA Tool application should display screen validation rules to prompt the operator to input the correct information."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "No eligible products for refund or reversal", "Test_Scnario": "Purchasing multiple items", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer indicates that they would like to conduct other purchases in the same transaction.", "Expected_Results": "The operator should return to the SA Tool application Sales screen and select the additional product(s) the customer would like to purchase. The SA Tool application should add the additional products to the shopping cart."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "No eligible products for refund or reversal", "Test_Scnario": "Refunding multiple items", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer requests to refund multiple products where refund criteria have been met.", "Expected_Results": "The operator should complete one transaction before starting the next. The operator should confirm the reversal and a transaction successful screen should be displayed. If it is a Farecard product refund and the Farecard had been placed in the NFC reader in step #1, the SA Tool should detect and scan the card automatically. The SA Tool should update the Farecard balance, remove the products and update the transaction history as applicable."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Products are eligible for refund or reversal, but are not what the customer requested", "Test_Scnario": "Split payment refund/reversal with credit or debit payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a split payment refund/reversal has already begun and the customer has been refunded with at least 1 mean of payment that is credit or debit. The operator selects to cancel the transaction and the SA Tool should inform the operator that in order to cancel the transaction, the payment means must be reversed.", "Expected_Results": "The SA Tool should successfully reverse non-credit and/or non-debit means of payment automatically and prompt the operator to choose the mean of payment and verbally prompt the customer to interact with the PIN pad in order to perform a refund void. Upon successful Moneris processing, the customer should be repaid for the refund amount."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Products are eligible for refund or reversal, but are not what the customer requested", "Test_Scnario": "Split payment refund/reversal without credit or debit payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a split payment refund/reversal has already begun and the customer has been refunded with at least 1 mean of payment and none of them are credit or debit. The operator selects to cancel the transaction and the SA Tool should inform the operator that in order to cancel the transaction, the payment means must be reversed.", "Expected_Results": "The SA Tool should successfully reverse the payment means automatically and prompt the operator to begin a refund void. A customer and merchant receipt should print and the SA Tool should return to the home screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Products are eligible for refund or reversal, but are not what the customer requested", "Test_Scnario": "Adding quantity exceeding maximum limit", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the operator tries to add more than the maximum allowable quantity of a product to the shopping cart. The operator should be informed that they must process the customer's request in multiple transactions.", "Expected_Results": "The SA Tool should not allow the operator to add more than the maximum allowable quantity to the shopping cart. The operator should be able to process the customer\u2019s request in multiple transactions."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Products are eligible for refund or reversal, but are not what the customer requested", "Test_Scnario": "Refund or reversal eligibility criteria not met", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when any of the refund or reversal eligibility criteria specified in the Ticketing Use Cases [R5] is not met. The SA Tool should display the relevant error message and the operator must acknowledge the message.", "Expected_Results": "The SA Tool should display the relevant error message and the operator should be able to acknowledge the message. The SA Tool should return to the main menu."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Products are eligible for refund or reversal, but are not what the customer requested", "Test_Scnario": "Eligible products for refund or reversal not requested by customer", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when there are products available for refund or reversal other than the product requested by the customer. The operator should inform the customer their product is not eligible for reversal or refund.", "Expected_Results": "The operator should be able to inform the customer their product is not eligible for reversal or refund and return to the main menu."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Products are eligible for refund or reversal, but are not what the customer requested", "Test_Scnario": "Internet connection failure", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when there is no internet connection and the operator is performing an action that requires connection to the Internet.", "Expected_Results": "The SA Tool should time out and display the relevant error message with options to try again or cancel. If successful connection is restored, the operator should be able to resume the main use case. If the action is cancelled, the operator should be able to return to the previous screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Products are eligible for refund or reversal, but are not what the customer requested", "Test_Scnario": "Cancellation of refund/reversal transaction", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the operator would like to cancel the transaction at any point in the Main Use Case. The SA Tool should ask the operator if they are certain they want to cancel the transaction.", "Expected_Results": "If the operator selects yes, the transaction should be cancelled and the SA Tool should return to the main screen. If the operator selects no, the operator should be able to proceed through the Main Use Case as usual."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "Failure to connect to internet during password change", "Test_Sce_Description": "The user is trying to change the password which requires an internet connection. During this process, the internet connection is lost.", "Expected_Results": "The SA Tool should time out and display the relevant error message with options to try again or cancel. If the internet connection is restored, the main use case should resume. If the action is cancelled, it should return to the previous screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "Failure to connect to internet during accessing SP Remote", "Test_Sce_Description": "The user is trying to access SP Remote which requires an internet connection. During this process, the internet connection is lost.", "Expected_Results": "The SA Tool should time out and display the relevant error message with options to try again or cancel. If the internet connection is restored, the main use case should resume. If the action is cancelled, it should return to the previous screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "PIN pad transmits DECLINED message from Moneris during credit card payment", "Test_Sce_Description": "The operator is performing a credit card payment transaction and communication with Moneris fails.", "Expected_Results": "The SA Tool should display the relevant error message and return to the payment means screen. The receipt printer should print a failure of payment means."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "PIN pad transmits DECLINED message from Moneris during debit card payment", "Test_Sce_Description": "The operator is performing a debit card payment transaction and communication with Moneris fails.", "Expected_Results": "The SA Tool should display the relevant error message and return to the payment means screen. The receipt printer should print a failure of payment means."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "Failure to load Farecard after payment has been processed", "Test_Sce_Description": "The operator is performing a Farecard transaction. The payment has been processed and successful, but the write to the card is not successful.", "Expected_Results": "The SA Tool should display the relevant error message and the operator can choose to try again or cancel and refund the payment."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "Failure to connect to receipt printer during a transaction which changes the e-Purse", "Test_Sce_Description": "The operator is performing a transaction which changes the e-Purse and connection with the receipt printer fails.", "Expected_Results": "The SA Tool should display the relevant error message and the operator can choose to proceed with the flow without printing capabilities, or exit the flow."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "Failure to connect to Pin Pad during a transaction that requires the use of Pin Pad", "Test_Sce_Description": "The operator is performing a transaction that requires the use of Pin Pad to receive payment from the customer and connection with the Pin Pad fails.", "Expected_Results": "The SA Tool should display the relevant error message and the operator can choose to wait for the Pin Pad to connect in the background or exit the flow."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "Open Payments Media fails ODA check", "Test_Sce_Description": "An Open Payments Media fails the ODA check.", "Expected_Results": "The device should return the appropriate feedback and the Declined \u2013 Failed ODA Check Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "Open Payments Media Fails Expiry Check", "Test_Sce_Description": "An Open Payments Media fails the Expiry Check.", "Expected_Results": "The device should return the appropriate feedback and the Declined \u2013 Card Expired Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "Open Payments Media has already tapped-on using an Online Device within Anti-Passback Window", "Test_Sce_Description": "The cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window, whereby the initial device and secondary device(s) tapped on were all online.", "Expected_Results": "The device should return a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "Open Payments Media has already tapped-on using an Offline Device", "Test_Sce_Description": "The cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window whereby the initial device tapped, and secondary device(s) is the same device and is offline.", "Expected_Results": "The device should accept the tap and check the latent transaction processor on the same device for a previous tap within the anti-passback window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "e-Purse payment reversal", "Use_Case_Name": "Failure to connect to internet", "Test_Scnario": "Open Payments Media is on the ATS deny list and the SA Tool is online", "Test_Sce_Description": "The Open Payments Media is on the deny list and the SA Tool is online.", "Expected_Results": "The device should return the appropriate feedback and the Declined \u2013 Card on Deny List Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "Period pass cross selling is enabled", "Test_Sce_Description": "Verify that the period pass cross selling function is enabled in the EOD of the TA. This should allow the TA to sell the period passes of other TAs and also view the period passes of other TAs.", "Expected_Results": "The TA should be able to sell and view the period passes of other TAs for which there is a business agreement."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "Change to Card Query Flow", "Test_Sce_Description": "Verify that the Card Query Flow shows the period passes of other TAs in addition to their own, if mutual agreement to sell has been implemented.", "Expected_Results": "The Card Query Flow should show the period passes of other TAs in addition to their own, if mutual agreement to sell has been implemented."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "Change to Load Period Pass Flow", "Test_Sce_Description": "Verify that the Load Period Pass Flow displays the current TAs period passes as well as the period passes of other TAs, if mutual agreement to sell has been implemented. The Operator should have the option to sell that Period Pass.", "Expected_Results": "The Load Period Pass Flow should display the current TAs period passes as well as the period passes of other TAs, if mutual agreement to sell has been implemented. The Operator should have the option to sell that Period Pass."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "Change to New Farecard Flow", "Test_Sce_Description": "Verify that the New Farecard Flow displays the current TAs period passes as well as the period passes of other TAs, if mutual agreement to sell has been implemented. The Operator should have the option to sell that Period Pass.", "Expected_Results": "The New Farecard Flow should display the current TAs period passes as well as the period passes of other TAs, if mutual agreement to sell has been implemented. The Operator should have the option to sell that Period Pass."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "Change to Refund Period Pass Flow", "Test_Sce_Description": "Verify that the Refund Period Pass Flow displays the current TAs period passes as well as the period passes of other TAs, if mutual agreement to sell has been implemented. The Operator should have the option to refund that Period Pass.", "Expected_Results": "The Refund Period Pass Flow should display the current TAs period passes as well as the period passes of other TAs, if mutual agreement to sell has been implemented. The Operator should have the option to refund that Period Pass."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "Refund Maximum Amount Reached", "Test_Sce_Description": "Verify that the SA Tool application checks to see if the amount input by the operator is greater than the maximum refund amount. If yes, the SA Tool application should prompt the operator with an error.", "Expected_Results": "The SA Tool application should check to see if the amount input by the operator is greater than the maximum refund amount. If yes, the SA Tool application should prompt the operator with an error."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "ECP is enabled and users Artemis device is locked or asleep", "Test_Sce_Description": "Verify that the ECP is enabled for the users Virtual Card when the customer\u2019s device is locked or asleep.", "Expected_Results": "The ECP should be enabled for the users Virtual Card when the customer\u2019s device is locked or asleep."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Sce_Description": "Verify that the ECP is enabled for the users Virtual Card when the customer\u2019s device is unlocked or awake.", "Expected_Results": "The ECP should be enabled for the users Virtual Card when the customer\u2019s device is unlocked or awake."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Sce_Description": "Verify that the ECP is enabled on the Artemis device for the users Virtual Card when the customer\u2019s device is in Power Reserve mode.", "Expected_Results": "The ECP should be enabled on the Artemis device for the users Virtual Card when the customer\u2019s device is in Power Reserve mode."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "Using an Artemis wearable device", "Test_Sce_Description": "Verify that the Virtual Card media is setup on the users artemis wearable device and ECP is enabled or user has provided authentication.", "Expected_Results": "The Virtual Card media should be setup on the users artemis wearable device and ECP should be enabled or user has provided authentication."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Period pass cross selling", "Test_Scnario": "ECP is disabled and users Artemis device is unlocked or awake", "Test_Sce_Description": "Verify that the ECP is disabled for the users Virtual Card when the user\u2019s device is unlocked or awake.", "Expected_Results": "The ECP should be disabled for the users Virtual Card when the user\u2019s device is unlocked or awake."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Refund Maximum Amount Reached", "Test_Scnario": "Refund with multiple forms of payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer requests a refund via multiple forms of payment. The operator inputs the refund amounts for each payment method and processes the transaction.", "Expected_Results": "The SA Tool should correctly process the refund for each payment method and print a receipt showing the total refund amount."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Refund Maximum Amount Reached", "Test_Scnario": "Refund with zero dollar transactions", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer requests a refund for a zero dollar transaction. The operator should only be able to process the refund in cash.", "Expected_Results": "The SA Tool should only allow the operator to process the refund in cash and print a receipt showing the total refund amount."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Refund Maximum Amount Reached", "Test_Scnario": "Refund with debit or credit card payment greater than total shopping cart amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the operator selects a debit or credit card payment amount greater than the total shopping cart amount.", "Expected_Results": "The SA Tool should provide an error notification to the operator and not allow the transaction to proceed."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Refund Maximum Amount Reached", "Test_Scnario": "Refund with Farecard on the Action, Load Value, or Hotlist", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Farecard is on the Action, Load Value, or Hotlist. The operator should be able to process the refund as per the Main Use Case.", "Expected_Results": "The SA Tool should detect that the Farecard is on the Action, Load Value, or Hotlist, update the Farecard accordingly, and allow the operator to process the refund."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Refund Maximum Amount Reached", "Test_Scnario": "Refund with mismatched Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Farecard tapped during the write tap does not match the Farecard tapped during the identification tap.", "Expected_Results": "The SA Tool should detect the mismatch, display an error message, and prompt the operator to tap the correct card in order to proceed."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Refund Maximum Amount Reached", "Test_Scnario": "Refund with quantity exceeding allowable maximum", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the quantity of product added to the cart exceeds the product maximum.", "Expected_Results": "The SA Tool should not allow the operator to add more than the maximum allowable quantity to the shopping cart and the operator must process the customer\u2019s request in multiple transactions."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Refund Maximum Amount Reached", "Test_Scnario": "Refund with no eligible products for refund or reversal", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when no eligible products for refund or reversal are detected.", "Expected_Results": "The SA Tool should display the relevant error message and the operator must acknowledge the message and return to the main menu."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Refund Maximum Amount Reached", "Test_Scnario": "Refund with failure to connect to internet", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when there is no internet connection and the operator is performing an action that requires connection to the Internet.", "Expected_Results": "The SA Tool should time out, display the relevant error message, and provide options to try again or cancel."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is locked or asleep", "Test_Scnario": "ECP is enabled and users Artemis device is locked or asleep", "Test_Sce_Description": "This scenario tests the functionality of the system when ECP is enabled and the user's Artemis device is locked or asleep. The system should be able to handle this situation and proceed as in the Main Use Case.", "Expected_Results": "The system should be able to handle the situation and proceed as in the Main Use Case without any errors or issues."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is locked or asleep", "Test_Scnario": "Failure to read Farecard", "Test_Sce_Description": "This scenario tests the system's ability to handle situations where it fails to read the Farecard correctly. The system should be able to display an error message and prompt the customer to tap their Farecard again.", "Expected_Results": "The system should be able to handle the situation and prompt the customer to tap their Farecard again without any errors or issues."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is locked or asleep", "Test_Scnario": "Expired Farecard", "Test_Sce_Description": "This scenario tests the system's ability to handle situations where the Farecard is expired. The system should be able to detect that the Farecard is expired and display the Farecard query screen indicating that the Farecard has expired.", "Expected_Results": "The system should be able to handle the situation and display the Farecard query screen indicating that the Farecard has expired without any errors or issues."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is locked or asleep", "Test_Scnario": "Blocked/Hotlisted Farecard", "Test_Sce_Description": "This scenario tests the system's ability to handle situations where the Farecard is blocked. The system should be able to detect that the Farecard is blocked and display the Farecard query screen indicating that the Farecard has been blocked.", "Expected_Results": "The system should be able to handle the situation and display the Farecard query screen indicating that the Farecard has been blocked without any errors or issues."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is locked or asleep", "Test_Scnario": "Cancel a purchase transaction", "Test_Sce_Description": "This scenario tests the system's ability to handle situations where the operator would like to cancel the transaction at any point in the Main Use Case. The system should be able to handle this situation and return to the SA Tool application home screen.", "Expected_Results": "The system should be able to handle the situation and return to the SA Tool application home screen without any errors or issues."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is locked or asleep", "Test_Scnario": "Period pass cross selling is enabled", "Test_Sce_Description": "This scenario tests the system's ability to handle situations where the period pass cross selling function is enabled in the EOD. The system should be able to handle this situation and proceed as in the Main Use Case.", "Expected_Results": "The system should be able to handle the situation and proceed as in the Main Use Case without any errors or issues."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is locked or asleep", "Test_Scnario": "Refund Maximum Amount Reached", "Test_Sce_Description": "This scenario tests the system's ability to handle situations where the amount to be refunded to a customer exceeds the maximum refund amount. The system should be able to handle this situation and prompt the operator with an error.", "Expected_Results": "The system should be able to handle the situation and prompt the operator with an error without any errors or issues."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is locked or asleep", "Test_Scnario": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Sce_Description": "This scenario tests the functionality of the system when ECP is enabled and the user's Artemis device is unlocked or awake. The system should be able to handle this situation and proceed as in the Main Use Case.", "Expected_Results": "The system should be able to handle the situation and proceed as in the Main Use Case without any errors or issues."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is locked or asleep", "Test_Scnario": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Sce_Description": "This scenario tests the functionality of the system when the customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled. The system should be able to handle this situation and proceed as in the Main Use Case.", "Expected_Results": "The system should be able to handle the situation and proceed as in the Main Use Case without any errors or issues."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is locked or asleep", "Test_Scnario": "Using an Artemis wearable device", "Test_Sce_Description": "This scenario tests the functionality of the system when the customer is using a Virtual Card on their Artemis wearable device. The system should be able to handle this situation and proceed as in the Main Use Case.", "Expected_Results": "The system should be able to handle the situation and proceed as in the Main Use Case without any errors or issues."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Scnario": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Sce_Description": "This scenario tests the functionality of the system when ECP is enabled and the user's Artemis device is unlocked or awake. The system should be able to detect the status of the device and perform the necessary actions.", "Expected_Results": "The system should successfully detect the status of the device and perform the necessary actions without any errors."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Scnario": "Failure to read Farecard", "Test_Sce_Description": "This scenario tests the system's ability to handle situations where it fails to read the Farecard correctly. The system should be able to detect the error and prompt the user to tap their Farecard again.", "Expected_Results": "The system should successfully detect the error and prompt the user to tap their Farecard again without any errors."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Scnario": "Expired Farecard", "Test_Sce_Description": "This scenario tests the system's ability to handle situations where the Farecard is expired. The system should be able to detect the expiry and display the Farecard query screen indicating that the Farecard has expired.", "Expected_Results": "The system should successfully detect the expiry and display the Farecard query screen indicating that the Farecard has expired without any errors."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Scnario": "Blocked/Hotlisted Farecard", "Test_Sce_Description": "This scenario tests the system's ability to handle situations where the Farecard is blocked. The system should be able to detect the block and display the Farecard query screen indicating that the Farecard has been blocked.", "Expected_Results": "The system should successfully detect the block and display the Farecard query screen indicating that the Farecard has been blocked without any errors."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Scnario": "Cancel a purchase transaction", "Test_Sce_Description": "This scenario tests the system's ability to handle situations where the operator would like to cancel the transaction at any point in the Main Use Case. The system should be able to cancel the transaction and return to the SA Tool application home screen.", "Expected_Results": "The system should successfully cancel the transaction and return to the SA Tool application home screen without any errors."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Scnario": "Period pass cross selling is enabled", "Test_Sce_Description": "This scenario tests the system's ability to handle situations where the period pass cross selling function is enabled. The system should be able to display the current TAs period passes as well as the period passes of other TAs.", "Expected_Results": "The system should successfully display the current TAs period passes as well as the period passes of other TAs without any errors."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Scnario": "Refund Maximum Amount Reached", "Test_Sce_Description": "This scenario tests the system's ability to handle situations where the amount to be refunded to a customer exceeds the maximum refund amount. The system should be able to detect the error and prompt the operator to edit the refund amount.", "Expected_Results": "The system should successfully detect the error and prompt the operator to edit the refund amount without any errors."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Scnario": "ECP is enabled and users Artemis device is locked or asleep", "Test_Sce_Description": "This scenario tests the functionality of the system when ECP is enabled and the user's Artemis device is locked or asleep. The system should be able to detect the status of the device and perform the necessary actions.", "Expected_Results": "The system should successfully detect the status of the device and perform the necessary actions without any errors."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Scnario": "Using an Artemis wearable device", "Test_Sce_Description": "This scenario tests the functionality of the system when the user is using a Virtual Card on their Artemis wearable device. The system should be able to detect the device and perform the necessary actions.", "Expected_Results": "The system should successfully detect the device and perform the necessary actions without any errors."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is enabled and users Artemis device is unlocked or awake", "Test_Scnario": "ECP is disabled and users Artemis device is unlocked or awake", "Test_Sce_Description": "This scenario tests the functionality of the system when ECP is disabled and the user's Artemis device is unlocked or awake. The system should be able to detect the status of the device and perform the necessary actions.", "Expected_Results": "The system should successfully detect the status of the device and perform the necessary actions without any errors."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Scnario": "Testing the functionality of Farecard reading", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when it fails to read the Farecard correctly. The application should display a message notifying Card read error and prompt the customer to tap their Farecard again.", "Expected_Results": "The application should display a message notifying Card read error and prompt the customer to tap their Farecard again. If the reading is successful, the application should resume the Main Use Case. If unsuccessful, the operator should have the option to exit the scenario or look up the Farecard number using the SP Remote Web \u2013 Farecard Lookup."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Scnario": "Testing the functionality of expired Farecard", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when it detects that the Farecard is expired. The application should display the Farecard query screen indicating that the Farecard has expired.", "Expected_Results": "The application should display the Farecard query screen indicating that the Farecard has expired. The operator should only be able to print the card query and not be able to take any further actions on the Farecard. The Operator should be able to clear the Farecard information and return to the SA Tool application home screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Scnario": "Testing the functionality of blocked Farecard", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when it detects that the Farecard is blocked. The application should display the Farecard query screen indicating that the Farecard has been blocked.", "Expected_Results": "The application should display the Farecard query screen indicating that the Farecard has been blocked. The operator should only be able to print the card query and not be able to take any further actions on the Farecard. The operator should have the discretion to either begin the Use Case: Unblock a Blocked Farecard or inform the customer to contact CLIENT Customer Service."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Scnario": "Testing the functionality of purchase transaction cancellation", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the operator would like to cancel the transaction at any point in the Main Use Case.", "Expected_Results": "The operator should be able to cancel the transaction at any time and return to the SA Tool application home screen. The SA Tool should ask the operator if they are certain they want to cancel the transaction. If the operator selects yes, the transaction should be cancelled and the SA Tool should return to the main screen. If the operator selects no, the application should proceed through the Main Use Case as usual."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Scnario": "Testing the functionality of period pass cross selling", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the period pass cross selling function is enabled in the EOD. The application should allow the TA to sell the period passes of other TAs and also view the period passes of other TAs.", "Expected_Results": "The application should allow the TA to sell the period passes of other TAs and also view the period passes of other TAs. The application should display the current TAs period passes as well as the period passes of other TAs in (if mutual agreement to sell has been implemented). The Operator should have the option to sell that Period Pass."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Scnario": "Testing the functionality of refund maximum amount reached", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the amount to be refunded to a customer exceeds the maximum refund amount. The application should check to see if the amount input by the operator is greater than the maximum refund amount.", "Expected_Results": "The application should prompt the operator with an error if the amount input by the operator is greater than the maximum refund amount. The application should not proceed to the payment screen and should display the previous page allowing the operator to edit the refund amount."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Scnario": "Testing the functionality of ECP enabled and Artemis device locked or asleep", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the customer\u2019s Artemis device has ECP enabled and the device is locked or asleep.", "Expected_Results": "The application should proceed as in the Main Use Case."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Scnario": "Testing the functionality of ECP enabled and Artemis device unlocked or awake", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the customer\u2019s Artemis device has ECP enabled and the device is unlocked or awake.", "Expected_Results": "The application should proceed as in the Main Use Case."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Scnario": "Testing the functionality of Artemis device in Power Reserve mode and ECP enabled", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled on the Artemis device for the users Virtual Card.", "Expected_Results": "The application should proceed as in the Main Use Case."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Customer\u2019s Artemis device is in Power Reserve mode and ECP is enabled", "Test_Scnario": "Testing the functionality of using an Artemis wearable device", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the customer is using Virtual Card on their Artemis wearable device.", "Expected_Results": "The application should proceed as in the Main Use Case."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Using an Artemis wearable device", "Test_Scnario": "Testing the functionality of Farecard reading", "Test_Sce_Description": "This test scenario is designed to verify the functionality of the Farecard reading process. The SA Tool application should be able to detect the Farecard and read it correctly. If the Farecard is not read correctly, the application should display a 'Card read error' message and prompt the customer to tap their Farecard again.", "Expected_Results": "The SA Tool application successfully reads the Farecard. If the Farecard is not read correctly, the application displays a 'Card read error' message and prompts the customer to tap their Farecard again."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Using an Artemis wearable device", "Test_Scnario": "Testing the functionality of expired Farecard detection", "Test_Sce_Description": "This test scenario is designed to verify the functionality of the expired Farecard detection process. The SA Tool application should be able to detect if the Farecard is expired and display the Farecard query screen indicating that the Farecard has expired.", "Expected_Results": "The SA Tool application successfully detects if the Farecard is expired and displays the Farecard query screen indicating that the Farecard has expired."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Using an Artemis wearable device", "Test_Scnario": "Testing the functionality of blocked Farecard detection", "Test_Sce_Description": "This test scenario is designed to verify the functionality of the blocked Farecard detection process. The SA Tool application should be able to detect if the Farecard is blocked and display the Farecard query screen indicating that the Farecard has been blocked.", "Expected_Results": "The SA Tool application successfully detects if the Farecard is blocked and displays the Farecard query screen indicating that the Farecard has been blocked."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Using an Artemis wearable device", "Test_Scnario": "Testing the functionality of purchase transaction cancellation", "Test_Sce_Description": "This test scenario is designed to verify the functionality of the purchase transaction cancellation process. The operator should be able to cancel the transaction at any point and return to the SA Tool application home screen.", "Expected_Results": "The operator successfully cancels the transaction at any point and returns to the SA Tool application home screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Using an Artemis wearable device", "Test_Scnario": "Testing the communication interface of the SA Tool", "Test_Sce_Description": "This test scenario is designed to verify the functionality of the communication interface of the SA Tool. The SA Tool should be able to communicate with the Subsystem over a private cellular network or Wi-Fi for various purposes such as Farecard Transaction Data, Events, Device Mode and Audit Counters, Remote Lists, and Device Management.", "Expected_Results": "The SA Tool successfully communicates with the Subsystem over a private cellular network or Wi-Fi for various purposes such as Farecard Transaction Data, Events, Device Mode and Audit Counters, Remote Lists, and Device Management."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is disabled and users Artemis device is unlocked or awake", "Test_Scnario": "Testing the functionality of Farecard reading when ECP is disabled and Artemis device is unlocked or awake", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application in reading the Farecard when ECP is disabled and the user's Artemis device is unlocked or awake. The application should be able to detect the Farecard and read it correctly.", "Expected_Results": "The SA Tool application should successfully read the Farecard and proceed with the Main Use Case."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is disabled and users Artemis device is unlocked or awake", "Test_Scnario": "Testing the functionality of Farecard reading when it is expired", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application in reading an expired Farecard. The application should be able to detect that the Farecard is expired and display the Farecard query screen indicating that the Farecard has expired.", "Expected_Results": "The SA Tool application should successfully detect the expired Farecard and display the Farecard query screen. The operator should only be able to print the card query and not be able to take any further actions on the Farecard."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is disabled and users Artemis device is unlocked or awake", "Test_Scnario": "Testing the functionality of Farecard reading when it is blocked", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application in reading a blocked Farecard. The application should be able to detect that the Farecard is blocked and display the Farecard query screen indicating that the Farecard has been blocked.", "Expected_Results": "The SA Tool application should successfully detect the blocked Farecard and display the Farecard query screen. The operator should only be able to print the card query and not be able to take any further actions on the Farecard."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is disabled and users Artemis device is unlocked or awake", "Test_Scnario": "Testing the functionality of cancelling a purchase transaction", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application in cancelling a purchase transaction. The operator should be able to cancel the transaction at any point in the Main Use Case.", "Expected_Results": "The operator should be able to successfully cancel the transaction and return to the SA Tool application home screen. The SA Tool application should not record the cancellation and the reason behind the cancellation."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is disabled and users Artemis device is unlocked or awake", "Test_Scnario": "Testing the functionality of ATS failure to load products", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when ATS fails to load products to the customer\u2019s account. The operator should be informed that the products purchased were not added to the user\u2019s account.", "Expected_Results": "The SA Tool should successfully inform the operator that the products purchased were not added to the user\u2019s account. The Operator may attempt the checkout again or provide the customer a refund if the customer paid with cash."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is disabled and users Artemis device is unlocked or awake", "Test_Scnario": "Testing the functionality of Shopping Cart with only Virtual Card or Stored Value Card Products", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the shopping cart only includes Virtual Card or Stored Value Card Products. The device should not have both SVC and VC products in the shopping cart at the same time.", "Expected_Results": "The SA Tool should successfully detect the type of products in the shopping cart and if the cart has ineligible products, the Operator should receive an error providing them the option to clear the cart."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "ECP is disabled and users Artemis device is unlocked or awake", "Test_Scnario": "Testing the functionality when Customer\u2019s Artemis device is in Power Reserve mode and ECP is disabled", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the user\u2019s mobile device is in Power Reserve mode and ECP is disabled on the mobile device for the users Virtual Card.", "Expected_Results": "The SA Tool should not detect the Virtual card media and the screen should remain the same. The Artemis device should prompt the user to charge their device."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Virtual Card Transaction Reversal on an Online SA Tool", "Test_Scnario": "Virtual Card Transaction Reversal on an Online SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer requests to reverse a fare on a Virtual Card. The SA Tool should be able to read the Virtual Card information, send the transaction to ATS for processing, and display a successful fare reversal screen to the operator and customer.", "Expected_Results": "The SA Tool successfully reverses the fare on the Virtual Card and displays a successful fare reversal screen to the operator and customer."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Virtual Card Transaction Reversal on an Online SA Tool", "Test_Scnario": "Transaction Reversal - Customer\u2019s Farecard is Unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Farecard is unreadable. The SA Tool should be able to detect the Farecard but fail to read it, and indicate to the operator that the Farecard is unreadable.", "Expected_Results": "The SA Tool detects the Farecard but fails to read it, and indicates to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Virtual Card Transaction Reversal on an Online SA Tool", "Test_Scnario": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is offline and not connected to ATS. The SA Tool should be able to store the request for reversal and display a request for reversal success screen.", "Expected_Results": "The SA Tool stores the request for reversal and displays a request for reversal success screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Virtual Card Transaction Reversal on an Online SA Tool", "Test_Scnario": "Transaction Reversal - Customer Requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer requests audio messages for fare reversal. The SA Tool should be able to enable audio mode and play the corresponding audio message to the customer in the default language of their Farecard.", "Expected_Results": "The SA Tool enables audio mode and plays the corresponding audio message to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Virtual Card Transaction Reversal on an Online SA Tool", "Test_Scnario": "Open Payments Media fails ODA check", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when an Open Payments Media fails the ODA check. The SA Tool should be able to perform the necessary validation and return the appropriate feedback.", "Expected_Results": "The SA Tool performs the necessary validation and returns the appropriate feedback."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Virtual Card Transaction Reversal on an Online SA Tool", "Test_Scnario": "Open Payments Media Fails Expiry Check during Fare Payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when an Open Payments Media fails the Expiry Check. The SA Tool should be able to perform the necessary validation and return the appropriate feedback.", "Expected_Results": "The SA Tool performs the necessary validation and returns the appropriate feedback."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Virtual Card Transaction Reversal on an Online SA Tool", "Test_Scnario": "Multiple NFC media are presented to the device at one time in Reversal mode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when multiple NFC media are presented to the device at one time. The SA Tool should be able to block all fare payment functionality and display an error toast message.", "Expected_Results": "The SA Tool blocks all fare payment functionality and displays an error toast message."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Virtual Card Transaction Reversal on an Online SA Tool", "Test_Scnario": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Out-of-Service state. The SA Tool should be able to remain in Out-of-Service state and not detect the media.", "Expected_Results": "The SA Tool remains in Out-of-Service state and does not detect the media."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Virtual Card Transaction Reversal on an Online SA Tool", "Test_Scnario": "Tap an Open Payments Media when SA Tool is configured for Farecard reversals only", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is configured for only farecard reversals. The SA Tool should be able to detect the media and perform the necessary validation.", "Expected_Results": "The SA Tool detects the media and performs the necessary validation."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Testing the functionality of the SA Tool when the Farecard is unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Farecard is unreadable. The operator will attempt to reverse a fare using an unreadable Farecard. The SA Tool should detect the Farecard but fail to read it correctly, indicating to the operator that the Farecard is unreadable.", "Expected_Results": "The SA Tool should detect the Farecard but fail to read it correctly, indicating to the operator that the Farecard is unreadable. The operator should be able to attempt the tap again. If the tap is successful, the reversal process should continue. If the tap is unsuccessful, the SA Tool should again indicate to the operator that the Farecard is unreadable."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Testing the functionality of the SA Tool when it is offline", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is offline and not connected to ATS. The operator will attempt to reverse a fare while the SA Tool is offline. The SA Tool should store the request for reversal and display a success screen.", "Expected_Results": "The SA Tool should store the request for reversal and display a success screen. When the SA Tool comes back online, it should send a bulk upload of transactions to ATS for processing."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Testing the functionality of the SA Tool when the customer requests audio messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer requests audio messages for fare reversal. The operator should be able to enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion.", "Expected_Results": "The operator should be able to enable audio mode and adjust the volume level using the physical device buttons at the customer\u2019s discretion. The SA Tool should display the fare reversal screen to the operator and customer for the duration of the audio message. The corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Testing the functionality of the SA Tool when the customer taps a card that is not a Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer taps a card that is not a Farecard. The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time.", "Expected_Results": "The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Testing the functionality of the SA Tool when the customer taps a non-activated Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer taps a non-activated Farecard. The device should detect that the Farecard is not activated and the SA Tool application should display a declined message to the customer. The transaction should not be conducted.", "Expected_Results": "The device should detect that the Farecard is not activated and the SA Tool application should display a declined message to the customer. The transaction should not be conducted. The SA Tool should play the declined audio tone. After a configurable timeout, the app should return to the SA Tool application Tap Card screen."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Scnario": "Transaction Reversal when SA Tool is Offline", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when it is offline. The tool should be able to store the transaction until the device goes back online and connects to Accenture Ticketing Services.", "Expected_Results": "The SA Tool should successfully store the transaction and process it once the device is back online and connected to Accenture Ticketing Services."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Scnario": "Fare Payment Reversal with Open Payments Media \u2013 Customer requests audio messages", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when a customer requests audio messages for fare payment reversal. The operator should be able to enable audio mode and adjust the volume level as per the customer's discretion.", "Expected_Results": "The SA Tool should successfully enable audio mode and adjust the volume level as per the customer's discretion. The fare payment reversal screen should be displayed to the operator and customer for the duration of the audio message."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Scnario": "Open Payments Media fails ODA check", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when an Open Payments Media fails the ODA check. The device should return the appropriate feedback.", "Expected_Results": "The SA Tool should successfully return the appropriate feedback when an Open Payments Media fails the ODA check. The Declined \u2013 Try Another Card (Failed ODA Check) screen should be provided to the cardholder."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Scnario": "Open Payments Media Fails Expiry Check during Fare Payment", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when an Open Payments Media fails the Expiry Check. The device should return the appropriate feedback.", "Expected_Results": "The SA Tool should successfully return the appropriate feedback when an Open Payments Media fails the Expiry Check. The Declined \u2013 Card Expired Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Scnario": "Multiple NFC media are presented to the device at one time in Reversal mode", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when multiple NFC media are presented to the device at one time. The device should block all fare payment functionality.", "Expected_Results": "The SA Tool should successfully block all fare payment functionality when multiple NFC media are presented to the device at one time. The device should display an error toast message."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Scnario": "Tap an Open Payments Media when SA Tool is in Out-of-Service state", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when it is in Out-of-Service state. The device should not detect the media and remain in Out-of-Service State.", "Expected_Results": "The SA Tool should successfully remain in Out-of-Service State when an Open Payments Media is tapped. The Not In Service Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Scnario": "Tap an Open Payments Media when SA Tool is configured for Farecard reversals only", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when it is configured for only farecard reversals. The device should not detect the media and remain in Out-of-Service State.", "Expected_Results": "The SA Tool should successfully remain in Out-of-Service State when an Open Payments Media is tapped. The Not In Service Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Scnario": "SA Tool in \u201cOut-of-Service\u201d state", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when it is in \u201cOut-of-Service\u201d state. The device should not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components.", "Expected_Results": "The SA Tool should successfully not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components when it is in \u201cOut-of-Service\u201d state."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Scnario": "SA Tool in Standby state", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when it is in Standby state. The device should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life.", "Expected_Results": "The SA Tool should successfully disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life when it is in Standby state."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal \u2013 SA Tool is Offline", "Test_Scnario": "SA Tool in Revenue Mode", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when it is in Revenue Mode. The device should allow the operator to interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures.", "Expected_Results": "The SA Tool should successfully allow the operator to interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures when it is in Revenue Mode."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer Requests Audio Messages", "Test_Scnario": "Testing the functionality of fare reversal request with audio messages", "Test_Sce_Description": "This scenario is to test if the system correctly handles a fare reversal request when the customer also requests audio messages. The operator should be able to enable audio mode and adjust the volume level using the physical device buttons. The SA Tool should display the fare reversal screen and play the corresponding audio message in the default language of the customer's Farecard.", "Expected_Results": "The system should successfully reverse the fare and play the audio message in the correct language. The volume level should be adjustable and return to the device default after the use case is completed."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer Requests Audio Messages", "Test_Scnario": "Testing the functionality when customer's Farecard does not have a valid fare to reverse", "Test_Sce_Description": "This scenario is to test if the system correctly handles a fare reversal request when the customer's Farecard does not have a valid fare to reverse. The application should display a declined message to the customer and the transaction should not be conducted.", "Expected_Results": "The system should display a declined message to the customer and the transaction should not be conducted. The SA Tool application should play a declined audio tone."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer Requests Audio Messages", "Test_Scnario": "Testing the functionality when customer's Farecard is blocked", "Test_Sce_Description": "This scenario is to test if the system correctly handles a fare reversal request when the customer's Farecard is blocked. The device should send the request to ATS for processing and ATS should detect the card is blocked and return a declined/error result back to the SA Tool.", "Expected_Results": "The system should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone and the Scratchpad should be updated accordingly."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer Requests Audio Messages", "Test_Scnario": "Testing the functionality when customer's Farecard is on the Deny List", "Test_Sce_Description": "This scenario is to test if the system correctly handles a fare reversal request when the customer's Farecard is on the Deny List. ATS should detect the Virtual Card is on the Deny List, move the card to blocked, remove it from the Deny List and return a declined/error result back to SA Tool.", "Expected_Results": "The system should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone and the Scratchpad should be updated accordingly."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer Requests Audio Messages", "Test_Scnario": "Testing the functionality when battery goes below the low battery threshold during reversal", "Test_Sce_Description": "This scenario is to test if the system correctly handles a fare reversal request when the battery goes below the low battery threshold during reversal. If the low battery threshold is reached before Step 4, the application should switch to \u201cOut of Service\u201d mode. Else, the customer\u2019s transaction should be reversed as per Step 5 and then the application should switch to \u201cOut of Service\u201d mode.", "Expected_Results": "The system should either switch to \u201cOut of Service\u201d mode before Step 4 or reverse the customer\u2019s transaction as per Step 5 and then switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer Requests Audio Messages", "Test_Scnario": "Testing the functionality when customer taps a card that is not a Farecard", "Test_Sce_Description": "This scenario is to test if the system correctly handles a fare reversal request when the customer taps a card that is not a Farecard. The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time.", "Expected_Results": "The system should not respond and the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer Requests Audio Messages", "Test_Scnario": "Testing the functionality when ECP is disabled and users Artemis device is locked or asleep", "Test_Sce_Description": "This scenario is to test if the system correctly handles a fare reversal request when ECP is disabled and users Artemis device is locked or asleep. The device should determine that the media tapped is not supported and display an error message. The fare payment reversal should not be recorded.", "Expected_Results": "The system should display an error message and the fare payment reversal should not be recorded."}, {"Function_Flow_Name": "Reversals", "Sub_Flow_Name": "Period pass load reversal", "Use_Case_Name": "Transaction Reversal - Customer Requests Audio Messages", "Test_Scnario": "Testing the functionality of Virtual Card Transaction Reversal on an Online SA Tool", "Test_Sce_Description": "This scenario is to test if the system correctly handles a Virtual Card transaction reversal with the SA Tool. The SA Tool should read the Virtual Card information, send the transaction to ATS to be processed, display successful fare reversal screen to the operator and customer, and play the successful fare reversal audio tone.", "Expected_Results": "The system should successfully reverse the Virtual Card transaction, display successful fare reversal screen to the operator and customer, and play the successful fare reversal audio tone."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Split Refunds", "Test_Scnario": "Refund via multiple forms of payment", "Test_Sce_Description": "This scenario tests the functionality of the operator performing a refund for a transaction via multiple forms of payment. The operator inputs multiple payment means for refund amounts. However, Cash payments will be processed as one transaction in the backend.", "Expected_Results": "The system should correctly process the refund via multiple forms of payment. If the operator inputs a refund amount of $20 in cash, they should be allowed to input more cash payments. If the operator inputs 2 $20 cash refunds separately, they should show on the receipt as the total of $40."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Split Refunds", "Test_Scnario": "Zero dollar transactions", "Test_Sce_Description": "This scenario tests the functionality of zero dollar transactions. These transactions must always be paid or refunded in cash (no other payment method available).", "Expected_Results": "The system should correctly process zero dollar transactions. These transactions should always be paid or refunded in cash."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Split Refunds", "Test_Scnario": "Operator Selects Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Sce_Description": "This scenario tests the functionality of the operator selecting Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount. The SA Tool application provides an error notification to the Operator as they cannot select a payment amount greater than the total shopping cart amount.", "Expected_Results": "The system should correctly provide an error notification to the Operator as they cannot select a payment amount greater than the total shopping cart amount. The Operator will either have to select a different payment mode or change the payment amount to be less than or equal to the shopping cart amount."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Split Refunds", "Test_Scnario": "Customer\u2019s Farecard is on the Action, Load Value, or Hotlist", "Test_Sce_Description": "This scenario tests the functionality of the customer\u2019s Farecard being on the Action, Load Value, or Hotlist. The SA Tool device detects that the Farecard is on the Action, Load Value, or Hotlist and updates the Farecard accordingly.", "Expected_Results": "The system should correctly detect that the Farecard is on the Action, Load Value, or Hotlist and update the Farecard accordingly. The SA Tool should display the Farecard Query information."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Split Refunds", "Test_Scnario": "Farecard tapped does not match", "Test_Sce_Description": "This scenario tests the functionality of the Farecard tapped during the write tap does not match the Farecard tapped during the identification tap. The SA checks if the serial number matches the serial number detected in the identification tap.", "Expected_Results": "The system should correctly check if the serial number matches the serial number detected in the identification tap. The SA should detect that the Farecard tapped during the write tap does not match the Farecard tapped during the identification tap. The SA should display an error message and prompt the operator to tap the correct card in order to proceed."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Operator Selects Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Scnario": "Verify the functionality of split payment with multiple forms of payment", "Test_Sce_Description": "The customer wants to pay for a transaction using multiple forms of payment. The operator should be able to input multiple Cash CAD, Cash USD, Coupon, Warrants, or Voucher payments. The system should process this as one transaction in the backend.", "Expected_Results": "The system should successfully process the transaction and reflect the total payment on the receipt."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Operator Selects Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Scnario": "Verify the functionality of zero dollar transactions", "Test_Sce_Description": "Zero dollar transactions must always be paid or refunded in cash. The operator should not be able to select any other payment method for zero dollar transactions.", "Expected_Results": "The system should only allow cash as the payment method for zero dollar transactions."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Operator Selects Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Scnario": "Verify the functionality of split payment with debit or credit card", "Test_Sce_Description": "The customer wants to pay for a transaction using a debit or credit card. The operator should be able to input the payment and the system should process it. The receipt should automatically print after the payment.", "Expected_Results": "The system should successfully process the payment and automatically print the receipt."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Operator Selects Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Scnario": "Verify the functionality of split payment when the mean of payment limit is reached", "Test_Sce_Description": "If the mean of payment limit has been reached before the total has been paid, the transaction must be reversed, and the customer must agree to distribute charges to the payment means such that the total has been paid.", "Expected_Results": "The system should reverse the transaction and allow the operator to distribute charges to the payment means such that the total has been paid."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Operator Selects Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Scnario": "Verify the functionality of split payment with Credit Voucher, Coupon, Cheque, or Warrant where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Sce_Description": "The operator has chosen a payment amount greater than the total shopping cart amount and has selected Credit Voucher, Coupon, or Warrant as part of the split payment. The system should not allow the operator to proceed with the transaction.", "Expected_Results": "The system should provide an error notification to the Operator and not allow them to proceed with the transaction."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Operator Selects Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Scnario": "Verify the functionality of split payment with Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Sce_Description": "The operator has chosen a payment amount greater than the total shopping cart amount and has selected Debit or Credit as part of the split payment. The system should not allow the operator to proceed with the transaction.", "Expected_Results": "The system should provide an error notification to the Operator and not allow them to proceed with the transaction."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Operator Selects Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Scnario": "Verify the functionality of split refunds", "Test_Sce_Description": "The operator should be able to perform a refund for a transaction via multiple forms of payment. The system should process this as one transaction in the backend.", "Expected_Results": "The system should successfully process the refund and reflect the total refund on the receipt."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Operator Selects Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Scnario": "Verify the functionality of underpayment and overdraft", "Test_Sce_Description": "If the customer\u2019s card is in overdraft and underpayment at once, the identification tap should detect the amounts. The system should indicate that the card is in overdraft and underpayment and display the corresponding negative balances in the card query.", "Expected_Results": "The system should successfully detect the overdraft and underpayment and display the corresponding negative balances in the card query."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Operator Selects Debit or Credit where Payment Amount Selected is Greater than Total Shopping Cart Amount", "Test_Scnario": "Verify the functionality of required fields validation", "Test_Sce_Description": "The operator attempts to proceed to the next screen or proceed to payment without entering required information. The system should check whether all the required fields have valid information.", "Expected_Results": "The system should display screen validation rules to prompt the operator to input the correct information."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Customer\u2019s Farecard is on the Action, Load Value, or Hotlist", "Test_Scnario": "Load Value or Action Transaction Processing", "Test_Sce_Description": "This scenario tests the functionality of the device to process the Load Value or Action Transaction prior to performing the Fare Validation. The device should be able to process the transaction and provide appropriate feedback to the Cardholder.", "Expected_Results": "The device successfully processes the Load Value or Action Transaction and provides appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Customer\u2019s Farecard is on the Action, Load Value, or Hotlist", "Test_Scnario": "Farecard with Valid Transfer Product", "Test_Sce_Description": "This scenario tests the functionality of the device to process a different Tap-On Fare if a valid transfer product is contained on the Farecard. The device should be able to reduce the Tap-On Fare and the Underpayment Value to account for the Transfer Discount.", "Expected_Results": "The device successfully processes the Tap-On Fare and the Underpayment Value, taking into account the Transfer Discount."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Customer\u2019s Farecard is on the Action, Load Value, or Hotlist", "Test_Scnario": "Farecard with Default O/D Processing", "Test_Sce_Description": "This scenario tests the functionality of the device to process a full Fare-by-Zone transaction in case of a default O/D on the Farecard. The device should be able to deduct the Full Fare value for the station-to-station trip accounting for all Fare considerations associated to the trip.", "Expected_Results": "The device successfully processes the full Fare-by-Zone transaction and deducts the Full Fare value for the station-to-station trip."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Customer\u2019s Farecard is on the Action, Load Value, or Hotlist", "Test_Scnario": "Farecard with Default O/D Override", "Test_Sce_Description": "This scenario tests the functionality of the device to override the default O/D contained on the Farecard and process the tap as a regular tap-on. The device should be able to process the override request and provide appropriate feedback to the Cardholder.", "Expected_Results": "The device successfully overrides the default O/D and processes the tap as a regular tap-on, providing appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Customer\u2019s Farecard is on the Action, Load Value, or Hotlist", "Test_Scnario": "Farecard with Underpayment from Previous Trip", "Test_Sce_Description": "This scenario tests the functionality of the device to deduct the Underpayment Value from the Farecard E-Purse prior to performing the Fare Validation. The device should be able to detect the Underpayment on the Farecard, deduct the value from the E-Purse Balance, and clear the underpayment field.", "Expected_Results": "The device successfully deducts the Underpayment Value from the Farecard E-Purse and clears the underpayment field."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Customer\u2019s Farecard is on the Action, Load Value, or Hotlist", "Test_Scnario": "Non-Revenue Farecard Processing", "Test_Sce_Description": "This scenario tests the functionality of the device to process Non-Revenue farecard in the training mode. If the Non-Revenue card is tapped in the revenue mode, the device should display a declined HMI.", "Expected_Results": "The device successfully processes the Non-Revenue farecard in the training mode and displays a declined HMI in the revenue mode."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Customer\u2019s Farecard is on the Action, Load Value, or Hotlist", "Test_Scnario": "Farecard with Autoload Enabled", "Test_Sce_Description": "This scenario tests the functionality of the device to process a Farecard with Autoload Enabled. If the Fare causes the Farecard E-Purse Balance to cross the Auto-load threshold, the device should add the Autoload amount to the E-Purse balance.", "Expected_Results": "The device successfully processes the Farecard with Autoload Enabled and adds the Autoload amount to the E-Purse balance."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Customer\u2019s Farecard is on the Action, Load Value, or Hotlist", "Test_Scnario": "Farecard with Fare Type Other Than Default", "Test_Sce_Description": "This scenario tests the functionality of the device to process a Farecard with a Fare type other than Default. The device should display the \u201cFare Payment with Fare type Discount\u201d HMI and account for the concession discount in the Fare.", "Expected_Results": "The device successfully processes the Farecard with a Fare type other than Default and accounts for the concession discount in the Fare."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Customer\u2019s Farecard is on the Action, Load Value, or Hotlist", "Test_Scnario": "Customer Overrides the Default Trip Prior to Tapping-Off", "Test_Sce_Description": "This scenario tests the functionality of the device to process a customer's override of the Default Trip prior to tapping-off. The device should be able to process the override request and provide appropriate feedback to the Cardholder.", "Expected_Results": "The device successfully processes the customer's override of the Default Trip prior to tapping-off and provides appropriate feedback to the Cardholder."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Farecard tapped during the write tap does not match the Farecard tapped during the identification tap", "Test_Scnario": "Farecard tapped during the write tap does not match the Farecard tapped during the identification tap", "Test_Sce_Description": "This scenario tests the functionality of the system when the Farecard tapped during the write tap does not match the Farecard tapped during the identification tap. The operator taps one Farecard and intends to write to it but another Farecard is presented during the write tap.", "Expected_Results": "The system should detect that the Farecard tapped during the write tap does not match the Farecard tapped during the identification tap. An error message should be displayed and the operator should be prompted to tap the correct card in order to proceed."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Farecard tapped during the write tap does not match the Farecard tapped during the identification tap", "Test_Scnario": "Underpayment handling", "Test_Sce_Description": "This scenario tests the system's ability to handle underpayment. The operator selects 'Sell' from the Main menu, then selects a product. If the operator chooses to Add Funds or Transit Pass while the card is in underpayment, the SA Tool will show the Underpayment Full Screen Alert.", "Expected_Results": "The system should detect the underpayment and display an alert. The operator should be able to inform the customer about the underpayment and proceed with the transaction as per the use case."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Farecard tapped during the write tap does not match the Farecard tapped during the identification tap", "Test_Scnario": "Farecard Tapped is the incorrect Farecard Type", "Test_Sce_Description": "This scenario tests the system's ability to handle a situation where the Farecard tapped is the incorrect Farecard type for the Mode. The NFC reader detects the Farecard and during the identification process, the SA Tool reads the Farecard information and checks the Farecard Type.", "Expected_Results": "The system should identify the Farecard Type to be incorrect for the mode the operator is currently operating in and notify the operator of the incorrect Farecard Type. The use case should terminate."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Farecard tapped during the write tap does not match the Farecard tapped during the identification tap", "Test_Scnario": "Non-Farecard tapped to the reader", "Test_Sce_Description": "This scenario tests the system's ability to handle a situation where a Non-Farecard is tapped to the reader. The SA Tool application identifies the card to be a non-Farecard and displays an error pop up message.", "Expected_Results": "The system should identify the card to be a non-Farecard and display an error pop up message."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Farecard tapped during the write tap does not match the Farecard tapped during the identification tap", "Test_Scnario": "Failure to read Virtual Card", "Test_Sce_Description": "This scenario tests the system's ability to handle a situation where the SA Tool application detects the Virtual Card and fails to read it correctly. The NFC reader detects the Virtual Card but is unable to read it.", "Expected_Results": "The system should indicate to the operator that the Virtual Card read has failed. The operator should be able to close the error prompt and tap the card to try again."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Farecard tapped during the write tap does not match the Farecard tapped during the identification tap", "Test_Scnario": "Blocked/Hotlisted Farecard \u2013 Virtual Card", "Test_Sce_Description": "This scenario tests the system's ability to handle a situation where the customer's Farecard is blocked. The SA Tool application detects that the Farecard is blocked.", "Expected_Results": "The system should display the Farecard query screen indicating that the Farecard has been blocked. The operator should not be able to take any further actions on the Farecard."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Farecard tapped during the write tap does not match the Farecard tapped during the identification tap", "Test_Scnario": "Virtual Card \u2013 Ineligible Products", "Test_Sce_Description": "This scenario tests the system's ability to handle a situation where the SA Tool shopping cart has ineligible products. The operator is in the middle of loading products and the products that were added to the card are now ineligible for purchase.", "Expected_Results": "The system should display an error confirming that one or more of the products are not available for sale. The operator should be able to remove the ineligible products from cart and reattempt the shopping flow."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "E-Purse balance refund", "Use_Case_Name": "Farecard tapped during the write tap does not match the Farecard tapped during the identification tap", "Test_Scnario": "ATS failure to load products", "Test_Sce_Description": "This scenario tests the system's ability to handle a situation where the ATS is unable to load products to the customer's account after the operator has completed the SA Tool shopping flow.", "Expected_Results": "The system should inform the operator that the products purchased were not added to the user's account. The Operator may attempt the checkout again or provide the customer a refund if the customer paid with cash."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Limited Period Pass within valid time", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a farecard with a valid Limited Period Pass is used within the valid time limit.", "Expected_Results": "The fare payment should be accepted and the transaction should be successful."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Limited Period Pass outside valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a farecard with a valid Limited Period Pass is used outside the valid time limit but has sufficient e-Purse balance.", "Expected_Results": "The fare payment should be accepted by deducting the fare from the e-Purse balance and the transaction should be successful."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with an anonymous farecard with an expired period pass and ePurse balance less than the fare amount tries to make a payment.", "Expected_Results": "The fare payment should be declined and the transaction should not be conducted."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a blocked virtual card tries to make a payment.", "Expected_Results": "The fare payment should be declined and the transaction should not be conducted."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a virtual card on the Deny List tries to make a payment.", "Expected_Results": "The fare payment should be declined, the card should be removed from the Deny List and set to blocked, and the transaction should not be conducted."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a payment.", "Expected_Results": "The application should switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer\u2019s Farecard is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a blocked farecard tries to make a payment.", "Expected_Results": "The fare payment should be declined and the transaction should not be conducted."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer\u2019s Farecard is on the Hotlist", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a farecard on the hotlist tries to make a payment.", "Expected_Results": "The fare payment should be declined, the card\u2019s status should be updated to blocked, and the transaction should not be conducted."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer taps a card that is not a Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a payment with a card that is not a farecard.", "Expected_Results": "The SA Tool should display the \u201cCard Read Error\u201d message."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a farecard within the Anti-Passback Window tries to make a payment.", "Expected_Results": "The fare payment should be declined and the transaction should not be conducted."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Scnario": "Accepting Fare Payment from a Farecard using Period Pass - Customer taps a non-activated card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a payment with a non-activated card.", "Expected_Results": "The SA Tool should display the \u201cCard Read Error\u201d message."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a farecard with a valid Limited Period Pass is used outside of its valid time but has sufficient e-Purse balance to cover the transaction.", "Expected_Results": "The ATS should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, and deduct the fare. The SA Tool should display the transaction details and the remaining e-Purse balance."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with an anonymous Farecard, an expired period pass, and an ePurse balance less than the fare amount attempts to make a payment.", "Expected_Results": "The ATS should detect the card is Anonymous and the ePurse Balance is less than the fare amount and return a declined result back to the SA Tool. The SA Tool should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a blocked Virtual Card attempts to make a payment.", "Expected_Results": "The ATS should detect the card is blocked and return a declined result back to the SA Tool. The SA Tool should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer with a Virtual Card on the Deny List attempts to make a payment.", "Expected_Results": "The ATS should detect the card is on the Deny List, remove the card from the Deny List and set it to blocked, and return a declined result back to the SA Tool. The SA Tool should display a declined message to the customer and the transaction should not be conducted."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a successful Farecard tap.", "Expected_Results": "If the low battery threshold is reached before Step 5, the application should switch to \u201cOut of Service\u201d mode. Else, the customers fare payment should be processed as per Step 5. The application should then switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment using a virtual card that is on the Deny List. The SA Tool should detect that the card is on the Deny List, block the card, and decline the transaction.", "Expected_Results": "The SA Tool should display a declined message to the customer, play a declined audio tone, and update the Scratchpad accordingly. The transaction should not be conducted."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Scnario": "Performance of the SA Tool when processing a transaction with a card on the Deny List", "Test_Sce_Description": "This scenario tests the performance of the SA Tool when processing a transaction with a card on the Deny List. The SA Tool should be able to quickly detect that the card is on the Deny List, block the card, and decline the transaction.", "Expected_Results": "The SA Tool should quickly display a declined message to the customer, play a declined audio tone, and update the Scratchpad accordingly. The transaction should not be conducted."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Scnario": "Security of the SA Tool when processing a transaction with a card on the Deny List", "Test_Sce_Description": "This scenario tests the security of the SA Tool when processing a transaction with a card on the Deny List. The SA Tool should securely communicate with the ATS to check the status of the card and securely update the card's status to blocked.", "Expected_Results": "The SA Tool should securely check the card's status, securely block the card, and securely decline the transaction. The customer's sensitive information should remain secure throughout the process."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List with sufficient e-Purse balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment using a virtual card that is on the Deny List but has sufficient e-Purse balance. The SA Tool should detect that the card is on the Deny List, block the card, and decline the transaction regardless of the e-Purse balance.", "Expected_Results": "The SA Tool should display a declined message to the customer, play a declined audio tone, and update the Scratchpad accordingly. The transaction should not be conducted regardless of the e-Purse balance."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List with insufficient e-Purse balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer tries to make a fare payment using a virtual card that is on the Deny List and has insufficient e-Purse balance. The SA Tool should detect that the card is on the Deny List, block the card, and decline the transaction regardless of the e-Purse balance.", "Expected_Results": "The SA Tool should display a declined message to the customer, play a declined audio tone, and update the Scratchpad accordingly. The transaction should not be conducted regardless of the e-Purse balance."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when the battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a successful Farecard tap. The test will involve initiating a payment process and allowing the battery to go below the threshold during the process.", "Expected_Results": "The application should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If the battery threshold is reached after Step 5, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when the customer's card is not a Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's card is not a Farecard. The test will involve a customer attempting to tap a card that is not a Farecard.", "Expected_Results": "The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when the customer's Farecard is within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Farecard is within the Anti-Passback Window. The test will involve a customer attempting to tap a Farecard that is within the Anti-Passback Window.", "Expected_Results": "The ATS should detect that the Farecard fails the Anti-Passback checks. The SA Tool application should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, and the farecard is in overdraft", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, and the farecard is in overdraft. The test will involve a customer attempting to tap a Farecard under these conditions.", "Expected_Results": "The ATS should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, and detect that farecard is in overdraft. The SA Tool application should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction. The test will involve a customer attempting to tap a Farecard under these conditions.", "Expected_Results": "The ATS should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, and deduct the fare."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when the customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount. The test will involve a customer attempting to tap an Anonymous Farecard under these conditions.", "Expected_Results": "The device should send the transaction to ATS for processing. ATS should detect the card is Anonymous and the ePurse Balance is less than the fare amount. ATS should return a declined result back to the SA Tool. The SA Tool application should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when the customer's Farecard is blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Farecard is blocked. The test will involve a customer attempting to tap a blocked Farecard.", "Expected_Results": "The device should send the transaction to ATS for processing. ATS should detect the card is blocked. ATS should return a declined result back to the SA Tool. The SA Tool application should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Period pass refund", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Scnario": "Testing the functionality of the SA Tool when the customer's Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer's Virtual Card is on the Deny List. The test will involve a customer attempting to tap a Virtual Card that is on the Deny List.", "Expected_Results": "The device should send the transaction to ATS for processing. ATS should detect the card is on the Deny List. ATS should remove the card from the Deny List and set it to blocked. ATS should return a declined result back to the SA Tool. The SA Tool application should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment for the refund/reversal has already begun and the customer has been refunded with at least 1 mean of payment and that mean of payment is credit or debit", "Test_Scnario": "Cancellation of transaction with credit or debit payment", "Test_Sce_Description": "In this scenario, the operator selects to cancel a transaction where the customer has been refunded with at least one mean of payment that is credit or debit. The SA Tool should inform the operator that the payment means must be reversed and prompt the operator to confirm the cancellation. Upon confirmation, the SA Tool should reverse non-credit and/or non-debit means of payment automatically. The operator then has to choose the mean of payment and verbally prompt the customer to interact with the PIN pad to perform a refund void.", "Expected_Results": "The transaction should be successfully cancelled, with non-credit and/or non-debit means of payment reversed automatically. The customer should be prompted to interact with the PIN pad for a refund void. Upon successful Moneris processing, the customer should be repaid for the refund amount and a customer receipt with Moneris information should always print. The operator should be returned to the SA Tool home screen."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment for the refund/reversal has already begun and the customer has been refunded with at least 1 mean of payment and that mean of payment is credit or debit", "Test_Scnario": "Cancellation of transaction with non-credit or non-debit payment", "Test_Sce_Description": "In this scenario, the operator selects to cancel a transaction where the customer has been refunded with at least one mean of payment that is not credit or debit. The SA Tool should inform the operator that the payment means must be reversed and prompt the operator to confirm the cancellation. Upon confirmation, the SA Tool should reverse the payment means automatically and prompt the operator to begin a refund void.", "Expected_Results": "The transaction should be successfully cancelled, with the payment means reversed automatically. The operator should be prompted to begin a refund void. A customer and merchant receipt should print and the SA Tool should return to the home screen."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment for the refund/reversal has already begun and the customer has been refunded with at least 1 mean of payment and that mean of payment is credit or debit", "Test_Scnario": "Handling of maximum product quantity in shopping cart", "Test_Sce_Description": "In this scenario, the operator has already added the maximum allowable amount of products to the shopping cart. If the customer requests to purchase more than the maximum allowable quantity transaction, the operator should inform the customer that they must process their request in multiple transactions.", "Expected_Results": "The SA Tool should not allow the operator to add more than the maximum allowable quantity to the shopping cart. The operator should be able to process the customer\u2019s request in multiple transactions."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment for the refund/reversal has already begun and the customer has been refunded with at least 1 mean of payment and that mean of payment is credit or debit", "Test_Scnario": "Handling of ineligible products for refund or reversal", "Test_Sce_Description": "In this scenario, if any of the reversal or refund eligibility criteria specified in the Ticketing Use Cases [R5] are not met, the SA Tool should display the relevant error message and the operator must acknowledge the message.", "Expected_Results": "The SA Tool should display the relevant error message when no eligible products for refund or reversal are detected. The operator should be able to acknowledge the message and the SA Tool should return to the main menu."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment for the refund/reversal has already begun and the customer has been refunded with at least 1 mean of payment and that mean of payment is credit or debit", "Test_Scnario": "Handling of internet connection failure", "Test_Sce_Description": "In this scenario, if there is no internet connection and the SA Tool Operator is performing an action that requires connection to the Internet, the SA Tool should time out and display the relevant error message with options to try again or cancel.", "Expected_Results": "The SA Tool should time out and display the relevant error message when there is no internet connection. The operator should have the option to try again or cancel. If successful connection is restored, the operator should be able to resume the main use case. If the action is cancelled, the operator should be returned to the previous screen."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment has already begun and the customer has been refunded with at least 1 mean of payment and none of them are credit or debit", "Test_Scnario": "Split payment refund with non-credit or non-debit payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a split payment has already begun and the customer has been refunded with at least 1 mean of payment and none of them are credit or debit. The operator selects to cancel the transaction and the SA Tool should inform the operator that in order to cancel the transaction, the payment means must be reversed.", "Expected_Results": "The SA Tool should reverse the payment means automatically and prompt the operator to begin a refund void. A customer and merchant receipt should print and the SA Tool should return to the home screen."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment has already begun and the customer has been refunded with at least 1 mean of payment and none of them are credit or debit", "Test_Scnario": "Exceeding maximum product quantity in cart", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the operator tries to add more than the maximum allowable quantity of a product to the shopping cart. The operator should be informed that they must process the customer's request in multiple transactions.", "Expected_Results": "The SA Tool should not allow the operator to add more than the maximum allowable quantity to the shopping cart. The operator should process the customer\u2019s request in multiple transactions."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment has already begun and the customer has been refunded with at least 1 mean of payment and none of them are credit or debit", "Test_Scnario": "No eligible products for refund or reversal", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when no eligible products for refund or reversal are detected. The SA Tool should display the relevant error message and the operator must acknowledge the message.", "Expected_Results": "The SA Tool should display the relevant error message and the operator must acknowledge the message. The SA Tool should return to the main menu."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment has already begun and the customer has been refunded with at least 1 mean of payment and none of them are credit or debit", "Test_Scnario": "Eligible products for refund or reversal are not what the customer requested", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when there are products available for refund or reversal other than the product requested by the customer. The operator should inform the customer their product is not eligible for reversal or refund.", "Expected_Results": "The Operator should inform the customer their product is not eligible for reversal or refund and return to the main menu."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment has already begun and the customer has been refunded with at least 1 mean of payment and none of them are credit or debit", "Test_Scnario": "Failure to connect to internet", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when there is no internet connection and the SA Tool Operator is performing an action that requires connection to the Internet.", "Expected_Results": "The SA Tool should time out and display the relevant error message with options to try again or cancel. If successful connection is restored, resume the main use case. If the action is cancelled, return to the previous screen."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "If split payment has already begun and the customer has been refunded with at least 1 mean of payment and none of them are credit or debit", "Test_Scnario": "Cancel a refund/reversal transaction", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the operator would like to cancel the transaction at any point in the Main Use Case.", "Expected_Results": "The SA Tool should ask the operator if they are certain they want to cancel the transaction. If the operator selects yes, the transaction should be cancelled and the SA Tool should return to the main screen. If the operator selects no, proceed through the Main Use Case as usual."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "Quantity of product added to cart exceeds product maximum", "Test_Scnario": "ATS failure to load products", "Test_Sce_Description": "This scenario tests the case where the ATS fails to load products onto a customer's account after checkout. The operator has completed the SA Tool shopping flow and the ATS is unable to load products to the customer's account.", "Expected_Results": "The SA Tool should inform the operator that the products purchased were not added to the user's account. The Operator may attempt the checkout again or provide the customer a refund if the customer paid with cash."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "Quantity of product added to cart exceeds product maximum", "Test_Scnario": "SVC / VC Shopping Cart", "Test_Sce_Description": "This scenario tests the case where the shopping cart must only include Virtual Card or Stored Value Card Products. The device must have either SVC or VC products in the shopping cart and cannot have both SVC and VC products in the shopping cart at the same time.", "Expected_Results": "If the cart has ineligible products, the Operator should receive an error providing them the option to clear the cart. If the customer tapped a VC, clearing cart should remove SVC products. If the customer tapped an SVC, clearing cart should remove VC products."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "Quantity of product added to cart exceeds product maximum", "Test_Scnario": "ECP is disabled and Customer's Artemis device is locked or asleep", "Test_Sce_Description": "This scenario tests the case where the user's device is locked or asleep and ECP is disabled for the users Virtual Card.", "Expected_Results": "Virtual card media should not be detected and the screen remains the same. Artemis device should prompt user to provide authentication. Customer provides authentication for their Virtual Card media on their Artemis device."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "Quantity of product added to cart exceeds product maximum", "Test_Scnario": "Customer's Artemis device is in Power Reserve mode and ECP is disabled", "Test_Sce_Description": "This scenario tests the case where the user's mobile device is in Power Reserve mode and ECP is disabled on the mobile device for the users Virtual Card.", "Expected_Results": "Virtual card media should not be detected and the screen remains the same. Artemis device should prompt user to charge their device."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "Quantity of product added to cart exceeds product maximum", "Test_Scnario": "Required fields not filled out or not valid", "Test_Sce_Description": "This scenario tests the case where the operator attempts to proceed to the next screen or proceed to payment without entering required information or the information entered does not meet validation rules.", "Expected_Results": "The SA Tool application should display screen validation rules to prompt the operator to input the correct information. The operator enters all the required information and takes all required actions."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "Quantity of product added to cart exceeds product maximum", "Test_Scnario": "Purchase multiple items", "Test_Sce_Description": "This scenario tests the case where the customer indicates that they would like to conduct other purchases in the same transaction. Note only one Farecard may be used per transaction.", "Expected_Results": "The operator should return to the SA Tool application Sales screen and select the additional product(s) the customer would like to purchase. The SA Tool application should add the additional products to the shopping cart."}, {"Function_Flow_Name": "Refunds", "Sub_Flow_Name": "Ticket/Special Ticket refund", "Use_Case_Name": "Quantity of product added to cart exceeds product maximum", "Test_Scnario": "Refund multiple items", "Test_Sce_Description": "This scenario tests the case where the customer requests to refund multiple products where refund criteria have been met. The operator must complete one transaction before starting the next.", "Expected_Results": "The operator should confirm the reversal and a transaction successful screen should be displayed. If it is a Farecard product refund and the Farecard had been placed in the NFC reader in step #1, the SA Tool should detect and scan the card automatically. The SA Tool should update the Farecard balance, remove the products and update the transaction history as applicable."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)", "Test_Scnario": "Verify successful launch of SA Tool Application", "Test_Sce_Description": "The operator should be able to successfully launch the SA Tool application by selecting the application icon from the home screen of the SA Tool device.", "Expected_Results": "The SA Tool application should launch successfully and perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. After successful launch, the sign-in screen should be displayed."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)", "Test_Scnario": "Verify unsuccessful launch of SA Tool Application due to network connection unavailability", "Test_Sce_Description": "The operator should be able to launch the SA Tool application even if the network connection is not available.", "Expected_Results": "The SA Tool application should launch and perform continuous diagnostic checks. If the network connection is not available, this should be indicated on the SA Tool. The application should still launch and the sign-in screen should be displayed."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)", "Test_Scnario": "Verify unsuccessful launch of SA Tool Application due to critical failures", "Test_Sce_Description": "The operator should not be able to launch the SA Tool application if there are critical failures.", "Expected_Results": "The SA Tool application should perform initial self-diagnostic checks and if it finds critical failures, it should go to error state."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)", "Test_Scnario": "Verify unsuccessful launch of SA Tool Application due to storage, battery or secure element issues", "Test_Sce_Description": "The operator should not be able to launch the SA Tool application if there are issues with storage, battery or secure element.", "Expected_Results": "The SA Tool application should perform continuous self-diagnostics for storage, battery or secure element and if it finds errors or failures in any of these elements, it should go to out-of-service state. A critical event should be sent to SOTI Mobicontrol and CSM."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)", "Test_Scnario": "Verify successful sign-in to SA Tool application as a first-time user", "Test_Sce_Description": "The operator should be able to sign-in to the SA Tool application as a first-time user using a valid badge ID and temporary passcode.", "Expected_Results": "The SA Tool application should validate the operator badge ID and temporary passcode combination based on operator credentials stored in user management service. On successful validation, the user selected Language preference should be stored in the user management service and the Security Setup screen should be displayed."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Sign-In to SA Tool application (First-Time User)", "Test_Scnario": "Verify unsuccessful sign-in to SA Tool application due to incorrect username or passcode", "Test_Sce_Description": "The operator should not be able to sign-in to the SA Tool application if they enter incorrect username or passcode.", "Expected_Results": "The SA Tool application should validate the operator badge ID and passcode combination based on operator credentials stored in user management service. If the credentials are incorrect, the application should inform the operator that the passcode is incorrect for the counted number of times, and a re-try is permitted after 30 seconds."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "Verify successful sign-in for first-time user", "Test_Sce_Description": "The operator launches the SA Tool application, enters a valid operator badge ID and temporary passcode combination, and confirms input. The application should validate the credentials and inform the operator of successful first-time sign-in.", "Expected_Results": "The operator is successfully signed in and the Security Setup screen is displayed."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "Verify unsuccessful sign-in due to incorrect credentials", "Test_Sce_Description": "The operator launches the SA Tool application, enters an invalid operator badge ID or temporary passcode combination, and confirms input. The application should validate the credentials and inform the operator of unsuccessful sign-in.", "Expected_Results": "The operator is not signed in and an error message is displayed."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "Verify successful change of temporary passcode", "Test_Sce_Description": "After successful first-time sign-in, the operator is prompted to change their temporary passcode. The operator enters a new passcode twice to confirm, and the application validates the new passcode.", "Expected_Results": "The new passcode is successfully changed and the Inspection Parameters screen is displayed."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "Verify unsuccessful change of temporary passcode due to matching new and temporary passcodes", "Test_Sce_Description": "After successful first-time sign-in, the operator is prompted to change their temporary passcode. The operator enters a new passcode that is the same as the temporary passcode, and the application validates the new passcode.", "Expected_Results": "The new passcode is not changed and an error message is displayed."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "Verify unsuccessful sign-in due to reaching maximum number of login attempts", "Test_Sce_Description": "The operator repeatedly attempts to sign in with incorrect credentials until the maximum number of sign-in attempts is reached. The application should lock the operator user account.", "Expected_Results": "The operator user account is locked and an error message is displayed."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "Verify successful sign-in after unlocking of operator user account", "Test_Sce_Description": "After the operator user account is unlocked by the CLIENT Operations user, the operator attempts to sign in with valid credentials. The application should validate the credentials and inform the operator of successful sign-in.", "Expected_Results": "The operator is successfully signed in and the Security Setup screen is displayed."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "Verify unsuccessful first-time sign-in due to network unavailability", "Test_Sce_Description": "The operator attempts to sign in for the first time when the network is unavailable. The application should display a message requesting the operator to sign in when network is available.", "Expected_Results": "The operator is not signed in and a network unavailability message is displayed."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "Verify successful sign-in after network availability", "Test_Sce_Description": "After the network becomes available, the operator attempts to sign in with valid credentials. The application should validate the credentials and inform the operator of successful sign-in.", "Expected_Results": "The operator is successfully signed in and the Security Setup screen is displayed."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "Verify unsuccessful change of temporary passcode due to incorrect length", "Test_Sce_Description": "After successful first-time sign-in, the operator is prompted to change their temporary passcode. The operator enters a new passcode that does not meet the pre-defined length criteria, and the application validates the new passcode.", "Expected_Results": "The new passcode is not changed and an error message is displayed."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Operator Enters Incorrect Username or Passcode", "Test_Scnario": "Verify successful change of temporary passcode after meeting length criteria", "Test_Sce_Description": "After unsuccessful change of temporary passcode due to incorrect length, the operator enters a new passcode that meets the pre-defined length criteria, and the application validates the new passcode.", "Expected_Results": "The new passcode is successfully changed and the Inspection Parameters screen is displayed."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Cardholder Taps-Off an Online SA Tool with Virtual Card Media", "Test_Scnario": "Cardholder Taps-Off an Online SA Tool with Virtual Card Media", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a cardholder taps-off using a Virtual Card Media. The SA Tool should be able to read the Virtual Card Media, authenticate it, send the tap to ATS for processing, and update the HMI of the SA Tool to confer the right to travel to the Cardholder.", "Expected_Results": "The SA Tool successfully reads and authenticates the Virtual Card Media, sends the tap to ATS for processing, and updates the HMI of the SA Tool to confer the right to travel to the Cardholder."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Cardholder Taps-Off an Online SA Tool with Virtual Card Media", "Test_Scnario": "SA Tool is offline and not connected to ATS", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is offline and not connected to ATS. The SA Tool should be able to collect offline tap details and send them to ATS via bulk upload once it returns back online.", "Expected_Results": "The SA Tool successfully collects offline tap details and sends them to ATS via bulk upload once it returns back online."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Cardholder Taps-Off an Online SA Tool with Virtual Card Media", "Test_Scnario": "Customer uses audio jack to hear instructions", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer uses the audio jack to hear instructions. The SA Tool should be able to switch into audio assist mode and provide audio instructions to the customer.", "Expected_Results": "The SA Tool successfully switches into audio assist mode and provides audio instructions to the customer."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Cardholder Taps-Off an Online SA Tool with Virtual Card Media", "Test_Scnario": "Non-Revenue Virtual Card Media is tapped on the Device", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a non-revenue Virtual Card Media is tapped on the device. The SA Tool should be able to send the tap like any other Open Payments Media to ATS.", "Expected_Results": "The SA Tool successfully sends the tap like any other Open Payments Media to ATS."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Cardholder Taps-Off an Online SA Tool with Virtual Card Media", "Test_Scnario": "Customer Overrides the Default Trip prior to tapping-off", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer overrides the default trip prior to tapping-off. The SA Tool should be able to process the tap as a normal tap-off.", "Expected_Results": "The SA Tool successfully processes the tap as a normal tap-off."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Cardholder Taps-Off an Online SA Tool with Virtual Card Media", "Test_Scnario": "Virtual Card Media fails Card Authentication check", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Virtual Card Media fails the Card Authentication check. The SA Tool should return the appropriate feedback and send the declined tap to ATS.", "Expected_Results": "The SA Tool successfully returns the appropriate feedback and sends the declined tap to ATS."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Cardholder Taps-Off an Online SA Tool with Virtual Card Media", "Test_Scnario": "Multiple NFC media are presented to the device at one time", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when multiple NFC media are presented to the device at one time. The SA Tool should be able to handle this situation appropriately.", "Expected_Results": "The SA Tool successfully handles the situation when multiple NFC media are presented to the device at one time."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Device is offline and not connected to ATS", "Test_Scnario": "Offline Device Tap-Off with Virtual Card Media", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is offline and not connected to ATS. The device should be able to collect offline tap details and once the device returns back online, offline taps should be sent to ATS via bulk upload.", "Expected_Results": "The device successfully collects offline tap details and sends them to ATS once it is back online."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Device is offline and not connected to ATS", "Test_Scnario": "Media Validation on Local Hotlist", "Test_Sce_Description": "This scenario tests the device's ability to check if the media is contained on the local hotlist, and if the hotlist parameter on the Virtual Card Scratchpad is enabled.", "Expected_Results": "The device successfully checks the media against the local hotlist and the hotlist parameter on the Virtual Card Scratchpad."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Device is offline and not connected to ATS", "Test_Scnario": "Tap Counter Check and Increment", "Test_Sce_Description": "This scenario tests the device's ability to check and increment the tap counter.", "Expected_Results": "The device successfully checks and increments the tap counter."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Device is offline and not connected to ATS", "Test_Scnario": "Latent Transaction Processor Functionality", "Test_Sce_Description": "This scenario tests the latent transaction processor's ability to store the tap till the device goes back online and connects to ATS. The tap should then be rated in ATS.", "Expected_Results": "The latent transaction processor successfully stores the tap and rates it in ATS once the device is back online."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Device is offline and not connected to ATS", "Test_Scnario": "Right to Travel Conferment", "Test_Sce_Description": "This scenario tests the device's ability to confer the right to travel to the Cardholder by updating the HMI of the SA Tool. The FPS \u2013 E-Purse Tap Off should be provided to the cardholder.", "Expected_Results": "The device successfully confers the right to travel to the Cardholder and provides the FPS \u2013 E-Purse Tap Off."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Device is offline and not connected to ATS", "Test_Scnario": "Audio Assist Mode Functionality", "Test_Sce_Description": "This scenario tests the device's ability to switch into audio assist mode when the customer inserts headphones into the Audio jack. Audio instructions should detail how to adjust the volume and prompt the user to tap their media.", "Expected_Results": "The device successfully switches into audio assist mode and provides audio instructions to the user."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Device is offline and not connected to ATS", "Test_Scnario": "Non-Revenue Virtual Card Media Processing", "Test_Sce_Description": "This scenario tests the device's ability to process non-revenue Virtual Card Media. The device should send the tap like any other Virtual Card Media to ATS.", "Expected_Results": "The device successfully processes non-revenue Virtual Card Media and sends the tap to ATS."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Device is offline and not connected to ATS", "Test_Scnario": "Default Trip Override", "Test_Sce_Description": "This scenario tests the device's ability to process the tap as a normal tap-off if the tap-off occurs while the device is in Override mode.", "Expected_Results": "The device successfully processes the tap as a normal tap-off when in Override mode."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Device is offline and not connected to ATS", "Test_Scnario": "Card Authentication Check Failure", "Test_Sce_Description": "This scenario tests the device's response when the Virtual Card Media fails the Card Authentication check. The device should return the appropriate feedback.", "Expected_Results": "The device successfully returns the appropriate feedback when the Virtual Card Media fails the Card Authentication check."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Activate", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Device is offline and not connected to ATS", "Test_Scnario": "Multiple NFC Media Presentation", "Test_Sce_Description": "This scenario tests the device's ability to handle the presentation of multiple NFC media at one time.", "Expected_Results": "The device successfully handles the presentation of multiple NFC media at one time."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass within valid time", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a Virtual Card with a valid Limited Period Pass within the valid time limit.", "Expected_Results": "The fare payment should be accepted successfully and the transaction should be completed as per the steps in the Main Use Case."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a Virtual Card with a valid Limited Period Pass outside the valid time limit but with sufficient e-Purse balance.", "Expected_Results": "The fare payment should be accepted successfully, the value should be deducted from the e-Purse, and the transaction should be completed as per the steps in the Main Use Case."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using an Anonymous Virtual Card with an expired Period Pass and ePurse balance less than the fare amount.", "Expected_Results": "The fare payment should be declined, a declined message should be displayed to the customer, and the transaction should not be conducted."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a blocked Virtual Card.", "Expected_Results": "The fare payment should be declined, a declined message should be displayed to the customer, and the transaction should not be conducted."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a Virtual Card that is on the Deny List.", "Expected_Results": "The fare payment should be declined, a declined message should be displayed to the customer, and the transaction should not be conducted."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a fare payment transaction.", "Expected_Results": "The transaction should be completed successfully even if the battery goes below the low battery threshold."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card Has Sufficient ePurse Balance and an Expired Period Pass", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a Virtual Card with an expired Period Pass but with sufficient ePurse balance.", "Expected_Results": "The fare payment should be accepted successfully, the value should be deducted from the e-Purse, and the transaction should be completed as per the steps in the Main Use Case."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount and an Expired Period Pass", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a Registered Virtual Card with an expired Period Pass and ePurse balance less than the fare amount.", "Expected_Results": "The fare payment should be accepted successfully, the value should be deducted from the e-Purse, and the transaction should be completed as per the steps in the Main Use Case."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Farecard using Period Pass - Transaction is within Inter-SP Transfer window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a Farecard with a valid transfer product from another service provider within the Inter-SP Transfer window.", "Expected_Results": "The fare payment should be accepted successfully and the transaction should be completed as per the steps in the Main Use Case."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Farecard using Period Pass \u2013 Customer requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a Farecard and the customer requests audio messages for fare payment.", "Expected_Results": "The fare payment should be accepted successfully, the audio messages should be played to the customer, and the transaction should be completed as per the steps in the Main Use Case."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "SA Tool NFC reader fails to read the Virtual Card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool NFC reader when it detects the Virtual Card but is unable to read it. The operator should be notified that the Virtual Card is unreadable.", "Expected_Results": "The SA Tool application should indicate to the operator that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Customer\u2019s Virtual Card has an expired period pass and sufficient ePurse balance", "Test_Sce_Description": "This scenario tests the functionality of the ATS when the customer's Virtual Card has an expired period pass and the ePurse balance is more than the fare amount. The ATS should compute the value to be deducted from the e-Purse and deduct the fare accordingly.", "Expected_Results": "The ATS should detect that the Period Pass has expired, compute the value to be deducted from the e-Purse, and deduct the fare accordingly."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Customer\u2019s Virtual Card has an expired period pass and ePurse balance less than the fare amount", "Test_Sce_Description": "This scenario tests the functionality of the ATS when the customer's Virtual Card has an expired period pass and the ePurse balance is less than the fare amount. The ATS should compute the value to be deducted from the e-Purse and put the Virtual Card into overdraft.", "Expected_Results": "The ATS should detect that the Period Pass has expired, compute the value to be deducted from the e-Purse, and put the Virtual Card into overdraft."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Customer\u2019s Virtual Card has a valid transfer product from other service provider", "Test_Sce_Description": "This scenario tests the functionality of the ATS when the customer's Virtual Card has a valid transfer product from another service provider. The ATS should read that the Virtual Card contains a valid inter-agency transfer product and has a valid period pass.", "Expected_Results": "The ATS should read that the Virtual Card contains a valid inter-agency transfer product and has a valid period pass."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Customer requests Audio Messages", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer requests audio messages for fare payment. The operator should enable audio mode and adjust the volume level at the customer\u2019s discretion.", "Expected_Results": "The operator should enable audio mode and adjust the volume level at the customer\u2019s discretion. The SA Tool should display the fare payment screen to the operator and customer for the duration of the audio message."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the ATS when the customer has an anonymous Virtual Card with an expired period pass and the ePurse balance is less than the fare amount. The ATS should detect the card is Anonymous and the ePurse Balance is less than the fare amount.", "Expected_Results": "The ATS should detect the card is Anonymous and the ePurse Balance is less than the fare amount. The SA Tool application should display a declined message to the customer."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the ATS when the customer's Farecard is blocked. The ATS should detect the card is blocked.", "Expected_Results": "The ATS should detect the card is blocked. The SA Tool application should display a declined message to the customer."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario tests the functionality of the ATS when the customer's Virtual Card is on the Deny List. The ATS should detect the card is on the Deny List and remove it from the Deny List and set it to blocked.", "Expected_Results": "The ATS should detect the card is on the Deny List and remove it from the Deny List and set it to blocked. The SA Tool application should display a declined message to the customer."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Scnario": "Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a successful Farecard tap. The low battery threshold should be high enough that the remote lists can be processed even after the SA Tool battery goes below the low battery threshold.", "Expected_Results": "The low battery threshold should be high enough that the remote lists can be processed even after the SA Tool battery goes below the low battery threshold."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card Has Sufficient ePurse Balance and an Expired Period Pass", "Test_Scnario": "Testing the functionality of the SA Tool when the customer's Virtual Card has sufficient ePurse balance and an expired Period Pass", "Test_Sce_Description": "In this scenario, the customer's Virtual Card has an expired period pass but the ePurse balance is more than the fare amount. The test will verify if the ATS correctly detects that the Period Pass has expired, computes the value to be deducted from the ePurse, and deducts the fare accordingly.", "Expected_Results": "The ATS should correctly detect the expired Period Pass and deduct the fare from the ePurse balance. The transaction should be successful and the remaining ePurse balance should be updated correctly."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card Has Sufficient ePurse Balance and an Expired Period Pass", "Test_Scnario": "Testing the performance of the SA Tool when processing transactions with expired Period Pass and sufficient ePurse balance", "Test_Sce_Description": "In this scenario, the performance of the SA Tool will be tested when processing transactions where the customer's Virtual Card has an expired Period Pass and sufficient ePurse balance. The test will measure the time taken by the SA Tool to process the transaction and update the ePurse balance.", "Expected_Results": "The SA Tool should process the transaction and update the ePurse balance within the acceptable time limit defined by the TTC."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card Has Sufficient ePurse Balance and an Expired Period Pass", "Test_Scnario": "Testing the security of the SA Tool when processing transactions with expired Period Pass and sufficient ePurse balance", "Test_Sce_Description": "In this scenario, the security of the SA Tool will be tested when processing transactions where the customer's Virtual Card has an expired Period Pass and sufficient ePurse balance. The test will verify if the SA Tool securely communicates with the ATS and if the customer's ePurse balance and transaction details are securely stored and transmitted.", "Expected_Results": "The SA Tool should securely communicate with the ATS and securely store and transmit the customer's ePurse balance and transaction details. There should be no security vulnerabilities or data leaks."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card Has Sufficient ePurse Balance and an Expired Period Pass", "Test_Scnario": "Testing the functionality of the SA Tool when the customer's Virtual Card is on the Deny List", "Test_Sce_Description": "In this scenario, the customer's Virtual Card is on the Deny List. The test will verify if the ATS correctly detects that the card is on the Deny List, removes the card from the Deny List, sets it to blocked, and returns a declined result back to the SA Tool.", "Expected_Results": "The ATS should correctly detect that the card is on the Deny List, remove the card from the Deny List, set it to blocked, and return a declined result back to the SA Tool. The transaction should not be conducted and the SA Tool should display a declined message to the customer."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Increment", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card Has Sufficient ePurse Balance and an Expired Period Pass", "Test_Scnario": "Testing the functionality of the SA Tool when the customer's Virtual Card is blocked", "Test_Sce_Description": "In this scenario, the customer's Virtual Card is blocked. The test will verify if the ATS correctly detects that the card is blocked and returns a declined result back to the SA Tool.", "Expected_Results": "The ATS should correctly detect that the card is blocked and return a declined result back to the SA Tool. The transaction should not be conducted and the SA Tool should display a declined message to the customer."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Customer uses audio jack to hear instructions", "Test_Scnario": "Tap-Off an SA Tool with Virtual Card Media \u2013 Customer uses audio jack to hear instructions", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer uses the audio jack to hear instructions. The customer inserts headphones into the Audio jack which automatically switches the device into audio assist mode. Audio instructions detail how to adjust the volume by pressing the volume button and then prompt the user to tap their media (in both French and English).", "Expected_Results": "The device should successfully switch to audio assist mode when headphones are inserted into the audio jack. The audio instructions should be clear and audible, and the volume adjustment should work as expected. The device should prompt the user to tap their media in both French and English."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Customer uses audio jack to hear instructions", "Test_Scnario": "Tap-Off an SA Tool with Virtual Card Media - Non-Revenue Virtual Card Media is tapped on the Device", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a non-revenue Virtual Card Media is tapped on the device. The device should send the tap like any other Virtual Card Media to ATS.", "Expected_Results": "The device should successfully recognize the non-revenue Virtual Card Media and send the tap to ATS. The ATS should process the tap as any other Virtual Card Media."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Customer uses audio jack to hear instructions", "Test_Scnario": "Customer Overrides the Default Trip prior to tapping-off", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the customer requests the override of a Default Trip by interacting with the Device. The device should inform the customer that it is prepared to override the Default Trip.", "Expected_Results": "The device should successfully recognize the customer's request to override the Default Trip and inform the customer accordingly. The device should then process the tap as a normal tap-off."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Customer uses audio jack to hear instructions", "Test_Scnario": "Tap-off and Virtual Card Media fails Card Authentication check", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Virtual Card Media fails the Card Authentication check. The device should return the appropriate feedback.", "Expected_Results": "The device should successfully recognize that the Virtual Card Media has failed the Card Authentication check and return the appropriate feedback. The Declined \u2013 Contact CLIENT Customer Service screen should be provided to the cardholder."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media \u2013 Customer uses audio jack to hear instructions", "Test_Scnario": "Tap-off and Multiple NFC media are presented to the device at one time", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when multiple NFC media are presented to the device at one time. The device should be able to handle this situation.", "Expected_Results": "The device should successfully recognize that multiple NFC media are presented at the same time and handle this situation appropriately."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media - Non-Revenue Virtual Card Media is tapped on the Device", "Test_Scnario": "Testing the functionality of the device when it is offline and not connected to ATS", "Test_Sce_Description": "This scenario tests the ability of the device to collect offline tap details and send them to ATS once it is back online. The device should be able to store the tap details until it goes back online and connects to ATS.", "Expected_Results": "The device should successfully store the offline tap details and send them to ATS once it is back online."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media - Non-Revenue Virtual Card Media is tapped on the Device", "Test_Scnario": "Testing the functionality of the device when a Virtual Card Media is tapped", "Test_Sce_Description": "This scenario tests the ability of the device to read the Virtual Card media and complete the necessary checks. The device should be able to check if the media presented is a valid Virtual Farecard and if the card is valid.", "Expected_Results": "The device should successfully read the Virtual Card media and complete the necessary checks."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media - Non-Revenue Virtual Card Media is tapped on the Device", "Test_Scnario": "Testing the functionality of the device when it sends the tap to ATS for processing", "Test_Sce_Description": "This scenario tests the ability of the device to send the tap to ATS for processing. ATS should be able to check the online hotlist and complete the fare processing.", "Expected_Results": "The device should successfully send the tap to ATS for processing and ATS should successfully check the online hotlist and complete the fare processing."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media - Non-Revenue Virtual Card Media is tapped on the Device", "Test_Scnario": "Testing the functionality of the device when it confers the right to travel to the Cardholder", "Test_Sce_Description": "This scenario tests the ability of the device to confer the right to travel to the Cardholder by updating the HMI of the SA Tool. The FPS \u2013 E-Purse Tap On should be provided to the cardholder.", "Expected_Results": "The device should successfully confer the right to travel to the Cardholder by updating the HMI of the SA Tool."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media - Non-Revenue Virtual Card Media is tapped on the Device", "Test_Scnario": "Testing the functionality of the device when a Non-Revenue Virtual Card Media is tapped", "Test_Sce_Description": "This scenario tests the ability of the device to send the tap like any other Virtual Card Media to ATS when a Non-Revenue Virtual Card Media is tapped.", "Expected_Results": "The device should successfully send the tap like any other Virtual Card Media to ATS when a Non-Revenue Virtual Card Media is tapped."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media - Non-Revenue Virtual Card Media is tapped on the Device", "Test_Scnario": "Testing the functionality of the device when a Virtual Card Media fails the Card Authentication check", "Test_Sce_Description": "This scenario tests the ability of the device to return the appropriate feedback when a Virtual Card Media fails the Card Authentication check.", "Expected_Results": "The device should successfully return the appropriate feedback when a Virtual Card Media fails the Card Authentication check."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media - Non-Revenue Virtual Card Media is tapped on the Device", "Test_Scnario": "Testing the functionality of the device when multiple NFC media are presented at one time", "Test_Sce_Description": "This scenario tests the ability of the device to handle multiple NFC media presented at one time.", "Expected_Results": "The device should successfully handle multiple NFC media presented at one time."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media - Non-Revenue Virtual Card Media is tapped on the Device", "Test_Scnario": "Testing the functionality of the device when the customer uses audio jack to hear instructions", "Test_Sce_Description": "This scenario tests the ability of the device to switch into audio assist mode and provide audio instructions to the customer when headphones are inserted into the Audio jack.", "Expected_Results": "The device should successfully switch into audio assist mode and provide audio instructions to the customer when headphones are inserted into the Audio jack."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media - Non-Revenue Virtual Card Media is tapped on the Device", "Test_Scnario": "Testing the functionality of the device when the customer overrides the Default Trip prior to tapping-off", "Test_Sce_Description": "This scenario tests the ability of the device to process the tap as a normal tap-off when the tap-off occurs while the device is in Override mode.", "Expected_Results": "The device should successfully process the tap as a normal tap-off when the tap-off occurs while the device is in Override mode."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-Off an SA Tool with Virtual Card Media - Non-Revenue Virtual Card Media is tapped on the Device", "Test_Scnario": "Testing the functionality of the device when a Virtual Card contains a Default O/D and the Customer Taps on at either the Origin or Destination Station", "Test_Sce_Description": "This scenario tests the ability of the device to handle a situation where the Virtual Card media contains a default trip and the current tap location is either the origin or destination.", "Expected_Results": "The device should successfully handle a situation where the Virtual Card media contains a default trip and the current tap location is either the origin or destination."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Virtual Card Media fails Card Authentication check", "Test_Scnario": "Virtual Card Media fails Card Authentication check", "Test_Sce_Description": "This scenario tests the functionality of the device when the Virtual Card Media fails the Card Authentication check. The device should perform the necessary validation and determine that the Virtual Card Media is unable to pass the checks.", "Expected_Results": "The device should provide the Declined \u2013 Contact CLIENT Customer Service screen to the cardholder. An error should be captured and logged in the background and also in the SOTI logs. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Virtual Card Media fails Card Authentication check", "Test_Scnario": "Multiple NFC media are presented to the device at one time", "Test_Sce_Description": "This scenario tests the functionality of the device when multiple NFC media are presented at the same time. The device should block all fare payment functionality.", "Expected_Results": "The device should provide the Anti-Collision Error Screen to the cardholder. An error should be captured and logged in the background and also in the SOTI logs. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Virtual Card Media fails Card Authentication check", "Test_Scnario": "Tap-off a Virtual Card Media when SA Tool is in Out-of-Service state", "Test_Sce_Description": "This scenario tests the functionality of the device when it is in Out-of-Service state. The device should display the Not in Service screen to the cardholder and not detect the media.", "Expected_Results": "The device should remain in Out-of-Service State."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Virtual Card Media fails Card Authentication check", "Test_Scnario": "Tap-off and an error has occurred", "Test_Sce_Description": "This scenario tests the functionality of the device when an error has occurred that does not cover the exception cases above. The device should record the tap.", "Expected_Results": "The device should provide the Declined \u2013 See Customer Service Screen to the cardholder. An error should be captured and logged in the background and also in the SOTI logs. The declined tap should be sent to ATS."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Virtual Card Media fails Card Authentication check", "Test_Scnario": "Tap-off and Virtual Card Media is on the local hotlist and device is offline", "Test_Sce_Description": "This scenario tests the functionality of the device when the Virtual Card Media is on the local hotlist and the device is offline. The device should check the local hotlist and return a response that the media is denied.", "Expected_Results": "The device should provide the Declined \u2013 Blocked Screen to the cardholder. The Device should update the blocking parameter on the Virtual Card Scratchpad to be enabled and remove the Virtual Card from the hotlist. An error should be captured and logged in the background and also in the SOTI logs."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Virtual Card Media fails Card Authentication check", "Test_Scnario": "Tap-off and Virtual Card Media\u2019s blocked parameter on the scratchpad is enabled", "Test_Sce_Description": "This scenario tests the functionality of the device when the Virtual Card Media\u2019s scratchpad blocked parameter is set to enabled. The device should provide the appropriate feedback to the Cardholder of a successful tap.", "Expected_Results": "The FPS \u2013 Virtual Card E-Purse Flat Fare Accepted Screen should be provided to the cardholder. The tap counter should be checked and reset to 0 if it isn't already at 0. The Virtual Card scratchpad should be updated to remove the block parameter and prioritize the accepted response from ATS."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Virtual Card Media fails Card Authentication check", "Test_Scnario": "Virtual Media has already tapped-on using an Online Device", "Test_Sce_Description": "This scenario tests the functionality of the device when the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window, whereby the initial device and secondary device tapped on were both online.", "Expected_Results": "The device should provide the Declined \u2013 Already Tapped Screen to the cardholder. An error should be captured and logged in the background and also in the SOTI logs."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Virtual Card Media fails Card Authentication check", "Test_Scnario": "Virtual Card Media has already tapped-on using an Offline Device (Anti-passback)", "Test_Sce_Description": "This scenario tests the functionality of the device when the cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window whereby the initial device tapped, and secondary device(s) is the same device and is offline.", "Expected_Results": "The device should provide the Declined \u2013 Already Tapped Screen to the cardholder. An error should be captured and logged in the background and also in the SOTI logs."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Multiple NFC media are presented to the device at one time", "Test_Scnario": "Multiple NFC media presented to the device at once", "Test_Sce_Description": "In this scenario, the customer presents multiple NFC media to the card reader at once. The device should block all user functionality and present an Anti-Collision toast message to the customer.", "Expected_Results": "The device blocks all user functionality and presents an Anti-Collision toast message to the customer. An error is captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Multiple NFC media are presented to the device at one time", "Test_Scnario": "Tap a non-activated Farecard on an SA Tool", "Test_Sce_Description": "In this scenario, the customer taps a non-activated Farecard on the device. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction due to inactive farecard.", "Expected_Results": "The device detects that the Farecard is not activated and provides feedback to the Cardholder of an unsuccessful transaction due to inactive farecard. An error is captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Multiple NFC media are presented to the device at one time", "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Sce_Description": "In this scenario, the customer taps a Farecard on an SA Tool and a Card reading error occurs. The device should not provide any feedback and screen remains \u201cIn-Service\u201d display.", "Expected_Results": "The device does not provide any feedback and screen remains \u201cIn-Service\u201d display. An error is captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Multiple NFC media are presented to the device at one time", "Test_Scnario": "Tap a Farecard on an SA Tool and card write error occurs", "Test_Sce_Description": "In this scenario, the customer taps a Farecard on an SA Tool and the device fails to write to the Farecard. The device should not provide any feedback and screen remains \u201cIn-Service\u201d display.", "Expected_Results": "The device does not provide any feedback and screen remains \u201cIn-Service\u201d display. The device deletes the transaction information. An error is captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Multiple NFC media are presented to the device at one time", "Test_Scnario": "Tap a Farecard when SA Tool is in Out-of-Service state", "Test_Sce_Description": "In this scenario, the customer taps a Farecard when the device is in Out-of-Service state. The device should not detect the media and remains in Out-of-Service State.", "Expected_Results": "The device does not detect the media and remains in Out-of-Service State."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Multiple NFC media are presented to the device at one time", "Test_Scnario": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is online", "Test_Sce_Description": "In this scenario, the customer taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool Tap-off anti-passback Window. The device should provide the cardholder with the appropriate feedback.", "Expected_Results": "The device sends the tap to ATS which returns a response that the cardholder has already tapped on at the same station and is within the Tap-off anti-passback Window. The Declined \u2013 Already Tapped Screen is provided to the cardholder. An error is captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Multiple NFC media are presented to the device at one time", "Test_Scnario": "Customers attempts to tap-on immediately after tapping-off at the same station and the device is offline (anti-passback)", "Test_Sce_Description": "In this scenario, the customer taps-on again at an SA Tool after just tapping-off at the same station within the SA Tool tap-off anti-passback Window whereby the customer has tapped-on again at the same offline device. The device should provide the cardholder with the appropriate feedback.", "Expected_Results": "The device checks the latent transaction processor on the same device for a previous tap within the tap-off anti-passback window. The tap is stored on the device till it is connected to ATS where the tap will be reconciled. The Declined \u2013 Already Tapped Screen is provided to the cardholder. An error is captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Multiple NFC media are presented to the device at one time", "Test_Scnario": "Customer attempts to tap on and an error has occurred", "Test_Sce_Description": "In this scenario, an error has occurred on the device that does not cover the exception cases above. The device should record the tap and provide the Declined \u2013 See Customer Service Screen to the cardholder.", "Expected_Results": "The device records the tap and provides the Declined \u2013 See Customer Service Screen to the cardholder. An error is captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Counters", "Sub_Flow_Name": "Configure haptic feedback", "Use_Case_Name": "Tap-off and Multiple NFC media are presented to the device at one time", "Test_Scnario": "Virtual Card has insufficient E-Purse to cover the Tap-On Fare", "Test_Sce_Description": "In this scenario, the customer taps a Virtual Card that has insufficient E-Purse to cover the Tap-On Fare. The device should provide the Declined \u2013 Insufficient Funds Screen to the cardholder.", "Expected_Results": "The device provides the Declined \u2013 Insufficient Funds Screen to the cardholder. An error is captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "SA Tool auto-computes current location", "Test_Scnario": "SA Tool auto-computes current location", "Test_Sce_Description": "Verify that the SA Tool auto-computes the current location when the auto-location feature is enabled. The tool should compute the distance from all stops on the selected route and trip at a configurable duration. Once within a stop radius, the device should use this stop as the current stop on SA Tool application.", "Expected_Results": "The SA Tool should successfully auto-compute the current location and use the nearest stop as the current stop on the application."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "SA Tool auto-computes current location", "Test_Scnario": "GPS signal quality changes", "Test_Sce_Description": "Verify that the SA Tool updates the GPS signal quality indicator on the home screen when the GPS signal quality changes. The indicator should reflect the current quality of the GPS signal.", "Expected_Results": "The GPS signal quality indicator on the home screen should accurately reflect the current quality of the GPS signal."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "SA Tool auto-computes current location", "Test_Scnario": "CLIENT backend connectivity changes", "Test_Sce_Description": "Verify that the SA Tool updates the network icon to reflect the connectivity status with the network which reflects the status with CLIENT backend when the connectivity changes.", "Expected_Results": "The network icon on the SA Tool should accurately reflect the current connectivity status with the CLIENT backend."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "SA Tool auto-computes current location", "Test_Scnario": "Operator Overrides Selects/Overrides Current Location", "Test_Sce_Description": "Verify that the operator can select/override the current location for inspection / fare payment purposes on the SA Tool. The Route Parameters should be updated to the operator selected location.", "Expected_Results": "The operator should be able to successfully select/override the current location on the SA Tool and the Route Parameters should be updated accordingly."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "SA Tool auto-computes current location", "Test_Scnario": "Operator enables auto-positioning for current location", "Test_Sce_Description": "Verify that the operator can enable auto-location for route parameters on the SA Tool. The SA Tool should automatically compute the current inspection location and the auto location signal quality indicator on the home screen should start reflecting the auto location signal quality.", "Expected_Results": "The operator should be able to successfully enable auto-location for route parameters on the SA Tool and the tool should automatically compute the current inspection location."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "SA Tool auto-computes current location", "Test_Scnario": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Sce_Description": "Verify that the SA Tool application receives remote configuration and enables/disables the auto location functionality based on the new configuration in background. If the operator had auto location enabled, and the feature was remotely disabled, a greyed out icon should be shown.", "Expected_Results": "The SA Tool should successfully receive remote configuration and enable/disable the auto location functionality based on the new configuration. A greyed out icon should be shown if the feature was remotely disabled."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "SA Tool auto-computes current location", "Test_Scnario": "Operator disables auto-location functionality", "Test_Sce_Description": "Verify that the operator can disable the auto-location functionality on the SA Tool. The operator should be able to turn off auto-location and save the changes.", "Expected_Results": "The operator should be able to successfully disable the auto-location functionality on the SA Tool."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS signal quality changes", "Test_Scnario": "SA Tool application receives remote configuration", "Test_Sce_Description": "Verify that the SA Tool application is able to receive remote configuration updates correctly and apply them as expected.", "Expected_Results": "The SA Tool application should successfully receive the remote configuration and apply the changes accordingly. If the auto location functionality was enabled, it should be disabled and vice versa."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS signal quality changes", "Test_Scnario": "Operator disables auto-location functionality", "Test_Sce_Description": "Verify that the operator is able to disable the auto-location functionality on the SA Tool application.", "Expected_Results": "The operator should be able to successfully disable the auto-location functionality and save the changes. The location positioning and calculation should be disabled."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS signal quality changes", "Test_Scnario": "SA Tool auto-computes current location", "Test_Sce_Description": "Verify that the SA Tool is able to auto-compute the current location correctly when the auto-location functionality is enabled.", "Expected_Results": "The SA Tool should successfully compute the current location based on the distance from all stops on the selected route and trip at a configurable duration."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS signal quality changes", "Test_Scnario": "GPS signal quality changes", "Test_Sce_Description": "Verify that the SA Tool is able to detect changes in the GPS signal quality and reflect the same on the home screen.", "Expected_Results": "The GPS signal quality indicator on the home screen should change to reflect the current GPS signal quality."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS signal quality changes", "Test_Scnario": "CLIENT backend connectivity changes", "Test_Sce_Description": "Verify that the SA Tool is able to detect changes in the connectivity status with the CLIENT backend and update the network icon accordingly.", "Expected_Results": "The network icon on the SA Tool should update to reflect the current connectivity status with the CLIENT backend."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS signal quality changes", "Test_Scnario": "Operator Overrides Selects/Overrides Current Location", "Test_Sce_Description": "Verify that the operator is able to select/override the current location for inspection / fare payment purposes on the SA Tool.", "Expected_Results": "The operator should be able to successfully select/override the current location. The Route Parameters should be updated to the operator selected location."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS signal quality changes", "Test_Scnario": "SA Tool in In-Service State", "Test_Sce_Description": "Verify that the SA Tool operates correctly in the 'In-Service' state, allowing operators to interact with the device and access different functionalities.", "Expected_Results": "The SA Tool should function correctly in the 'In-Service' state, allowing operators to interact with the device and access different functionalities."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS signal quality changes", "Test_Scnario": "SA Tool in Real-Time Mode", "Test_Sce_Description": "Verify that the SA Tool operates correctly in the 'Real-Time' mode, providing a near real-time response to the Operator of the result for the customer\u2019s media.", "Expected_Results": "The SA Tool should function correctly in the 'Real-Time' mode, providing a near real-time response to the Operator of the result for the customer\u2019s media."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS signal quality changes", "Test_Scnario": "SA Tool in Queued Mode", "Test_Sce_Description": "Verify that the SA Tool operates correctly in the 'Queued' mode, sending the taps collected to ATS without providing a true inspection or fare payment result to the Operator.", "Expected_Results": "The SA Tool should function correctly in the 'Queued' mode, sending the taps collected to ATS without providing a true inspection or fare payment result to the Operator."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS signal quality changes", "Test_Scnario": "SA Tool in Degraded Mode", "Test_Sce_Description": "Verify that the SA Tool operates correctly in the 'Degraded' mode, only accepting Farecard taps.", "Expected_Results": "The SA Tool should function correctly in the 'Degraded' mode, only accepting Farecard taps."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "CLIENT backend connectivity changes", "Test_Scnario": "Testing the failure to connect to the internet", "Test_Sce_Description": "This scenario tests the application's response when there is no internet connection and the user is performing an action that requires connection to the Internet.", "Expected_Results": "The application should time out and display the relevant error message with options to try again or cancel. If successful connection is restored, the application should resume the main use case. If the action is cancelled, the application should return to the previous screen."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "CLIENT backend connectivity changes", "Test_Scnario": "Testing the transmission of DECLINED message from Moneris", "Test_Sce_Description": "This scenario tests the application's response when the operator is performing a credit or debit transaction and communication with Moneris fails.", "Expected_Results": "The application should display the relevant error message and return to the payment means screen. The receipt printer should print a failure of payment means. If Moneris transaction was unsuccessful during a refund, the option to refund all in cash should be available."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "CLIENT backend connectivity changes", "Test_Scnario": "Testing the failure to load Farecard after payment has been processed", "Test_Sce_Description": "This scenario tests the application's response when the operator is performing a Farecard transaction, the payment has been processed and successful, but the write to the card is not successful.", "Expected_Results": "The application should display the relevant error message and the operator can choose to try again or cancel and refund the payment."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "CLIENT backend connectivity changes", "Test_Scnario": "Testing the failure to connect to receipt printer", "Test_Sce_Description": "This scenario tests the application's response when the operator is performing a transaction which requires printing, and connection with the receipt printer fails.", "Expected_Results": "The application should display the relevant error message and the operator can choose to proceed with the flow without printing capabilities, or exit the flow. If \u201cNo\u201d is chosen, the application should return to the previous screen. If \u201cYes\u201d is chosen, the application should proceed through the main use case without the ability to print."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "CLIENT backend connectivity changes", "Test_Scnario": "Testing the failure to connect to Pin Pad", "Test_Sce_Description": "This scenario tests the application's response when the operator is performing a transaction which requires use of Pin Pad, and connection with the Pin Pad fails.", "Expected_Results": "The application should display the relevant error message and the operator can choose to wait for the Pin Pad to connect in the background or exit the flow. If the connection to the Pin Pad is not automatically established, the operator should be able to manually attempt to connect an available Pin Pad."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "CLIENT backend connectivity changes", "Test_Scnario": "Testing the communication interfaces", "Test_Sce_Description": "This scenario tests the application's ability to communicate with the Subsystem over private cellular network or Wi-Fi for various purposes such as Farecard Transaction Data, Events, Device Mode and Audit Counters, Remote Lists, and Device Management.", "Expected_Results": "The application should be able to successfully communicate with the Subsystem over private cellular network or Wi-Fi for all the mentioned purposes."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "CLIENT backend connectivity changes", "Test_Scnario": "Testing the Open Payments Media", "Test_Sce_Description": "This scenario tests the application's ability to send all data related to Open Payments from the device to ATS, download the Open Payments Media local deny list from ATS via the Subsystem, and download Open Payments transactions from local FTPs onto the SA Tool Device via Wi-Fi P2P.", "Expected_Results": "The application should be able to successfully perform all the mentioned operations related to Open Payments Media."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Location", "Test_Scnario": "Operator Selects Additional Options Menu on the SA Tool", "Test_Sce_Description": "The operator should be able to select the Additional Options menu on the SA Tool. This is the first step in the process of overriding the current route parameters.", "Expected_Results": "The Additional Options menu should open successfully when selected by the operator."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Location", "Test_Scnario": "Operator Selects Route Parameters", "Test_Sce_Description": "The operator should be able to select Route Parameters from the Additional Options menu. This is the second step in the process of overriding the current route parameters.", "Expected_Results": "The Route Parameters option should be available in the Additional Options menu and should open successfully when selected by the operator."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Location", "Test_Scnario": "Operator Updates Current Location", "Test_Sce_Description": "The operator should be able to update the current location in the Route Parameters. This is the third step in the process of overriding the current route parameters.", "Expected_Results": "The current location should be successfully updated by the operator in the Route Parameters."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Location", "Test_Scnario": "Route Parameters Update to Operator Selected Location", "Test_Sce_Description": "The Route Parameters should update to the location selected by the operator. This is the fourth step in the process of overriding the current route parameters.", "Expected_Results": "The Route Parameters should successfully update to the location selected by the operator."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Location", "Test_Scnario": "Route Parameters Update Automatically to Next Station", "Test_Sce_Description": "The Route Parameters should update automatically to the next station upon arrival at the next station. This is the fifth step in the process of overriding the current route parameters.", "Expected_Results": "The Route Parameters should successfully update automatically to the next station upon arrival at the next station."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Location", "Test_Scnario": "Operator Selects/Overrides Location in Manual Mode", "Test_Sce_Description": "In the alternate flow, the operator should be able to select/override the location in manual mode when auto-location is disabled on the SA Tool.", "Expected_Results": "The operator should successfully be able to select/override the location in manual mode when auto-location is disabled on the SA Tool."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Location", "Test_Scnario": "Operator Switches Device Mode for Current SP", "Test_Sce_Description": "The operator should be able to switch the device mode between DISTANCE BASED TRANSIT and GO. This is the main use case for UC-SA Tool-028.", "Expected_Results": "The operator should successfully be able to switch the device mode between DISTANCE BASED TRANSIT and GO."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Location", "Test_Scnario": "SP Switching is Disabled", "Test_Sce_Description": "In the alternate flow, SP Switching should be disabled. The application should enable/disable the SP switching functionality only if no operator is logged in.", "Expected_Results": "SP Switching should be successfully disabled. The application should enable/disable the SP switching functionality only if no operator is logged in."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Location", "Test_Scnario": "Operator Enables Auto-Positioning for Current Location", "Test_Sce_Description": "The operator should be able to enable auto-location for route parameters on the SA Tool. This is the main use case for UC-SA Tool-023.", "Expected_Results": "The operator should successfully be able to enable auto-location for route parameters on the SA Tool."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Location", "Test_Scnario": "GPS Functionality is Remotely Enabled/Disabled on the SA Tool", "Test_Sce_Description": "In the alternate flow, the GPS functionality should be remotely enabled/disabled on the SA Tool.", "Expected_Results": "The GPS functionality should be successfully remotely enabled/disabled on the SA Tool."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Selects/Overrides Location (Manual Mode)", "Test_Scnario": "Verify Operator Selects/Overrides Location (Manual Mode)", "Test_Sce_Description": "In this scenario, the operator will select the Additional Options menu on the SA Tool, then select Route Parameters and update the current location. The Route Parameters should be updated to the operator selected location and automatically updated to the next station upon arrival at the next station.", "Expected_Results": "The Route Parameters should be successfully updated to the operator selected location and automatically updated to the next station upon arrival at the next station."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Selects/Overrides Location (Manual Mode)", "Test_Scnario": "Verify Operator can continue selecting stops within the route from the Tap Card Screen", "Test_Sce_Description": "In this scenario, the operator will continue selecting stops within the route from the Tap Card Screen after completing Steps 1 \u2013 4 of the Main Use Case.", "Expected_Results": "The operator should be able to successfully continue selecting stops within the route from the Tap Card Screen."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Selects/Overrides Location (Manual Mode)", "Test_Scnario": "Verify Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Sce_Description": "In this scenario, the operator will select SP (DISTANCE BASED TRANSIT/GO) on the Login screen, enter their login credentials and select \u201clogin\u201d. The SA Tool application should validate the credentials and the operator should be successfully logged in.", "Expected_Results": "The operator should be able to successfully switch the device mode for Current SP (DISTANCE BASED TRANSIT and GO Only) and log in to the SA Tool application."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Selects/Overrides Location (Manual Mode)", "Test_Scnario": "Verify SP Switching is disabled", "Test_Sce_Description": "In this scenario, the operator will tap on the SP icon on the login screen to switch between SPs. A toast message notification notifying SP switching is disabled should be displayed.", "Expected_Results": "A toast message notification notifying SP switching is disabled should be successfully displayed."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Selects/Overrides Location (Manual Mode)", "Test_Scnario": "Verify Operator selects a new Line but doesn\u2019t select a trip", "Test_Sce_Description": "In this scenario, the operator will select the desired current line. The selected line is different from the current line and hence, the application should reset the trip and stop selection. The operator should proceed to save the inspection parameters, but the apply button will be greyed out and Operator won\u2019t be able to save the current inspection parameters.", "Expected_Results": "The application should successfully reset the trip and stop selection and the apply button should be greyed out."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Selects/Overrides Location (Manual Mode)", "Test_Scnario": "Verify Operator enables auto-positioning for current location", "Test_Sce_Description": "In this scenario, the operator will select the Additional Options menu on the SA Tool, select Route Parameters, and turn on automatic location. The SA Tool should automatically compute the current inspection location. The auto location signal quality indicator on the home screen should start reflecting the auto location signal quality.", "Expected_Results": "The SA Tool should successfully compute the current inspection location and the auto location signal quality indicator on the home screen should start reflecting the auto location signal quality."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Selects/Overrides Location (Manual Mode)", "Test_Scnario": "Verify GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Sce_Description": "In this scenario, the SA Tool application will receive remote configuration and enable/disable the auto location functionality based on the new configuration in the background.", "Expected_Results": "The SA Tool application should successfully enable/disable the auto location functionality based on the new configuration in the background."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator Selects/Overrides Location (Manual Mode)", "Test_Scnario": "Verify Operator disables auto-location functionality", "Test_Sce_Description": "In this scenario, the operator will disable the auto-location functionality on the SA Tool.", "Expected_Results": "The operator should be able to successfully disable the auto-location functionality on the SA Tool."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Scnario": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Sce_Description": "In this scenario, the operator selects a new line but does not select a trip. The application should reset the trip and stop selection.", "Expected_Results": "The trip and stop selection should be reset when a new line is selected and no trip is selected."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Scnario": "Operator saves the selection without selecting a stop", "Test_Sce_Description": "In this scenario, the operator saves the selection without selecting a stop. The application should auto-select the first stop/station as the inspection location.", "Expected_Results": "The first stop/station should be auto-selected as the inspection location when the operator saves the selection without selecting a stop."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Scnario": "Operator selects the desired trip and stop", "Test_Sce_Description": "In this scenario, the operator selects the desired trip and stop. The application should update the inspection location to the operator's selection.", "Expected_Results": "The inspection location should be updated to the operator's selection when the operator selects the desired trip and stop."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Scnario": "Operator enters the vehicle id in case of bus", "Test_Sce_Description": "In this scenario, the operator enters the vehicle id in case of a bus. The application should accept the vehicle id input.", "Expected_Results": "The application should accept the vehicle id input when the operator enters it in case of a bus."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Scnario": "Operator selects new route parameters as a FLATFARE BASED employee", "Test_Sce_Description": "In this scenario, the operator, who is a FLATFARE BASED employee, selects new route parameters. The application should allow the operator to select the route parameters.", "Expected_Results": "The application should allow the operator to select the route parameters when the operator is a FLATFARE BASED employee."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Scnario": "Operator enables auto-positioning for current location", "Test_Sce_Description": "In this scenario, the operator enables auto-location for route parameters on the SA Tool. The application should enable the auto-location functionality.", "Expected_Results": "The application should enable the auto-location functionality when the operator enables auto-positioning for current location."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Scnario": "Operator disables auto-location functionality", "Test_Sce_Description": "In this scenario, the operator disables the auto-location functionality. The application should disable the auto-location functionality.", "Expected_Results": "The application should disable the auto-location functionality when the operator disables it."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Scnario": "Operator updates current location", "Test_Sce_Description": "In this scenario, the operator updates the current location. The application should update the route parameters to the operator selected location.", "Expected_Results": "The application should update the route parameters to the operator selected location when the operator updates the current location."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Scnario": "Operator switches device mode between DISTANCE BASED TRANSIT and GO", "Test_Sce_Description": "In this scenario, the operator switches device mode between DISTANCE BASED TRANSIT and GO. The application should allow the operator to switch between the modes.", "Expected_Results": "The application should allow the operator to switch between DISTANCE BASED TRANSIT and GO modes."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator selects a new Line but doesn\u2019t select a trip", "Test_Scnario": "SP Switching is disabled", "Test_Sce_Description": "In this scenario, SP Switching is disabled. The application should not allow the operator to switch between SPs.", "Expected_Results": "The application should not allow the operator to switch between SPs when SP Switching is disabled."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "[FLATFARE BASED Only] FLATFARE BASED SA Tool operator selects new route parameters", "Test_Scnario": "Verify the selection of Additional Options menu on the SA Tool by FLATFARE BASED employee", "Test_Sce_Description": "FLATFARE BASED employee logs into the SA Tool and selects the Additional Options menu", "Expected_Results": "The Additional Options menu should be successfully opened by the FLATFARE BASED employee"}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "[FLATFARE BASED Only] FLATFARE BASED SA Tool operator selects new route parameters", "Test_Scnario": "Verify the selection of Route Parameters by FLATFARE BASED employee", "Test_Sce_Description": "FLATFARE BASED employee selects Route Parameters from the Additional Options menu", "Expected_Results": "The Route Parameters should be successfully selected by the FLATFARE BASED employee"}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "[FLATFARE BASED Only] FLATFARE BASED SA Tool operator selects new route parameters", "Test_Scnario": "Verify the selection of Surface (Bus / Streetcar) or Subway toggle by FLATFARE BASED employee", "Test_Sce_Description": "FLATFARE BASED employee selects Surface (Bus / Streetcar) or Subway toggle from the Route Parameters", "Expected_Results": "The Surface (Bus / Streetcar) or Subway toggle should be successfully selected by the FLATFARE BASED employee"}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "[FLATFARE BASED Only] FLATFARE BASED SA Tool operator selects new route parameters", "Test_Scnario": "Verify the input of Route ID, Vehicle ID, Stop ID and Region by FLATFARE BASED employee", "Test_Sce_Description": "FLATFARE BASED employee inputs Route ID, Vehicle ID, Stop ID and Region after selecting Surface from the Route Parameters", "Expected_Results": "The Route ID, Vehicle ID, Stop ID and Region should be successfully inputted by the FLATFARE BASED employee"}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "[FLATFARE BASED Only] FLATFARE BASED SA Tool operator selects new route parameters", "Test_Scnario": "Verify the selection of Station by FLATFARE BASED employee", "Test_Sce_Description": "FLATFARE BASED employee selects Station after selecting Subway from the Route Parameters", "Expected_Results": "The Station should be successfully selected by the FLATFARE BASED employee"}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "[FLATFARE BASED Only] FLATFARE BASED SA Tool operator selects new route parameters", "Test_Scnario": "Verify the saving of selection by FLATFARE BASED employee", "Test_Sce_Description": "FLATFARE BASED employee saves the selection after inputting all the mandatory fields", "Expected_Results": "The selection should be successfully saved by the FLATFARE BASED employee"}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "[FLATFARE BASED Only] FLATFARE BASED SA Tool operator selects new route parameters", "Test_Scnario": "Verify the functionality when FLATFARE BASED employee doesn't select a trip", "Test_Sce_Description": "FLATFARE BASED employee selects a new Line but doesn't select a trip", "Expected_Results": "The apply button should be greyed out and FLATFARE BASED employee should not be able to save the current inspection parameters"}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "[FLATFARE BASED Only] FLATFARE BASED SA Tool operator selects new route parameters", "Test_Scnario": "Verify the functionality when FLATFARE BASED employee selects a new Line and a trip", "Test_Sce_Description": "FLATFARE BASED employee selects a new Line and a trip", "Expected_Results": "The FLATFARE BASED employee should be able to save the current inspection parameters"}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "[FLATFARE BASED Only] FLATFARE BASED SA Tool operator selects new route parameters", "Test_Scnario": "Verify the functionality when FLATFARE BASED employee doesn't select a stop", "Test_Sce_Description": "FLATFARE BASED employee doesn't select a stop after selecting a new Line and a trip", "Expected_Results": "The application should auto-select the first stop/station as the inspection location"}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "[FLATFARE BASED Only] FLATFARE BASED SA Tool operator selects new route parameters", "Test_Scnario": "Verify the functionality when FLATFARE BASED employee selects a stop", "Test_Sce_Description": "FLATFARE BASED employee selects a stop after selecting a new Line and a trip", "Expected_Results": "The inspection location should be updated to Operator\u2019s selection"}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator enables auto-positioning for current location", "Test_Scnario": "Verify the functionality of auto-location enablement", "Test_Sce_Description": "The test will verify if the operator is able to enable the auto-location functionality on the SA Tool. The operator will select the Additional Options menu on the SA Tool, select Route Parameters, turn on automatic location, select the desired Line and Trip, and save the changes.", "Expected_Results": "The SA Tool should successfully enable the auto-location functionality and compute the current inspection location. The auto location signal quality indicator on the home screen should start reflecting the auto location signal quality. The Stop ID should update to indicate to the operator the computed location."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator enables auto-positioning for current location", "Test_Scnario": "Verify the functionality of auto-location disablement", "Test_Sce_Description": "The test will verify if the operator is able to disable the auto-location functionality on the SA Tool. The operator will select the Additional Options menu on the SA Tool, select Route Parameters, and turn off automatic location.", "Expected_Results": "The SA Tool should successfully disable the auto-location functionality. The auto location signal quality indicator on the home screen should stop reflecting the auto location signal quality."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator enables auto-positioning for current location", "Test_Scnario": "Verify the functionality of remote configuration", "Test_Sce_Description": "The test will verify if the SA Tool application receives remote configuration and enables/disables the auto location functionality based on the new configuration in the background.", "Expected_Results": "The SA Tool should successfully receive the remote configuration and enable/disable the auto location functionality based on the new configuration. If the operator had auto location enabled, and the feature was remotely disabled, a greyed out icon should be shown."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator enables auto-positioning for current location", "Test_Scnario": "Verify the functionality of GPS signal quality changes", "Test_Sce_Description": "The test will verify if the GPS signal quality changes on the SA Tool and if the GPS signal quality indicator on the home screen is changed to reflect the same.", "Expected_Results": "The GPS signal quality on the SA Tool should change and the GPS signal quality indicator on the home screen should be updated to reflect the same."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator enables auto-positioning for current location", "Test_Scnario": "Verify the functionality of CLIENT backend connectivity changes", "Test_Sce_Description": "The test will verify if the SA Tool application updates the network icon to reflect the connectivity status with the network which reflects the status with CLIENT backend when it loses connection to the CLIENT backend.", "Expected_Results": "The SA Tool should successfully update the network icon to reflect the connectivity status with the network which reflects the status with CLIENT backend when it loses connection to the CLIENT backend."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator enables auto-positioning for current location", "Test_Scnario": "Verify the functionality of Operator Overrides Selects/Overrides Current Location", "Test_Sce_Description": "The test will verify if the operator is able to select/override location for inspection / fare payment purposes on the SA Tool. The operator will select the Additional Options menu on the SA Tool, select Route Parameters, update current location, and save the changes.", "Expected_Results": "The SA Tool should successfully update the Route Parameters to the operator selected location. The Route Parameters should be automatically updated to the next station upon arrival at the next station."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator enables auto-positioning for current location", "Test_Scnario": "Verify the functionality of Operator Selects/Overrides Location (Manual Mode)", "Test_Sce_Description": "The test will verify if the operator is able to select/override location in manual mode on the SA Tool. The operator will select the Additional Options menu on the SA Tool, select Route Parameters, update current location, and save the changes.", "Expected_Results": "The SA Tool should successfully update the Route Parameters to the operator selected location. If operator doesn\u2019t select stop, the application should auto-select the first stop/station as the inspection location."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator enables auto-positioning for current location", "Test_Scnario": "Verify the functionality of Operator selects a new Line but doesn\u2019t select a trip", "Test_Sce_Description": "The test will verify if the operator is able to select a new Line but doesn\u2019t select a trip on the SA Tool. The operator will select the Additional Options menu on the SA Tool, select Route Parameters, select desired current line, and save the changes.", "Expected_Results": "The SA Tool should successfully update the Route Parameters to the operator selected line. If operator doesn\u2019t select stop, the application should auto-select the first stop/station as the inspection location."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator enables auto-positioning for current location", "Test_Scnario": "Verify the functionality of FLATFARE BASED SA Tool operator selects new route parameters", "Test_Sce_Description": "The test will verify if the FLATFARE BASED SA Tool operator is able to select new route parameters on the SA Tool. The operator will select the Additional Options menu on the SA Tool, select Route Parameters, select Surface (Bus / Streetcar) or Subway toggle, and save the changes.", "Expected_Results": "The SA Tool should successfully update the Route Parameters to the operator selected parameters. The option to save/apply the selection should not be enabled until all of the mandatory fields are filled in."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Scnario": "SA Tool application receives remote configuration", "Test_Sce_Description": "Verify that the SA Tool application is able to receive remote configuration updates. This can be tested by sending a remote configuration update and checking if the SA Tool application receives and applies it correctly.", "Expected_Results": "The SA Tool application should successfully receive and apply the remote configuration update."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Scnario": "SA Tool application enables/disables the auto location functionality", "Test_Sce_Description": "Verify that the SA Tool application is able to enable or disable the auto location functionality based on the new configuration. This can be tested by changing the auto location setting in the remote configuration and checking if the SA Tool application applies the change correctly.", "Expected_Results": "The SA Tool application should successfully enable or disable the auto location functionality based on the new configuration."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Scnario": "Greyed out icon is shown when auto location is remotely disabled", "Test_Sce_Description": "Verify that a greyed out icon is shown on the SA Tool application when the auto location feature is remotely disabled. This can be tested by remotely disabling the auto location feature and checking if a greyed out icon is shown on the SA Tool application.", "Expected_Results": "A greyed out icon should be shown on the SA Tool application when the auto location feature is remotely disabled."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Scnario": "SA Tool auto-computes current location", "Test_Sce_Description": "Verify that the SA Tool is able to auto-compute the current location. This can be tested by enabling the auto location feature and checking if the SA Tool correctly computes the current location.", "Expected_Results": "The SA Tool should correctly auto-compute the current location when the auto location feature is enabled."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Scnario": "GPS signal quality changes on the SA Tool", "Test_Sce_Description": "Verify that the GPS signal quality indicator on the SA Tool changes when the GPS signal quality changes. This can be tested by changing the GPS signal quality and checking if the indicator on the SA Tool changes accordingly.", "Expected_Results": "The GPS signal quality indicator on the SA Tool should change when the GPS signal quality changes."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Scnario": "SA Tool updates network icon when CLIENT backend connectivity changes", "Test_Sce_Description": "Verify that the SA Tool updates the network icon to reflect the connectivity status with the network when the CLIENT backend connectivity changes. This can be tested by changing the CLIENT backend connectivity and checking if the network icon on the SA Tool updates accordingly.", "Expected_Results": "The network icon on the SA Tool should update to reflect the connectivity status with the network when the CLIENT backend connectivity changes."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Scnario": "Operator overrides current location", "Test_Sce_Description": "Verify that the operator is able to override the current location on the SA Tool. This can be tested by having the operator select a different location and checking if the SA Tool updates the current location accordingly.", "Expected_Results": "The SA Tool should update the current location when the operator overrides it."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Scnario": "SA Tool goes into out-of-service state", "Test_Sce_Description": "Verify that the SA Tool goes into an out-of-service state when necessary. This can be tested by triggering a condition that should put the SA Tool into an out-of-service state and checking if it does so correctly.", "Expected_Results": "The SA Tool should go into an out-of-service state when necessary."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Scnario": "SA Tool goes into standby state", "Test_Sce_Description": "Verify that the SA Tool goes into a standby state when it remains inactive for a configurable period of time. This can be tested by leaving the SA Tool inactive for the specified period of time and checking if it goes into standby state.", "Expected_Results": "The SA Tool should go into standby state when it remains inactive for a configurable period of time."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Scnario": "SA Tool operates in revenue mode", "Test_Sce_Description": "Verify that the SA Tool operates correctly in revenue mode. This can be tested by selecting revenue mode and checking if the SA Tool performs all functions correctly.", "Expected_Results": "The SA Tool should operate correctly in revenue mode."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "GPS functionality is remotely enabled/disabled on the SA Tool", "Test_Scnario": "SA Tool operates in training mode", "Test_Sce_Description": "Verify that the SA Tool operates correctly in training mode. This can be tested by selecting training mode and checking if the SA Tool performs all functions correctly without accepting payment and only sending non-revenue transactions.", "Expected_Results": "The SA Tool should operate correctly in training mode."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator disables auto-location functionality", "Test_Scnario": "SA Tool application receives remote configuration", "Test_Sce_Description": "Test the functionality of the SA Tool application when it receives a remote configuration. This includes checking if the application can successfully receive and implement the configuration.", "Expected_Results": "The SA Tool application should successfully receive the remote configuration and implement it accordingly."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator disables auto-location functionality", "Test_Scnario": "SA Tool application enables/disables the auto location functionality", "Test_Sce_Description": "Test the functionality of the SA Tool application when it enables or disables the auto location functionality. This includes checking if the application can successfully enable or disable the functionality based on the received configuration.", "Expected_Results": "The SA Tool application should successfully enable or disable the auto location functionality based on the received configuration."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator disables auto-location functionality", "Test_Scnario": "Greyed out icon is shown when auto location is remotely disabled", "Test_Sce_Description": "Test the functionality of the SA Tool application when the auto location feature is remotely disabled. This includes checking if a greyed out icon is shown to the operator.", "Expected_Results": "A greyed out icon should be shown to the operator when the auto location feature is remotely disabled."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator disables auto-location functionality", "Test_Scnario": "Operator disables auto-location functionality", "Test_Sce_Description": "Test the functionality of the SA Tool application when the operator disables the auto location functionality. This includes checking if the application can successfully disable the functionality when the operator chooses to do so.", "Expected_Results": "The SA Tool application should successfully disable the auto location functionality when the operator chooses to do so."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator disables auto-location functionality", "Test_Scnario": "Location positioning and calculation are disabled", "Test_Sce_Description": "Test the functionality of the SA Tool application when the location positioning and calculation are disabled. This includes checking if the application can successfully disable these features.", "Expected_Results": "The SA Tool application should successfully disable the location positioning and calculation features."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator disables auto-location functionality", "Test_Scnario": "SA Tool auto-computes current Location", "Test_Sce_Description": "Test the functionality of the SA Tool application when it auto-computes the current location. This includes checking if the application can successfully compute the current location.", "Expected_Results": "The SA Tool application should successfully compute the current location."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator disables auto-location functionality", "Test_Scnario": "GPS Signal quality changes", "Test_Sce_Description": "Test the functionality of the SA Tool application when the GPS signal quality changes. This includes checking if the GPS signal quality indicator on the home screen is changed to reflect the same.", "Expected_Results": "The GPS signal quality indicator on the home screen should be changed to reflect the change in GPS signal quality."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator disables auto-location functionality", "Test_Scnario": "CLIENT backend connectivity changes", "Test_Sce_Description": "Test the functionality of the SA Tool application when it loses connection to the CLIENT backend. This includes checking if the SA Tool application updates the network icon to reflect the connectivity status with the network which reflects the status with CLIENT backend.", "Expected_Results": "The SA Tool application should update the network icon to reflect the connectivity status with the network which reflects the status with CLIENT backend."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator disables auto-location functionality", "Test_Scnario": "Operator Overrides Selects/Overrides Current Location", "Test_Sce_Description": "Test the functionality of the SA Tool application when the operator selects/overrides the current location for inspection / fare payment purposes. This includes checking if the Route Parameters are updated to the operator selected location.", "Expected_Results": "The Route Parameters should be updated to the operator selected location."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Enable/Disable GPS", "Use_Case_Name": "Operator disables auto-location functionality", "Test_Scnario": "Operator enables auto-positioning for current location", "Test_Sce_Description": "Test the functionality of the SA Tool application when the operator enables auto-positioning for the current location. This includes checking if the SA Tool will automatically compute the current inspection location and if the auto location signal quality indicator on the home screen starts reflecting the auto location signal quality.", "Expected_Results": "The SA Tool should automatically compute the current inspection location and the auto location signal quality indicator on the home screen should start reflecting the auto location signal quality."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Scnario": "Operator selects the Additional Options menu on the SA Tool", "Test_Sce_Description": "The operator should be able to select the Additional Options menu on the SA Tool. This is the first step in the process of overriding current route parameters.", "Expected_Results": "The Additional Options menu should open successfully when selected by the operator."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Scnario": "Operator selects Route Parameters", "Test_Sce_Description": "The operator should be able to select Route Parameters from the Additional Options menu. This is the second step in the process of overriding current route parameters.", "Expected_Results": "The Route Parameters should open successfully when selected by the operator."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Scnario": "Operator updates current location", "Test_Sce_Description": "The operator should be able to update the current location in the Route Parameters. This is the third step in the process of overriding current route parameters.", "Expected_Results": "The current location should be updated successfully when entered by the operator."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Scnario": "The Route Parameters are updated to the operator selected location", "Test_Sce_Description": "The Route Parameters should be updated to the location selected by the operator. This is the fourth step in the process of overriding current route parameters.", "Expected_Results": "The Route Parameters should be updated successfully to the operator selected location."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Scnario": "The Route Parameters are automatically updated to the next station upon arrival at the next station", "Test_Sce_Description": "The Route Parameters should be automatically updated to the next station upon arrival at the next station. This is the fifth step in the process of overriding current route parameters.", "Expected_Results": "The Route Parameters should be automatically updated to the next station upon arrival at the next station."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Scnario": "Operator Selects/Overrides Location (Manual Mode)", "Test_Sce_Description": "The operator should be able to select/override the location in Manual Mode. This is the alternate flow in the process of overriding current route parameters.", "Expected_Results": "The location should be selected/overridden successfully when the operator is in Manual Mode."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Scnario": "Auto-location is disabled on the SA Tool", "Test_Sce_Description": "The auto-location feature should be disabled on the SA Tool. This is a modified pre-condition in the process of overriding current route parameters.", "Expected_Results": "The auto-location feature should be disabled successfully on the SA Tool."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Scnario": "Operator can continue selecting stops within the route from the Tap Card Screen", "Test_Sce_Description": "The operator should be able to continue selecting stops within the route from the Tap Card Screen. This is a continuation of the steps from the main use case.", "Expected_Results": "The operator should be able to continue selecting stops within the route from the Tap Card Screen."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Scnario": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Sce_Description": "The operator should be able to switch device mode for current SP between DISTANCE BASED TRANSIT and GO. This is a separate use case.", "Expected_Results": "The operator should be able to switch device mode for current SP between DISTANCE BASED TRANSIT and GO."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Overrides Selects/Overrides Current Route Parameters", "Test_Scnario": "SP Switching is disabled", "Test_Sce_Description": "The SP Switching feature should be disabled. This is a modified pre-condition in the process of switching device mode for current SP.", "Expected_Results": "The SP Switching feature should be disabled successfully."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Scnario": "Verify the functionality of Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Sce_Description": "The operator should be able to switch the device mode between DISTANCE BASED TRANSIT and GO. This can be tested by logging in with valid credentials and selecting the desired mode.", "Expected_Results": "The operator should be able to successfully switch between DISTANCE BASED TRANSIT and GO modes."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Scnario": "Verify the functionality of Operator Selects/Overrides Location (Manual Mode)", "Test_Sce_Description": "The operator should be able to select and override the current location in manual mode. This can be tested by disabling auto-location and manually selecting a location.", "Expected_Results": "The operator should be able to successfully select and override the current location in manual mode."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Scnario": "Verify the functionality of SP Switching when disabled", "Test_Sce_Description": "The operator should not be able to switch between SPs when SP Switching is disabled. This can be tested by disabling SP Switching and attempting to switch between SPs.", "Expected_Results": "The operator should not be able to switch between SPs when SP Switching is disabled."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Scnario": "Verify the functionality of the SA Tool in Out-of-Service State", "Test_Sce_Description": "The SA Tool should not accept a Farecard for any kind of functionality when in Out-of-Service state. This can be tested by putting the SA Tool in Out-of-Service state and attempting to use a Farecard.", "Expected_Results": "The SA Tool should not accept a Farecard for any kind of functionality when in Out-of-Service state."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Scnario": "Verify the functionality of the SA Tool in Standby State", "Test_Sce_Description": "The SA Tool should disconnect from all peripherals and conserve battery life when in Standby state. This can be tested by putting the SA Tool in Standby state and checking the status of the peripherals.", "Expected_Results": "The SA Tool should disconnect from all peripherals and conserve battery life when in Standby state."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Scnario": "Verify the functionality of the SA Tool in Revenue Mode", "Test_Sce_Description": "The SA Tool should allow the operator to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in Revenue Mode. This can be tested by logging in to Revenue Mode and attempting these actions.", "Expected_Results": "The SA Tool should allow the operator to perform all the mentioned actions in Revenue Mode."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Scnario": "Verify the functionality of the SA Tool in Training Mode", "Test_Sce_Description": "The SA Tool should mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in Training Mode. This can be tested by logging in to Training Mode and attempting these actions.", "Expected_Results": "The SA Tool should mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in Training Mode."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Scnario": "Verify the functionality of the SA Tool for different users", "Test_Sce_Description": "The SA Tool should provide different functionalities for different users. This can be tested by logging in as different users and checking the available functionalities.", "Expected_Results": "The SA Tool should provide different functionalities for different users."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Scnario": "Verify the functionality of the Device Parameter Tool Configurations", "Test_Sce_Description": "The Device Parameter Tool should allow configurations for the SA Tool. This can be tested by attempting to configure the SA Tool using the Device Parameter Tool.", "Expected_Results": "The Device Parameter Tool should allow configurations for the SA Tool."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "SP Switching is disabled when no operator is logged in", "Test_Sce_Description": "Verify that the SP switching functionality is disabled when no operator is logged in. The application should not allow the operator to switch between SPs.", "Expected_Results": "The application does not allow the operator to switch between SPs when no operator is logged in."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "SP Switching is enabled when an operator is logged in", "Test_Sce_Description": "Verify that the SP switching functionality is enabled when an operator is logged in. The application should allow the operator to continue inspecting at their selected SP.", "Expected_Results": "The application allows the operator to continue inspecting at their selected SP when an operator is logged in."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "Adding Media to the Pilot List", "Test_Sce_Description": "Verify that the operator can add media to the Pilot list. The application should allow the operator to select the add option and add media to the Pilot list.", "Expected_Results": "The application allows the operator to add media to the Pilot list."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "Removing Media from the Pilot List", "Test_Sce_Description": "Verify that the operator can remove media from the Pilot list. The application should allow the operator to select the remove option and remove media from the Pilot list.", "Expected_Results": "The application allows the operator to remove media from the Pilot list."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "Media is already on the pilot list", "Test_Sce_Description": "Verify that the application handles the scenario where the media is already on the pilot list. The application should display a notification stating that the card is already on the pilot list.", "Expected_Results": "The application displays a notification stating that the card is already on the pilot list."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "Media is not on the Pilot list and user is attempting to remove media", "Test_Sce_Description": "Verify that the application handles the scenario where the media is not on the Pilot list and the user is attempting to remove it. The application should display a successful message even if a media that has already been removed is attempted to be removed again.", "Expected_Results": "The application displays a successful message even if a media that has already been removed is attempted to be removed again."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "Media that has failed ODA check is attempted to be added/removed from the Pilot", "Test_Sce_Description": "Verify that the application handles the scenario where the media that has failed ODA check is attempted to be added/removed from the Pilot. The application should reject the tap and display a confirmation dialogue stating that the card is not compatible.", "Expected_Results": "The application rejects the tap and displays a confirmation dialogue stating that the card is not compatible."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "Media that is expired is attempted to be added/removed from the Pilot", "Test_Sce_Description": "Verify that the application handles the scenario where the media that is expired is attempted to be added/removed from the Pilot. The application should reject the tap and display a confirmation dialogue stating that the card is expired.", "Expected_Results": "The application rejects the tap and displays a confirmation dialogue stating that the card is expired."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "Device is Offline and user attempts to add or remove media from pilot", "Test_Sce_Description": "Verify that the application handles the scenario where the device is offline and the user attempts to add or remove media from pilot. The application should display an error message stating that the device is offline.", "Expected_Results": "The application displays an error message stating that the device is offline."}, {"Function_Flow_Name": "GPS", "Sub_Flow_Name": "Select new route and line", "Use_Case_Name": "SP Switching is disabled", "Test_Scnario": "SA Tool is in \u201cOut-of-Service\u201d state", "Test_Sce_Description": "Verify that the SA Tool is unable to accept a Farecard for any kind of functionality when it is in \u201cOut-of-Service\u201d state. The application should not close the operator\u2019s shift unless the operator has requested to sign-off.", "Expected_Results": "The application does not close the operator\u2019s shift unless the operator has requested to sign-off when the SA Tool is in \u201cOut-of-Service\u201d state."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Out-of-Service State", "Test_Scnario": "Testing the Out-of-Service state of the SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in the Out-of-Service state. The tool should not accept any Farecard and may require maintenance to restore out-of-order components.", "Expected_Results": "The SA Tool should not accept any Farecard and should display an appropriate message indicating that it is in the Out-of-Service state."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Out-of-Service State", "Test_Scnario": "Testing the functionality of the SA Tool when an operator is signed-in and the device goes into out-of-service state", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when an operator is signed-in and the device goes into out-of-service state. The SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off.", "Expected_Results": "The SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Out-of-Service State", "Test_Scnario": "Testing the Standby state of the SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in the Standby state. The screen should turn off and the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life.", "Expected_Results": "The screen should turn off and the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Out-of-Service State", "Test_Scnario": "Testing the functionality of the SA Tool when it is running in the background", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is running in the background. The SA Tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life.", "Expected_Results": "The SA Tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Out-of-Service State", "Test_Scnario": "Testing the functionality of the SA Tool in Revenue Mode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool in Revenue Mode. The operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures.", "Expected_Results": "The operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Out-of-Service State", "Test_Scnario": "Testing the functionality of the SA Tool in Training Mode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool in Training Mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions.", "Expected_Results": "The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Out-of-Service State", "Test_Scnario": "Testing the functionality of the SA Tool when it is configured for Farecard reversals only", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is configured for Farecard reversals only. The device should not accept any other transactions.", "Expected_Results": "The device should not accept any other transactions and should display an appropriate error message."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Out-of-Service State", "Test_Scnario": "Testing the functionality of the SA Tool when an Open Payments media not on the approved media list is tapped on the device", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when an Open Payments media not on the approved media list is tapped on the device. The device should not accept the media.", "Expected_Results": "The device should not accept the media and should display an appropriate error message."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Out-of-Service State", "Test_Scnario": "Testing the functionality of the SA Tool when a customer\u2019s Open Payments Media is on the BIN Blocking List", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer\u2019s Open Payments Media is on the BIN Blocking List. The device should not accept the media.", "Expected_Results": "The device should not accept the media and should display an appropriate error message."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Out-of-Service State", "Test_Scnario": "Testing the functionality of the SA Tool when a customer attempts to reverse fare payment with Interac Card while Interac is disabled on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer attempts to reverse fare payment with Interac Card while Interac is disabled on SA Tool. The device should not accept the media.", "Expected_Results": "The device should not accept the media and should display an appropriate error message."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Standby State", "Test_Scnario": "Switching SA Tool from Standby to In-Service State", "Test_Sce_Description": "Verify that the operator is able to switch the SA Tool from standby to in-service state by pressing the physical power button on the device, entering the lock screen passcode and signing in to the SA Tool application as an existing user.", "Expected_Results": "The SA Tool should switch on the screen, display the device lock screen, allow the operator to enter the lock screen passcode and sign in to the SA Tool application. Upon successful sign-in, the SA Tool should enter the in-service state and display the shift preferences screen."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Standby State", "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login", "Test_Sce_Description": "Verify that the operator is able to switch the SA Tool from standby to in-service state before the configurable threshold value that requires logging in is reached.", "Expected_Results": "The SA Tool should switch on the screen, display the device lock screen, and allow the operator to enter the lock screen passcode. The SA Tool should display the home screen without requiring the operator to sign in and navigate to the home screen."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Standby State", "Test_Scnario": "Switching SA Tool from In-Service to Standby State", "Test_Sce_Description": "Verify that the operator is able to switch the SA Tool from in-service to standby state by pressing the physical power button on the device once.", "Expected_Results": "The SA Tool should turn off the screen and go into standby state."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Standby State", "Test_Scnario": "Switching to a third party application on SA Tool", "Test_Sce_Description": "Verify that the operator is able to switch to a third party application on SA Tool and the SA Tool application runs in the background and goes into standby state.", "Expected_Results": "The operator should be able to switch to a third party application on SA Tool. The SA Tool application should run in the background and go into standby state."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Standby State", "Test_Scnario": "Change SP after switching device from standby to in-service state", "Test_Sce_Description": "Verify that the operator is able to change SP on the login screen after switching the device from standby to in-service state.", "Expected_Results": "The operator should be able to change SP on the login screen after switching the device from standby to in-service state. The SA Tool application should notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Standby State", "Test_Scnario": "Switching SA Tool to Out-of-Service State", "Test_Sce_Description": "Verify that when the SA Tool is in \u201cOut-of-Service\u201d state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components.", "Expected_Results": "The SA Tool should not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components when it is in \u201cOut-of-Service\u201d state."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Standby State", "Test_Scnario": "Switching SA Tool to Standby State", "Test_Sce_Description": "Verify that an operator can temporarily suspend all SA Tool functionality while in Standby state and the SA Tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life.", "Expected_Results": "The operator should be able to temporarily suspend all SA Tool functionality while in Standby state and the SA Tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Standby State", "Test_Scnario": "Switching SA Tool to Revenue Mode", "Test_Sce_Description": "Verify that upon logon the operator is able to select Revenue Mode which allows the SA Tool operator to interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures.", "Expected_Results": "The operator should be able to select Revenue Mode upon logon which allows the SA Tool operator to interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Standby State", "Test_Scnario": "Switching SA Tool to Training Mode", "Test_Sce_Description": "Verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions.", "Expected_Results": "The Training Mode should allow the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Standby State", "Test_Scnario": "Accessing Revenue Mode by SA Tool Operators", "Test_Sce_Description": "Verify that SA Tool Operators have access to Revenue Mode.", "Expected_Results": "SA Tool Operators should have access to Revenue Mode."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "SA Tool application is running in the background", "Test_Scnario": "Launching the SA Tool Application", "Test_Sce_Description": "Verify that the authorized operator is able to launch the SA Tool Application from the home screen of the SA Tool device.", "Expected_Results": "The SA Tool application should successfully launch and the sign-in screen should be displayed."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "SA Tool application is running in the background", "Test_Scnario": "Continuous Diagnostic Checks during Launch", "Test_Sce_Description": "Verify that the SA Tool application performs continuous diagnostic checks during launch. These checks should include network/cellular connection, battery level, and available storage space.", "Expected_Results": "The SA Tool application should successfully perform the diagnostic checks and launch if all checks are successful."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "SA Tool application is running in the background", "Test_Scnario": "Launching the SA Tool Application without Network Connection", "Test_Sce_Description": "Verify that the SA Tool application can be launched even when the device is unable to connect to a network.", "Expected_Results": "The SA Tool application should successfully launch and operate in offline mode."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "SA Tool application is running in the background", "Test_Scnario": "Launching the SA Tool Application with Critical Failures", "Test_Sce_Description": "Verify the behavior of the SA Tool application when it encounters critical failures during the initial self-diagnostic checks.", "Expected_Results": "The SA Tool application should go to error state when it encounters critical failures during the initial self-diagnostic checks."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "SA Tool application is running in the background", "Test_Scnario": "Switching between the SA Tool Application and Third-Party Applications", "Test_Sce_Description": "Verify that the operator can switch between the SA Tool Application and the whitelisted third-party applications on the device.", "Expected_Results": "The operator should be able to successfully switch between the SA Tool Application and the whitelisted third-party applications."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "SA Tool application is running in the background", "Test_Scnario": "Switching to an Already Launched Application", "Test_Sce_Description": "Verify that the operator can switch to an application that is already launched and is running in the background.", "Expected_Results": "The operator should be able to successfully switch to the application that is already launched and running in the background."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "SA Tool application is running in the background", "Test_Scnario": "SA Tool Application in Standby State", "Test_Sce_Description": "Verify that the SA Tool application goes into Standby state when it is running in the background and disconnects from all the peripherals to conserve battery life.", "Expected_Results": "The SA Tool application should successfully go into Standby state and disconnect from all the peripherals when it is running in the background."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "SA Tool application is running in the background", "Test_Scnario": "SA Tool Application in Revenue Mode", "Test_Sce_Description": "Verify that the operator can select the Revenue Mode during logon and perform all the functionalities available in this mode.", "Expected_Results": "The operator should be able to successfully select the Revenue Mode during logon and perform all the functionalities available in this mode."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "SA Tool application is running in the background", "Test_Scnario": "SA Tool Application in Training Mode", "Test_Sce_Description": "Verify that the operator can select the Training Mode during logon and mimic all the functionalities available in the Sales Mode without accepting payment.", "Expected_Results": "The operator should be able to successfully select the Training Mode during logon and mimic all the functionalities available in the Sales Mode without accepting payment."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "SA Tool application is running in the background", "Test_Scnario": "SA Tool Application in Out-of-Service State", "Test_Sce_Description": "Verify that the SA Tool application goes into Out-of-Service state when it encounters errors or failures in storage, battery or secure element during the continuous self-diagnostic checks.", "Expected_Results": "The SA Tool application should successfully go into Out-of-Service state when it encounters errors or failures in storage, battery or secure element during the continuous self-diagnostic checks."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Revenue Mode", "Test_Scnario": "Split payment refund/reversal with credit or debit", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a split payment refund/reversal has already begun and the customer has been refunded with at least one mean of payment that is credit or debit. The operator selects to cancel the transaction and the SA Tool should inform the operator that in order to cancel the transaction, the payment means must be reversed. The operator confirms the cancellation of the transaction and the SA Tool should reverse non-credit and/or non-debit means of payment automatically. The operator then has to choose mean of payment and verbally prompt the customer to interact with the PIN pad in order to perform a refund void.", "Expected_Results": "The SA Tool should successfully reverse the payment and prompt the operator to perform a refund void. Upon successful Moneris processing, the customer should be repaid for the refund amount and a customer receipt with Moneris information should always print. The operator should then be returned to the SA Tool home screen."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Revenue Mode", "Test_Scnario": "Split payment refund/reversal without credit or debit", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a split payment refund/reversal has already begun and the customer has been refunded with at least one mean of payment that is not credit or debit. The operator selects to cancel the transaction and the SA Tool should inform the operator that in order to cancel the transaction, the payment means must be reversed. The operator confirms the cancellation of the transaction and the SA Tool should reverse the payment means automatically and prompt the operator to begin a refund void.", "Expected_Results": "The SA Tool should successfully reverse the payment and prompt the operator to begin a refund void. A customer and merchant receipt should print and the SA Tool should return to the home screen."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Revenue Mode", "Test_Scnario": "Quantity added to cart exceeds allowable maximum", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the quantity of product added to the cart exceeds the product maximum. The operator should inform the customer that they must process their request in multiple transactions.", "Expected_Results": "The SA Tool should not allow the operator to add more than the maximum allowable quantity to the shopping cart. The operator should process the customer\u2019s request in multiple transactions as per the Main Use Case."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Revenue Mode", "Test_Scnario": "No eligible products for refund or reversal", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when no eligible products for refund or reversal are detected. The SA Tool should display the relevant error message and the operator must acknowledge the message.", "Expected_Results": "The SA Tool should display the relevant error message and the operator should acknowledge the message. The SA Tool should return to the main menu."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Revenue Mode", "Test_Scnario": "Products are eligible for refund or reversal, but are not what the customer requested", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when products are eligible for refund or reversal, but are not what the customer requested. The Operator should inform the customer their product is not eligible for reversal or refund.", "Expected_Results": "The Operator should inform the customer their product is not eligible for reversal or refund. The Operator should return to the main menu."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Revenue Mode", "Test_Scnario": "Failure to connect to internet", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when there is no internet connection and the SA Tool Operator is performing an action that requires connection to the Internet.", "Expected_Results": "The SA Tool should time out and display the relevant error message with options to try again or cancel. If successful connection is restored, resume the main use case. If the action is cancelled, return to the previous screen."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Revenue Mode", "Test_Scnario": "Out-of-Service State", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in \u201cOut-of-Service\u201d state. It should be unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components.", "Expected_Results": "If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Revenue Mode", "Test_Scnario": "Standby State", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off.", "Expected_Results": "Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life. An operator must press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Revenue Mode", "Test_Scnario": "Revenue Mode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Revenue Mode. The Revenue Mode allows the SA Tool operator to interact with customers. In this mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures.", "Expected_Results": "The SA tool should only have access to the EPT in the revenue mode and should accept the credit and debit payments."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Revenue Mode", "Test_Scnario": "Training Mode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is in Training Mode. The Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions.", "Expected_Results": "Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode. They should not be a form of valid proof of payment."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Training Mode", "Test_Scnario": "Verify the functionality of SA Tool in Out-of-Service State", "Test_Sce_Description": "In this scenario, the SA Tool is in 'Out-of-Service' state. The test will verify if the tool is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components.", "Expected_Results": "The SA Tool should not accept any Farecard and should indicate that it requires maintenance."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Training Mode", "Test_Scnario": "Verify the functionality of SA Tool in Standby State", "Test_Sce_Description": "In this scenario, the SA Tool is in 'Standby' state. The test will verify if the tool suspends all functionality and disconnects from all peripherals to conserve battery life.", "Expected_Results": "The SA Tool should suspend all functionality and disconnect from all peripherals."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Training Mode", "Test_Scnario": "Verify the functionality of SA Tool in Revenue Mode", "Test_Sce_Description": "In this scenario, the SA Tool is in 'Revenue' mode. The test will verify if the tool allows the operator to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures.", "Expected_Results": "The SA Tool should allow the operator to perform all the mentioned tasks in Revenue mode."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Training Mode", "Test_Scnario": "Verify the functionality of SA Tool in Training Mode", "Test_Sce_Description": "In this scenario, the SA Tool is in 'Training' mode. The test will verify if the tool allows the operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions.", "Expected_Results": "The SA Tool should allow the operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Training Mode", "Test_Scnario": "Verify the functionality of Operator Overrides Selects/Overrides Current Route Parameters", "Test_Sce_Description": "In this scenario, the operator selects the Additional Options menu on the SA Tool and selects Route Parameters. The test will verify if the operator can update the current location and if the Route Parameters are updated to the operator selected location.", "Expected_Results": "The operator should be able to update the current location and the Route Parameters should be updated to the operator selected location."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Training Mode", "Test_Scnario": "Verify the functionality of Operator Switches Device Mode for Current SP (DISTANCE BASED TRANSIT and GO Only)", "Test_Sce_Description": "In this scenario, the operator selects SP (DISTANCE BASED TRANSIT/GO) on the Login screen. The test will verify if the SA Tool application validates credentials and operator is successfully logged in.", "Expected_Results": "The SA Tool application should validate credentials and operator should be successfully logged in."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Training Mode", "Test_Scnario": "Verify the functionality of SP Switching is disabled", "Test_Sce_Description": "In this scenario, SP Switching is disabled. The test will verify if the operator is displayed a toast message notification notifying SP switching is disabled.", "Expected_Results": "The operator should be displayed a toast message notification notifying SP switching is disabled."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Access Revenue Mode", "Test_Scnario": "Testing the functionality of Non-Revenue farecard in the training mode", "Test_Sce_Description": "In this scenario, the Non-Revenue farecard is tapped in the training mode to check if the SA tool accepts it. The device should display a declined HMI if the card is tapped in the revenue mode.", "Expected_Results": "The SA tool should only accept the Non-Revenue farecard in the training mode and display a declined HMI in the revenue mode."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Access Revenue Mode", "Test_Scnario": "Testing the Temporal Class Supplement functionality", "Test_Sce_Description": "In this scenario, a Farecard is tapped on a device during a time period that contains an associated Temporal Class Supplement. The device should reflect the Temporal Class Supplement and process the Tap-On Transaction as a normal tap-on.", "Expected_Results": "The device should correctly reflect the Temporal Class Supplement and process the Tap-On Transaction as a normal tap-on."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Access Revenue Mode", "Test_Scnario": "Testing the Autoload Enabled functionality", "Test_Sce_Description": "In this scenario, a Farecard with Autoload Enabled is tapped on a device and the Fare amount crosses the Auto-load threshold. The device should detect that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold, which triggers the Autoload amount to be added to the Farecard.", "Expected_Results": "The device should correctly detect that the Current E-Purse Balance \u2013 deducted Fare crosses the Autoload threshold and add the Autoload amount to the Farecard."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Access Revenue Mode", "Test_Scnario": "Testing the Override mode functionality", "Test_Sce_Description": "In this scenario, a Farecard with no Default O/D is tapped on while the device is in Override mode. The device should process the tap as a result tap-on.", "Expected_Results": "The device should correctly process the tap as a result tap-on when the device is in Override mode."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Access Revenue Mode", "Test_Scnario": "Testing the Audio Messages functionality", "Test_Sce_Description": "In this scenario, a Cardholder Taps-On an SA Tool to a Fare-by-Zone TA with Farecard and requests Audio Messages. The operator enables audio mode and the corresponding audio message is played to the customer in the default language of their Farecard.", "Expected_Results": "The operator should be able to enable audio mode and the corresponding audio message should be played to the customer in the default language of their Farecard."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Access Revenue Mode", "Test_Scnario": "Testing the functionality when Farecard fails validation checks at Tap-On", "Test_Sce_Description": "In this scenario, a Farecard is tapped on a device but it fails validation checks at Tap-On. The device should handle this exception flow correctly.", "Expected_Results": "The device should correctly handle the exception flow when a Farecard fails validation checks at Tap-On."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Access Revenue Mode", "Test_Scnario": "Testing the functionality when SA Tool is in \u201cOut-of-Service\u201d state", "Test_Sce_Description": "In this scenario, a SA Tool is in \u201cOut-of-Service\u201d state. It should be unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components.", "Expected_Results": "The SA Tool should correctly go into \u201cOut-of-Service\u201d state and be unable to accept a Farecard for any kind of functionality."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Access Revenue Mode", "Test_Scnario": "Testing the functionality when SA Tool is in Standby state", "Test_Sce_Description": "In this scenario, a SA Tool is in Standby state. The screen is turned off and the SA Tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life.", "Expected_Results": "The SA Tool should correctly go into Standby state, turn off the screen and disconnect from all the peripherals."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Access Revenue Mode", "Test_Scnario": "Testing the functionality of Revenue Mode", "Test_Sce_Description": "In this scenario, the operator logs on to the SA Tool and selects the Revenue Mode. The operator should be able to interact with customers, perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures.", "Expected_Results": "The operator should be able to correctly select the Revenue Mode and perform all the associated tasks."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Access Revenue Mode", "Test_Scnario": "Testing the functionality of Training Mode", "Test_Sce_Description": "In this scenario, the operator logs on to the SA Tool and selects the Training Mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions.", "Expected_Results": "The operator should be able to correctly select the Training Mode and mimic all functionality available within Sales Mode without accepting payment."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Sales", "Test_Scnario": "Testing the Power On functionality of the SA Tool", "Test_Sce_Description": "This scenario is to test the power on functionality of the SA Tool. The operator should be able to power on the SA Tool by pressing and holding the power button. The device should boot up and perform an initial self-diagnostic check. After successful boot up, the device should require the operator to enter the OS Lock screen passcode at the device lock screen. After a valid passcode is entered at the lock screen, the device should launch the Android home screen of the SA Tool device.", "Expected_Results": "The SA Tool should power on successfully, perform self-diagnostic check, require the operator to enter the OS Lock screen passcode and launch the Android home screen of the SA Tool device after a valid passcode is entered."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Sales", "Test_Scnario": "Testing the Core Functionality - Sales of the SA Tool", "Test_Sce_Description": "This scenario is to test the core functionality - sales of the SA Tool. The operator should be able to access and use the SA Tool for conducting Fare Payments, Sales, Inspections, and provide other CLIENT services.", "Expected_Results": "The operator should be able to successfully conduct Fare Payments, Sales, Inspections, and provide other CLIENT services using the SA Tool."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Sales", "Test_Scnario": "Testing the Ancillary Functions of the SA Tool", "Test_Sce_Description": "This scenario is to test the ancillary functions of the SA Tool. These functions should provide necessary support to the operator and to the core SA Tool\u2019s Fare Payment, Sales, Inspection, Query and Digital Counter functionalities.", "Expected_Results": "The ancillary functions of the SA Tool should provide necessary support to the operator and to the core SA Tool\u2019s Fare Payment, Sales, Inspection, Query and Digital Counter functionalities."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Sales", "Test_Scnario": "Testing the Exception Flow of the SA Tool", "Test_Sce_Description": "This scenario is to test the exception flow of the SA Tool. The SA Tool should be able to handle exceptions in the main Use Case and provide appropriate error messages.", "Expected_Results": "The SA Tool should be able to handle exceptions in the main Use Case and provide appropriate error messages."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Sales", "Test_Scnario": "Testing the Alternate Flow of the SA Tool", "Test_Sce_Description": "This scenario is to test the alternate flow of the SA Tool. The SA Tool should be able to handle alternate flows in the main Use Case and provide appropriate responses.", "Expected_Results": "The SA Tool should be able to handle alternate flows in the main Use Case and provide appropriate responses."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Sales", "Test_Scnario": "Testing the Performance of the SA Tool", "Test_Sce_Description": "This scenario is to test the performance of the SA Tool. The SA Tool should be able to handle high volume of transactions and provide fast response times.", "Expected_Results": "The SA Tool should be able to handle high volume of transactions and provide fast response times."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Sales", "Test_Scnario": "Testing the Security of the SA Tool", "Test_Sce_Description": "This scenario is to test the security of the SA Tool. The SA Tool should be able to securely handle sensitive data and prevent unauthorized access.", "Expected_Results": "The SA Tool should be able to securely handle sensitive data and prevent unauthorized access."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Fare Payment", "Test_Scnario": "Verifying the Farecard is on the Action or Load Value List", "Test_Sce_Description": "This scenario is to test whether the SA Tool correctly verifies that the Farecard is on the Action or Load Value List and updates the Farecard accordingly.", "Expected_Results": "The SA Tool should successfully verify the Farecard's presence on the Action or Load Value List and update it accordingly."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Fare Payment", "Test_Scnario": "Audio Messages for Fare Payment", "Test_Sce_Description": "This scenario is to test whether the SA Tool correctly plays the audio messages for fare payment in the default language of the Farecard when the customer requests for it.", "Expected_Results": "The SA Tool should successfully play the audio messages for fare payment in the default language of the Farecard."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Fare Payment", "Test_Scnario": "Fare Payment with Daily Cap Reached", "Test_Sce_Description": "This scenario is to test whether the SA Tool correctly deducts no fare when the Daily Cap is reached.", "Expected_Results": "The SA Tool should successfully deduct no fare when the Daily Cap is reached."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Fare Payment", "Test_Scnario": "Fare Payment for Premium Service or Special Route/Location", "Test_Sce_Description": "This scenario is to test whether the SA Tool correctly computes and deducts the Premium or Special Event fare when a tap on a premium service or special route/location is made.", "Expected_Results": "The SA Tool should successfully compute and deduct the Premium or Special Event fare when a tap on a premium service or special route/location is made."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Fare Payment", "Test_Scnario": "Fare Upgrade for Premium Service or Special Route/Location", "Test_Sce_Description": "This scenario is to test whether the SA Tool correctly computes and deducts the Upgrade fare when a tap on a premium service or special event route/location is made after previously riding on a regular service route.", "Expected_Results": "The SA Tool should successfully compute and deduct the Upgrade fare when a tap on a premium service or special event route/location is made after previously riding on a regular service route."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Fare Payment", "Test_Scnario": "Fare Payment during Peak hours after reaching Off Peak Daily Cap", "Test_Sce_Description": "This scenario is to test whether the SA Tool correctly processes a fare payment when a tap on peak hours is made after previously reaching off peak daily cap.", "Expected_Results": "The SA Tool should successfully process a fare payment when a tap on peak hours is made after previously reaching off peak daily cap."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Fare Payment", "Test_Scnario": "MDP Termination Pending on FLATFARE BASED SA Tool", "Test_Sce_Description": "This scenario is to test whether the SA Tool correctly processes the MDP Termination and proceeds with the fare payment via ePurse when the Farecard has a pending Termination.", "Expected_Results": "The SA Tool should successfully process the MDP Termination and proceed with the fare payment via ePurse when the Farecard has a pending Termination."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Fare Payment", "Test_Scnario": "Fare Payment for Service Class Route/Location which is higher fare value than the Period Pass Service Class fare", "Test_Sce_Description": "This scenario is to test whether the SA Tool correctly computes and deducts the Upgrade fare when the Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value.", "Expected_Results": "The SA Tool should successfully compute and deduct the Upgrade fare when the Farecard has a valid Period Pass where the Service class fare value is lower than the current route/location Service Class fare value."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Fare Payment", "Test_Scnario": "Fare Payment for Service Class Route/Location which is lower fare value than the Period Pass Service Class fare", "Test_Sce_Description": "This scenario is to test whether the SA Tool correctly processes the fare payment when the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value.", "Expected_Results": "The SA Tool should successfully process the fare payment when the Farecard has a valid Period Pass where the Service class fare value is greater than the current route/location Service Class fare value."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Inspection", "Test_Scnario": "Inspection of Farecard", "Test_Sce_Description": "The SA Tool should be able to inspect the Farecard and provide the necessary details. The operator should be able to accept the inspection, give a written or verbal warning, or issue a Provincial offense notice (PON).", "Expected_Results": "The SA Tool should successfully inspect the Farecard and provide the necessary options to the operator."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Inspection", "Test_Scnario": "Inspection of Tickets", "Test_Sce_Description": "The SA Tool should be able to inspect the Tickets and provide the necessary details. The operator should be able to accept the inspection, give a written or verbal warning, or issue a Provincial offense notice (PON).", "Expected_Results": "The SA Tool should successfully inspect the Tickets and provide the necessary options to the operator."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Inspection", "Test_Scnario": "Inspection of e-Tickets", "Test_Sce_Description": "The SA Tool should be able to inspect the e-Tickets and provide the necessary details. The operator should be able to accept the inspection, give a written or verbal warning, or issue a Provincial offense notice (PON).", "Expected_Results": "The SA Tool should successfully inspect the e-Tickets and provide the necessary options to the operator."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Inspection", "Test_Scnario": "Inspection of Virtual Card", "Test_Sce_Description": "The SA Tool should be able to inspect the Virtual Card and provide the necessary details. The operator should be able to accept the inspection, give a written or verbal warning, or issue a Provincial offense notice (PON).", "Expected_Results": "The SA Tool should successfully inspect the Virtual Card and provide the necessary options to the operator."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Inspection", "Test_Scnario": "Inspection of Open Payments Media", "Test_Sce_Description": "The SA Tool should be able to inspect the Open Payments Media and provide the necessary details. The operator should be able to accept the inspection, give a written or verbal warning, or issue a Provincial offense notice (PON).", "Expected_Results": "The SA Tool should successfully inspect the Open Payments Media and provide the necessary options to the operator."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Inspection", "Test_Scnario": "Record inspections for processing", "Test_Sce_Description": "The SA Tool should be able to record the inspections for processing. The operator should be able to cancel inspections (back/waive).", "Expected_Results": "The SA Tool should successfully record the inspections for processing and provide the necessary options to the operator."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Inspection", "Test_Scnario": "Farecard Sales", "Test_Sce_Description": "The SA Tool should be able to perform Farecard Sales, E-Purse load, Period pass load, Paper Tickets, Tickets, Special Tickets, Upgrades, Other Products, Vouchers, Service Guarantee, LUM Sales.", "Expected_Results": "The SA Tool should successfully perform Farecard Sales and provide the necessary options to the operator."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Inspection", "Test_Scnario": "Reversals", "Test_Sce_Description": "The SA Tool should be able to perform e-Purse payment reversal, Period pass load reversal.", "Expected_Results": "The SA Tool should successfully perform Reversals and provide the necessary options to the operator."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Inspection", "Test_Scnario": "Refunds", "Test_Sce_Description": "The SA Tool should be able to perform E-Purse balance refund, Period pass refund, Ticket/Special Ticket refund, Other products.", "Expected_Results": "The SA Tool should successfully perform Refunds and provide the necessary options to the operator."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Core Functionality - Inspection", "Test_Scnario": "Counters", "Test_Sce_Description": "The SA Tool should be able to Activate, Increment, Configure haptic feedback, Check counter summary.", "Expected_Results": "The SA Tool should successfully perform Counters and provide the necessary options to the operator."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "SA Tool Remote Access", "Test_Scnario": "Verify the functionality of SA Tool in Out-of-Service state", "Test_Sce_Description": "This scenario is to test if the SA Tool is unable to accept a Farecard for any kind of functionality when it is in Out-of-Service state and may require maintenance to restore out-of-order components.", "Expected_Results": "The SA Tool should not accept a Farecard for any kind of functionality when it is in Out-of-Service state."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "SA Tool Remote Access", "Test_Scnario": "Verify the functionality of SA Tool in Standby state", "Test_Sce_Description": "This scenario is to test if the SA Tool can temporarily suspend all functionality while in Standby state and if it switches into a Standby state where the screen will turn off after remaining inactive for a configurable period of time.", "Expected_Results": "The SA Tool should be able to temporarily suspend all functionality while in Standby state and should switch into a Standby state where the screen will turn off after remaining inactive for a configurable period of time."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "SA Tool Remote Access", "Test_Scnario": "Verify the functionality of SA Tool in Revenue mode", "Test_Sce_Description": "This scenario is to test if the SA Tool operator can interact with customers in Revenue mode and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures.", "Expected_Results": "The SA Tool operator should be able to interact with customers in Revenue mode and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "SA Tool Remote Access", "Test_Scnario": "Verify the functionality of SA Tool in Training mode", "Test_Sce_Description": "This scenario is to test if the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in Training Mode.", "Expected_Results": "The SA Tool operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in Training Mode."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "SA Tool Remote Access", "Test_Scnario": "Verify the functionality of SA Tool Remote Access", "Test_Sce_Description": "This scenario is to test if the SA Tool operator can remotely access the SA Tool.", "Expected_Results": "The SA Tool operator should be able to remotely access the SA Tool."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "SA Tool Remote Access", "Test_Scnario": "Verify the functionality of Unblock Farecard", "Test_Sce_Description": "This scenario is to test if the SA Tool operator can unblock a blocked Farecard.", "Expected_Results": "The SA Tool operator should be able to unblock a blocked Farecard."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "SA Tool Remote Access", "Test_Scnario": "Verify the functionality of Modify Card Concession", "Test_Sce_Description": "This scenario is to test if the SA Tool operator can modify the concession of a card.", "Expected_Results": "The SA Tool operator should be able to modify the concession of a card."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "SA Tool Remote Access", "Test_Scnario": "Verify the functionality of Power on SA Tool", "Test_Sce_Description": "This scenario is to test if the SA Tool operator can power on the SA Tool by pressing and holding the power button and if the device performs an initial self-diagnostic and does not find errors or failures.", "Expected_Results": "The SA Tool operator should be able to power on the SA Tool by pressing and holding the power button and the device should perform an initial self-diagnostic and does not find errors or failures."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Unblock Farecard", "Test_Scnario": "Farecard is locked", "Test_Sce_Description": "In this scenario, the card reader detects that the Farecard is locked. The device should not confer the right to travel and should provide appropriate feedback to the cardholder. An error should be captured and logged in the background for troubleshooting purposes.", "Expected_Results": "The device does not confer the right to travel, provides appropriate feedback to the cardholder, and logs an error in the background."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Unblock Farecard", "Test_Scnario": "Non-Recognizable media is tapped on SA Tool", "Test_Sce_Description": "In this scenario, a user taps a card that is not recognizable to the reader. The SA Tool should display the applicable \u201cTry Another Card\u201d screen.", "Expected_Results": "The SA Tool displays the \u201cTry Another Card\u201d screen."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Unblock Farecard", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance", "Test_Sce_Description": "In this scenario, the operator accepts a fare payment from a Farecard using ePurse balance. The SA Tool should read the Farecard information, perform necessary validation checks, compute the value to be deducted from the e-Purse, deduct the fare, update the Farecard, and display the successful fare payment screen.", "Expected_Results": "The SA Tool successfully accepts the fare payment, updates the Farecard, and displays the successful fare payment screen."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Unblock Farecard", "Test_Scnario": "Farecard is Unreadable", "Test_Sce_Description": "In this scenario, the SA Tool application detects the Farecard but fails to read it correctly. The SA Tool application should indicate to the operator that the Farecard is unreadable. An error should be captured and logged in the background for troubleshooting purposes.", "Expected_Results": "The SA Tool application indicates to the operator that the Farecard is unreadable and logs an error in the background."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Unblock Farecard", "Test_Scnario": "Farecard is tapped-off at the same location where tap-on occurred", "Test_Sce_Description": "In this scenario, the device detects that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The device should provide the appropriate feedback to the cardholder without updating the Farecard. An error should be captured and logged in the background for troubleshooting purposes.", "Expected_Results": "The device provides the appropriate feedback to the cardholder without updating the Farecard and logs an error in the background."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Unblock Farecard", "Test_Scnario": "Farecard is blocked", "Test_Sce_Description": "In this scenario, the card reader detects that the Farecard is blocked. The device should not confer the right to travel and should provide appropriate feedback to the cardholder. An error should be captured and logged in the background for troubleshooting purposes.", "Expected_Results": "The device does not confer the right to travel, provides appropriate feedback to the cardholder, and logs an error in the background."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Unblock Farecard", "Test_Scnario": "Time since Tap-On Exceeds Max Travel Duration", "Test_Sce_Description": "In this scenario, the device determines that the Tap-On Time + Max Travel Duration < Current Time. The device should auto-settle the Underpayment and deduct the value from the Farecard E-Purse.", "Expected_Results": "The device auto-settles the Underpayment and deducts the value from the Farecard E-Purse."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Unblock Farecard", "Test_Scnario": "Multiple NFC media are presented to the device at one time", "Test_Sce_Description": "In this scenario, the customer presents multiple NFC medias to the card reader at once. The device should block all user functionality and present Anti-Collision HMI to customer. An error should be captured and logged in the background for troubleshooting purposes.", "Expected_Results": "The device blocks all user functionality, presents Anti-Collision HMI to customer, and logs an error in the background."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Unblock Farecard", "Test_Scnario": "Tap a non-activated Farecard on an SA Tool", "Test_Sce_Description": "In this scenario, the device detects that the Farecard is not activated. The device should provide feedback to the Cardholder of an unsuccessful transaction. An error should be captured and logged in the background for troubleshooting purposes.", "Expected_Results": "The device provides feedback to the Cardholder of an unsuccessful transaction and logs an error in the background."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Unblock Farecard", "Test_Scnario": "Tap a Farecard on an SA Tool and card reading error occurs", "Test_Sce_Description": "In this scenario, the Cardholder taps Farecard on an SA Tool and a Card reading error occurs (e.g. Farecard is immediately removed from the card reader). An error should be captured and logged in the background for troubleshooting purposes.", "Expected_Results": "The SA Tool logs an error in the background."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Modify Card Concession", "Test_Scnario": "Fare Payment with Fare type Discount", "Test_Sce_Description": "Test the functionality of the device when it reads the concession value from the Farecard and passes this information to the CRE. The CRE then utilizes this concession information to determine the appropriate fare and deduct this value from the Farecard E-Purse.", "Expected_Results": "The device should successfully read the concession value from the Farecard, pass this information to the CRE, and deduct the appropriate fare from the Farecard E-Purse."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Modify Card Concession", "Test_Scnario": "Feedback to Cardholder of a successful transaction with a fare type discount", "Test_Sce_Description": "Test the functionality of the device when it provides the appropriate feedback to the Cardholder of a successful transaction with a fare type discount and updates the Farecard accordingly.", "Expected_Results": "The device should successfully provide the appropriate feedback to the Cardholder of a successful transaction with a fare type discount and update the Farecard accordingly."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Modify Card Concession", "Test_Scnario": "Customer Overrides the Default Trip prior to tapping-off", "Test_Sce_Description": "Test the functionality of the device when the customer requests the override of a Default Trip by interacting with the Device. The Device HMI informs the customer that the Device is prepared to override the Default Trip.", "Expected_Results": "The device should successfully inform the customer that it is prepared to override the Default Trip when the customer requests the override of a Default Trip."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Modify Card Concession", "Test_Scnario": "Cardholder Taps-Off SA Tool with Farecard \u2013 Customer requests Audio Messages", "Test_Sce_Description": "Test the functionality of the device when the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment. The operator enables audio mode.", "Expected_Results": "The device should successfully enable audio mode when the customer asks to pay for the trip with their Farecard and requests audio messages for the fare payment."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Modify Card Concession", "Test_Scnario": "Farecard fails validation checks at Tap-On", "Test_Sce_Description": "Test the functionality of the device when a Farecard fails the necessary validation checks. The device returns the appropriate feedback, and the right to travel is not conferred.", "Expected_Results": "The device should successfully return the appropriate feedback when a Farecard fails the necessary validation checks, and the right to travel should not be conferred."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Modify Card Concession", "Test_Scnario": "Farecard is tapped at the same station as the Tap-On", "Test_Sce_Description": "Test the functionality of the device when the Farecard is tapped-off at the same location where tap-on occurred. The device provides the cardholder with the appropriate feedback.", "Expected_Results": "The device should successfully provide the cardholder with the appropriate feedback when the Farecard is tapped-off at the same location where tap-on occurred."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Modify Card Concession", "Test_Scnario": "Farecard is blocked", "Test_Sce_Description": "Test the functionality of the device when the Farecard is blocked. The device should not allow the Farecard to be used for fare payment.", "Expected_Results": "The device should successfully block the Farecard from being used for fare payment."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Modify Card Concession", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Customer Has a Registered Farecard with Positive ePurse Balance Less Than the Fare Amount", "Test_Sce_Description": "Test the functionality of the device when the customer's ePurse balance is less than the fare amount. The customer's Farecard is put into overdraft (negative balance).", "Expected_Results": "The device should successfully put the customer's Farecard into overdraft when the customer's ePurse balance is less than the fare amount."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Modify Card Concession", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Transaction is within Intra-agency Transfer window", "Test_Sce_Description": "Test the functionality of the device when the customer's Farecard has a valid transfer product. The SA Tool computes the free transfer.", "Expected_Results": "The device should successfully compute the free transfer when the customer's Farecard has a valid transfer product."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Modify Card Concession", "Test_Scnario": "Accepting Fare Payment from a Farecard using ePurse Balance - Autoload Threshold is met", "Test_Sce_Description": "Test the functionality of the device when the customer's Farecard has Autoload enabled and meets or drops below Autoload Threshold. The SA Tool adds the Autoload amount to the ePurse balance.", "Expected_Results": "The device should successfully add the Autoload amount to the ePurse balance when the customer's Farecard has Autoload enabled and meets or drops below Autoload Threshold."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Device Parameter Tool Configurations", "Test_Scnario": "Verify the power on functionality of the SA Tool", "Test_Sce_Description": "This scenario is to test if the SA Tool powers on correctly when the power button is pressed and held. The device should boot up and perform an initial self-diagnostic check without finding any errors or failures.", "Expected_Results": "The SA Tool should power on successfully, perform a self-diagnostic check without errors, and require the operator to enter the OS Lock screen passcode."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Device Parameter Tool Configurations", "Test_Scnario": "Verify the SA Tool goes into 'Out-of-Service' state", "Test_Sce_Description": "This scenario is to test if the SA Tool goes into 'Out-of-Service' state when it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components.", "Expected_Results": "The SA Tool should go into 'Out-of-Service' state when it is unable to accept a Farecard and may require maintenance."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Device Parameter Tool Configurations", "Test_Scnario": "Verify the SA Tool goes into Standby state", "Test_Sce_Description": "This scenario is to test if the SA Tool goes into Standby state after remaining inactive for a configurable period of time or when the physical power button is pressed.", "Expected_Results": "The SA Tool should go into Standby state after remaining inactive for a configurable period of time or when the physical power button is pressed."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Device Parameter Tool Configurations", "Test_Scnario": "Verify the SA Tool operates in Revenue Mode", "Test_Sce_Description": "This scenario is to test if the SA Tool operates in Revenue Mode, allowing the operator to interact with customers and perform various functions such as inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures.", "Expected_Results": "The SA Tool should operate in Revenue Mode, allowing the operator to interact with customers and perform various functions."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Device Parameter Tool Configurations", "Test_Scnario": "Verify the SA Tool operates in Training Mode", "Test_Sce_Description": "This scenario is to test if the SA Tool operates in Training Mode, allowing the operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions.", "Expected_Results": "The SA Tool should operate in Training Mode, allowing the operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Device Parameter Tool Configurations", "Test_Scnario": "Verify the Unblock Farecard functionality of the SA Tool", "Test_Sce_Description": "This scenario is to test if the SA Tool can unblock a Farecard successfully.", "Expected_Results": "The SA Tool should be able to unblock a Farecard successfully."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Power on", "Use_Case_Name": "Device Parameter Tool Configurations", "Test_Scnario": "Verify the Modify Card Concession functionality of the SA Tool", "Test_Sce_Description": "This scenario is to test if the SA Tool can modify a Card Concession successfully.", "Expected_Results": "The SA Tool should be able to modify a Card Concession successfully."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Reboot", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "Testing the power on functionality of the SA Tool", "Test_Sce_Description": "This scenario tests the power on functionality of the SA Tool. The operator powers on the SA Tool by pressing and holding the power button. The device boot ups and performs an initial self-diagnostic.", "Expected_Results": "The device should power on successfully, perform the initial self-diagnostic without finding any errors or failures, and require the operator to enter the OS Lock screen passcode."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Reboot", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "Testing the SA Tool's ability to accept V1 and V2 Farecards", "Test_Sce_Description": "This scenario tests the SA Tool's ability to accept both V1 and V2 Farecards. The operator attempts to use both types of Farecards with the SA Tool.", "Expected_Results": "The SA Tool should successfully accept and process both V1 and V2 Farecards."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Reboot", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "Testing the SA Tool's connection to the User Management service", "Test_Sce_Description": "This scenario tests the SA Tool's ability to connect to the User Management service and update the account status with the latest information related to the account.", "Expected_Results": "The SA Tool should successfully connect to the User Management service and update the account status."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Reboot", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "Testing the SA Tool's ability to accept revenue and non-revenue fare cards", "Test_Sce_Description": "This scenario tests the SA Tool's ability to accept both revenue and non-revenue fare cards. The operator attempts to use both types of fare cards with the SA Tool.", "Expected_Results": "The SA Tool should successfully accept and process both revenue and non-revenue fare cards."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Reboot", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "Testing the SA Tool's ability to handle failed Farecard, CLIENT Ticket, Open Payment taps", "Test_Sce_Description": "This scenario tests the SA Tool's ability to handle failed Farecard, CLIENT Ticket, Open Payment taps that result from card read/write errors and/or card collision. The operator attempts to use the SA Tool with multiple NFC media tapped at the same time.", "Expected_Results": "The SA Tool should capture the error details in the SOTI logs."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Reboot", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "Testing the SA Tool's ability to handle different language settings", "Test_Sce_Description": "This scenario tests the SA Tool's ability to handle different language settings. The operator changes the language setting of the application and turns on audio scripts for a customer.", "Expected_Results": "The text displayed on the screen of the SA Tool should depend only upon the current language selection of the application. The audio script should be played out in the language of the language setting on the card / media."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Reboot", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "Testing the SA Tool's ability to handle fare payment with any media type", "Test_Sce_Description": "This scenario tests the SA Tool's ability to handle fare payment with any media type. The operator attempts to make a fare payment as a result of a failed inspection on the SA Tool with a different card or media type.", "Expected_Results": "The SA Tool should successfully process the fare payment with any media type."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Reboot", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "Testing the SA Tool's tap performance", "Test_Sce_Description": "This scenario tests the SA Tool's tap performance. The operator uses the SA Tool for fare payments, sales, inspections, and other CLIENT services.", "Expected_Results": "The tap performance (throughput rate) should meet current performance for existing PDS devices."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Reboot", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "Testing the SA Tool's latency times", "Test_Sce_Description": "This scenario tests the SA Tool's latency times for Open Payments, Mobile Wallet, SVC, Bytemark, TICKET when used for inspection, forepayment and sales flow.", "Expected_Results": "The latency times should be similar to existing PDS devices."}, {"Function_Flow_Name": "Training Mode", "Sub_Flow_Name": "Reboot", "Use_Case_Name": "Configurable Functionality", "Test_Scnario": "Testing the SA Tool's connection to the Ingenico EX8000 PIN Pad", "Test_Sce_Description": "This scenario tests the SA Tool's ability to connect to the Ingenico EX8000 PIN Pad in an integrated mode only.", "Expected_Results": "The SA Tool should successfully connect to the Ingenico EX8000 PIN Pad in an integrated mode only."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "The application is already launched and is running in the background", "Test_Scnario": "Launching the SA Tool Application", "Test_Sce_Description": "This scenario tests the functionality of launching the SA Tool application. The operator selects the SA Tool Application icon from the home screen of the SA Tool device. The application performs continuous diagnostic checks as it is launched. These checks include network/cellular connection, battery level, and available storage space. After successful launch, the sign-in screen is displayed.", "Expected_Results": "The SA Tool application should launch successfully and display the sign-in screen."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "The application is already launched and is running in the background", "Test_Scnario": "Enter Lock Screen Passcode", "Test_Sce_Description": "This scenario tests the functionality of entering a correct passcode to unlock the device from its lock screen. The operator enters the valid passcode on the lock screen. The device recognizes the correct passcode and displays the home screen of the device.", "Expected_Results": "The device should unlock successfully and display the home screen."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "The application is already launched and is running in the background", "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications", "Test_Sce_Description": "This scenario tests the functionality of switching between the SA Tool Application and the whitelisted third-party applications on the device. The operator taps on the home button present on the android navigation bar to navigate to the list of whitelisted third-party applications. The operator presses on the desired application icon from the home screen of the SA Tool device to launch it.", "Expected_Results": "The operator should be able to switch between the SA Tool application and the whitelisted third-party applications successfully."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "The application is already launched and is running in the background", "Test_Scnario": "Enter Lock Screen Passcode with incorrect passcode", "Test_Sce_Description": "This scenario tests the functionality of entering an incorrect passcode to unlock the device from its lock screen. The operator enters an invalid passcode. The device informs the operator that the passcode is incorrect and starts/increments the counter for device lock screen sign-in attempts.", "Expected_Results": "The device should not unlock and should inform the operator that the passcode is incorrect."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "The application is already launched and is running in the background", "Test_Scnario": "Launching the SA Tool Application with insufficient memory", "Test_Sce_Description": "This scenario tests the functionality of launching the SA Tool application when the device has insufficient memory. The operator selects the SA Tool Application icon from the home screen of the SA Tool device. The application performs continuous diagnostic checks and determines that the device has insufficient memory.", "Expected_Results": "The SA Tool application should not launch and should inform the operator about the insufficient memory."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "The application is already launched and is running in the background", "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications when the application is already running in the background", "Test_Sce_Description": "This scenario tests the functionality of switching between the SA Tool Application and the whitelisted third-party applications on the device when the application is already running in the background. The operator taps on the App Overview button on the bottom navigation bar. The operator can swipe to navigate through the list of open applications until they find the desired application. The operator presses on the desired application to launch it.", "Expected_Results": "The operator should be able to switch between the SA Tool application and the whitelisted third-party applications successfully."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter Lock Screen Passcode", "Test_Scnario": "Valid passcode entry", "Test_Sce_Description": "The operator enters a valid passcode on the lock screen of the SA Tool.", "Expected_Results": "The device recognizes the correct passcode and displays the home screen of the device."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter Lock Screen Passcode", "Test_Scnario": "Invalid passcode entry", "Test_Sce_Description": "The operator enters an invalid passcode on the lock screen of the SA Tool.", "Expected_Results": "The device informs the operator that the passcode is incorrect and increments the counter for device lock screen sign-in attempts."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter Lock Screen Passcode", "Test_Scnario": "5th failed sign-in attempt", "Test_Sce_Description": "The operator enters an invalid passcode at the 5th attempt.", "Expected_Results": "The device informs the operator that the passcode is incorrect for the counted number of times, and a re-try is permitted after 30 seconds."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter Lock Screen Passcode", "Test_Scnario": "10th failed sign-in attempt", "Test_Sce_Description": "The operator enters an invalid passcode at the 10th attempt.", "Expected_Results": "The device informs the operator that the passcode is incorrect for the counted number of times, and a re-try is permitted after 30 seconds."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter Lock Screen Passcode", "Test_Scnario": "Passcode change with same as current passcode", "Test_Sce_Description": "The operator attempts to change the passcode to the same as the current passcode.", "Expected_Results": "The SA Tool application detects that the new passcode is the same as the current passcode and notifies the operator of the error."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter Lock Screen Passcode", "Test_Scnario": "Passcode change with incorrect length", "Test_Sce_Description": "The operator attempts to change the passcode with a length that does not meet pre-defined criteria.", "Expected_Results": "The SA Tool application will not enable the submit button until the passcode entered is the correct length."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter Lock Screen Passcode", "Test_Scnario": "Maximum number of change attempts reached", "Test_Sce_Description": "The operator enters an incorrect current passcode and reaches the maximum number of attempts allowed.", "Expected_Results": "The SA Tool application checks and determines that the current passcode entered is incorrect, and that the maximum number of change passcode attempts has been reached. The SA Tool application locks the operator user account."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter Lock Screen Passcode", "Test_Scnario": "Account validation fails after passcode reset", "Test_Sce_Description": "The operator has entered all fields correctly in the Change Passcode screen and has successfully reset their passcode. However, the SA Tool application loses connectivity when performing the final account validation.", "Expected_Results": "The SA Tool application redirects the user to the SA Tool home screen and informs the operator that the passcode has been successfully reset."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter lock screen passcode: incorrect passcode entered", "Test_Scnario": "Verify correct passcode entry", "Test_Sce_Description": "The operator enters the correct passcode on the lock screen. The device should recognize the correct passcode and display the home screen of the device.", "Expected_Results": "The device recognizes the correct passcode and displays the home screen of the device."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter lock screen passcode: incorrect passcode entered", "Test_Scnario": "Verify incorrect passcode entry", "Test_Sce_Description": "The operator enters an incorrect passcode on the lock screen. The device should inform the operator that the passcode is incorrect and start/increment the counter for device lock screen sign-in attempts.", "Expected_Results": "The device informs the operator that the passcode is incorrect and starts/increments the counter for device lock screen sign-in attempts."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter lock screen passcode: incorrect passcode entered", "Test_Scnario": "Verify sign-on suspension after 5th failed attempt", "Test_Sce_Description": "The operator enters an incorrect passcode at the 5th attempt. The device should inform the operator that the passcode is incorrect and suspend the sign-on for 30 seconds.", "Expected_Results": "The device informs the operator that the passcode is incorrect and suspends the sign-on for 30 seconds."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter lock screen passcode: incorrect passcode entered", "Test_Scnario": "Verify sign-on suspension after 10th failed attempt", "Test_Sce_Description": "The operator enters an incorrect passcode at the 10th attempt. The device should inform the operator that the passcode is incorrect and suspend the sign-on for 30 seconds.", "Expected_Results": "The device informs the operator that the passcode is incorrect and suspends the sign-on for 30 seconds."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter lock screen passcode: incorrect passcode entered", "Test_Scnario": "Verify first-time user sign-in", "Test_Sce_Description": "The operator, as a first-time user, enters their operator badge ID and temporary passcode as login credentials for the SA Tool application. The operator should be required to change their temporary passcode upon initial log-in.", "Expected_Results": "The operator is able to sign-in successfully and is prompted to change their temporary passcode."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter lock screen passcode: incorrect passcode entered", "Test_Scnario": "Verify online authentication", "Test_Sce_Description": "The SA Tool communicates with the User management service to authenticate user login. This should be required when the device is online for first-time users or after the local cache is cleaned based on a configurable credential caching duration.", "Expected_Results": "The SA Tool successfully communicates with the User management service and authenticates the user login."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter lock screen passcode: incorrect passcode entered", "Test_Scnario": "Verify local authentication", "Test_Sce_Description": "The SA Tool should authenticate the user login without the need for connectivity to the user management service. This should be used for users re-logging into the same SA Tool and whose credentials have not been cleaned based on the configurable credential caching duration.", "Expected_Results": "The SA Tool successfully authenticates the user login without the need for connectivity to the user management service."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter lock screen passcode: incorrect passcode entered", "Test_Scnario": "Verify incorrect username or passcode entry during sign-in", "Test_Sce_Description": "The operator enters an incorrect username or passcode during the sign-in process. The SA Tool application should inform the operator that the entered credentials are incorrect.", "Expected_Results": "The SA Tool application informs the operator that the entered credentials are incorrect."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter Lock Screen Passcode\u2014user sign-on is suspended for 30 seconds at every 5th failed sign on attempt", "Test_Scnario": "Verify the functionality of the lock screen passcode", "Test_Sce_Description": "The operator enters a valid passcode on the lock screen. The device should recognize the correct passcode and display the home screen of the device.", "Expected_Results": "The device recognizes the correct passcode and displays the home screen of the device."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter Lock Screen Passcode\u2014user sign-on is suspended for 30 seconds at every 5th failed sign on attempt", "Test_Scnario": "Verify the functionality of incorrect passcode entry", "Test_Sce_Description": "The operator enters an invalid passcode. The device should inform the operator that the passcode is incorrect and start/increment the counter for device lock screen sign-in attempts.", "Expected_Results": "The device informs the operator that the passcode is incorrect and starts/increments the counter for device lock screen sign-in attempts."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter Lock Screen Passcode\u2014user sign-on is suspended for 30 seconds at every 5th failed sign on attempt", "Test_Scnario": "Verify the functionality of the lock screen passcode after 5th failed attempt", "Test_Sce_Description": "The operator enters an invalid passcode at the 5th attempt. The device should inform the operator that the passcode is incorrect for the counted number of times, and a re-try is permitted after 30 seconds.", "Expected_Results": "The device informs the operator that the passcode is incorrect for the counted number of times, and a re-try is permitted after 30 seconds."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter Lock Screen Passcode\u2014user sign-on is suspended for 30 seconds at every 5th failed sign on attempt", "Test_Scnario": "Verify the functionality of the lock screen passcode after 10th failed attempt", "Test_Sce_Description": "The operator enters an invalid passcode at the 10th attempt. The device should inform the operator that the passcode is incorrect for the counted number of times, and a re-try is permitted after 30 seconds.", "Expected_Results": "The device informs the operator that the passcode is incorrect for the counted number of times, and a re-try is permitted after 30 seconds."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter Lock Screen Passcode\u2014user sign-on is suspended for 30 seconds at every 5th failed sign on attempt", "Test_Scnario": "Verify the functionality of the lock screen passcode after every failed attempt after the 10th try", "Test_Sce_Description": "The operator enters an invalid passcode at every attempt after the 10th try. The device should inform the operator that the passcode is incorrect for the counted number of times, and a re-try is permitted after 30 seconds.", "Expected_Results": "The device informs the operator that the passcode is incorrect for the counted number of times, and a re-try is permitted after 30 seconds."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter Lock Screen Passcode\u2014user sign-on is suspended for 30 seconds at every 5th failed sign on attempt", "Test_Scnario": "Verify the performance of the lock screen passcode", "Test_Sce_Description": "The operator enters a valid passcode on the lock screen. The device should recognize the correct passcode and display the home screen of the device within a reasonable time frame.", "Expected_Results": "The device recognizes the correct passcode and displays the home screen of the device within a reasonable time frame."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter Lock Screen Passcode\u2014user sign-on is suspended for 30 seconds at every 5th failed sign on attempt", "Test_Scnario": "Verify the security of the lock screen passcode", "Test_Sce_Description": "The operator enters a valid passcode on the lock screen. The device should recognize the correct passcode and display the home screen of the device. The device should not allow any unauthorized access.", "Expected_Results": "The device recognizes the correct passcode and displays the home screen of the device. The device does not allow any unauthorized access."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter Lock Screen Passcode\u2014user sign-on is suspended for 30 seconds at every failed attempt after the 10th try", "Test_Scnario": "Verify the functionality of the SA Tool application when an incorrect passcode is entered for the 10th time", "Test_Sce_Description": "The operator enters an incorrect passcode for the 10th time. The application should suspend the user sign-on for 30 seconds after the 10th failed attempt.", "Expected_Results": "The application should display a message informing the operator that the passcode is incorrect and a re-try is permitted after 30 seconds. During the 30-second countdown, the operator should not be allowed to attempt sign on. After 30 seconds, the operator should be able to try again."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter Lock Screen Passcode\u2014user sign-on is suspended for 30 seconds at every failed attempt after the 10th try", "Test_Scnario": "Verify the functionality of the SA Tool application when an incorrect passcode is entered after the 10th time", "Test_Sce_Description": "The operator enters an incorrect passcode after the 10th time. The application should suspend the user sign-on for 30 seconds at every failed attempt after the 10th try.", "Expected_Results": "The application should display a message informing the operator that the passcode is incorrect and a re-try is permitted after 30 seconds. During the 30-second countdown, the operator should not be allowed to attempt sign on. After 30 seconds, the operator should be able to try again."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter Lock Screen Passcode\u2014user sign-on is suspended for 30 seconds at every failed attempt after the 10th try", "Test_Scnario": "Verify the performance of the SA Tool application when an incorrect passcode is entered for the 10th time", "Test_Sce_Description": "The operator enters an incorrect passcode for the 10th time. The application should suspend the user sign-on for 30 seconds after the 10th failed attempt. The performance of the application during this time should be tested.", "Expected_Results": "The application should not crash or freeze during the 30-second countdown. The application should continue to perform normally."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter Lock Screen Passcode\u2014user sign-on is suspended for 30 seconds at every failed attempt after the 10th try", "Test_Scnario": "Verify the security of the SA Tool application when an incorrect passcode is entered for the 10th time", "Test_Sce_Description": "The operator enters an incorrect passcode for the 10th time. The application should suspend the user sign-on for 30 seconds after the 10th failed attempt. The security of the application during this time should be tested.", "Expected_Results": "The application should not allow any unauthorized access during the 30-second countdown. The application should maintain its security measures."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Enter lock screen passcode", "Use_Case_Name": "Enter Lock Screen Passcode\u2014user sign-on is suspended for 30 seconds at every failed attempt after the 10th try", "Test_Scnario": "Verify the functionality of the SA Tool application when the application is already launched and is running in the background", "Test_Sce_Description": "The operator intends to launch the application which is already running in the device background. The operator can also tap on the App Overview button on the bottom navigation bar. The operator can swipe to navigate through the list of open applications until they find the desired application.", "Expected_Results": "The operator should be able to press on the desired application to launch it. The application should open without any issues."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Change Passcode", "Test_Scnario": "Change Passcode - Successful Scenario", "Test_Sce_Description": "Verify that the authorized operator is able to change their passcode successfully. The operator should be signed-in to their operator account on the SA Tool application, and the SA Tool has to be connected to the network.", "Expected_Results": "The operator should be able to change their passcode successfully and should be redirected to the SA Tool initial tap home screen with a pop-up message confirming successful passcode reset."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Change Passcode", "Test_Scnario": "Change Passcode - Network Connectivity Unavailable", "Test_Sce_Description": "Verify that the change passcode option is invalid in the SA Tool application when network connectivity is unavailable.", "Expected_Results": "The operator should not be able to access the change passcode function when the SA Tool is offline."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Change Passcode", "Test_Scnario": "Change Passcode - New Passcodes Do Not Match", "Test_Sce_Description": "Verify that the SA Tool application notifies the operator when the new passcodes (entered twice) do not match.", "Expected_Results": "The SA Tool application should notify the operator that the new passcodes do not match."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Change Passcode", "Test_Scnario": "Change Passcode - Current Passcode Does Not Match Passcode Stored in Subsystem", "Test_Sce_Description": "Verify that the SA Tool application notifies the operator when the entered current passcode does not match the current passcode stored in the user management service.", "Expected_Results": "The SA Tool application should notify the operator of the error when the entered current passcode does not match the current passcode stored in the user management service."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Change Passcode", "Test_Scnario": "Change Passcode - New Passcode is the Same as the Old Passcode", "Test_Sce_Description": "Verify that the SA Tool application notifies the operator when the new passcode is the same as the current passcode in the User management service.", "Expected_Results": "The SA Tool application should notify the operator of the error when the new passcode is the same as the current passcode."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Change Passcode", "Test_Scnario": "Change Passcode - New Passcode Length Does Not Meet Pre-Defined Criteria", "Test_Sce_Description": "Verify that the SA Tool application does not enable the submit button until the passcode entered is the correct length.", "Expected_Results": "The submit button should not be enabled until the passcode entered is the correct length."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Change Passcode", "Test_Scnario": "Change Passcode - Reach Maximum Number of Change Attempts", "Test_Sce_Description": "Verify that the SA Tool application locks the operator account after multiple unsuccessful change attempts for the same operator ID.", "Expected_Results": "The operator account should be locked after multiple unsuccessful change attempts for the same operator ID."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Change Passcode", "Test_Scnario": "Sign-Off SA Tool - Successful Scenario", "Test_Sce_Description": "Verify that the authorized operator is able to sign-off the SA Tool application successfully at the end of their shift. A shift statistics email should be sent to the established email distribution list once the operator successfully signs-off.", "Expected_Results": "The operator should be able to sign-off successfully and a shift statistics email should be sent to the established email distribution list."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Attempt to change passcode when network connectivity is unavailable", "Test_Scnario": "Verify the behavior when network is unavailable and operator tries to change passcode", "Test_Sce_Description": "This scenario is to test the behavior of the SA Tool application when the operator tries to change the passcode while the network is unavailable. The operator should not be able to access the change passcode function.", "Expected_Results": "The change passcode option should be invalid in the SA Tool application. The operator should not be able to access this function."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Attempt to change passcode when network connectivity is unavailable", "Test_Scnario": "Verify the behavior when new passcodes do not match", "Test_Sce_Description": "This scenario is to test the behavior of the SA Tool application when the operator enters two new passcodes that do not match. The SA Tool application should notify the operator that the new passcodes do not match.", "Expected_Results": "The SA Tool application should notify the operator that the new passcodes do not match."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Attempt to change passcode when network connectivity is unavailable", "Test_Scnario": "Verify the behavior when current passcode does not match passcode stored in Subsystem", "Test_Sce_Description": "This scenario is to test the behavior of the SA Tool application when the operator enters a current passcode that does not match the passcode stored in the User management service. The SA Tool application should notify the operator of the error.", "Expected_Results": "The SA Tool application should notify the operator of the error."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Attempt to change passcode when network connectivity is unavailable", "Test_Scnario": "Verify the behavior when new passcode is the same as the old passcode", "Test_Sce_Description": "This scenario is to test the behavior of the SA Tool application when the operator enters a new passcode that is the same as the current passcode stored in the User management service. The SA Tool application should notify the operator of the error.", "Expected_Results": "The SA Tool application should notify the operator of the error."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Attempt to change passcode when network connectivity is unavailable", "Test_Scnario": "Verify the behavior when new passcode length does not meet pre-defined criteria", "Test_Sce_Description": "This scenario is to test the behavior of the SA Tool application when the operator enters a new passcode that does not meet the pre-defined length criteria. The SA Tool application should not enable the submit button until the passcode entered is the correct length.", "Expected_Results": "The SA Tool application should not enable the submit button until the passcode entered is the correct length."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Attempt to change passcode when network connectivity is unavailable", "Test_Scnario": "Verify the behavior when maximum number of change attempts is reached", "Test_Sce_Description": "This scenario is to test the behavior of the SA Tool application when the operator has had multiple unsuccessful change attempts for the same operator ID. The SA Tool application should lock the operator's account and notify the operator of the error.", "Expected_Results": "The SA Tool application should lock the operator's account and notify the operator of the error."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "New passcodes do not match", "Test_Scnario": "Reset Passcode: Account validation fails after passcode has been reset", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when it loses connectivity or the Operator account is locked during the final account validation after the passcode has been reset.", "Expected_Results": "The SA Tool application should redirect the user to the SA Tool sign-in screen and inform the operator that the passcode has been successfully reset. The Operator should be able to sign in to the SA Tool application with their new passcode when connectivity is reached, or account is unlocked."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "New passcodes do not match", "Test_Scnario": "Forgot Passcode - New passcode is the same as the current passcode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the new passcode entered by the operator is the same as the current passcode.", "Expected_Results": "The SA Tool application should detect that the new passcode is the same as the current passcode and notify the operator with a corresponding error message. The new passcode fields should be cleared and the invalid answer counter should be incremented by one."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "New passcodes do not match", "Test_Scnario": "Operator Sign-Off", "Test_Sce_Description": "This scenario tests the procedure for authorized operators to sign-off the SA Tool application at the end of their shift.", "Expected_Results": "The operator should be able to sign-off by selecting the sign-off option in the SA Tool application. A shift statistics email should be sent to the established email distribution list once the operator successfully signs-off. The language toggle should be reset to the default EN (English) when the operator is signed-off."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "New passcodes do not match", "Test_Scnario": "Change Passcode", "Test_Sce_Description": "This scenario tests the procedure for authorized operators to change their passcodes on the SA Tool application.", "Expected_Results": "The operator should be able to change their passcode after they have signed-in to the SA Tool application. The SA Tool application should validate that the new passcode meets passcode length criteria and that the new passcodes that were entered twice match each other. If the criteria are valid, the Operator\u2019s passcode should be changed to the new passcode."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "New passcodes do not match", "Test_Scnario": "Attempt to change passcode when network connectivity is unavailable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when it is offline and the operator attempts to change their passcode.", "Expected_Results": "The change passcode option should be invalid in the SA Tool application. The operator should not be able to access this function."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "New passcodes do not match", "Test_Scnario": "New passcodes do not match", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the new passcodes entered by the operator do not match.", "Expected_Results": "The SA Tool application should determine that the new passcodes do not match and notify the operator."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "New passcodes do not match", "Test_Scnario": "Current passcode does not match passcode stored in Subsystem", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the current passcode entered by the operator does not match the passcode stored in the Subsystem.", "Expected_Results": "The SA Tool application should determine that the current passcode does not match the passcode stored in the Subsystem and notify the operator of the error."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "New passcodes do not match", "Test_Scnario": "New passcode is the same as the old passcode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the new passcode entered by the operator is the same as the old passcode.", "Expected_Results": "The SA Tool application should detect that the new passcode is the same as the old passcode and notify the operator of the error."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "New passcodes do not match", "Test_Scnario": "New passcode length does not meet pre-defined criteria", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the length of the new passcode entered by the operator does not meet the pre-defined criteria.", "Expected_Results": "The SA Tool application should not enable the submit button until the passcode entered is the correct length."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "New passcodes do not match", "Test_Scnario": "Reach maximum number of change attempts", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator has had multiple unsuccessful change attempts for the same operator ID.", "Expected_Results": "The SA Tool application should lock the operator's account after a certain number of unsuccessful attempts to change the passcode."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Current passcode does not match passcode stored in Subsystem", "Test_Scnario": "Reset Passcode: Account validation fails after passcode has been reset", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when it loses connectivity or the Operator account is locked during the final account validation after the passcode has been reset.", "Expected_Results": "The SA Tool application should redirect the user to the SA Tool sign-in screen and inform the operator that the passcode has been successfully reset. The Operator should be able to sign in to the SA Tool application with their new passcode when connectivity is reached, or account is unlocked."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Current passcode does not match passcode stored in Subsystem", "Test_Scnario": "Forgot Passcode - New passcode is the same as the current passcode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the new passcode entered by the operator is the same as the current passcode.", "Expected_Results": "The SA Tool application should detect that the new passcode is the same as the current passcode and notify the operator with a corresponding error message. The new passcode fields should be cleared and the invalid answer counter should be incremented by one."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Current passcode does not match passcode stored in Subsystem", "Test_Scnario": "Operator Sign-Off", "Test_Sce_Description": "This scenario tests the procedures for authorized operators to sign-off the SA Tool application at the end of their shift.", "Expected_Results": "The operator should be able to sign-off by selecting the sign-off option in the SA Tool application. A shift statistics email should be sent to the established email distribution list once the operator successfully signs-off."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Current passcode does not match passcode stored in Subsystem", "Test_Scnario": "Change Passcode", "Test_Sce_Description": "This scenario tests the procedures for authorized operators to change their passcodes on the SA Tool application.", "Expected_Results": "The operator should be able to change their passcode after they have signed-in to the SA Tool application. The SA Tool application should validate that the new passcode meets passcode length criteria and that the new passcodes that were entered twice match each other."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Current passcode does not match passcode stored in Subsystem", "Test_Scnario": "Attempt to change passcode when network connectivity is unavailable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when it is offline and the operator attempts to change their passcode.", "Expected_Results": "The change passcode option should be invalid in the SA Tool application. The operator should not be able to access this function."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Current passcode does not match passcode stored in Subsystem", "Test_Scnario": "New passcodes do not match", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the new passcodes entered by the operator do not match.", "Expected_Results": "The SA Tool application should determine that the new passcodes do not match and notify the operator of the error."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Current passcode does not match passcode stored in Subsystem", "Test_Scnario": "Current passcode does not match passcode stored in Subsystem", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the current passcode entered by the operator does not match the passcode stored in the Subsystem.", "Expected_Results": "The SA Tool application should connect to the User management service and determine that the operator entered current passcode does not match the current passcode stored in the user management service. The SA Tool application should notify the operator of the error."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Current passcode does not match passcode stored in Subsystem", "Test_Scnario": "New passcode is the same as the old passcode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the new passcode entered by the operator is the same as the old passcode.", "Expected_Results": "The SA Tool application should detect that the new passcode is the same as the old passcode and notify the operator of the error."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Current passcode does not match passcode stored in Subsystem", "Test_Scnario": "New passcode length does not meet pre-defined criteria", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the length of the new passcode entered by the operator does not meet the pre-defined criteria.", "Expected_Results": "The SA Tool application should not enable the submit button until the passcode entered is the correct length."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Current passcode does not match passcode stored in Subsystem", "Test_Scnario": "Reach maximum number of change attempts", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator has had multiple unsuccessful change attempts for the same operator ID.", "Expected_Results": "The SA Tool application should lock the operator's account after a certain number of unsuccessful attempts to change the passcode."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "New passcode is the same as the old passcode", "Test_Scnario": "Reset Passcode: Account validation fails after passcode has been reset", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the account validation fails after the passcode has been reset. The user has entered all fields correctly in the Reset Passcode screen and has successfully reset their passcode. However, the SA Tool application loses connectivity or the Operator account gets locked when performing the final account validation after the passcode has been reset.", "Expected_Results": "The SA Tool application should redirect the user to the SA Tool sign-in screen and inform the operator that the passcode has been successfully reset. The Operator should be able to sign in to the SA Tool application with their new passcode when connectivity is reached, or account is unlocked."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "New passcode is the same as the old passcode", "Test_Scnario": "Forgot Passcode - New passcode is the same as the current passcode", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the new passcode entered by the user is the same as the current passcode. The SA Tool application should detect this and notify the operator with a corresponding error message and clear the new passcode fields.", "Expected_Results": "The SA Tool application should increment the invalid answer counter by one to track the number of invalid reset passcode attempts."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "New passcode is the same as the old passcode", "Test_Scnario": "Operator Sign-Off", "Test_Sce_Description": "This scenario is to test the procedures for authorized operators to sign-off the SA Tool application. Operators should sign-off at the end of their shift. Authorized operators can sign-off by selecting sign-off option in the SA Tool application. A shift statistics email will be sent to the established email distribution list once the operator successfully signs-off.", "Expected_Results": "The SA Tool application should close off the current shift and automatically print the statistics report if the printer is connected to the SA Tool. The copy of the statistics report should also be sent to the Subsystem based on the store and forward mechanism. The shift statistics email should be generated and sent to the established email distribution list whenever a shift is closed."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "New passcode is the same as the old passcode", "Test_Scnario": "New passcode length does not meet pre-defined criteria", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the new passcode entered by the user does not meet the pre-defined criteria. The SA Tool application should not enable the submit button until the passcode entered is the correct length.", "Expected_Results": "The SA Tool application should not enable the submit button until the passcode entered is the correct length."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "New passcode is the same as the old passcode", "Test_Scnario": "Reach maximum number of change attempts", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the user has had multiple unsuccessful change attempts for the same operator ID. The SA Tool application should record a cumulative number of unsuccessful change passcode attempts for a single valid operator ID on a specific SA Tool. When the number of unsuccessful change passcode attempts reaches the maximum change passcode attempts, the SA Tool should deny access to that operator until the operator ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time.", "Expected_Results": "The SA Tool application should lock the operator user account and redirect the user to the SA Tool sign-in screen and inform the operator that the user account associated with the operator ID is locked."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "New passcode is the same as the old passcode", "Test_Scnario": "Account validation fails after passcode has been reset", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the account validation fails after the passcode has been reset. The user has entered all fields correctly in the Change Passcode screen and has successfully reset their passcode. However, the SA Tool application loses connectivity or the Operator account gets locked when performing the final account validation after the passcode has been reset.", "Expected_Results": "The SA Tool application should redirect the user to the SA Tool home screen and inform the operator that the passcode has been successfully reset."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "New passcode length does not meet pre-defined criteria", "Test_Scnario": "New passcode length does not meet pre-defined criteria", "Test_Sce_Description": "The operator enters a new passcode that does not meet the pre-defined criteria for length. The SA Tool application should not enable the submit button until the passcode entered is the correct length.", "Expected_Results": "The submit button remains disabled until the operator enters a passcode of the correct length."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "New passcode length does not meet pre-defined criteria", "Test_Scnario": "New passcode is the same as the current passcode", "Test_Sce_Description": "The operator enters a new passcode that is the same as the current passcode. The SA Tool application should detect this and notify the operator of the error.", "Expected_Results": "The SA Tool application detects that the new passcode is the same as the current passcode and notifies the operator of the error."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "New passcode length does not meet pre-defined criteria", "Test_Scnario": "Reach maximum number of change attempts", "Test_Sce_Description": "The operator enters an incorrect current passcode and reaches the maximum number of attempts allowed. The SA Tool application should lock the operator user account and redirect the user to the SA Tool sign-in screen, informing the operator that the user account associated with the operator ID is locked.", "Expected_Results": "The SA Tool application locks the operator user account and redirects the user to the SA Tool sign-in screen, informing the operator that the user account associated with the operator ID is locked."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "New passcode length does not meet pre-defined criteria", "Test_Scnario": "Account validation fails after passcode has been reset", "Test_Sce_Description": "The operator has entered all fields correctly in the Change Passcode screen and has successfully reset their passcode. However, the SA Tool application loses connectivity or the Operator account is locked when performing the final account validation. The SA Tool application should redirect the user to the SA Tool home screen and inform the operator that the passcode has been successfully reset.", "Expected_Results": "The SA Tool application redirects the user to the SA Tool home screen and informs the operator that the passcode has been successfully reset."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "New passcode length does not meet pre-defined criteria", "Test_Scnario": "Forgot Passcode - New passcode is the same as the current passcode", "Test_Sce_Description": "The operator enters a new passcode that is the same as the current passcode in the Forgot Passcode screen. The SA Tool application should detect this and notify the operator with a corresponding error message and clear the new passcode fields.", "Expected_Results": "The SA Tool application detects that the new passcode is the same as the current passcode, notifies the operator with a corresponding error message, and clears the new passcode fields."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "New passcode length does not meet pre-defined criteria", "Test_Scnario": "Operator Sign-Off", "Test_Sce_Description": "The operator selects the sign-off option on the SA Tool. The SA Tool application should request for a confirmation that the Operator would like to sign-out of their current shift, display a digital end-of-shift statistics report to the operator, and close off the current shift.", "Expected_Results": "The SA Tool application requests for a confirmation that the Operator would like to sign-out of their current shift, displays a digital end-of-shift statistics report to the operator, and closes off the current shift."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Reach maximum number of change attempts", "Test_Scnario": "Reach maximum number of change attempts", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the user reaches the maximum number of change attempts for the same operator ID. The user will attempt to change the passcode multiple times with incorrect current passcode until the maximum number of attempts is reached.", "Expected_Results": "The SA Tool application should lock the operator user account and redirect the user to the SA Tool sign-in screen, informing the operator that the user account associated with the operator ID is locked."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Reach maximum number of change attempts", "Test_Scnario": "Account validation fails after passcode has been reset", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the account validation fails after the passcode has been reset. The user will enter all fields correctly in the Change Passcode screen and successfully reset their passcode. Then, the SA Tool application will lose connectivity during the final account validation.", "Expected_Results": "The SA Tool application should redirect the user to the SA Tool home screen and inform the operator that the passcode has been successfully reset."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Reach maximum number of change attempts", "Test_Scnario": "Sign-in to SA Tool with no network connectivity and user login credentials are not stored in the local cache", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when there is no network connectivity and the user login credentials are not stored in the local cache. The user will attempt to sign-in to the SA Tool application while the device is offline.", "Expected_Results": "The SA Tool should display an error message and clear the passcode field."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Reach maximum number of change attempts", "Test_Scnario": "Sign-in to an operator account that has been disabled", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator account has been disabled due to inactivity. The user will attempt to sign-in to the SA Tool application with a disabled account.", "Expected_Results": "The SA Tool application should display a corresponding error message and clear the passcode field."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Reach maximum number of change attempts", "Test_Scnario": "Sign-in to a deleted operator account", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator account has been deleted due to inactivity or other reasons. The user will attempt to sign-in to the SA Tool application with a deleted account.", "Expected_Results": "The SA Tool application should display a corresponding error message and clear the passcode field."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Reset Passcode: Account validation fails after passcode has been reset", "Test_Scnario": "Reset Passcode: Account validation fails after passcode has been reset", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the account validation fails after the passcode has been reset. The user has entered all fields correctly in the Reset Passcode screen and has successfully reset their passcode. However, the SA Tool application loses connectivity or the Operator account gets locked when performing the final account validation.", "Expected_Results": "The SA Tool application should redirect the user to the SA Tool sign-in screen and inform the operator that the passcode has been successfully reset. The Operator should be able to sign in to the SA Tool application with their new passcode when connectivity is reached, or account is unlocked."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Reset Passcode: Account validation fails after passcode has been reset", "Test_Scnario": "Forgot Passcode - New passcode is the same as the current passcode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the new passcode entered by the user is the same as the current passcode. The SA Tool application detects that the new passcode is the same as the current passcode in the User management service.", "Expected_Results": "The SA Tool application should notify the operator with a corresponding error message and clear the new passcode fields. The SA Tool application should increment the invalid answer counter by one to track the number of invalid reset passcode attempts."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Reset Passcode: Account validation fails after passcode has been reset", "Test_Scnario": "Operator Sign-Off", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator signs off. The operator selects the sign-off option on the SA Tool, confirms that they would like to sign-out of their current shift, and the SA Tool displays a digital end-of-shift statistics report to the operator.", "Expected_Results": "The SA Tool application should close off the current shift and automatically print the statistics report if the printer is connected to the SA Tool. The copy of the statistics report should also be sent to the Subsystem based on the store and forward mechanism. The shift statistics email should be generated and sent to the established email distribution list whenever a shift is closed."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Reset Passcode: Account validation fails after passcode has been reset", "Test_Scnario": "Reset passcode when network connectivity is unavailable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the network connectivity is unavailable. The SA Tool is offline and the operator tries to reset their passcode.", "Expected_Results": "The SA Tool application should notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Reset Passcode: Account validation fails after passcode has been reset", "Test_Scnario": "Reset Passcode: Operator attempts to reset the passcode to their locked operator account", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator attempts to reset the passcode to their locked operator account. The operator has reached the maximum number of operator account log-in attempts and has been locked out.", "Expected_Results": "The SA Tool application should detect that operator account has been locked by checking the User management service and notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Forgot Passcode - New passcode is the same as the current passcode", "Test_Scnario": "Reset Passcode: Account validation fails after passcode has been reset", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when it loses connectivity or the Operator account is locked during the final account validation after the passcode has been reset.", "Expected_Results": "The SA Tool application should redirect the user to the SA Tool sign-in screen and inform the operator that the passcode has been successfully reset. The Operator should be able to sign in to the SA Tool application with their new passcode when connectivity is reached, or account is unlocked."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Forgot Passcode - New passcode is the same as the current passcode", "Test_Scnario": "Forgot Passcode - New passcode is the same as the current passcode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the new passcode entered by the operator is the same as the current passcode.", "Expected_Results": "The SA Tool application should detect that the new passcode is the same as the current passcode in the User management service. It should notify the operator with a corresponding error message and clear the new passcode fields. The application should also increment the invalid answer counter by one to track the number of invalid reset passcode attempts."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Forgot Passcode - New passcode is the same as the current passcode", "Test_Scnario": "Operator Sign-Off", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when an operator signs off at the end of their shift.", "Expected_Results": "The SA Tool application should display a digital end-of-shift statistics report to the operator. Once the operator selects Done, the report should close and display the Operator sign-in screen. The application should close off the current shift and automatically print the statistics report if the printer is connected to the SA Tool. A shift statistics email should be generated and sent to the established email distribution list."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Forgot Passcode - New passcode is the same as the current passcode", "Test_Scnario": "Reset Passcode: Operator attempts to reset the passcode to their locked operator account", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when an operator who has reached the maximum number of operator account log-in attempts and has been locked out tries to reset their passcode.", "Expected_Results": "The SA Tool application should detect that operator account has been locked by checking the User management service. It should notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Forgot Passcode - New passcode is the same as the current passcode", "Test_Scnario": "Reset Passcode: Operator enters invalid security question answers", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when an operator enters invalid answers to the security questions during passcode reset.", "Expected_Results": "The SA Tool application should validate that the security question answers entered do not match those stored in the User management service. It should notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Sign-Off SA Tool", "Test_Scnario": "Verify the functionality of SA Tool when battery reaches 1% level", "Test_Sce_Description": "This scenario is to test the functionality of SA Tool when the battery level reaches 1% after the operator confirms they would like to sign out. The SA Tool should be able to close off the current shift and generate the inspection shift statistics email that is stored on the device.", "Expected_Results": "The SA Tool should successfully close off the current shift and generate the inspection shift statistics email that is stored on the device. The email should be sent once the SA Tool is powered on and re-establishes connection to the network."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Sign-Off SA Tool", "Test_Scnario": "Verify the functionality of SA Tool when it is offline", "Test_Sce_Description": "This scenario is to test the functionality of SA Tool when it is offline. The SA Tool should be able to close the current shift and generate the shift statistics email that is stored on the device.", "Expected_Results": "The SA Tool should successfully close the current shift and generate the shift statistics email that is stored on the device. The email should be sent once the SA Tool is powered on and re-establishes connection to the network."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Sign-Off SA Tool", "Test_Scnario": "Verify the functionality of SA Tool when a new operator signs into current operator\u2019s shift", "Test_Sce_Description": "This scenario is to test the functionality of SA Tool when a new operator signs into current operator\u2019s shift. The SA Tool should be able to sign off the current operator and allow the new operator to sign in.", "Expected_Results": "The SA Tool should successfully sign off the current operator and allow the new operator to sign in."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Sign-Off SA Tool", "Test_Scnario": "Verify the functionality of SA Tool in Out-of-Service State", "Test_Sce_Description": "This scenario is to test the functionality of SA Tool when it is in \u201cOut-of-Service\u201d state. The SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off.", "Expected_Results": "The SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Sign-Off SA Tool", "Test_Scnario": "Verify the functionality of SA Tool in Standby State", "Test_Sce_Description": "This scenario is to test the functionality of SA Tool when it is in Standby state. The SA Tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life.", "Expected_Results": "The SA Tool should successfully disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Sign-Off SA Tool", "Test_Scnario": "Verify the functionality of SA Tool in Revenue Mode", "Test_Sce_Description": "This scenario is to test the functionality of SA Tool when it is in Revenue Mode. The SA Tool operator should be able to interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures.", "Expected_Results": "The SA Tool operator should be able to interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Sign-Off SA Tool", "Test_Scnario": "Verify the functionality of SA Tool in Training Mode", "Test_Sce_Description": "This scenario is to test the functionality of SA Tool when it is in Training Mode. The SA Tool operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions.", "Expected_Results": "The SA Tool operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Sign-Off SA Tool", "Test_Scnario": "Verify the functionality of SA Tool for different users", "Test_Sce_Description": "This scenario is to test the functionality of SA Tool for different users. The SA Tool should provide different functionalities for different users such as SA Tool Operators, SA Tool Operators - 3rd Party, Distance based Transitrvisors, Maintenance, Training.", "Expected_Results": "The SA Tool should provide different functionalities for different users such as SA Tool Operators, SA Tool Operators - 3rd Party, Distance based Transitrvisors, Maintenance, Training."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Change passcode", "Use_Case_Name": "Sign-Off SA Tool", "Test_Scnario": "Verify the functionality of SA Tool for Device Parameter Tool Configurations", "Test_Sce_Description": "This scenario is to test the functionality of SA Tool for Device Parameter Tool Configurations. The SA Tool should be able to handle the configurations introduced under the Open Payments release in the Device Parameter Tool.", "Expected_Results": "The SA Tool should be able to handle the configurations introduced under the Open Payments release in the Device Parameter Tool."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Operator Sign-Off", "Test_Scnario": "Verify the functionality of Operator Sign-Off", "Test_Sce_Description": "The operator should be able to sign off from the SA Tool successfully. The operator will enter their user ID and passcode and select Sign Out. The SA Tool should display a confirmation message asking if the operator wants to sign out. Upon confirmation, the operator should be signed out from the SA Tool.", "Expected_Results": "The operator is successfully signed out from the SA Tool."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Operator Sign-Off", "Test_Scnario": "Verify the functionality of Shut-Down SA Tool via Physical Device Button", "Test_Sce_Description": "The operator should be able to shut down the SA Tool by pressing and holding the physical power button on the SA Tool. The SA Tool should display a confirmation message with the options: Power off and Other options. The operator should select 'Power off' and confirm shut-down. The SA Tool should then ask the operator to confirm the shut-down. Upon confirmation, the device should turn off.", "Expected_Results": "The SA Tool is successfully shut down."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Operator Sign-Off", "Test_Scnario": "Verify the functionality of Reboot SA Tool", "Test_Sce_Description": "The operator should be able to reboot the SA Tool by pressing and holding the physical power button on the SA Tool. The SA Tool should display a confirmation message with the options: Power off and Other options. The operator should select the restart option. The device should then restart by turning off and powering on.", "Expected_Results": "The SA Tool is successfully rebooted."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Operator Sign-Off", "Test_Scnario": "Verify the functionality of Operator Sign-Off when the SA Tool is Offline", "Test_Sce_Description": "When the SA Tool is offline, the operator should still be able to sign off from the SA Tool. The operator will enter their user ID and passcode and select Sign Out. The SA Tool should display a confirmation message asking if the operator wants to sign out. Upon confirmation, the operator should be signed out from the SA Tool. The SA Tool should then store the shift statistics email on the device and send it once the SA Tool is powered on and re-establishes connection to the network.", "Expected_Results": "The operator is successfully signed out from the SA Tool and the shift statistics email is stored on the device and sent once the SA Tool is powered on and re-establishes connection to the network."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Operator Sign-Off", "Test_Scnario": "Verify the functionality of New operator signs into current operator\u2019s shift", "Test_Sce_Description": "When a new operator tries to sign in to the SA Tool while the current operator is still signed in, the SA Tool should display a message indicating that the current operator is currently signed in and ask if the new operator wants to sign in anyway. If the new operator selects Yes, the current operator should be signed off from the SA Tool and the new operator should be signed in.", "Expected_Results": "The current operator is successfully signed off from the SA Tool and the new operator is successfully signed in."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Operator Sign-Off", "Test_Scnario": "Verify the functionality of Device is turned off after the operator confirms that they would like to sign-out", "Test_Sce_Description": "When the SA Tool reaches the low battery threshold set to 1% after the operator confirms they would like to sign out, the SA Tool should be turned off. The SA Tool application should close off the current shift and generate the inspection shift statistics email that is stored on the device. The inspection shift statistics email should be sent once the SA Tool is powered on and re-establishes connection to the network.", "Expected_Results": "The SA Tool is successfully turned off after the operator confirms that they would like to sign-out and the inspection shift statistics email is stored on the device and sent once the SA Tool is powered on and re-establishes connection to the network."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Forgot Passcode", "Test_Scnario": "Reset Passcode: Account validation fails after passcode has been reset", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when it loses connectivity or the Operator account is locked during the final account validation after the passcode has been reset.", "Expected_Results": "The SA Tool application should redirect the user to the SA Tool sign-in screen and inform the operator that the passcode has been successfully reset. The Operator should be able to sign in to the SA Tool application with their new passcode when connectivity is reached, or account is unlocked."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Forgot Passcode", "Test_Scnario": "Forgot Passcode - New passcode is the same as the current passcode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the new passcode entered by the operator is the same as the current passcode.", "Expected_Results": "The SA Tool application should detect that the new passcode is the same as the current passcode, notify the operator with a corresponding error message and clear the new passcode fields. The application should also increment the invalid answer counter by one to track the number of invalid reset passcode attempts."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Forgot Passcode", "Test_Scnario": "Operator Sign-Off", "Test_Sce_Description": "This scenario tests the procedures for authorized operators to sign-off the SA Tool application. It also checks if a shift statistics email is sent to the established email distribution list once the operator successfully signs-off.", "Expected_Results": "The operator should be able to sign-off by selecting the sign-off option in the SA Tool application. A shift statistics email should be sent to the established email distribution list once the operator successfully signs-off."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Forgot Passcode", "Test_Scnario": "Reset passcode when network connectivity is unavailable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when it is offline and the operator attempts to reset their passcode.", "Expected_Results": "The SA Tool application should notify the operator with a corresponding error message when it is offline and the operator attempts to reset their passcode."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Forgot Passcode", "Test_Scnario": "Reset Passcode: Operator attempts to reset the passcode to their locked operator account", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator has reached the maximum number of operator account log-in attempts, has been locked out and is trying to reset their passcode on any SA Tool.", "Expected_Results": "The SA Tool application should detect that operator account has been locked by checking the User management service and notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Forgot Passcode", "Test_Scnario": "Reset Passcode: Operator enters an invalid operator badge ID when resetting their passcode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator enters an invalid operator badge ID when resetting their passcode.", "Expected_Results": "The SA Tool application should check with the User management service, determine that the operator badge ID is invalid and notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Forgot Passcode", "Test_Scnario": "Reset Passcode: Operator enters invalid security question answers", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator enters invalid security question answers.", "Expected_Results": "The SA Tool application should validate that the security question answers entered do not match those stored in the User management service and notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Forgot Passcode", "Test_Scnario": "Reset Passcode: Operator enters new passcode twice, but new passcodes do not match", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator enters new passcode twice, but the new passcodes do not match.", "Expected_Results": "The SA Tool application should validate that the new passcodes entered twice do not match and notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset passcode when network connectivity is unavailable", "Test_Scnario": "Reset passcode when network connectivity is unavailable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the network connectivity is unavailable. The operator attempts to reset their passcode while the application is offline.", "Expected_Results": "The SA Tool application should notify the operator with a corresponding error message indicating that the network connectivity is unavailable."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset passcode when network connectivity is unavailable", "Test_Scnario": "Reset passcode for a locked operator account", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator account is locked. The operator attempts to reset their passcode after reaching the maximum number of login attempts.", "Expected_Results": "The SA Tool application should detect that the operator account has been locked by checking the User management service and notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset passcode when network connectivity is unavailable", "Test_Scnario": "Reset passcode with an invalid operator badge ID", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator enters an invalid badge ID. The operator attempts to reset their passcode by entering an invalid badge ID.", "Expected_Results": "The SA Tool application should check with the User management service and determine that the operator badge ID is invalid. It should then notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset passcode when network connectivity is unavailable", "Test_Scnario": "Reset passcode with invalid security question answers", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator enters invalid answers to the security questions. The operator attempts to reset their passcode by entering invalid answers to the security questions.", "Expected_Results": "The SA Tool application should validate that the security question answers entered do not match those stored in the User management service. It should then notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset passcode when network connectivity is unavailable", "Test_Scnario": "Reset passcode with mismatched new passcodes", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator enters mismatched new passcodes. The operator attempts to reset their passcode by entering a new passcode twice, but the passcodes do not match.", "Expected_Results": "The SA Tool application should validate that the new passcodes entered twice do not match and notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator attempts to reset the passcode to their locked operator account", "Test_Scnario": "Reset Passcode: Operator attempts to reset the passcode to their locked operator account", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when an operator who has been locked out due to maximum number of login attempts tries to reset their passcode.", "Expected_Results": "The SA Tool application should detect that the operator account has been locked by checking the User management service and notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator attempts to reset the passcode to their locked operator account", "Test_Scnario": "Reset Passcode: Operator enters an invalid operator badge ID when resetting their passcode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when an operator enters an invalid badge ID while trying to reset their passcode.", "Expected_Results": "The SA Tool application should check with the User management service and determine that the operator badge ID is invalid. It should then notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator attempts to reset the passcode to their locked operator account", "Test_Scnario": "Reset Passcode: Operator enters invalid security question answers", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when an operator enters incorrect answers to the security questions while trying to reset their passcode.", "Expected_Results": "The SA Tool application should validate that the security question answers entered do not match those stored in the User management service and notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator attempts to reset the passcode to their locked operator account", "Test_Scnario": "Reset Passcode: Operator enters new passcode twice, but new passcodes do not match", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when an operator enters two different new passcodes while trying to reset their passcode.", "Expected_Results": "The SA Tool application should validate that the new passcodes entered twice do not match and notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator attempts to reset the passcode to their locked operator account", "Test_Scnario": "Reset passcode when network connectivity is unavailable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the device is offline and an operator tries to reset their passcode.", "Expected_Results": "The SA Tool application should notify the operator with a corresponding error message indicating that the network connectivity is unavailable."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator attempts to reset the passcode to their locked operator account", "Test_Scnario": "Reset Passcode: Account validation fails after passcode has been reset", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the account validation fails due to loss of connectivity or the operator account being locked after the passcode has been reset.", "Expected_Results": "The SA Tool application should redirect the user to the SA Tool sign-in screen and inform the operator that the passcode has been successfully reset. The operator should be able to sign in to the SA Tool application with their new passcode when connectivity is reached, or account is unlocked."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator attempts to reset the passcode to their locked operator account", "Test_Scnario": "Forgot Passcode - New passcode is the same as the current passcode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when an operator tries to reset their passcode with the same passcode as the current one.", "Expected_Results": "The SA Tool application should detect that the new passcode is the same as the current passcode in the User management service, notify the operator with a corresponding error message and clear the new passcode fields."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator enters an invalid operator badge ID when resetting their passcode", "Test_Scnario": "Reset Passcode: Operator enters an invalid operator badge ID when resetting their passcode", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the operator enters an invalid badge ID while resetting their passcode. The operator should be informed that the badge ID entered is invalid.", "Expected_Results": "The SA Tool application should display an error message indicating that the badge ID entered is invalid. The operator should be prompted to enter a valid badge ID."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator enters an invalid operator badge ID when resetting their passcode", "Test_Scnario": "Account validation fails after passcode has been reset due to loss of connectivity", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when there is a loss of connectivity during the final account validation after the passcode has been reset. The operator should be informed that the account validation has failed due to loss of connectivity.", "Expected_Results": "The SA Tool application should display an error message indicating that the account validation has failed due to loss of connectivity. The operator should be redirected to the SA Tool sign-in screen and informed that the passcode has been successfully reset."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator enters an invalid operator badge ID when resetting their passcode", "Test_Scnario": "New passcode is the same as the current passcode", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the operator enters a new passcode that is the same as the current passcode. The operator should be informed that the new passcode cannot be the same as the current passcode.", "Expected_Results": "The SA Tool application should display an error message indicating that the new passcode cannot be the same as the current passcode. The new passcode fields should be cleared and the invalid answer counter should be incremented by one."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator enters an invalid operator badge ID when resetting their passcode", "Test_Scnario": "Operator reaches the maximum number of login attempts", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the operator reaches the maximum number of login attempts. The operator should be informed that their account has been locked due to reaching the maximum number of login attempts.", "Expected_Results": "The SA Tool application should display an error message indicating that the operator's account has been locked due to reaching the maximum number of login attempts. The passcode field in the sign-in screen should be cleared."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator enters an invalid operator badge ID when resetting their passcode", "Test_Scnario": "New passcode is the same as the temporary passcode", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the operator enters a new passcode that is the same as the temporary passcode. The operator should be informed that the new passcode cannot be the same as the temporary passcode.", "Expected_Results": "The SA Tool application should display an error message indicating that the new passcode cannot be the same as the temporary passcode. The new passcode fields should be cleared."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator enters an invalid operator badge ID when resetting their passcode", "Test_Scnario": "New passcode length does not meet pre-defined criteria", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the operator enters a new passcode that does not meet the pre-defined length criteria. The operator should be informed that the new passcode does not meet the pre-defined length criteria.", "Expected_Results": "The SA Tool application should display an error message indicating that the new passcode does not meet the pre-defined length criteria. The submit button should not be enabled until the passcode entered is the correct length."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator enters invalid security question answers", "Test_Scnario": "Reset Passcode: Operator enters invalid security question answers", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the operator enters invalid security question answers during the passcode reset process. The operator will follow the steps from the Main Use Case up to step 5, where they will enter invalid answers to the security questions.", "Expected_Results": "The SA Tool application should validate that the security question answers entered do not match those stored in the User management service. The SA Tool application should then notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator enters invalid security question answers", "Test_Scnario": "Reset passcode when network connectivity is unavailable", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the network connectivity is unavailable during the passcode reset process. The operator will follow step 1 from the Main Use Case, and the SA Tool application should notify the operator with a corresponding error message.", "Expected_Results": "The SA Tool application should detect that the network connectivity is unavailable and notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator enters invalid security question answers", "Test_Scnario": "Reset Passcode: Operator attempts to reset the passcode to their locked operator account", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the operator attempts to reset the passcode to their locked operator account. The operator will follow step 1 from the Main Use Case, and the SA Tool application should detect that operator account has been locked by checking the User management service.", "Expected_Results": "The SA Tool application should detect that the operator account has been locked and notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator enters invalid security question answers", "Test_Scnario": "Reset Passcode: Operator enters an invalid operator badge ID when resetting their passcode", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the operator enters an invalid operator badge ID during the passcode reset process. The operator will follow step 1 from the Main Use Case, and the SA Tool application should check with the User management service and determine that the operator badge ID is invalid.", "Expected_Results": "The SA Tool application should determine that the operator badge ID is invalid and notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator enters invalid security question answers", "Test_Scnario": "Reset Passcode: Operator enters new passcode twice, but new passcodes do not match", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the operator enters new passcode twice, but the new passcodes do not match during the passcode reset process. The operator will follow the steps from the Main Use Case up to step 5, where they will enter new passcode twice that do not match.", "Expected_Results": "The SA Tool application should validate that the new passcodes entered twice do not match and notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator enters new passcode twice, but new passcodes do not match", "Test_Scnario": "Reset Passcode: Operator enters new passcode twice, but new passcodes do not match", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the operator enters a new passcode twice, but the passcodes do not match. The operator should be notified with a corresponding error message.", "Expected_Results": "The SA Tool application should validate the new passcodes entered by the operator. If the passcodes do not match, the application should display an error message to the operator."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator enters new passcode twice, but new passcodes do not match", "Test_Scnario": "Reset Passcode: Account validation fails after passcode has been reset", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the account validation fails after the passcode has been reset. The operator should be redirected to the SA Tool sign-in screen and informed that the passcode has been successfully reset.", "Expected_Results": "The SA Tool application should perform the account validation check. If the validation fails due to loss of connectivity, the application should redirect the operator to the SA Tool sign-in screen and inform them that the passcode has been successfully reset."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator enters new passcode twice, but new passcodes do not match", "Test_Scnario": "Forgot Passcode - New passcode is the same as the current passcode", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the operator enters a new passcode that is the same as the current passcode. The operator should be notified with a corresponding error message and the new passcode fields should be cleared.", "Expected_Results": "The SA Tool application should detect that the new passcode is the same as the current passcode. If this is the case, the application should display an error message to the operator and clear the new passcode fields."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator enters new passcode twice, but new passcodes do not match", "Test_Scnario": "Operator Sign-Off", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the operator signs off. A shift statistics email should be sent to the established email distribution list once the operator successfully signs off.", "Expected_Results": "The SA Tool application should allow the operator to sign off by selecting the sign-off option. Once the operator signs off, a shift statistics email should be sent to the established email distribution list."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator enters new passcode twice, but new passcodes do not match", "Test_Scnario": "Reset passcode when network connectivity is unavailable", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the network connectivity is unavailable. The operator should be notified with a corresponding error message.", "Expected_Results": "The SA Tool application should check the network connectivity. If the network connectivity is unavailable, the application should display an error message to the operator."}, {"Function_Flow_Name": "Passcode", "Sub_Flow_Name": "Reset passcode", "Use_Case_Name": "Reset Passcode: Operator enters new passcode twice, but new passcodes do not match", "Test_Scnario": "Reset Passcode: Operator attempts to reset the passcode to their locked operator account", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool application when the operator attempts to reset the passcode to their locked operator account. The operator should be notified with a corresponding error message.", "Expected_Results": "The SA Tool application should detect that the operator account has been locked. If this is the case, the application should display an error message to the operator."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available", "Test_Scnario": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator tries to sign in for the first time using a temporary passcode and the network is not available.", "Expected_Results": "The SA Tool application should display a message to the operator requesting them to sign in when network is available. The operator should not be signed in."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available", "Test_Scnario": "Operator Reaches the Maximum Number of Login Attempts", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator has had multiple unsuccessful sign-in attempts for the same operator badge ID.", "Expected_Results": "The SA Tool application should record a cumulative number of unsuccessful sign on attempts for a single valid operator badge ID on a SA Tool. When the number of unsuccessful sign-in attempts reaches the maximum number of sign-on attempts, the SA Tool application should deny access to that operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available", "Test_Scnario": "New Passcode is the Same as The Temporary Passcode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator enters a new passcode that is the same as the temporary passcode.", "Expected_Results": "The SA Tool application should detect that the new passcode is the same as the temporary passcode in the Subsystem. The SA Tool Device should inform the user of the error and clear the new passcode fields."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available", "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator enters a new passcode that does not meet the pre-defined criteria.", "Expected_Results": "The SA Tool application should not enable the submit button until the passcode entered is the correct length."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available", "Test_Scnario": "Operator Enters Incorrect Username or Passcode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator enters an incorrect username or passcode.", "Expected_Results": "The SA Tool application should display an error message indicating that the username or passcode is incorrect. The operator should not be signed in."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts", "Test_Scnario": "Verify the maximum number of unsuccessful sign-in attempts", "Test_Sce_Description": "The operator enters a valid operator badge ID and invalid temporary passcode combination multiple times until they reach the maximum number of attempts allowed. The SA Tool application should record the number of unsuccessful sign-in attempts and lock the operator user account when the maximum number of attempts is reached.", "Expected_Results": "The SA Tool application locks the operator user account and informs the operator that the user account associated with the operator ID is locked."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts", "Test_Scnario": "Verify the operator badge ID unlocking process", "Test_Sce_Description": "After the operator badge ID is locked due to maximum unsuccessful sign-in attempts, a CLIENT Operations User should be able to unlock the operator badge ID. The SA Tool application should allow the operator to sign-in again after the operator badge ID is unlocked.", "Expected_Results": "The operator is able to sign-in again after the operator badge ID is unlocked by a CLIENT Operations User."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts", "Test_Scnario": "Verify the auto-unlock feature after a configurable amount of time", "Test_Sce_Description": "After the operator badge ID is locked due to maximum unsuccessful sign-in attempts, the SA Tool application should automatically unlock the operator badge ID after a configurable amount of time. The operator should be able to sign-in again after the auto-unlock time has passed.", "Expected_Results": "The operator is able to sign-in again after the operator badge ID is automatically unlocked by the SA Tool application."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts", "Test_Scnario": "Verify the error message when the new passcode is the same as the temporary passcode", "Test_Sce_Description": "The operator enters a new passcode that is the same as the temporary passcode. The SA Tool application should detect this and inform the user of the error.", "Expected_Results": "The SA Tool application displays an error message informing the user that the new passcode cannot be the same as the temporary passcode."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts", "Test_Scnario": "Verify the passcode length criteria", "Test_Sce_Description": "The operator enters a new passcode that does not meet the pre-defined length criteria. The SA Tool application should not enable the submit button until the passcode entered is the correct length.", "Expected_Results": "The submit button is not enabled until the operator enters a new passcode that meets the pre-defined length criteria."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts", "Test_Scnario": "Verify the sign-in process after the local cache is cleaned", "Test_Sce_Description": "After the local cache is cleaned based on a configurable credential caching duration, the operator should be required to sign-in again using online authentication. The SA Tool application should communicate with the User management service to authenticate user login.", "Expected_Results": "The operator is able to sign-in again using online authentication after the local cache is cleaned."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts", "Test_Scnario": "Verify the sign-in process when the device is offline", "Test_Sce_Description": "When the device is offline, the operator should be able to sign-in using local authentication if their credentials have not been cleaned based on the configurable credential caching duration. The SA Tool application should use the local credential cache to authenticate user login.", "Expected_Results": "The operator is able to sign-in using local authentication when the device is offline."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts", "Test_Scnario": "Verify the sign-in process when the network is unavailable", "Test_Sce_Description": "When the network is unavailable, the SA Tool application should display a message to the operator requesting them to sign in when network is available. The operator should not be signed in.", "Expected_Results": "The operator is not signed in and a message is displayed requesting them to sign in when network is available."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts", "Test_Scnario": "Verify the sign-in process for first-time users", "Test_Sce_Description": "First-time users should be provided with an operator badge ID and a temporary passcode for first-time sign-in. The operators should enter their operator badge ID and temporary passcode as login credentials for the SA Tool application. The operator should be required to change their temporary passcode upon initial log-in.", "Expected_Results": "The operator is able to sign-in for the first time using the operator badge ID and temporary passcode, and is required to change their temporary passcode upon initial log-in."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "Operator Reaches the Maximum Number of Login Attempts", "Test_Scnario": "Verify the security setup process for first-time users", "Test_Sce_Description": "First-time users should be required to set up security questions and a new passcode after successful first-time sign-in. The operator should select 2 security questions from a list of pre-defined security questions and provide their answers to the questions. The operator should also enter a new passcode twice to confirm the same passcode is entered twice.", "Expected_Results": "The operator is able to set up security questions and a new passcode after successful first-time sign-in."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode", "Test_Scnario": "New Passcode is the Same as The Temporary Passcode", "Test_Sce_Description": "This scenario is to test if the SA Tool application detects that the new passcode is the same as the temporary passcode in the Subsystem.", "Expected_Results": "The SA Tool Device should inform the user of the error and clear the new passcode fields."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode", "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria", "Test_Sce_Description": "This scenario is to test if the SA Tool application detects that the new passcode length does not meet the pre-defined criteria.", "Expected_Results": "The SA Tool should not enable the submit button until the passcode entered is the correct length."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode", "Test_Scnario": "Sign-In to SA Tool application at the beginning of shift (Existing User)", "Test_Sce_Description": "This scenario is to test if the authorized operators can sign-in to the SA Tool application as an existing user (not a first-time user).", "Expected_Results": "The SA Tool application should request the user to enter the operator badge ID and passcode. The operator should be able to enter their route parameters for the shift and a confirmation screen should be displayed to the operator and the SA Tool should start the operator\u2019s shift."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode", "Test_Scnario": "Sign-in without network connection: Operator\u2019s log-in details are stored in the local cache", "Test_Sce_Description": "This scenario is to test if the operator can sign-in to the SA Tool application without network connection when the operator\u2019s log-in details are stored in the local cache.", "Expected_Results": "The SA Tool application should check that the operator badge ID and passcode combination entered are valid based on operator credentials stored in the local cache."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "New Passcode is the Same as The Temporary Passcode", "Test_Scnario": "Sign-in while another operator is signed-in to the same device", "Test_Sce_Description": "This scenario is to test if the operator can sign-in to the SA Tool application while another operator is signed-in to the same device.", "Expected_Results": "The SA Tool application should allow the operator to sign-in to the application while another operator is signed-in to the same device."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria", "Test_Scnario": "New passcode is the same as the current passcode", "Test_Sce_Description": "This scenario is to test if the SA Tool application detects that the new passcode is the same as the current passcode in the User management service and notifies the operator of the error.", "Expected_Results": "The SA Tool application should detect that the new passcode is the same as the current passcode and notify the operator of the error."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria", "Test_Scnario": "New passcode length does not meet pre-defined criteria", "Test_Sce_Description": "This scenario is to test if the SA Tool application will not enable the submit button until the passcode entered is the correct length.", "Expected_Results": "The SA Tool application should not enable the submit button until the passcode entered is the correct length."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria", "Test_Scnario": "Reach maximum number of change attempts", "Test_Sce_Description": "This scenario is to test if the SA Tool application records a cumulative number of unsuccessful change passcode attempts for a single valid operator ID on a specific SA Tool and denies access to that operator until the operator ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time.", "Expected_Results": "The SA Tool application should record a cumulative number of unsuccessful change passcode attempts for a single valid operator ID on a specific SA Tool and deny access to that operator until the operator ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria", "Test_Scnario": "Account validation fails after passcode has been reset", "Test_Sce_Description": "This scenario is to test if the SA Tool application may lose connectivity, or the Operator account may be locked when performing the final account validation after the passcode has been reset.", "Expected_Results": "The SA Tool application should perform the account validation check and fail due to loss of connectivity and redirect the user to the SA Tool home screen and inform the operator that the passcode has been successfully reset."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria", "Test_Scnario": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available", "Test_Sce_Description": "This scenario is to test if the SA Tool application displays a message to the operator requesting them to sign in when network is available.", "Expected_Results": "The SA Tool application should display a message to the operator requesting them to sign in when network is available and the operator should not be signed in."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria", "Test_Scnario": "Operator Reaches the Maximum Number of Login Attempts", "Test_Sce_Description": "This scenario is to test if the SA Tool application records a cumulative number of unsuccessful sign on attempts for a single valid operator badge ID on a SA Tool and denies access to that operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time.", "Expected_Results": "The SA Tool application should record a cumulative number of unsuccessful sign on attempts for a single valid operator badge ID on a SA Tool and deny access to that operator until the operator badge ID is unlocked by the CLIENT Operations user or automatically unlocked after a configurable amount of time."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria", "Test_Scnario": "New Passcode is the Same as The Temporary Passcode", "Test_Sce_Description": "This scenario is to test if the SA Tool application detects that the new passcode is the same as the temporary passcode in the Subsystem and informs the user of the error and clears the new passcode fields.", "Expected_Results": "The SA Tool application should detect that the new passcode is the same as the temporary passcode in the Subsystem and inform the user of the error and clear the new passcode fields."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "First-time user", "Use_Case_Name": "New Passcode Length Does Not Meet Pre-Defined Criteria", "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria", "Test_Sce_Description": "This scenario is to test if the SA Tool will not enable the submit button until the passcode entered is the correct length.", "Expected_Results": "The SA Tool should not enable the submit button until the passcode entered is the correct length."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in without network connection: Operator\u2019s log-in details are stored in the local cache", "Test_Scnario": "Sign-in without network connection: Operator\u2019s log-in details are stored in the local cache", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when there is no network connection. The operator's login details are stored in the local cache and the operator tries to sign in.", "Expected_Results": "The SA Tool application should validate the operator's badge ID and passcode combination based on the credentials stored in the local cache and allow the operator to sign in."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in without network connection: Operator\u2019s log-in details are stored in the local cache", "Test_Scnario": "Sign-in while another operator is signed-in to the same device", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when another operator is already signed in to the same device. The operator tries to sign in while the SA Tool is on standby and logged in to another operator\u2019s shift.", "Expected_Results": "The SA Tool should notify the operator that another operator is currently signed-in to the same device. If the operator chooses to continue signing in, the SA Tool should close the shift of the currently signed-in operator and open a shift for the new operator."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in without network connection: Operator\u2019s log-in details are stored in the local cache", "Test_Scnario": "Sign-in while the device is on standby state (screen off) and is signed-in to the current operator\u2019s shift", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the device is on standby due to inactivity. The operator tries to sign in to the current operator\u2019s shift.", "Expected_Results": "After a valid passcode is entered at the lock screen, the SA Tool application should resume the operator\u2019s current shift and display the SA Tool application home screen."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in without network connection: Operator\u2019s log-in details are stored in the local cache", "Test_Scnario": "Sign-in the SA Tool with no network connectivity after passcode has been reset", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when there is no network connection and the operator's passcode has been reset. The operator tries to sign in to the SA Tool for the first time after the passcode reset.", "Expected_Results": "Since the new login credentials are stored in the SA Tool application after the passcode reset, the operator should be able to log-in to the SA Tool application."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in without network connection: Operator\u2019s log-in details are stored in the local cache", "Test_Scnario": "Operator Enters New Security Questions/Answers and Passcode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the operator's security questions/answers and passcode have been reset by a CLIENT Operations user. The operator tries to sign in by entering new security questions/answers and passcode.", "Expected_Results": "The SA Tool should detect that the Operator\u2019s security questions/answers and passcode had been reset and prompt the Operator to select 2 new security questions and provide a new passcode. The new security questions/answers and passcode should be saved successfully."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in without network connection: Operator\u2019s log-in details are stored in the local cache", "Test_Scnario": "Operator\u2019s Current Passcode Has Expired", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the operator's passcode has expired. The operator tries to sign in by entering a new passcode.", "Expected_Results": "The SA Tool should detect that the Operator\u2019s current passcode has expired and prompt the Operator to enter a new passcode. The new passcode should be saved successfully."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in without network connection: Operator\u2019s log-in details are stored in the local cache", "Test_Scnario": "Operator\u2019s Passcode Will Expire in the Future", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the operator's passcode will expire in the future. The operator tries to sign in.", "Expected_Results": "The SA Tool should allow the operator to sign in successfully."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in without network connection: Operator\u2019s log-in details are stored in the local cache", "Test_Scnario": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when there is no network connection and the operator is signing in for the first time using a temporary passcode.", "Expected_Results": "The SA Tool application should display a message to the operator requesting them to sign in when network is available. The operator should not be signed in."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in without network connection: Operator\u2019s log-in details are stored in the local cache", "Test_Scnario": "Operator Reaches the Maximum Number of Login Attempts", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the operator has reached the maximum number of login attempts.", "Expected_Results": "The SA Tool application should lock the operator user account and inform the operator that the user account associated with the operator ID is locked."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in without network connection: Operator\u2019s log-in details are stored in the local cache", "Test_Scnario": "New Passcode is the Same as The Temporary Passcode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the new passcode entered by the operator is the same as the temporary passcode in the Subsystem.", "Expected_Results": "The SA Tool Device should inform the user of the error and clear the new passcode fields."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in without network connection: Operator\u2019s log-in details are stored in the local cache", "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the length of the new passcode entered by the operator does not meet the pre-defined criteria.", "Expected_Results": "The SA Tool should not enable the submit button until the passcode entered is the correct length."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in while another operator is signed-in to the same device", "Test_Scnario": "Successful sign-in for first-time user", "Test_Sce_Description": "This scenario tests the successful sign-in of a first-time user. The operator will launch the SA Tool application, enter the provided badge ID and temporary passcode, and then change the temporary passcode upon initial log-in.", "Expected_Results": "The operator should be able to successfully sign-in and change their temporary passcode. The selected language preference should be stored in the user management service and the Security Setup screen should be displayed."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in while another operator is signed-in to the same device", "Test_Scnario": "Unsuccessful sign-in due to incorrect badge ID or passcode", "Test_Sce_Description": "This scenario tests the case where the operator enters an incorrect badge ID or passcode. The SA Tool application should inform the operator that the entered credentials are incorrect.", "Expected_Results": "The operator should be informed that the entered badge ID or passcode is incorrect. The operator should be allowed to re-enter the credentials."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in while another operator is signed-in to the same device", "Test_Scnario": "Unsuccessful sign-in due to network unavailability", "Test_Sce_Description": "This scenario tests the case where the network is unavailable when the operator tries to sign-in for the first time using a temporary passcode.", "Expected_Results": "The SA Tool application should display a message to the operator requesting them to sign in when network is available. The operator should not be signed in."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in while another operator is signed-in to the same device", "Test_Scnario": "Operator account lock due to maximum number of login attempts", "Test_Sce_Description": "This scenario tests the case where the operator reaches the maximum number of login attempts. The SA Tool application should lock the operator user account.", "Expected_Results": "The operator user account should be locked and the operator should be informed that the user account associated with the operator ID is locked."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in while another operator is signed-in to the same device", "Test_Scnario": "Unsuccessful passcode change due to new passcode being the same as the temporary passcode", "Test_Sce_Description": "This scenario tests the case where the operator tries to change the temporary passcode to a new passcode that is the same as the temporary passcode.", "Expected_Results": "The SA Tool Device should inform the user of the error and clear the new passcode fields."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in while another operator is signed-in to the same device", "Test_Scnario": "Unsuccessful passcode change due to new passcode length not meeting pre-defined criteria", "Test_Sce_Description": "This scenario tests the case where the operator tries to change the temporary passcode to a new passcode that does not meet the pre-defined length criteria.", "Expected_Results": "The SA Tool should not enable the submit button until the passcode entered is the correct length."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in while the device is on standby state (screen off) and is signed-in to the current operator\u2019s shift", "Test_Scnario": "Switch SA Tool from Standby to In-Service State", "Test_Sce_Description": "Verify if the operator can successfully switch the SA Tool from standby to in-service state by pressing the physical power button, entering the lock screen passcode and signing in to the SA Tool application.", "Expected_Results": "The SA Tool should switch from standby to in-service state successfully and display the shift preferences screen."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in while the device is on standby state (screen off) and is signed-in to the current operator\u2019s shift", "Test_Scnario": "Switch SA Tool from Standby to In-Service State before threshold requiring login", "Test_Sce_Description": "Verify if the operator can switch the SA Tool from standby to in-service state before the configurable threshold value that requires logging in is reached.", "Expected_Results": "The SA Tool should switch from standby to in-service state successfully and display the home screen without requiring the operator to sign in."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in while the device is on standby state (screen off) and is signed-in to the current operator\u2019s shift", "Test_Scnario": "Switch SA Tool from In-Service to Standby State", "Test_Sce_Description": "Verify if the operator can successfully switch the SA Tool from in-service to standby state by pressing the physical power button once.", "Expected_Results": "The SA Tool should switch from in-service to standby state successfully and the screen should turn off."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in while the device is on standby state (screen off) and is signed-in to the current operator\u2019s shift", "Test_Scnario": "Switch SA Tool from In-Service to Standby State when navigating away from the SA Tool Application", "Test_Sce_Description": "Verify if the SA Tool switches to standby state when the operator navigates away from the SA Tool Application to a third party application.", "Expected_Results": "The SA Tool should run in the background and go into standby state successfully."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in while the device is on standby state (screen off) and is signed-in to the current operator\u2019s shift", "Test_Scnario": "Change SP after switching device from standby to in-service state", "Test_Sce_Description": "Verify if the operator can change SP on the login screen after switching the device from standby to in-service state.", "Expected_Results": "The SA Tool should display a corresponding error message when the operator attempts to change SP on the login screen."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in while the device is on standby state (screen off) and is signed-in to the current operator\u2019s shift", "Test_Scnario": "Shut Down SA Tool via Physical Device Button", "Test_Sce_Description": "Verify if the operator can manually shut down the SA Tool by pressing and holding the physical power button and confirming shut-down.", "Expected_Results": "The SA Tool should shut down successfully."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in while the device is on standby state (screen off) and is signed-in to the current operator\u2019s shift", "Test_Scnario": "Reboot SA Tool", "Test_Sce_Description": "Verify if the operator can manually reboot the SA Tool by pressing and holding the physical power button and selecting the restart option.", "Expected_Results": "The SA Tool should reboot successfully by turning off and powering on."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in the SA Tool with no network connectivity after passcode has been reset", "Test_Scnario": "Reset Passcode: Account validation fails after passcode has been reset", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when it loses connectivity or the Operator account is locked during the final account validation after the passcode has been reset.", "Expected_Results": "The SA Tool application should redirect the user to the SA Tool sign-in screen and inform the operator that the passcode has been successfully reset. The Operator should be able to sign in to the SA Tool application with their new passcode when connectivity is reached, or account is unlocked."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in the SA Tool with no network connectivity after passcode has been reset", "Test_Scnario": "Forgot Passcode - New passcode is the same as the current passcode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the new passcode entered by the operator is the same as the current passcode.", "Expected_Results": "The SA Tool application should detect that the new passcode is the same as the current passcode and notify the operator with a corresponding error message. The new passcode fields should be cleared and the invalid answer counter should be incremented by one."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in the SA Tool with no network connectivity after passcode has been reset", "Test_Scnario": "Operator Sign-Off", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when an authorized operator signs off the application at the end of their shift.", "Expected_Results": "The SA Tool application should close off the current shift and automatically print the statistics report if the printer is connected. A shift statistics email should be sent to the established email distribution list. The language toggle should be reset to the default EN (English)."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in the SA Tool with no network connectivity after passcode has been reset", "Test_Scnario": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator signs in for the first time using a temporary passcode and the network is not available.", "Expected_Results": "The SA Tool application should display a message to the operator requesting them to sign in when network is available. The operator should not be signed in."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in the SA Tool with no network connectivity after passcode has been reset", "Test_Scnario": "Operator Reaches the Maximum Number of Login Attempts", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator reaches the maximum number of login attempts.", "Expected_Results": "The SA Tool application should lock the operator user account and inform the operator that the user account associated with the operator ID is locked. The passcode field in the sign-in screen should be cleared."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in the SA Tool with no network connectivity after passcode has been reset", "Test_Scnario": "New Passcode is the Same as The Temporary Passcode", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the new passcode entered by the operator is the same as the temporary passcode.", "Expected_Results": "The SA Tool application should detect that the new passcode is the same as the temporary passcode and inform the user of the error. The new passcode fields should be cleared."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Sign-in the SA Tool with no network connectivity after passcode has been reset", "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the length of the new passcode entered by the operator does not meet the pre-defined criteria.", "Expected_Results": "The SA Tool application should not enable the submit button until the passcode entered is the correct length."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator Enters New Security Questions/Answers and Passcode", "Test_Scnario": "Successful first-time sign-in to SA Tool application", "Test_Sce_Description": "The operator is a first-time user and has been provided with a valid operator badge ID and a temporary passcode. The operator launches the SA Tool application, enters the badge ID and temporary passcode, and successfully signs in.", "Expected_Results": "The SA Tool application validates the operator badge ID and temporary passcode combination based on operator credentials stored in user management service. The operator is informed of successful first-time sign-in and the Security Setup screen is displayed."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator Enters New Security Questions/Answers and Passcode", "Test_Scnario": "Successful setup of security questions and new passcode", "Test_Sce_Description": "After the first-time sign-in, the operator is prompted to set up security questions and a new passcode. The operator selects 2 security questions from a list of pre-defined security questions, provides their answers, and enters a new 4-digit passcode twice.", "Expected_Results": "The SA Tool application validates that the new passcode meets passcode length criteria, does not match the temporary passcode, and that the new passcodes that were entered twice match each other. The operator is informed that the passcode was successfully changed and the Inspection Parameters screen is displayed."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator Enters New Security Questions/Answers and Passcode", "Test_Scnario": "Operator enters incorrect badge ID or passcode", "Test_Sce_Description": "The operator enters an incorrect badge ID or passcode during the first-time sign-in process.", "Expected_Results": "The SA Tool application checks with the User management service and determines that the operator badge ID or passcode is invalid. The operator is notified with a corresponding error message."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator Enters New Security Questions/Answers and Passcode", "Test_Scnario": "Operator enters invalid security question answers", "Test_Sce_Description": "During the security setup process, the operator enters answers to the security questions that do not match those stored in the User management service.", "Expected_Results": "The SA Tool application validates that the security question answers entered do not match those stored in the User management service. The operator is notified with a corresponding error message."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator Enters New Security Questions/Answers and Passcode", "Test_Scnario": "Operator enters new passcodes that do not match", "Test_Sce_Description": "During the security setup process, the operator enters a new passcode twice, but the passcodes do not match.", "Expected_Results": "The SA Tool application validates that the new passcodes that were entered twice are not same. The operator is notified with a corresponding error message."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator Enters New Security Questions/Answers and Passcode", "Test_Scnario": "Operator enters new passcode that does not meet passcode length criteria", "Test_Sce_Description": "During the security setup process, the operator enters a new passcode that does not meet the passcode length criteria.", "Expected_Results": "The SA Tool application will not enable the submit button until the passcode entered is the correct length."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator Enters New Security Questions/Answers and Passcode", "Test_Scnario": "First-time user tries to reset passcode", "Test_Sce_Description": "A first-time user (who has not signed-in to a SA Tool before) tries to reset their passcode.", "Expected_Results": "The SA Tool application connects to the User management service and validates that the operator badge ID entered belongs to a first-time user. The operator is notified with a corresponding error message and the passcode field is cleared."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator Enters New Security Questions/Answers and Passcode", "Test_Scnario": "Operator reaches maximum number of forgot passcode attempts", "Test_Sce_Description": "The operator enters invalid security question answers and reaches the maximum number of forgot passcode attempts allowed.", "Expected_Results": "The SA Tool application locks the operator user account and redirects the user to the application sign-in screen. The operator is informed that the user account associated with the operator ID is locked."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator Enters New Security Questions/Answers and Passcode", "Test_Scnario": "Account validation fails after passcode has been reset", "Test_Sce_Description": "The operator has entered all fields correctly in the Reset Passcode screen and has successfully reset their passcode. However, the SA Tool application loses connectivity or the Operator account is locked when performing the final account validation.", "Expected_Results": "The SA Tool application redirects the user to the SA Tool sign-in screen and informs the operator that the passcode has been successfully reset. The Operator may try to sign in to the SA Tool application with their new passcode when connectivity is reached, or account is unlocked."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator Enters New Security Questions/Answers and Passcode", "Test_Scnario": "New passcode is the same as the current passcode", "Test_Sce_Description": "During the passcode reset process, the operator enters a new passcode that is the same as the current passcode.", "Expected_Results": "The SA Tool application validates that the new passcode is the same as the current passcode. The operator is notified with a corresponding error message."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator\u2019s Current Passcode Has Expired", "Test_Scnario": "Operator\u2019s Current Passcode Has Expired", "Test_Sce_Description": "The SA Tool detects that the Operator\u2019s current passcode has expired and prompts the Operator to enter a new passcode. Operator selects Submit, and the new passcode is saved successfully.", "Expected_Results": "The SA Tool should successfully detect the expired passcode, prompt the operator to enter a new one, and save the new passcode upon submission."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator\u2019s Current Passcode Has Expired", "Test_Scnario": "Operator\u2019s Passcode Will Expire in the Future", "Test_Sce_Description": "The SA Tool detects that the Operator\u2019s passcode will expire in a number of days and prompts the Operator to change their passcode. Operator can choose to change their passcode or dismiss the message.", "Expected_Results": "The SA Tool should successfully detect the upcoming expiry of the passcode, prompt the operator to change it, and allow the operator to either change the passcode or dismiss the message."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator\u2019s Current Passcode Has Expired", "Test_Scnario": "Operator toggles to secondary Transit Agency when Open Payments is not enabled for the secondary transit agency", "Test_Sce_Description": "Secondary transit agency does not have Open Payments enabled. The application will function only with Farecard taps. Application will not respond to taps from contactless payment cards.", "Expected_Results": "The application should function only with Farecard taps and should not respond to taps from contactless payment cards when the secondary transit agency does not have Open Payments enabled."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator\u2019s Current Passcode Has Expired", "Test_Scnario": "Operator toggles to secondary Transit Agency when Open Payments is enabled for the secondary transit agency", "Test_Sce_Description": "Secondary transit agency has Open Payments enabled. The application will function for both Farecard s and Open Payment media.", "Expected_Results": "The application should function for both Farecard s and Open Payment media when the secondary transit agency has Open Payments enabled."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator\u2019s Current Passcode Has Expired", "Test_Scnario": "Temporary Passcode Expires", "Test_Sce_Description": "Operator had requested a new temporary passcode from CLIENT Operations. Operator\u2019s temporary passcode has expired. Operator enters a valid operator badge ID and an expired temporary passcode.", "Expected_Results": "The SA Tool should detect the expired temporary passcode, inform the operator of the expired temporary passcode, and increment the invalid entry counter by one."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator\u2019s Current Passcode Has Expired", "Test_Scnario": "Operator Enters Incorrect Username or Passcode", "Test_Sce_Description": "Operator enters an invalid operator badge ID and/or an invalid passcode. The SA Tool application checks that the user ID and/or passcode entered is invalid based on operator credentials stored in the Subsystem or the local cache.", "Expected_Results": "The SA Tool should detect the invalid operator badge ID and/or passcode, inform the operator of the invalid credentials, and increment the invalid entry counter by one."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator\u2019s Current Passcode Has Expired", "Test_Scnario": "Maximum Number of Log-in Attempts Reached", "Test_Sce_Description": "SA Tool has had multiple unsuccessful sign-in attempts for the same operator badge ID. When the number of unsuccessful sign-in attempts reaches the maximum number of sign-on attempts, the SA Tool application denies access to that operator.", "Expected_Results": "The SA Tool should deny access to the operator when the maximum number of unsuccessful sign-in attempts has been reached."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator\u2019s Current Passcode Has Expired", "Test_Scnario": "Operator Signs in for the First Time Using a Temporary Passcode and Network is Not Available", "Test_Sce_Description": "Network is unavailable. SA Tool application displays a message to the operator requesting them to sign in when network is available.", "Expected_Results": "The SA Tool should display a message to the operator requesting them to sign in when network is available when the network is unavailable."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator\u2019s Current Passcode Has Expired", "Test_Scnario": "Operator Reaches the Maximum Number of Login Attempts", "Test_Sce_Description": "SA Tool has had multiple unsuccessful sign-in attempts for the same operator badge ID. When the number of unsuccessful sign-in attempts reaches the maximum number of sign-on attempts, the SA Tool application locks the operator user account.", "Expected_Results": "The SA Tool should lock the operator user account when the maximum number of unsuccessful sign-in attempts has been reached."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator\u2019s Current Passcode Has Expired", "Test_Scnario": "New Passcode is the Same as The Temporary Passcode", "Test_Sce_Description": "SA Tool application detects that the new passcode is the same as the temporary passcode in the Subsystem.", "Expected_Results": "The SA Tool should detect that the new passcode is the same as the temporary passcode, inform the user of the error, and clear the new passcode fields."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator\u2019s Current Passcode Has Expired", "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria", "Test_Sce_Description": "SA Tool will not enable the submit button until the passcode entered is the correct length.", "Expected_Results": "The SA Tool should not enable the submit button until the passcode entered is the correct length."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future", "Test_Scnario": "Operator\u2019s Passcode Will Expire in the Future", "Test_Sce_Description": "Verify that the SA Tool detects that the Operator\u2019s passcode will expire in a number of days and prompts the Operator to change their passcode.", "Expected_Results": "The SA Tool should correctly detect the expiry date of the passcode and prompt the operator to change their passcode."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future", "Test_Scnario": "Operator chooses to change their passcode", "Test_Sce_Description": "Verify that the operator can successfully change their passcode when prompted by the SA Tool.", "Expected_Results": "The operator should be able to change their passcode successfully and the new passcode should be saved in the system."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future", "Test_Scnario": "Operator chooses to dismiss the message", "Test_Sce_Description": "Verify that the operator can dismiss the message to change their passcode and continue with the current passcode.", "Expected_Results": "The operator should be able to dismiss the message and continue with the current passcode."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future", "Test_Scnario": "Secondary Transit Agency does not have Open Payments enabled", "Test_Sce_Description": "Verify that the application functions only with Farecard taps when the secondary transit agency does not have Open Payments enabled.", "Expected_Results": "The application should function only with Farecard taps and should not respond to taps from contactless payment cards."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future", "Test_Scnario": "Secondary transit agency has Open Payments enabled", "Test_Sce_Description": "Verify that the application functions for both Farecard s and Open Payment media when the secondary transit agency has Open Payments enabled.", "Expected_Results": "The application should function for both Farecard s and Open Payment media."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future", "Test_Scnario": "Operator\u2019s temporary passcode has expired", "Test_Sce_Description": "Verify that the SA Tool detects that the operator\u2019s temporary passcode has expired and prompts the operator to enter a new passcode.", "Expected_Results": "The SA Tool should correctly detect the expiry of the temporary passcode and prompt the operator to enter a new passcode."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future", "Test_Scnario": "Operator enters an invalid operator badge ID and/or an invalid passcode", "Test_Sce_Description": "Verify that the SA Tool detects that the operator badge ID and/or passcode entered is invalid based on operator credentials stored in the Subsystem or the local cache.", "Expected_Results": "The SA Tool should correctly detect the invalid operator badge ID and/or passcode and inform the operator of the invalid entry."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future", "Test_Scnario": "Maximum Number of Log-in Attempts Reached", "Test_Sce_Description": "Verify that the SA Tool locks the operator user account when the maximum number of sign-in attempts has been reached.", "Expected_Results": "The SA Tool should correctly lock the operator user account when the maximum number of sign-in attempts has been reached."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future", "Test_Scnario": "New Passcode is the Same as The Temporary Passcode", "Test_Sce_Description": "Verify that the SA Tool detects that the new passcode is the same as the temporary passcode in the Subsystem.", "Expected_Results": "The SA Tool should correctly detect that the new passcode is the same as the temporary passcode and inform the user of the error."}, {"Function_Flow_Name": "Operator sign-in", "Sub_Flow_Name": "Operator sign-off", "Use_Case_Name": "Operator\u2019s Passcode Will Expire in the Future", "Test_Scnario": "New Passcode Length Does Not Meet Pre-Defined Criteria", "Test_Sce_Description": "Verify that the SA Tool does not enable the submit button until the passcode entered is the correct length.", "Expected_Results": "The SA Tool should correctly detect the length of the passcode and not enable the submit button until the passcode entered is the correct length."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Modify Screen Brightness on SA Tool", "Test_Scnario": "Verify the functionality of the settings option in the SA Tool application", "Test_Sce_Description": "The operator should be able to select the settings option from the 'More options' menu in the SA Tool application and access the brightness level control option.", "Expected_Results": "The settings option should be functional and the operator should be able to access the brightness level control option."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Modify Screen Brightness on SA Tool", "Test_Scnario": "Verify the functionality of the manual brightness adjustment", "Test_Sce_Description": "The operator should be able to manually adjust the brightness settings step-wise when the manual brightness option is selected.", "Expected_Results": "The manual brightness adjustment should be functional and the operator should be able to adjust the brightness settings step-wise."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Modify Screen Brightness on SA Tool", "Test_Scnario": "Verify the functionality of the auto brightness adjustment", "Test_Sce_Description": "The device should be able to detect the level of light in the environment and adjust the device\u2019s brightness automatically when the auto brightness option is selected.", "Expected_Results": "The auto brightness adjustment should be functional and the device should adjust its brightness automatically based on the level of light in the environment."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Modify Screen Brightness on SA Tool", "Test_Scnario": "Verify the functionality of the apply button", "Test_Sce_Description": "The operator should be able to select the 'apply' button to activate the change in brightness settings.", "Expected_Results": "The 'apply' button should be functional and the change in brightness settings should be activated when the button is selected."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Modify Screen Brightness on SA Tool", "Test_Scnario": "Verify the functionality of the back-arrow button", "Test_Sce_Description": "The operator should be able to press the back-arrow button to navigate back to the previous screen without saving the change and reverting to the last saved configuration.", "Expected_Results": "The back-arrow button should be functional and the operator should be able to navigate back to the previous screen without saving the change."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Modify Screen Brightness on SA Tool", "Test_Scnario": "Verify the functionality of the battery level icon", "Test_Sce_Description": "The SA Tool should display the battery level icon in the status bar on top of the screen, representing the amount of remaining battery power.", "Expected_Results": "The battery level icon should be functional and accurately represent the amount of remaining battery power."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Modify Screen Brightness on SA Tool", "Test_Scnario": "Verify the functionality of the device information screen", "Test_Sce_Description": "The operator should be able to view the device information (device ID, software version, remote list update, Subsystem synchronization time) from the device information screen.", "Expected_Results": "The device information screen should be functional and display the correct device information."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Modify Screen Brightness on SA Tool", "Test_Scnario": "Verify the functionality of the SA Tool Application icon", "Test_Sce_Description": "The operator should be able to select the SA Tool Application icon from the home screen of the SA Tool device to launch the application.", "Expected_Results": "The SA Tool Application icon should be functional and the application should launch when the icon is selected."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Modify Screen Brightness on SA Tool", "Test_Scnario": "Verify the functionality of the continuous diagnostic checks", "Test_Sce_Description": "The SA Tool application should perform continuous diagnostic checks as the application is launched, checking for network/cellular connection, battery level, and available storage space.", "Expected_Results": "The continuous diagnostic checks should be functional and accurately check for network/cellular connection, battery level, and available storage space."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Modify Screen Brightness on SA Tool", "Test_Scnario": "Verify the functionality of the home button", "Test_Sce_Description": "The operator should be able to tap on the home button present on the android navigation bar to navigate to the list of whitelisted third-party applications.", "Expected_Results": "The home button should be functional and the operator should be able to navigate to the list of whitelisted third-party applications when the button is tapped."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Check Battery Power Level on SA Tool", "Test_Scnario": "Verify the functionality of adjusting screen brightness on SA Tool", "Test_Sce_Description": "The operator should be able to adjust the screen brightness on the SA Tool. This includes toggling between manual and auto brightness, manually adjusting the brightness settings step-wise, and applying the brightness setting changes.", "Expected_Results": "The screen brightness should change as per the operator's adjustments. If auto brightness is enabled, the manual adjustment component should be disabled."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Check Battery Power Level on SA Tool", "Test_Scnario": "Verify the functionality of checking battery power level on SA Tool", "Test_Sce_Description": "The operator should be able to check the battery power level on the SA Tool. The battery level icon should be displayed in the status bar on top of the screen, representing the amount of remaining battery power.", "Expected_Results": "The battery level icon should accurately represent the amount of remaining battery power. The status bar should be viewable regardless of which screen is displayed on the device."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Check Battery Power Level on SA Tool", "Test_Scnario": "Verify the functionality of checking device information on SA Tool", "Test_Sce_Description": "The operator should be able to check the device information for the SA Tool. This includes viewing the device ID, software version, last remote list update time, OP Pilot list, and last Subsystem synchronization time.", "Expected_Results": "The operator should be able to view all the mentioned device information accurately. The operator should also be able to toggle to the EOD tab to view the EOD files present on the device, both active & future files."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Check Battery Power Level on SA Tool", "Test_Scnario": "Verify the functionality of accepting fare payment on an online SA Tool from a Virtual Card using Period Pass", "Test_Sce_Description": "The operator should be able to accept fare payment on an online SA Tool from a Virtual Card using Period Pass. The application should switch to \u201cOut of Service\u201d mode if the low battery threshold is reached before the fare payment is processed.", "Expected_Results": "The fare payment should be processed successfully if the low battery threshold is not reached. If the low battery threshold is reached before the fare payment is processed, the application should switch to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Check Battery Power Level on SA Tool", "Test_Scnario": "Verify the functionality of accepting fare payment on an online SA Tool from a Virtual Card using Period Pass when the customer's card is not a Farecard", "Test_Sce_Description": "The operator should be able to accept fare payment on an online SA Tool from a Virtual Card using Period Pass even when the customer's card is not a Farecard. The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time.", "Expected_Results": "The device error message \u201cCard Read Error\u201d should be displayed for a short period of time when the customer's card is not a Farecard. The SA Tool application should not respond in this case."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Check SA Tool Information", "Test_Scnario": "Verify the successful launch of the SA Tool application", "Test_Sce_Description": "The operator should be able to successfully launch the SA Tool application by selecting the application icon from the home screen of the SA Tool device.", "Expected_Results": "The SA Tool application should launch successfully and the sign-in screen should be displayed."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Check SA Tool Information", "Test_Scnario": "Verify the continuous diagnostic checks during the launch of the SA Tool application", "Test_Sce_Description": "During the launch of the SA Tool application, the application should perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space.", "Expected_Results": "The continuous diagnostic checks should be performed successfully and any issues should be indicated on the SA Tool."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Check SA Tool Information", "Test_Scnario": "Verify the operation of the SA Tool application in offline mode", "Test_Sce_Description": "In case the SA Tool is unable to connect to a network, the application should still be able to operate in offline mode.", "Expected_Results": "The SA Tool application should operate in offline mode and the functionalities such as forget passcode and passcode change should be unavailable."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Check SA Tool Information", "Test_Scnario": "Verify the error state of the SA Tool application when initial self-diagnostic check is unsuccessful", "Test_Sce_Description": "If the SA Tool performs initial self-diagnostic checks and finds critical failures, the application should go to error state.", "Expected_Results": "The SA Tool application should go to error state when initial self-diagnostic check is unsuccessful."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Check SA Tool Information", "Test_Scnario": "Verify the out-of-service state of the SA Tool application when continuous self-diagnostic check is unsuccessful", "Test_Sce_Description": "If the SA Tool application performs the continuous self-diagnostics for storage, battery or secure element and finds errors or failures in any of these elements, the application should go to out-of-service state.", "Expected_Results": "The SA Tool application should go to out-of-service state and a critical event should be sent to SOTI Mobicontrol and CSM."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Check SA Tool Information", "Test_Scnario": "Verify the switching between the PDS SA Tool application and third-party applications", "Test_Sce_Description": "The operator should be able to switch between the SA Tool Application and the whitelisted third-party applications on the device.", "Expected_Results": "The operator should be able to successfully switch between the SA Tool Application and the whitelisted third-party applications on the device."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Check SA Tool Information", "Test_Scnario": "Verify the launching of a third-party application from the home screen of the SA Tool device", "Test_Sce_Description": "The operator should be able to launch a desired third-party application by pressing on the application icon from the home screen of the SA Tool device.", "Expected_Results": "The desired third-party application should launch successfully."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Check SA Tool Information", "Test_Scnario": "Verify the launching of a third-party application that is already running in the background", "Test_Sce_Description": "If a third-party application that the operator intends to launch is already running in the device background, the operator should be able to launch it by navigating through the list of open applications.", "Expected_Results": "The desired third-party application that is already running in the background should launch successfully."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Adjust Audio Tone Volume", "Test_Scnario": "Verify the functionality of adjusting the audio tone volume", "Test_Sce_Description": "The operator should be able to adjust the audio tone volume of the SA Tool application. The audio tone is used for the CLIENT tones (accepted, warning and declined) tones for Farecard taps.", "Expected_Results": "The operator should be able to adjust the audio tone volume successfully. As the operator adjusts the tone, the application should play the accepted tone at the newly selected volume."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Adjust Audio Tone Volume", "Test_Scnario": "Verify the functionality of saving the adjusted audio tone volume", "Test_Sce_Description": "If the operator selects done, the desired volume should be saved for the shift. The volume should reset to default volume when the operator signs out or a new operator signs in.", "Expected_Results": "The adjusted audio tone volume should be saved successfully for the shift and should reset to default when the operator signs out or a new operator signs in."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Adjust Audio Tone Volume", "Test_Scnario": "Verify the functionality of reverting to the last saved audio tone volume configuration", "Test_Sce_Description": "If the operator presses the back button on the settings screen, the application should revert to the last saved configuration.", "Expected_Results": "The application should successfully revert to the last saved audio tone volume configuration when the back button is pressed on the settings screen."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Adjust Audio Tone Volume", "Test_Scnario": "Verify the functionality of configuring vibration control", "Test_Sce_Description": "The operator should be able to configure vibration control on the SA Tool by selecting the desired vibration level.", "Expected_Results": "The operator should be able to configure the vibration control successfully by selecting the desired vibration level."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Adjust Audio Tone Volume", "Test_Scnario": "Verify the functionality of saving the configured vibration control", "Test_Sce_Description": "If the operator selects Apply, the desired vibration control should be saved for the shift. The default haptic feedback should be reset when the operator signs out or a new operator signs in.", "Expected_Results": "The configured vibration control should be saved successfully for the shift and should reset to default haptic feedback when the operator signs out or a new operator signs in."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Adjust Audio Tone Volume", "Test_Scnario": "Verify the functionality of reverting to the last saved vibration control configuration", "Test_Sce_Description": "If the operator presses the back button on the settings screen, the application should revert to the last saved configuration.", "Expected_Results": "The application should successfully revert to the last saved vibration control configuration when the back button is pressed on the settings screen."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Adjust Audio Tone Volume", "Test_Scnario": "Verify the functionality of selecting new Route/Line", "Test_Sce_Description": "The operator should be able to select desired route/lines for inspection purposes on the SA Tool.", "Expected_Results": "The operator should be able to select the desired route/lines successfully for inspection purposes on the SA Tool."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Adjust Audio Tone Volume", "Test_Scnario": "Verify the functionality of resetting the trip and stop selections", "Test_Sce_Description": "If the operator selects a route/line different than the current route, the trip and stop selections should be reset.", "Expected_Results": "The trip and stop selections should be reset successfully if the operator selects a route/line different than the current route."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Adjust Audio Tone Volume", "Test_Scnario": "Verify the functionality of selecting the desired trip and stop", "Test_Sce_Description": "The operator should be able to select the desired trip and stop after selecting the desired current route/line.", "Expected_Results": "The operator should be able to select the desired trip and stop successfully after selecting the desired current route/line."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Adjust Audio Tone Volume", "Test_Scnario": "Verify the functionality of entering the Vehicle Id", "Test_Sce_Description": "In case of bus, the operator should also be able to enter the Vehicle Id after selecting the desired current route/line.", "Expected_Results": "The operator should be able to enter the Vehicle Id successfully in case of bus after selecting the desired current route/line."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Operator Configures Vibration Control", "Test_Scnario": "Verify the functionality of vibration control adjustment", "Test_Sce_Description": "The operator should be able to adjust the vibration control on the SA Tool. The operator will select the Settings option on the SA Tool and then configure the vibration control by selecting the desired vibration level.", "Expected_Results": "The vibration control should be adjusted according to the operator's selection. If the operator presses the back button on the settings screen, the application should revert to the last saved configuration. If the operator selects Apply, the desired vibration control should be saved for the shift. The default haptic feedback should be reset when the operator signs out or a new operator signs in."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Operator Configures Vibration Control", "Test_Scnario": "Verify the functionality of vibration control adjustment in offline mode", "Test_Sce_Description": "The operator should be able to adjust the vibration control on the SA Tool even when the device is offline. The operator will select the Settings option on the SA Tool and then configure the vibration control by selecting the desired vibration level.", "Expected_Results": "The vibration control should be adjusted according to the operator's selection even in offline mode. If the operator presses the back button on the settings screen, the application should revert to the last saved configuration. If the operator selects Apply, the desired vibration control should be saved for the shift. The default haptic feedback should be reset when the operator signs out or a new operator signs in."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Operator Configures Vibration Control", "Test_Scnario": "Verify the functionality of vibration control adjustment with low battery", "Test_Sce_Description": "The operator should be able to adjust the vibration control on the SA Tool even when the device's battery is low. The operator will select the Settings option on the SA Tool and then configure the vibration control by selecting the desired vibration level.", "Expected_Results": "The vibration control should be adjusted according to the operator's selection even when the device's battery is low. If the operator presses the back button on the settings screen, the application should revert to the last saved configuration. If the operator selects Apply, the desired vibration control should be saved for the shift. The default haptic feedback should be reset when the operator signs out or a new operator signs in."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Operator Configures Vibration Control", "Test_Scnario": "Verify the functionality of vibration control adjustment with different user credentials", "Test_Sce_Description": "The operator should be able to adjust the vibration control on the SA Tool using different user credentials. The operator will select the Settings option on the SA Tool and then configure the vibration control by selecting the desired vibration level.", "Expected_Results": "The vibration control should be adjusted according to the operator's selection using different user credentials. If the operator presses the back button on the settings screen, the application should revert to the last saved configuration. If the operator selects Apply, the desired vibration control should be saved for the shift. The default haptic feedback should be reset when the operator signs out or a new operator signs in."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Operator Configures Vibration Control", "Test_Scnario": "Verify the performance of vibration control adjustment", "Test_Sce_Description": "The operator should be able to adjust the vibration control on the SA Tool without any lag or delay. The operator will select the Settings option on the SA Tool and then configure the vibration control by selecting the desired vibration level.", "Expected_Results": "The vibration control should be adjusted according to the operator's selection without any lag or delay. If the operator presses the back button on the settings screen, the application should revert to the last saved configuration. If the operator selects Apply, the desired vibration control should be saved for the shift. The default haptic feedback should be reset when the operator signs out or a new operator signs in."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Operator selects new Route/Line", "Test_Scnario": "Verify the functionality of auto-selection of first stop/station as the inspection location", "Test_Sce_Description": "The operator does not select a stop after selecting a new line. The application should auto-select the first stop/station as the inspection location.", "Expected_Results": "The first stop/station should be auto-selected as the inspection location when the operator does not make a selection."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Operator selects new Route/Line", "Test_Scnario": "Verify the functionality of saving inspection parameters", "Test_Sce_Description": "The operator selects a new line and does not select a trip. The apply button should be greyed out and the operator should not be able to save the current inspection parameters.", "Expected_Results": "The apply button is greyed out and the operator is unable to save the current inspection parameters when a trip is not selected."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Operator selects new Route/Line", "Test_Scnario": "Verify the functionality of Route Parameters selection for FLATFARE BASED SA Tool operator", "Test_Sce_Description": "The operator selects the Additional Options menu on the SA Tool, selects Route Parameters, and then selects Surface (Bus / Streetcar) or Subway toggle. The appropriate options should be displayed based on the selection.", "Expected_Results": "The appropriate options are displayed based on the selection of Surface (Bus / Streetcar) or Subway toggle in the Route Parameters."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Operator selects new Route/Line", "Test_Scnario": "Verify the functionality of enabling auto-location for route parameters", "Test_Sce_Description": "The operator selects the Additional Options menu on the SA Tool, selects Route Parameters, and then turns on automatic location. The SA Tool should automatically compute the current inspection location.", "Expected_Results": "The SA Tool automatically computes the current inspection location when the operator turns on automatic location in the Route Parameters."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Operator selects new Route/Line", "Test_Scnario": "Verify the functionality of remotely enabling/disabling GPS functionality on the SA Tool", "Test_Sce_Description": "The SA Tool application receives remote configuration and enables/disables the auto location functionality based on the new configuration in the background.", "Expected_Results": "The SA Tool application enables/disables the auto location functionality based on the new configuration received remotely."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Operator selects new Route/Line", "Test_Scnario": "Verify the functionality of updating current location in Route Parameters", "Test_Sce_Description": "The operator selects the Additional Options menu on the SA Tool, selects Route Parameters, and then updates current location. The Route Parameters should be updated to the operator selected location.", "Expected_Results": "The Route Parameters are updated to the operator selected location when the operator updates current location in the Route Parameters."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Operator selects new Route/Line", "Test_Scnario": "Verify the functionality of switching device mode between DISTANCE BASED TRANSIT and GO", "Test_Sce_Description": "The operator selects SP (DISTANCE BASED TRANSIT/GO) on the Login screen, enters their login credentials and selects \u201clogin\u201d. The SA Tool application should validate credentials and the operator should be successfully logged in.", "Expected_Results": "The SA Tool application validates credentials and the operator is successfully logged in when the operator selects SP (DISTANCE BASED TRANSIT/GO) on the Login screen."}, {"Function_Flow_Name": "Modify screen brightness", "Sub_Flow_Name": "Modify audio tone volume", "Use_Case_Name": "Operator selects new Route/Line", "Test_Scnario": "Verify the functionality of disabling SP Switching", "Test_Sce_Description": "SP Switching is disabled. The operator taps on the SP icon on login screen to switch between SPs. The operator should be displayed a toast message notification notifying SP switching is disabled.", "Expected_Results": "A toast message notification notifying SP switching is disabled is displayed when the operator taps on the SP icon on login screen to switch between SPs."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Low Battery", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Low Battery", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the battery goes below the low battery threshold during a successful Farecard tap. The low battery threshold should be high enough that the remote lists can be processed even after the SA Tool battery goes below the low battery threshold.", "Expected_Results": "The application should switch to \u201cOut of Service\u201d mode after processing the Farecard tap. The customer's fare payment should be processed successfully before the application switches to \u201cOut of Service\u201d mode."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Low Battery", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer taps a card that is not a Farecard", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when a customer taps a card that is not a Farecard. The SA Tool application should not respond, but the device error message \u201cCard Read Error\u201d should be displayed for a short period of time.", "Expected_Results": "The SA Tool application should not respond and the device error message \u201cCard Read Error\u201d should be displayed for a short period of time."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Low Battery", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when a customer\u2019s Farecard is within the Anti-Passback Window. The ATS should detect that the Farecard fails the Anti-Passback checks.", "Expected_Results": "The SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Low Battery", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time while card is in overdraft", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, and the farecard is in overdraft. The ATS should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, and detect that farecard is in overdraft.", "Expected_Results": "The SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Low Battery", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when a Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, but the farecard has sufficient e-Purse balance to cover the transaction. The ATS should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, and deduct the fare.", "Expected_Results": "The fare should be deducted from the e-Purse and the transaction should be conducted successfully."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Low Battery", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when a customer has an expired period pass, ePurse balance is less than the fare amount and has an anonymous Virtual Card. The device should send the transaction to ATS for processing. ATS should detect the card is Anonymous and the ePurse Balance is less than the fare amount.", "Expected_Results": "ATS should return a declined result back to the SA Tool. The SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Low Battery", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when a customer\u2019s Farecard is blocked. The device should send the transaction to ATS for processing. ATS should detect the card is blocked.", "Expected_Results": "ATS should return a declined result back to the SA Tool. The SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Low Battery", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when a customer\u2019s Virtual Card is on the Deny List. The device should send the transaction to ATS for processing. ATS should detect the card is on the Deny List.", "Expected_Results": "ATS should remove the card from the Deny List and set it to blocked. ATS should return a declined result back to the SA Tool. The SA Tool application should display a declined message to the customer. The transaction should not be conducted and the SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass within valid time", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a Virtual Card with a valid Limited Period Pass within the valid time limit.", "Expected_Results": "The SA Tool should successfully process the fare payment and display a successful fare payment screen. The tap counter should be reset to 0 and the Scratchpad on the Virtual Card should be updated."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a Virtual Card with a valid Limited Period Pass outside the valid time limit but with sufficient e-Purse balance.", "Expected_Results": "The SA Tool should successfully process the fare payment by deducting the fare from the e-Purse balance and display a successful fare payment screen. The tap counter should be reset to 0 and the Scratchpad on the Virtual Card should be updated."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps an Anonymous Virtual Card with an expired Period Pass and ePurse balance less than the fare amount.", "Expected_Results": "The SA Tool should decline the transaction and display a declined message to the customer. The transaction should not be conducted and the Scratchpad should be updated accordingly."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a blocked Virtual Card.", "Expected_Results": "The SA Tool should decline the transaction and display a declined message to the customer. The transaction should not be conducted and the Scratchpad should be updated accordingly."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a Virtual Card that is on the Deny List.", "Expected_Results": "The SA Tool should decline the transaction, remove the card from the Deny List and set it to blocked. It should display a declined message to the customer and the Scratchpad should be updated accordingly."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a successful Farecard tap.", "Expected_Results": "The SA Tool should continue to process the transaction and update the remote lists even after the battery goes below the low battery threshold."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Tap counter is at the configured limit", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the tap counter is at the configured limit.", "Expected_Results": "The SA Tool should decline the transaction and display a declined message to the customer. The transaction should not be conducted and the Scratchpad should be updated accordingly."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Farecard is Unreadable", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps an unreadable Virtual Card.", "Expected_Results": "The SA Tool should indicate to the operator that the Virtual Card is unreadable. If the tap is unsuccessful, the SA Tool application should indicate to the operator that the Virtual Card is unreadable."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer taps a card that is not a Farecard", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card Has Sufficient ePurse Balance and an Expired Period Pass", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a Virtual Card with an expired Period Pass but with sufficient ePurse balance.", "Expected_Results": "The SA Tool should successfully process the fare payment by deducting the fare from the e-Purse balance and display a successful fare payment screen. The tap counter should be reset to 0 and the Scratchpad on the Virtual Card should be updated."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass within valid time", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a virtual card with a valid Limited Period Pass within the valid time limit.", "Expected_Results": "The fare payment should be accepted and the transaction should be successful."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a virtual card with a valid Limited Period Pass outside the valid time limit but with sufficient e-Purse balance.", "Expected_Results": "The fare payment should be accepted by deducting the fare from the e-Purse balance and the transaction should be successful."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using an anonymous virtual card with an expired period pass and ePurse balance less than the fare amount.", "Expected_Results": "The fare payment should be declined and the transaction should not be conducted."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a blocked virtual card.", "Expected_Results": "The fare payment should be declined and the transaction should not be conducted."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a virtual card that is on the Deny List.", "Expected_Results": "The fare payment should be declined, the card should be removed from the Deny List and set to blocked, and the transaction should not be conducted."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a fare payment.", "Expected_Results": "The application should switch to 'Out of Service' mode after processing the fare payment if the low battery threshold is reached."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a farecard that is within the Anti-Passback Window.", "Expected_Results": "The fare payment should be declined and the transaction should not be conducted."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer taps a non-activated card", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a non-activated card.", "Expected_Results": "The SA Tool should display the 'Card Read Error' toast message for a short period of time."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time while card is in overdraft", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time with sufficient e-Purse balance", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a Virtual Card with a valid Limited Period Pass but the current time is outside the time limits of the product. The farecard has sufficient e-Purse balance to cover the transaction.", "Expected_Results": "The SA Tool should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, and deduct the fare. The transaction should be successful and the e-Purse balance should be updated accordingly."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time while card is in overdraft", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer has an Anonymous Farecard with an Expired Period Pass and ePurse Balance Less than the Fare Amount", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using an Anonymous Virtual Card with an expired period pass and ePurse balance less than the fare amount.", "Expected_Results": "The SA Tool should detect that the card is Anonymous and the ePurse Balance is less than the fare amount. The transaction should be declined and a declined message should be displayed to the customer."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time while card is in overdraft", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is Blocked", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a blocked Virtual Card.", "Expected_Results": "The SA Tool should detect that the card is blocked. The transaction should be declined and a declined message should be displayed to the customer."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time while card is in overdraft", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Customer\u2019s Virtual Card is on the Deny List", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a fare payment is made using a Virtual Card that is on the Deny List.", "Expected_Results": "The SA Tool should detect that the card is on the Deny List. The card should be removed from the Deny List and set to blocked. The transaction should be declined and a declined message should be displayed to the customer."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time while card is in overdraft", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Battery goes below the low battery threshold during payment", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a fare payment transaction.", "Expected_Results": "The SA Tool should be able to process the transaction successfully even if the battery goes below the low battery threshold. The remote lists should be processed and the transaction should be successful."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time while card is in overdraft", "Test_Scnario": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass - Tap counter is at the configured limit", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the tap counter is at the configured limit during a fare payment transaction.", "Expected_Results": "The SA Tool should detect that the tap counter is at the limit. The transaction should be declined and a declined message should be displayed to the customer."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Cardholder Taps-On an Online SA Tool to a Fare-by-Zone TA with Virtual Card Media", "Test_Scnario": "Cardholder initiates a trip and taps the Virtual Card Media on the device Card Reader", "Test_Sce_Description": "The Cardholder initiates a trip and taps the Virtual Card Media on the device Card Reader (CID). The device should detect the Virtual Card media and read the scratchpad (Card ID).", "Expected_Results": "The device successfully detects the Virtual Card media and reads the scratchpad (Card ID)."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Cardholder Taps-On an Online SA Tool to a Fare-by-Zone TA with Virtual Card Media", "Test_Scnario": "Device checks the validity of the Virtual Farecard", "Test_Sce_Description": "The device reads the Virtual Card media and completes the reader checks. It checks if the media presented is a valid Virtual Farecard and if the card is valid (i.e. able to communicate, is a Virtual Card, and not blocked)", "Expected_Results": "The device successfully verifies the validity of the Virtual Farecard."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Cardholder Taps-On an Online SA Tool to a Fare-by-Zone TA with Virtual Card Media", "Test_Scnario": "Device sends the tap to ATS for processing", "Test_Sce_Description": "The device sends the tap to ATS for processing. ATS checks the online hotlist and completes the fare processing. ATS then sends the tap-on success result back to the device via API.", "Expected_Results": "The device successfully sends the tap to ATS for processing and receives the tap-on success result back from ATS."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Cardholder Taps-On an Online SA Tool to a Fare-by-Zone TA with Virtual Card Media", "Test_Scnario": "Right to travel is conferred to the Cardholder", "Test_Sce_Description": "The right to travel is conferred to the Cardholder by updating the HMI of the SA Tool. The FPS \u2013 E-Purse Tap On is provided to the cardholder. The tap counter is checked and reset to 0 if it isn't already at 0 and the scratchpad on the Virtual Card is updated.", "Expected_Results": "The right to travel is successfully conferred to the Cardholder and the HMI of the SA Tool is updated accordingly."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Cardholder Taps-On an Online SA Tool to a Fare-by-Zone TA with Virtual Card Media", "Test_Scnario": "Device collects offline tap details when not connected to ATS", "Test_Sce_Description": "If the SA Tool is not online and not connected to ATS, the device will collect offline tap details and once the device returns back online, offline taps will be sent to ATS via bulk upload.", "Expected_Results": "The device successfully collects offline tap details and sends them to ATS via bulk upload once it returns back online."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Cardholder Taps-On an Online SA Tool to a Fare-by-Zone TA with Virtual Card Media", "Test_Scnario": "Device checks if the media is contained on the local hotlist", "Test_Sce_Description": "The device checks if the media is contained on the local hotlist, and if the hotlist parameter on the Virtual Card Scratchpad is enabled.", "Expected_Results": "The device successfully checks if the media is contained on the local hotlist and if the hotlist parameter on the Virtual Card Scratchpad is enabled."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Cardholder Taps-On an Online SA Tool to a Fare-by-Zone TA with Virtual Card Media", "Test_Scnario": "Device processes tap as a regular tap-on when default O/D is overridden", "Test_Sce_Description": "The Device will override the default O/D contained on the Virtual Card and ATS will process the tap as a regular tap-on.", "Expected_Results": "The device successfully overrides the default O/D and ATS processes the tap as a regular tap-on."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Cardholder Taps-On an Online SA Tool to a Fare-by-Zone TA with Virtual Card Media", "Test_Scnario": "Device processes tap as a result tap-on when Virtual Card with no Default O/D is tapped on while the device is in Override mode", "Test_Sce_Description": "If the Virtual Card with no Default O/D is tapped on while the device is in Override mode, the device will process the tap as a result tap-on.", "Expected_Results": "The device successfully processes the tap as a result tap-on when Virtual Card with no Default O/D is tapped on while the device is in Override mode."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Cardholder Taps-On an Online SA Tool to a Fare-by-Zone TA with Virtual Card Media", "Test_Scnario": "Device updates the Virtual Card scratchpad to remove the block parameter", "Test_Sce_Description": "Virtual Card is in good standing according to ATS, but scratchpad blocked parameter needs to be updated. The Virtual Card scratchpad is updated to remove the block parameter and prioritizes the accepted response from ATS.", "Expected_Results": "The device successfully updates the Virtual Card scratchpad to remove the block parameter."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "Operator checks battery power level", "Use_Case_Name": "Cardholder Taps-On an Online SA Tool to a Fare-by-Zone TA with Virtual Card Media", "Test_Scnario": "Virtual Card Media fails Card Authentication check", "Test_Sce_Description": "The device checks if the media presented is a valid Virtual Farecard. The card is not valid (i.e. not able to communicate, is not a Virtual Card, or is blocked)", "Expected_Results": "The device successfully identifies the invalid Virtual Card and does not allow the transaction to proceed."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "SA Tool battery drops below the low battery threshold", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Low Battery Threshold", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Low Battery Threshold", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the battery goes below the low battery threshold during a successful Farecard tap. The test will involve a customer attempting to make a fare payment on an online SA Tool using a virtual card and a period pass. The battery of the SA Tool will be set to go below the low battery threshold during the payment process.", "Expected_Results": "The SA Tool should switch to 'Out of Service' mode if the low battery threshold is reached before Step 5. If the battery threshold is not reached before Step 5, the customer's fare payment should be processed as per Step 5 and then the application should switch to 'Out of Service' mode."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "SA Tool battery drops below the low battery threshold", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Low Battery Threshold", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer taps a card that is not a Farecard", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer taps a card that is not a Farecard. The test will involve a customer attempting to make a fare payment on an online SA Tool using a non-Farecard.", "Expected_Results": "The SA Tool application should not respond, but the device error message 'Card Read Error' should be displayed for a short period of time."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "SA Tool battery drops below the low battery threshold", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Low Battery Threshold", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Customer\u2019s Farecard is within the Anti-Passback Window", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Farecard is within the Anti-Passback Window. The test will involve a customer attempting to make a fare payment on an online SA Tool using a Farecard that is within the Anti-Passback Window.", "Expected_Results": "The ATS should detect that the Farecard fails the Anti-Passback checks. The SA Tool application should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Battery", "Sub_Flow_Name": "SA Tool battery drops below the low battery threshold", "Use_Case_Name": "Accepting Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Low Battery Threshold", "Test_Scnario": "Testing Fare Payment on an Online SA Tool from a Virtual Card using Period Pass \u2013 Limited Period Pass outside of valid time while card is in overdraft", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when a customer's Farecard has a valid Limited Period Pass and the current time is outside the time limits of the product, and the farecard is in overdraft. The test will involve a customer attempting to make a fare payment on an online SA Tool using a Farecard that is in overdraft and has a Limited Period Pass that is not valid at the current time.", "Expected_Results": "The ATS should detect that the Limited Period Pass is not valid at the current time, compute the value to be deducted from the e-Purse, and detect that farecard is in overdraft. The SA Tool application should display a declined message to the customer and the transaction should not be conducted. The SA Tool should play the declined audio tone."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from Standby to In-Service State", "Test_Scnario": "Switching SA Tool from Standby to In-Service State", "Test_Sce_Description": "Verify that the operator is able to switch the SA Tool from standby to in-service state by pressing the physical power button on the device, entering the lock screen passcode and signing in to the SA Tool application as an existing user.", "Expected_Results": "The SA Tool should switch from standby to in-service state and display the shift preferences screen upon successful sign-in."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from Standby to In-Service State", "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login", "Test_Sce_Description": "Verify that the operator is able to switch the SA Tool from standby to in-service state without requiring to sign in if the operator has not been in \u201cstandby\u201d state longer than the configurable threshold value.", "Expected_Results": "The SA Tool should switch from standby to in-service state and display the home screen without requiring the operator to sign in."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from Standby to In-Service State", "Test_Scnario": "Switching SA Tool from In-Service to Standby State", "Test_Sce_Description": "Verify that the operator is able to switch the SA Tool from in-service to standby state by pressing the physical power button on the device once.", "Expected_Results": "The SA Tool should turn off the screen and go into standby state."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from Standby to In-Service State", "Test_Scnario": "Switching SA Tool to Standby State when navigating away from the SA Tool Application", "Test_Sce_Description": "Verify that the SA Tool goes into standby state when the operator switches to a third party application on SA Tool.", "Expected_Results": "The SA Tool application should run in the background and go into standby state."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from Standby to In-Service State", "Test_Scnario": "Change SP after switching device from standby to in-service state", "Test_Sce_Description": "Verify that the operator is unable to change SP on the login screen after switching the device from standby to in-service state.", "Expected_Results": "The SA Tool application should notify the operator with a corresponding error message when attempting to change SP on the login screen."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from Standby to In-Service State", "Test_Scnario": "Switching SA Tool to Out-of-Service State", "Test_Sce_Description": "Verify that the SA Tool goes into out-of-service state and is unable to accept a Farecard for any kind of functionality when it requires maintenance to restore out-of-order components.", "Expected_Results": "The SA Tool should go into out-of-service state and be unable to accept a Farecard for any kind of functionality."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from Standby to In-Service State", "Test_Scnario": "Switching SA Tool to Standby State after inactivity", "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time.", "Expected_Results": "The SA Tool should switch into a Standby state and turn off the screen after remaining inactive for a configurable period of time."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from Standby to In-Service State", "Test_Scnario": "Switching SA Tool to Standby State when running in the background", "Test_Sce_Description": "Verify that the SA Tool goes into Standby State when the SA Tool PDS application is running but is not in the foreground.", "Expected_Results": "The SA Tool should go into Standby State when the SA Tool PDS application is running but is not in the foreground."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from Standby to In-Service State", "Test_Scnario": "Switching SA Tool to Revenue Mode", "Test_Sce_Description": "Verify that the operator is able to select Revenue Mode upon logon, allowing the operator to interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures.", "Expected_Results": "The SA Tool should switch to Revenue Mode upon operator's selection and allow the operator to interact with customers and perform various operations."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from Standby to In-Service State", "Test_Scnario": "Switching SA Tool to Training Mode", "Test_Sce_Description": "Verify that the operator is able to select Training Mode upon logon, allowing the operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions.", "Expected_Results": "The SA Tool should switch to Training Mode upon operator's selection and allow the operator to mimic all functionality available within Sales Mode without accepting payment."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from Standby to In-Service State before threshold requiring login", "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is switched from Standby to In-Service state before the threshold requiring login is reached. The operator should be able to switch the tool without needing to log in.", "Expected_Results": "The SA Tool should successfully switch from Standby to In-Service state without requiring the operator to log in. The home screen should be displayed."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from Standby to In-Service State before threshold requiring login", "Test_Scnario": "Switching SA Tool from Standby to In-Service State after threshold requiring login", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is switched from Standby to In-Service state after the threshold requiring login is reached. The operator should be prompted to log in before the tool switches to In-Service state.", "Expected_Results": "The SA Tool should prompt the operator to log in before switching from Standby to In-Service state. Upon successful login, the tool should switch to In-Service state and display the shift preferences screen."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from Standby to In-Service State before threshold requiring login", "Test_Scnario": "Switching SA Tool from In-Service to Standby State", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is switched from In-Service to Standby state. The operator should be able to switch the tool by pressing the physical power button once.", "Expected_Results": "The SA Tool should successfully switch from In-Service to Standby state when the operator presses the physical power button once. The screen should turn off."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from Standby to In-Service State before threshold requiring login", "Test_Scnario": "Switching SA Tool from In-Service to Standby State while using a third-party application", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it is switched from In-Service to Standby state while a third-party application is running. The SA Tool application should run in the background and go into Standby state.", "Expected_Results": "The SA Tool should successfully switch from In-Service to Standby state while a third-party application is running. The SA Tool application should run in the background."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from Standby to In-Service State before threshold requiring login", "Test_Scnario": "Changing SP after switching device from standby to in-service state", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the operator attempts to change SP on the login screen after switching the device from Standby to In-Service state. The SA Tool application should notify the operator with a corresponding error message.", "Expected_Results": "The SA Tool should display an error message when the operator attempts to change SP on the login screen after switching the device from Standby to In-Service state."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from In-Service to Standby State", "Test_Scnario": "Switching SA Tool from Standby to In-Service State", "Test_Sce_Description": "Verify that the operator is able to switch the SA Tool from standby to in-service state by pressing the physical power button on the device, entering the lock screen passcode and signing in to the SA Tool application as an existing user.", "Expected_Results": "The SA Tool should switch from standby to in-service state and display the shift preferences screen upon successful sign-in."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from In-Service to Standby State", "Test_Scnario": "Switching SA Tool from Standby to In-Service State before threshold requiring login", "Test_Sce_Description": "Verify that the operator is able to switch the SA Tool from standby to in-service state without signing in and navigating to the home screen if the timeout threshold has not been passed.", "Expected_Results": "The SA Tool should switch from standby to in-service state and display the home screen without requiring sign-in if the timeout threshold has not been passed."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from In-Service to Standby State", "Test_Scnario": "Switching SA Tool from In-Service to Standby State", "Test_Sce_Description": "Verify that the operator is able to switch the SA Tool from in-service to standby state by pressing the physical power button on the device once.", "Expected_Results": "The SA Tool should turn off the screen and go into standby state."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from In-Service to Standby State", "Test_Scnario": "Switching SA Tool from In-Service to Standby State by navigating away from the SA Tool Application", "Test_Sce_Description": "Verify that the SA Tool goes into standby state when the operator switches to a third party application on SA Tool.", "Expected_Results": "The SA Tool application should run in the background and go into standby state when the operator switches to a third party application."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from In-Service to Standby State", "Test_Scnario": "Change SP after switching device from standby to in-service state", "Test_Sce_Description": "Verify that the operator receives a corresponding error message when attempting to change SP on the login screen after switching the device from standby to in-service state.", "Expected_Results": "The SA Tool application should notify the operator with a corresponding error message when attempting to change SP on the login screen after switching the device from standby to in-service state."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from In-Service to Standby State", "Test_Scnario": "Switching SA Tool to Out-of-Service State", "Test_Sce_Description": "Verify that the SA Tool is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components when it is in \u201cOut-of-Service\u201d state.", "Expected_Results": "The SA Tool should be unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components when it is in \u201cOut-of-Service\u201d state."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from In-Service to Standby State", "Test_Scnario": "Switching SA Tool to Standby State", "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time or when the operator presses the physical power button.", "Expected_Results": "The SA Tool should switch into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time or when the operator presses the physical power button."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from In-Service to Standby State", "Test_Scnario": "Switching SA Tool to Revenue Mode", "Test_Sce_Description": "Verify that the operator is able to select Revenue Mode upon logon, allowing them to interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures.", "Expected_Results": "The operator should be able to select Revenue Mode upon logon, allowing them to interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Switch SA Tool from In-Service to Standby State", "Test_Scnario": "Switching SA Tool to Training Mode", "Test_Sce_Description": "Verify that the operator is able to select Training Mode upon logon, allowing them to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions.", "Expected_Results": "The operator should be able to select Training Mode upon logon, allowing them to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Operator navigates away from the SA Tool Application", "Test_Scnario": "Launching the SA Tool Application", "Test_Sce_Description": "Verify that an authorized operator is able to launch the SA Tool Application from the home screen of the SA Tool device.", "Expected_Results": "The SA Tool application should successfully launch and the sign-in screen should be displayed."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Operator navigates away from the SA Tool Application", "Test_Scnario": "Continuous Diagnostic Checks During Launch", "Test_Sce_Description": "Verify that the SA Tool application performs continuous diagnostic checks during launch, checking for network/cellular connection, battery level, and available storage space.", "Expected_Results": "The SA Tool application should successfully perform continuous diagnostic checks during launch."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Operator navigates away from the SA Tool Application", "Test_Scnario": "Launching the SA Tool Application in Offline Mode", "Test_Sce_Description": "Verify that the SA Tool application can operate in offline mode when the device is unable to connect to a network.", "Expected_Results": "The SA Tool application should successfully operate in offline mode when the device is unable to connect to a network."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Operator navigates away from the SA Tool Application", "Test_Scnario": "Handling of Critical Failures During Initial Self-Diagnostic Checks", "Test_Sce_Description": "Verify that the SA Tool goes to error state when it performs initial self-diagnostic checks and finds critical failures.", "Expected_Results": "The SA Tool should go to error state when it performs initial self-diagnostic checks and finds critical failures."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Operator navigates away from the SA Tool Application", "Test_Scnario": "Handling of Errors or Failures in Storage, Battery or Secure Element", "Test_Sce_Description": "Verify that the SA Tool goes to out-of-service state when it performs the continuous self-diagnostics for storage, battery or secure element and finds errors or failures in any of these elements.", "Expected_Results": "The SA Tool should go to out-of-service state when it performs the continuous self-diagnostics for storage, battery or secure element and finds errors or failures in any of these elements."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Operator navigates away from the SA Tool Application", "Test_Scnario": "Switching Between the PDS SA Tool Application and Third-Party Applications", "Test_Sce_Description": "Verify that an authorized operator is able to switch between the SA Tool Application and the whitelisted third-party applications on the device.", "Expected_Results": "The operator should be able to successfully switch between the SA Tool Application and the whitelisted third-party applications on the device."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Operator navigates away from the SA Tool Application", "Test_Scnario": "Launching an Already Running Application", "Test_Sce_Description": "Verify that the operator is able to launch an application that is already running in the device background.", "Expected_Results": "The operator should be able to successfully launch an application that is already running in the device background."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Operator navigates away from the SA Tool Application", "Test_Scnario": "Navigating Away from the SA Tool Application", "Test_Sce_Description": "Verify that the operator is able to switch to a third party application on SA Tool and the SA Tool application runs in the background and goes into standby state.", "Expected_Results": "The operator should be able to switch to a third party application on SA Tool and the SA Tool application should run in the background and go into standby state."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Operator navigates away from the SA Tool Application", "Test_Scnario": "Change SP after Switching Device from Standby to In-Service State", "Test_Sce_Description": "Verify that the operator is unable to change SP on the login screen after switching device from standby to in-service state and the SA Tool application notifies the operator with a corresponding error message.", "Expected_Results": "The operator should be unable to change SP on the login screen after switching device from standby to in-service state and the SA Tool application should notify the operator with a corresponding error message."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Operator navigates away from the SA Tool Application", "Test_Scnario": "Accessing In-App Training and FAQs", "Test_Sce_Description": "Verify that an operator is able to access in-app training and frequently asked questions (FAQs).", "Expected_Results": "The operator should be able to successfully access in-app training and FAQs."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Operator navigates away from the SA Tool Application", "Test_Scnario": "Launching In-App Training and FAQ when SA Tool is Offline", "Test_Sce_Description": "Verify that the operator is able to launch the FAQ and Training option when the SA Tool is offline and the SA Tool loads and displays the last saved content (homepage) on the device.", "Expected_Results": "The operator should be able to launch the FAQ and Training option when the SA Tool is offline and the SA Tool should load and display the last saved content (homepage) on the device."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Operator navigates away from the SA Tool Application", "Test_Scnario": "Updating In-App Training and FAQ Content", "Test_Sce_Description": "Verify that the SA Tool receives updated training content and the training being played by the operator continues to play while the new content is downloaded to the device.", "Expected_Results": "The SA Tool should receive updated training content and the training being played by the operator should continue to play while the new content is downloaded to the device."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Operator navigates away from the SA Tool Application", "Test_Scnario": "Handling of In-App Training Not Downloaded to the SA Tool", "Test_Sce_Description": "Verify that the SA Tool displays a toast message on the Inspection home screen notifying the operator that there is no content available when the In-App Training has not been downloaded to the SA Tool.", "Expected_Results": "The SA Tool should display a toast message on the Inspection home screen notifying the operator that there is no content available when the In-App Training has not been downloaded to the SA Tool."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Operator navigates away from the SA Tool Application", "Test_Scnario": "Handling of In-App Training Being Remotely Disabled", "Test_Sce_Description": "Verify that the SA Tool handles the scenario where the In-App Training has been remotely disabled from the SA Tool after Operator navigates to Help Screen.", "Expected_Results": "The SA Tool should handle the scenario where the In-App Training has been remotely disabled from the SA Tool after Operator navigates to Help Screen."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Change SP after switching device from standby to in-service state", "Test_Scnario": "Switch SA Tool from Standby to In-Service State", "Test_Sce_Description": "Verify that the operator is able to switch the SA Tool from standby to in-service state by pressing the physical power button on the device, entering the lock screen passcode and signing in to the SA Tool application as an existing user.", "Expected_Results": "The SA Tool should switch on the screen, display the device lock screen, allow the operator to enter the lock screen passcode and sign in to the SA Tool application. Upon successful sign-in, the SA Tool should enter the in-service state and display the shift preferences screen."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Change SP after switching device from standby to in-service state", "Test_Scnario": "Switch SA Tool from Standby to In-Service State before threshold requiring login", "Test_Sce_Description": "Verify that the operator is able to switch the SA Tool from standby to in-service state before the configurable threshold value that requires logging in is reached.", "Expected_Results": "The SA Tool should switch on the screen, display the device lock screen, allow the operator to enter the lock screen passcode and display the home screen without requiring the operator to sign in."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Change SP after switching device from standby to in-service state", "Test_Scnario": "Switch SA Tool from In-Service to Standby State", "Test_Sce_Description": "Verify that the operator is able to switch the SA Tool from in-service to standby state by pressing the physical power button on the device once.", "Expected_Results": "The SA Tool should turn off the screen and go into standby state."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Change SP after switching device from standby to in-service state", "Test_Scnario": "Operator navigates away from the SA Tool Application", "Test_Sce_Description": "Verify that the SA Tool application goes into standby state when the operator switches to a third party application on SA Tool.", "Expected_Results": "The SA Tool application should run in the background and go into standby state when the operator switches to a third party application."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches SA Tool from standby to in-service state", "Use_Case_Name": "Change SP after switching device from standby to in-service state", "Test_Scnario": "Change SP after switching device from standby to in-service state", "Test_Sce_Description": "Verify that the operator is not able to change SP on the login screen after switching the device from standby to in-service state.", "Expected_Results": "The SA Tool application should notify the operator with a corresponding error message when the operator attempts to change SP on the login screen after switching the device from standby to in-service state."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Launching the SA Tool Application", "Test_Scnario": "Launching the SA Tool Application with sufficient power and memory", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when it is fully powered on, charged above the low battery threshold, and has sufficient memory available above the low memory threshold. The operator selects the SA Tool Application icon from the home screen of the SA Tool device. The application performs continuous diagnostic checks as it is launched, checking for network/cellular connection, battery level, and available storage space. After successfully launching, the SA Tool application sign-in screen is displayed.", "Expected_Results": "The SA Tool application should successfully launch and display the sign-in screen."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Launching the SA Tool Application", "Test_Scnario": "Launching the SA Tool Application with network connection not available", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the device is unable to connect to a network. The operator selects the SA Tool Application icon from the home screen of the SA Tool device. The application performs continuous diagnostic checks and determines that the device is unable to connect to a network.", "Expected_Results": "The SA Tool application should indicate that the device is unable to connect to a network and operate in offline mode."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Launching the SA Tool Application", "Test_Scnario": "Launching the SA Tool Application with critical failures", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when it finds critical failures during initial self-diagnostic checks. The operator selects the SA Tool Application icon from the home screen of the SA Tool device.", "Expected_Results": "The SA Tool application should go to error state."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Launching the SA Tool Application", "Test_Scnario": "Launching the SA Tool Application with errors in storage, battery or secure element", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when it finds errors or failures in storage, battery or secure element during continuous self-diagnostics. The operator selects the SA Tool Application icon from the home screen of the SA Tool device.", "Expected_Results": "The SA Tool application should go to out-of-service state and a critical event should be sent to SOTI Mobicontrol and CSM."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Launching the SA Tool Application", "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator switches between the SA Tool Application and the whitelisted third-party applications on the device. The operator taps on the home button present on the android navigation bar to navigate to the list of whitelisted third-party applications. Then, the operator presses on the desired application icon from the home screen of the SA Tool device to launch it.", "Expected_Results": "The operator should be able to successfully switch between the PDS SA Tool application and third-party applications."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Launching the SA Tool Application", "Test_Scnario": "Accessing in-app training and frequently asked questions (FAQs)", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the operator accesses in-app training and FAQs. The operator opens the more options menu on the SA Tool home screen, locates the FAQ and Training option from the menu, and selects the FAQ and Training option. The SA Tool applications will launch a lockdown browser and navigate to a web page that is populated with training modules and FAQs and other operator aids.", "Expected_Results": "The operator should be able to successfully access in-app training and FAQs."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Launching the SA Tool Application", "Test_Scnario": "Launching In-App Training and FAQ when SA Tool is Offline", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the device is offline. The operator selects the FAQ and Training option. The SA Tool launches a lockdown browser. The SA Tool loads and displays the last saved content (homepage) on the device.", "Expected_Results": "The SA Tool should load and display the last saved content (homepage) on the device."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Launching the SA Tool Application", "Test_Scnario": "Updating In-App Training and FAQ while content is being played on the SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when it receives updated training content while the training is being played by the operator. The training being played by the operator will continue to play while the new content is downloaded to the device.", "Expected_Results": "The training being played by the operator should continue to play while the new content is downloaded to the device. Once the download has completed, it should be available the next time the In-App Training and FAQ is launched."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Launching the SA Tool Application", "Test_Scnario": "In-App Training has not been downloaded to the SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when there is no content available. The SA Tool displays a toast message on the Inspection home screen notifying the operator that there is no content available.", "Expected_Results": "The SA Tool should display a toast message on the Inspection home screen notifying the operator that there is no content available."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Launching the SA Tool Application", "Test_Scnario": "In-App Training has been remotely disabled from the SA Tool after Operator navigates to Help Screen", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool application when the In-App Training has been remotely disabled from the SA Tool after the operator navigates to the Help Screen.", "Expected_Results": "The SA Tool should disable the In-App Training after the operator navigates to the Help Screen."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Power on SA Tool: continuous self-diagnostic check is unsuccessful (network connection not available)", "Test_Scnario": "Verify the functionality of SA Tool in Out-of-Service state", "Test_Sce_Description": "This scenario is to test if the SA Tool is unable to accept a Farecard for any kind of functionality when it is in \u201cOut-of-Service\u201d state and may require maintenance to restore out-of-order components.", "Expected_Results": "The SA Tool should not accept any Farecard and should require maintenance to restore out-of-order components when it is in \u201cOut-of-Service\u201d state."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Power on SA Tool: continuous self-diagnostic check is unsuccessful (network connection not available)", "Test_Scnario": "Verify the functionality of SA Tool when operator is signed-in and the device goes into out-of-service state", "Test_Sce_Description": "This scenario is to test if the SA Tool application will not close the operator\u2019s shift unless the operator has requested to sign-off when an operator is signed-in and the device goes into out-of-service state.", "Expected_Results": "The SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off when an operator is signed-in and the device goes into out-of-service state."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Power on SA Tool: continuous self-diagnostic check is unsuccessful (network connection not available)", "Test_Scnario": "Verify the functionality of SA Tool in Standby state", "Test_Sce_Description": "This scenario is to test if the SA Tool can temporarily suspend all functionality while in Standby state and if the SA Tool will switch into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time.", "Expected_Results": "The SA Tool should be able to temporarily suspend all functionality while in Standby state and should switch into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Power on SA Tool: continuous self-diagnostic check is unsuccessful (network connection not available)", "Test_Scnario": "Verify the functionality of SA Tool when it is in Standby state and operator presses the physical power button", "Test_Sce_Description": "This scenario is to test if an operator must press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state when the SA Tool is in Standby state.", "Expected_Results": "The operator should be able to press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state when the SA Tool is in Standby state."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Power on SA Tool: continuous self-diagnostic check is unsuccessful (network connection not available)", "Test_Scnario": "Verify the functionality of SA Tool when SA Tool application is running in the background", "Test_Sce_Description": "This scenario is to test if the operator can switch back to the SA Tool application to resume the functionality of the SA Tool application when the SA Tool PDS application is running but is not in the foreground.", "Expected_Results": "The operator should be able to switch back to the SA Tool application to resume the functionality of the SA Tool application when the SA Tool PDS application is running but is not in the foreground."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Power on SA Tool: continuous self-diagnostic check is unsuccessful (network connection not available)", "Test_Scnario": "Verify the functionality of SA Tool in Revenue Mode", "Test_Sce_Description": "This scenario is to test if the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in the Revenue Mode.", "Expected_Results": "The operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in the Revenue Mode."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Power on SA Tool: continuous self-diagnostic check is unsuccessful (network connection not available)", "Test_Scnario": "Verify the functionality of SA Tool in Training Mode", "Test_Sce_Description": "This scenario is to test if the operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in the Training Mode.", "Expected_Results": "The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in the Training Mode."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Power on SA Tool: continuous self-diagnostic check is unsuccessful (network connection not available)", "Test_Scnario": "Verify the functionality of SA Tool when launching the SA Tool Application", "Test_Sce_Description": "This scenario is to test if the SA Tool application performs continuous diagnostic checks as the application is launched and if the SA Tool application sign-in screen is displayed after the SA Tool application successfully launches.", "Expected_Results": "The SA Tool application should perform continuous diagnostic checks as the application is launched and the SA Tool application sign-in screen should be displayed after the SA Tool application successfully launches."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Power on SA Tool: continuous self-diagnostic check is unsuccessful (network connection not available)", "Test_Scnario": "Verify the functionality of SA Tool when switching between the PDS SA Tool application and third-party applications", "Test_Sce_Description": "This scenario is to test if the operator can switch between the SA Tool Application and the whitelisted third-party applications on the device.", "Expected_Results": "The operator should be able to switch between the SA Tool Application and the whitelisted third-party applications on the device."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Power on SA Tool: initial self-diagnostic check is unsuccessful", "Test_Scnario": "Verify the SA Tool application launch with sufficient power, memory and network", "Test_Sce_Description": "The operator selects the SA Tool application icon from the home screen of the SA Tool device. The application performs continuous diagnostic checks for network/cellular connection, battery level, and available storage space. If all checks are successful, the application sign-in screen is displayed.", "Expected_Results": "The SA Tool application should successfully launch and display the sign-in screen."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Power on SA Tool: initial self-diagnostic check is unsuccessful", "Test_Scnario": "Verify the SA Tool application launch with insufficient network connection", "Test_Sce_Description": "The operator selects the SA Tool application icon from the home screen of the SA Tool device. The application performs continuous diagnostic checks and determines that the device is unable to connect to a network. This will be indicated on the SA Tool.", "Expected_Results": "The SA Tool application should indicate that the device is unable to connect to a network."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Power on SA Tool: initial self-diagnostic check is unsuccessful", "Test_Scnario": "Verify the SA Tool application launch with critical failures during initial self-diagnostic check", "Test_Sce_Description": "The operator selects the SA Tool application icon from the home screen of the SA Tool device. The application performs initial self-diagnostic checks and finds critical failures.", "Expected_Results": "The SA Tool should go to error state."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Power on SA Tool: initial self-diagnostic check is unsuccessful", "Test_Scnario": "Verify the SA Tool application launch with errors or failures in storage, battery or secure element during continuous self-diagnostic check", "Test_Sce_Description": "The operator selects the SA Tool application icon from the home screen of the SA Tool device. The application performs the continuous self-diagnostics for storage, battery or secure element and finds errors or failures in any of these elements.", "Expected_Results": "The SA Tool should go to out-of-service state and a critical event should be sent to SOTI Mobicontrol and CSM."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Power on SA Tool: initial self-diagnostic check is unsuccessful", "Test_Scnario": "Verify the switch between the PDS SA Tool application and third-party applications", "Test_Sce_Description": "The operator taps on the home button present on the android navigation bar to navigate to the list of whitelisted third-party applications. Once the operator is on the home screen, they can swipe up or down to find the other apps or search the app by using the search bar located at the top of the home screen. The operator presses on desired application icon from home screen of the SA Tool device to launch it.", "Expected_Results": "The desired third-party application should successfully launch."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Power on SA Tool: initial self-diagnostic check is unsuccessful", "Test_Scnario": "Verify the switch to an application that is already launched and running in the background", "Test_Sce_Description": "The operator taps on the App Overview button on the bottom navigation bar. The operator can swipe to navigate through the list of open applications until they find the desired application. The operator presses on the desired application to launch it.", "Expected_Results": "The desired application that is already running in the background should successfully come to the foreground."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Power on SA Tool: initial self-diagnostic check is unsuccessful", "Test_Scnario": "Verify the SA Tool application functionality in Revenue Mode", "Test_Sce_Description": "Upon logon, the operator selects the Revenue Mode. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures. The SA tool should have access to the EPT and accept the credit and debit payments.", "Expected_Results": "The SA Tool application should successfully perform all the functionalities in the Revenue Mode."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Power on SA Tool: initial self-diagnostic check is unsuccessful", "Test_Scnario": "Verify the SA Tool application functionality in Training Mode", "Test_Sce_Description": "Upon logon, the operator selects the Training Mode. In this mode, the operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions. Only non-revenue Farecard should be accepted in Training Mode.", "Expected_Results": "The SA Tool application should successfully perform all the functionalities in the Training Mode."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Power on SA Tool: Continuous self-diagnostic check is unsuccessful (storage, battery or secure element)", "Test_Scnario": "Verify the SA Tool goes to out-of-service state when continuous self-diagnostic check is unsuccessful due to storage, battery or secure element issues", "Test_Sce_Description": "Launch the SA Tool application and simulate a scenario where the continuous self-diagnostic check fails due to issues with storage, battery or secure element. Check if the SA Tool goes to out-of-service state.", "Expected_Results": "The SA Tool should go to out-of-service state when the continuous self-diagnostic check fails due to issues with storage, battery or secure element."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Power on SA Tool: Continuous self-diagnostic check is unsuccessful (storage, battery or secure element)", "Test_Scnario": "Verify the SA Tool sends a critical event to SOTI Mobicontrol and CSM when continuous self-diagnostic check is unsuccessful", "Test_Sce_Description": "Launch the SA Tool application and simulate a scenario where the continuous self-diagnostic check fails. Check if a critical event is sent to SOTI Mobicontrol and CSM.", "Expected_Results": "The SA Tool should send a critical event to SOTI Mobicontrol and CSM when the continuous self-diagnostic check fails."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Power on SA Tool: Continuous self-diagnostic check is unsuccessful (storage, battery or secure element)", "Test_Scnario": "Verify the operator can switch between the PDS SA Tool application and third-party applications", "Test_Sce_Description": "Launch the PDS SA Tool application and a third-party application. Check if the operator can switch between the PDS SA Tool application and the third-party application.", "Expected_Results": "The operator should be able to switch between the PDS SA Tool application and the third-party application."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Power on SA Tool: Continuous self-diagnostic check is unsuccessful (storage, battery or secure element)", "Test_Scnario": "Verify the operator can launch a third-party application from the home screen of the SA Tool device", "Test_Sce_Description": "Navigate to the home screen of the SA Tool device and check if the operator can launch a third-party application by pressing on its icon.", "Expected_Results": "The operator should be able to launch a third-party application from the home screen of the SA Tool device."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Power on SA Tool: Continuous self-diagnostic check is unsuccessful (storage, battery or secure element)", "Test_Scnario": "Verify the operator can launch a third-party application that is already running in the background", "Test_Sce_Description": "Launch a third-party application and then navigate to the home screen of the SA Tool device. Check if the operator can launch the third-party application that is already running in the background.", "Expected_Results": "The operator should be able to launch a third-party application that is already running in the background."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Switching between the PDS SA Tool application and third-party applications", "Test_Scnario": "Launching the SA Tool Application", "Test_Sce_Description": "Verify that the authorized operator is able to launch the SA Tool Application successfully from the home screen of the SA Tool device.", "Expected_Results": "The SA Tool application should launch successfully and perform continuous diagnostic checks for network/cellular connection, battery level, and available storage space. After successful launch, the sign-in screen should be displayed."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Switching between the PDS SA Tool application and third-party applications", "Test_Scnario": "Continuous Diagnostic Check for Network Connection", "Test_Sce_Description": "Verify that the SA Tool application performs continuous diagnostic checks for network/cellular connection as the application is launched.", "Expected_Results": "The SA Tool application should successfully perform the diagnostic check for network/cellular connection. If the device is unable to connect to a network, this should be indicated on the SA Tool."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Switching between the PDS SA Tool application and third-party applications", "Test_Scnario": "Continuous Diagnostic Check for Battery Level and Storage Space", "Test_Sce_Description": "Verify that the SA Tool application performs continuous diagnostic checks for battery level and available storage space as the application is launched.", "Expected_Results": "The SA Tool application should successfully perform the diagnostic check for battery level and available storage space. If the battery level is below the threshold or if there is insufficient storage space, this should be indicated on the SA Tool."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Switching between the PDS SA Tool application and third-party applications", "Test_Scnario": "Switching between the PDS SA Tool application and third-party applications", "Test_Sce_Description": "Verify that the authorized operator is able to switch between the SA Tool Application and the whitelisted third-party applications on the device.", "Expected_Results": "The operator should be able to navigate to the list of whitelisted third-party applications by tapping on the home button present on the android navigation bar. They should be able to launch the desired application by pressing on its icon from the home screen of the SA Tool device."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Switching between the PDS SA Tool application and third-party applications", "Test_Scnario": "Switching to an Application Running in the Background", "Test_Sce_Description": "Verify that the operator is able to switch to an application that is already launched and is running in the background.", "Expected_Results": "The operator should be able to tap on the App Overview button on the bottom navigation bar, navigate through the list of open applications, and press on the desired application to launch it."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Switching between the PDS SA Tool application and third-party applications", "Test_Scnario": "SA Tool in Out-of-Service State", "Test_Sce_Description": "Verify that when the SA Tool is in \u201cOut-of-Service\u201d state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components.", "Expected_Results": "If an operator is signed-in and the device goes into out-of-service state, the SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Switching between the PDS SA Tool application and third-party applications", "Test_Scnario": "SA Tool in Standby State", "Test_Sce_Description": "Verify that the SA Tool switches into a Standby state where the screen will turn off after the SA Tool remains inactive for a configurable period of time.", "Expected_Results": "Once in the standby mode, the SA tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life. An operator must press the physical power button and sign- in to the device lock screen to bring the device back into In-Service state."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Switching between the PDS SA Tool application and third-party applications", "Test_Scnario": "SA Tool in Revenue Mode", "Test_Sce_Description": "Verify that in the Revenue Mode, the SA Tool operator is able to interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures.", "Expected_Results": "The SA tool should have access to the EPT in the revenue mode and should accept the credit and debit payments."}, {"Function_Flow_Name": "Device states", "Sub_Flow_Name": "Operator switches to a third-party application", "Use_Case_Name": "Switching between the PDS SA Tool application and third-party applications", "Test_Scnario": "SA Tool in Training Mode", "Test_Sce_Description": "Verify that in the Training Mode, the SA Tool operator is able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions.", "Expected_Results": "Only non-revenue Farecard should be accepted in Training Mode. Payment by credit /debit should not be enabled. All paper tickets printed from the SA Tool should indicate that they were printed while in training mode."}, {"Function_Flow_Name": "Check Shift statistics", "Sub_Flow_Name": "Print shift statistics", "Use_Case_Name": "Modes", "Test_Scnario": "Testing the communication interface of the SA Tool with the ATS", "Test_Sce_Description": "This scenario involves testing the communication interface of the SA Tool with the ATS over the Client's private cellular network or Wi-Fi. The test will involve sending VC Transaction Data and VC Remote Lists to the ATS and checking if the data is received correctly.", "Expected_Results": "The SA Tool should be able to send VC Transaction Data and VC Remote Lists to the ATS correctly over the Client's private cellular network or Wi-Fi."}, {"Function_Flow_Name": "Check Shift statistics", "Sub_Flow_Name": "Print shift statistics", "Use_Case_Name": "Modes", "Test_Scnario": "Testing the In-Service State of the SA Tool", "Test_Sce_Description": "This scenario involves testing the In-Service State of the SA Tool. The test will involve launching the SA Tool application and checking if it operates correctly in the foreground. The test will also involve checking the two modes of the In-Service State: Online and Offline.", "Expected_Results": "The SA Tool application should be successfully launched and operate correctly in the foreground. Both the Online and Offline modes of the In-Service State should function correctly."}, {"Function_Flow_Name": "Check Shift statistics", "Sub_Flow_Name": "Print shift statistics", "Use_Case_Name": "Modes", "Test_Scnario": "Testing the Real-Time Mode of the SA Tool", "Test_Sce_Description": "This scenario involves testing the Real-Time Mode of the SA Tool. The test will involve making Open Payments fare payments & inspections and checking if a near real-time response is provided to the Operator. The test will also involve checking if the device defaults to Queued mode when there is no active internet connection.", "Expected_Results": "The SA Tool should provide a near real-time response to the Operator when making Open Payments fare payments & inspections. The device should default to Queued mode when there is no active internet connection."}, {"Function_Flow_Name": "Check Shift statistics", "Sub_Flow_Name": "Print shift statistics", "Use_Case_Name": "Modes", "Test_Scnario": "Testing the Queued Mode of the SA Tool", "Test_Sce_Description": "This scenario involves testing the Queued Mode of the SA Tool. The test will involve sending the taps collected to ATS and checking if the device provides a notification to the Operator when it remains offline for a period greater than the configured \u201cmaximum offline period\u201d time.", "Expected_Results": "The SA Tool should send the taps collected to ATS correctly. The device should provide a notification to the Operator when it remains offline for a period greater than the configured \u201cmaximum offline period\u201d time."}, {"Function_Flow_Name": "Check Shift statistics", "Sub_Flow_Name": "Print shift statistics", "Use_Case_Name": "Modes", "Test_Scnario": "Testing the Degraded Mode of the SA Tool", "Test_Sce_Description": "This scenario involves testing the Degraded Mode of the SA Tool. The test will involve checking if the device can only accept Farecard taps when it is configured in degraded mode. The test will also involve checking if a Virtual Card is not accepted in this state.", "Expected_Results": "The SA Tool should only accept Farecard taps when it is configured in degraded mode. A Virtual Card should not be accepted in this state."}, {"Function_Flow_Name": "Check Shift statistics", "Sub_Flow_Name": "Print shift statistics", "Use_Case_Name": "Modes", "Test_Scnario": "Testing the Out-of-Service State of the SA Tool", "Test_Sce_Description": "This scenario involves testing the Out-of-Service State of the SA Tool. The test will involve checking if the device is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components.", "Expected_Results": "The SA Tool should be unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."}, {"Function_Flow_Name": "Check Shift statistics", "Sub_Flow_Name": "Print shift statistics", "Use_Case_Name": "Modes", "Test_Scnario": "Testing the Standby State of the SA Tool", "Test_Sce_Description": "This scenario involves testing the Standby State of the SA Tool. The test will involve checking if the screen is turned off and if the SA Tool disconnects from all the peripherals to conserve battery life.", "Expected_Results": "The screen of the SA Tool should be turned off and the SA Tool should disconnect from all the peripherals to conserve battery life."}, {"Function_Flow_Name": "Check Shift statistics", "Sub_Flow_Name": "Print shift statistics", "Use_Case_Name": "Modes", "Test_Scnario": "Testing the Revenue Mode of the SA Tool", "Test_Sce_Description": "This scenario involves testing the Revenue Mode of the SA Tool. The test will involve checking if the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures.", "Expected_Results": "The operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in the Revenue Mode of the SA Tool."}, {"Function_Flow_Name": "Check Shift statistics", "Sub_Flow_Name": "Print shift statistics", "Use_Case_Name": "Modes", "Test_Scnario": "Testing the Training Mode of the SA Tool", "Test_Sce_Description": "This scenario involves testing the Training Mode of the SA Tool. The test will involve checking if the operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions.", "Expected_Results": "The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in the Training Mode of the SA Tool."}, {"Function_Flow_Name": "Check Shift statistics", "Sub_Flow_Name": "Print shift statistics", "Use_Case_Name": "Modes", "Test_Scnario": "Testing the Configurable Functionality of the SA Tool", "Test_Sce_Description": "This scenario involves testing the Configurable Functionality of the SA Tool. The test will involve checking if the SA Tool Operators, SA Tool Operators - 3rd Party, Distance based Transitrvisors, Maintenance, and Training have the correct access and functionality.", "Expected_Results": "The SA Tool Operators, SA Tool Operators - 3rd Party, Distance based Transitrvisors, Maintenance, and Training should have the correct access and functionality in the Configurable Functionality of the SA Tool."}, {"Function_Flow_Name": "Check Shift statistics", "Sub_Flow_Name": "Print shift statistics", "Use_Case_Name": "Users", "Test_Scnario": "Testing the power on functionality of the SA Tool", "Test_Sce_Description": "This scenario tests the power on functionality of the SA Tool. The operator powers on the SA Tool by pressing and holding the power button. The device should boot up and perform an initial self-diagnostic check.", "Expected_Results": "The device should successfully boot up without any errors or failures. The operator should be required to enter the OS Lock screen passcode at the device lock screen. After a valid passcode is entered, the device should launch the Android home screen of the SA Tool device."}, {"Function_Flow_Name": "Check Shift statistics", "Sub_Flow_Name": "Print shift statistics", "Use_Case_Name": "Users", "Test_Scnario": "Testing the SA Tool's ability to accept V1 and V2 Farecards", "Test_Sce_Description": "This scenario tests the SA Tool's ability to accept V1 and V2 Farecards. The operator should be able to tap both V1 and V2 Farecards on the SA Tool.", "Expected_Results": "The SA Tool should successfully accept and process both V1 and V2 Farecards without any errors."}, {"Function_Flow_Name": "Check Shift statistics", "Sub_Flow_Name": "Print shift statistics", "Use_Case_Name": "Users", "Test_Scnario": "Testing the SA Tool's ability to update account status", "Test_Sce_Description": "This scenario tests the SA Tool's ability to update the account status when the device connects to the User Management service. The device should update the account status with the latest information related to the account.", "Expected_Results": "The SA Tool should successfully connect to the User Management service and update the account status with the latest information."}, {"Function_Flow_Name": "Check Shift statistics", "Sub_Flow_Name": "Print shift statistics", "Use_Case_Name": "Users", "Test_Scnario": "Testing the SA Tool's ability to accept revenue and non-revenue fare cards", "Test_Sce_Description": "This scenario tests the SA Tool's ability to accept revenue and non-revenue fare cards. Non-revenue cards may only be tapped in Training mode.", "Expected_Results": "The SA Tool should successfully accept and process both revenue and non-revenue fare cards. Non-revenue cards should only be accepted in Training mode."}, {"Function_Flow_Name": "Check Shift statistics", "Sub_Flow_Name": "Print shift statistics", "Use_Case_Name": "Users", "Test_Scnario": "Testing the SA Tool's ability to display text in the selected language", "Test_Sce_Description": "This scenario tests the SA Tool's ability to display text in the selected language. The language of text displayed on the screen of the SA Tool should depend only upon the current language selection of the application.", "Expected_Results": "The SA Tool should successfully display text in the selected language. If an operator turns on audio scripts for a customer, the audio script should be played out in the language of the language setting on the card / media."}, {"Function_Flow_Name": "Check Shift statistics", "Sub_Flow_Name": "Print shift statistics", "Use_Case_Name": "Users", "Test_Scnario": "Testing the SA Tool's ability to connect to the Ingenico EX8000 PIN Pad", "Test_Sce_Description": "This scenario tests the SA Tool's ability to connect to the Ingenico EX8000 PIN Pad in an integrated mode only.", "Expected_Results": "The SA Tool should successfully connect to the Ingenico EX8000 PIN Pad in an integrated mode only."}, {"Function_Flow_Name": "Check Shift statistics", "Sub_Flow_Name": "Print shift statistics", "Use_Case_Name": "Users", "Test_Scnario": "Testing the SA Tool's ability to handle failed Farecard, CLIENT Ticket, Open Payment taps", "Test_Sce_Description": "This scenario tests the SA Tool's ability to handle failed Farecard, CLIENT Ticket, Open Payment taps that result from card read/write errors and/or card collision. Error details should be captured in the SOTI logs.", "Expected_Results": "The SA Tool should successfully capture error details in the SOTI logs when a Farecard, CLIENT Ticket, Open Payment tap fails due to card read/write errors and/or card collision."}, {"Function_Flow_Name": "Check Shift statistics", "Sub_Flow_Name": "Print shift statistics", "Use_Case_Name": "Users", "Test_Scnario": "Testing the SA Tool's ability to handle fare payment as a result of a failed inspection", "Test_Sce_Description": "This scenario tests the SA Tool's ability to handle fare payment as a result of a failed inspection. A customer should be able to pay fare with any media type. The fare payment does not need to be performed with the same card or media type.", "Expected_Results": "The SA Tool should successfully allow a customer to pay fare with any media type as a result of a failed inspection."}, {"Function_Flow_Name": "Check Shift statistics", "Sub_Flow_Name": "Print shift statistics", "Use_Case_Name": "Users", "Test_Scnario": "Testing the SA Tool's ability to meet current performance for existing PDS devices", "Test_Sce_Description": "This scenario tests the SA Tool's ability to meet current performance for existing PDS devices. Tap performance (throughput rate) should be similar to existing PDS devices.", "Expected_Results": "The SA Tool should successfully meet current performance for existing PDS devices. Tap performance (throughput rate) should be similar to existing PDS devices."}, {"Function_Flow_Name": "Check Shift statistics", "Sub_Flow_Name": "Print shift statistics", "Use_Case_Name": "Users", "Test_Scnario": "Testing the SA Tool's ability to handle latency times for Open Payments, Mobile Wallet, SVC, Bytemark, TICKET", "Test_Sce_Description": "This scenario tests the SA Tool's ability to handle latency times for Open Payments, Mobile Wallet, SVC, Bytemark, TICKET when used for inspection, forepayment and sales flow. Latency times should be similar to existing PDS devices.", "Expected_Results": "The SA Tool should successfully handle latency times for Open Payments, Mobile Wallet, SVC, Bytemark, TICKET when used for inspection, forepayment and sales flow. Latency times should be similar to existing PDS devices."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Disable Peripherals - Printer", "Test_Scnario": "Disable Peripherals - Printer", "Test_Sce_Description": "This scenario tests the functionality of disabling the printer peripheral at the SA Tool device. The operator selects the Additional Options menu button, then the Printer menu option. The operator is taken to the Printer Management screen and can view the name of the paired printer. The operator taps on the delete icon next to the printer\u2019s name to remove it from the cached memory. The SA tool removes the printer from the cached memory and shows other printers available for connection.", "Expected_Results": "The printer should be successfully disabled and removed from the cached memory. Other available printers should be displayed."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Disable Peripherals - Printer", "Test_Scnario": "Disable Peripherals - Printer with low battery", "Test_Sce_Description": "This scenario tests the functionality of disabling the printer peripheral at the SA Tool device when the Android device is charged below the minimum battery threshold.", "Expected_Results": "The SA Tool should prevent the operator from disabling the printer and display a relevant warning message."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Disable Peripherals - Printer", "Test_Scnario": "Disable Peripherals - Printer with no paired printer", "Test_Sce_Description": "This scenario tests the functionality of disabling the printer peripheral at the SA Tool device when there is no paired printer.", "Expected_Results": "The SA Tool should display a relevant message indicating that there is no paired printer to disable."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Disable Peripherals - Printer", "Test_Scnario": "Disable Peripherals - Printer with SA Tool application not in \u201cIn-Service\u201d state", "Test_Sce_Description": "This scenario tests the functionality of disabling the printer peripheral at the SA Tool device when the SA Tool application is not in \u201cIn-Service\u201d state.", "Expected_Results": "The SA Tool should prevent the operator from disabling the printer and display a relevant warning message."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Disable Peripherals - Printer", "Test_Scnario": "Disable Peripherals - Printer with operator not signed-in", "Test_Sce_Description": "This scenario tests the functionality of disabling the printer peripheral at the SA Tool device when the operator is not signed-in to the SA Tool application in the revenue mode.", "Expected_Results": "The SA Tool should prevent the operator from disabling the printer and display a relevant warning message."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Disable Peripherals - Printer", "Test_Scnario": "Disable Peripherals - Printer with outdated SA Tool application", "Test_Sce_Description": "This scenario tests the functionality of disabling the printer peripheral at the SA Tool device when the Android device does not have the latest SA Tool application.", "Expected_Results": "The SA Tool should prevent the operator from disabling the printer and display a relevant warning message."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Disable Peripherals - Printer", "Test_Scnario": "Disable Peripherals - Printer performance", "Test_Sce_Description": "This scenario tests the performance of the SA Tool when disabling the printer peripheral. The time taken from when the operator selects the delete icon to when the printer is removed from the cached memory and other printers are displayed is measured.", "Expected_Results": "The printer should be disabled and removed from the cached memory within a reasonable time frame. Other available printers should be displayed promptly."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Disable Peripherals - Printer", "Test_Scnario": "Disable Peripherals - Printer security", "Test_Sce_Description": "This scenario tests the security of the SA Tool when disabling the printer peripheral. The operator attempts to disable the printer without the necessary permissions.", "Expected_Results": "The SA Tool should prevent the operator from disabling the printer and display a relevant warning message."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Access SA Tool Remote", "Test_Scnario": "Verify the functionality of SA Tool in Out-of-Service state", "Test_Sce_Description": "This scenario is to test if the SA Tool is unable to accept a Farecard for any kind of functionality when it is in \u201cOut-of-Service\u201d state and may require maintenance to restore out-of-order components.", "Expected_Results": "The SA Tool should not accept any Farecard and should indicate that it requires maintenance."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Access SA Tool Remote", "Test_Scnario": "Verify the operator\u2019s shift status when device goes into out-of-service state", "Test_Sce_Description": "This scenario is to test if the SA Tool application will not close the operator\u2019s shift unless the operator has requested to sign-off when the device goes into out-of-service state.", "Expected_Results": "The operator\u2019s shift should remain open unless the operator has requested to sign-off."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Access SA Tool Remote", "Test_Scnario": "Verify the functionality of SA Tool in Standby state", "Test_Sce_Description": "This scenario is to test if the SA Tool can temporarily suspend all functionality while in Standby state and if it disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life.", "Expected_Results": "The SA Tool should suspend all functionality and disconnect from all peripherals."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Access SA Tool Remote", "Test_Scnario": "Verify the functionality of SA Tool when it is running in the background", "Test_Sce_Description": "This scenario is to test if the SA Tool disconnects from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life when it is running in the background.", "Expected_Results": "The SA Tool should disconnect from all peripherals when it is running in the background."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Access SA Tool Remote", "Test_Scnario": "Verify the functionality of SA Tool in Revenue mode", "Test_Sce_Description": "This scenario is to test if the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in the Revenue mode.", "Expected_Results": "The operator should be able to perform all the mentioned functionalities in the Revenue mode."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Access SA Tool Remote", "Test_Scnario": "Verify the functionality of SA Tool in Training mode", "Test_Sce_Description": "This scenario is to test if the SA Tool operator can mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in the Training mode.", "Expected_Results": "The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in the Training mode."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Access SA Tool Remote", "Test_Scnario": "Verify the functionality of SA Tool for different users", "Test_Sce_Description": "This scenario is to test if the SA Tool Operators, SA Tool Operators - 3rd Party, SDistance based Transitrvisors, Maintenance, Training have access to the functionalities as mentioned in the document.", "Expected_Results": "The users should have access to the functionalities as mentioned in the document."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Access SA Tool Remote", "Test_Scnario": "Verify the power on flow for the SA Tool", "Test_Sce_Description": "This scenario is to test if the operator can power on the SA Tool by pressing and holding the power button and if the device performs an initial self-diagnostic and does not find errors or failures.", "Expected_Results": "The operator should be able to power on the SA Tool and the device should perform an initial self-diagnostic and does not find errors or failures."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to Internet", "Test_Scnario": "Failure to connect to internet during password change", "Test_Sce_Description": "The user is trying to change their password, which requires an internet connection. During this process, the internet connection is lost.", "Expected_Results": "The SA Tool should time out and display the relevant error message with options to try again or cancel. If the internet connection is restored, the user should be able to resume the password change process. If the action is cancelled, the user should be returned to the previous screen."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to Internet", "Test_Scnario": "Failure to connect to internet during SP Remote access", "Test_Sce_Description": "The user is trying to access SP Remote, which requires an internet connection. During this process, the internet connection is lost.", "Expected_Results": "The SA Tool should time out and display the relevant error message with options to try again or cancel. If the internet connection is restored, the user should be able to resume accessing SP Remote. If the action is cancelled, the user should be returned to the previous screen."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to Internet", "Test_Scnario": "PIN pad transmits DECLINED message from Moneris during credit card payment", "Test_Sce_Description": "The operator is performing a credit card payment transaction and communication with Moneris fails.", "Expected_Results": "The SA Tool should display the relevant error message and return to the payment means screen. The receipt printer should print a failure of payment means."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to Internet", "Test_Scnario": "PIN pad transmits DECLINED message from Moneris during debit card payment", "Test_Sce_Description": "The operator is performing a debit card payment transaction and communication with Moneris fails.", "Expected_Results": "The SA Tool should display the relevant error message and return to the payment means screen. The receipt printer should print a failure of payment means."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to Internet", "Test_Scnario": "Failure to load Farecard after payment has been processed", "Test_Sce_Description": "The operator is performing a Farecard transaction. The payment has been processed and successful, but the write to the card is not successful.", "Expected_Results": "The SA Tool should display the relevant error message and the operator can choose to try again or cancel and refund the payment."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to Internet", "Test_Scnario": "Failure to connect to receipt printer during a transaction which changes the e-Purse", "Test_Sce_Description": "The operator is performing a transaction which changes the e-Purse and connection with the receipt printer fails.", "Expected_Results": "The SA Tool should display the relevant error message and the operator can choose to proceed with the flow without printing capabilities, or exit the flow."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to Internet", "Test_Scnario": "Failure to connect to Pin Pad during a transaction that requires the use of Pin Pad", "Test_Sce_Description": "The operator is performing a transaction that requires the use of Pin Pad and connection with the Pin Pad fails.", "Expected_Results": "The SA Tool should display the relevant error message and the operator can choose to wait for the Pin Pad to connect in the background or exit the flow."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to Internet", "Test_Scnario": "Open Payments Media fails ODA check", "Test_Sce_Description": "An Open Payments Media fails the ODA check.", "Expected_Results": "The device should return the appropriate feedback and the Declined \u2013 Failed ODA Check Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to Internet", "Test_Scnario": "Open Payments Media Fails Expiry Check", "Test_Sce_Description": "An Open Payments Media fails the Expiry Check.", "Expected_Results": "The device should return the appropriate feedback and the Declined \u2013 Card Expired Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to Internet", "Test_Scnario": "Open Payments Media has already tapped-on using an Online Device within Anti-Passback Window", "Test_Sce_Description": "The cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window, whereby the initial device and secondary device(s) tapped on were all online.", "Expected_Results": "The device should return a response that the cardholder has already tapped on at the same station and is within the Tap-on anti-passback Window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to Internet", "Test_Scnario": "Open Payments Media has already tapped-on using an Offline Device", "Test_Sce_Description": "The cardholder taps-on again at an SA Tool at the same station within the SA Tool Tap-on anti-passback Window whereby the initial device tapped, and secondary device(s) is the same device and is offline.", "Expected_Results": "The device should accept the tap and check the latent transaction processor on the same device for a previous tap within the anti-passback window. The Declined \u2013 Already Tapped Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to Internet", "Test_Scnario": "Open Payments Media is on the ATS deny list and the SA Tool is online", "Test_Sce_Description": "Open Payments Media is on the deny list and the SA Tool is online.", "Expected_Results": "The device should return the appropriate feedback and the Declined \u2013 Card on Deny List Screen should be provided to the cardholder."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "User does not have privilege to view SA Tool Remote", "Test_Scnario": "Verify the functionality of the printer icon", "Test_Sce_Description": "The operator should be able to tap the printer icon from the screen they are on and be redirected to the Printer Details page.", "Expected_Results": "The operator is redirected to the Printer Details page upon tapping the printer icon."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "User does not have privilege to view SA Tool Remote", "Test_Scnario": "Verify the functionality of the printer pairing", "Test_Sce_Description": "The operator should be able to re-connect to an existing paired printer, delete a pairing, or pair with a new printer from the Printer Details page.", "Expected_Results": "The operator is able to manage printer pairings as expected."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "User does not have privilege to view SA Tool Remote", "Test_Scnario": "Verify the functionality of the Done or Back button", "Test_Sce_Description": "After the operator has completed their activities, they should be able to return to the previous flow by selecting the Done or Back button.", "Expected_Results": "The operator is redirected to the previous flow upon selecting the Done or Back button."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "User does not have privilege to view SA Tool Remote", "Test_Scnario": "Verify the exception flow when no printer is available", "Test_Sce_Description": "If no printers are available for pairing, the SA tool should display a relevant message to the operator indicating no printers could be found.", "Expected_Results": "A relevant message is displayed to the operator when no printers are available for pairing."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "User does not have privilege to view SA Tool Remote", "Test_Scnario": "Verify the functionality of disabling the Printer peripheral", "Test_Sce_Description": "The operator should be able to disable the Printer peripheral at the SA Tool device by following the steps in the use case.", "Expected_Results": "The Printer peripheral is disabled as expected."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "User does not have privilege to view SA Tool Remote", "Test_Scnario": "Verify the functionality of accessing the SA Tool Remote", "Test_Sce_Description": "The operator should be able to access the SA Tool Remote by following the steps in the use case.", "Expected_Results": "The operator is able to access the SA Tool Remote as expected."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "User does not have privilege to view SA Tool Remote", "Test_Scnario": "Verify the exception flow when the operator does not have privilege to view SA Tool Remote", "Test_Sce_Description": "If the operator does not have SA Tool Remote access as defined in UM Portal permissions, they should not be able to access the SA Tool Remote.", "Expected_Results": "The operator is unable to access the SA Tool Remote when they do not have the necessary permissions."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "User does not have privilege to view SA Tool Remote", "Test_Scnario": "Verify the functionality of launching the SA Tool Application", "Test_Sce_Description": "The operator should be able to launch the SA Tool Application by following the steps in the use case.", "Expected_Results": "The SA Tool Application is launched as expected."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "User does not have privilege to view SA Tool Remote", "Test_Scnario": "Verify the alternate flow when the SA Tool performs the continuous diagnostic checks and determines that the device is unable to connect to a network", "Test_Sce_Description": "If the SA Tool performs the continuous diagnostic checks and determines that the device is unable to connect to a network, this should be indicated on the SA Tool.", "Expected_Results": "The SA Tool indicates that the device is unable to connect to a network as expected."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "User does not have privilege to view SA Tool Remote", "Test_Scnario": "Verify the exception flow when the SA Tool performs initial self-diagnostic checks and finds critical failures", "Test_Sce_Description": "If the SA Tool performs initial self-diagnostic checks and finds critical failures, the SA Tool should go to error state.", "Expected_Results": "The SA Tool goes to error state as expected."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "User does not have privilege to view SA Tool Remote", "Test_Scnario": "Verify the functionality of switching between the PDS SA Tool application and third-party applications", "Test_Sce_Description": "The operator should be able to switch between the PDS SA Tool application and the whitelisted third-party applications on the device by following the steps in the use case.", "Expected_Results": "The operator is able to switch between the PDS SA Tool application and third-party applications as expected."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "User does not have privilege to view SA Tool Remote", "Test_Scnario": "Verify the alternate flow when the application is already launched and is running in the background", "Test_Sce_Description": "If the application that the operator intends to launch is already running in the device background, the operator should be able to navigate to it by following the steps in the use case.", "Expected_Results": "The operator is able to navigate to the application running in the background as expected."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "PIN pad transmits DECLINED message from Moneris", "Test_Scnario": "Moneris Payment is Unsuccessful and Operator would like to try card payment again", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Moneris payment is unsuccessful and the operator wants to retry the card payment. The operator has chosen either debit or credit as the mode of payment on the SA Tool and the customer has attempted payment with either a debit or credit card on the PIN pad.", "Expected_Results": "The SA Tool should notify the operator of the unsuccessful payment attempt and print a receipt with the corresponding error messages. The operator should be able to select the credit/debit mean of payment again and repeat the steps until successful."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "PIN pad transmits DECLINED message from Moneris", "Test_Scnario": "Moneris Payment is Unsuccessful and Operator would like to try another payment method", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the Moneris payment is unsuccessful and the operator wants to try a different payment method. The operator has chosen either debit or credit as the mode of payment on the SA Tool and the customer has attempted payment with either a debit or credit card on the PIN pad.", "Expected_Results": "The SA Tool should notify the operator of the unsuccessful payment attempt and print a receipt with the corresponding error messages. The operator should be able to select any other available payment method to complete the transaction."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "PIN pad transmits DECLINED message from Moneris", "Test_Scnario": "Cancel Moneris Transaction", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the operator or customer wants to cancel the current payment method. The operator has chosen either debit or credit as the mode of payment on the SA Tool and has initiated the transaction on the PIN pad.", "Expected_Results": "The customer should be able to cancel operation on the PIN pad to cancel the payment without removing any items from the shopping cart. The SA Tool should cancel the Moneris transaction and return to the main payment screen."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "PIN pad transmits DECLINED message from Moneris", "Test_Scnario": "Cancel PIN pad Transaction", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when the operator or customer wants to cancel the current payment method. The operator has initiated the transaction on the PIN pad.", "Expected_Results": "The Operator should be able to cancel the payment and the customer should be able to press the cancel option on the PIN pad to cancel the payment without removing any items from the shopping cart. The SA Tool application should provide an appropriate message indicating that the customer has cancelled the transaction and return to the payment method screen."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "PIN pad transmits DECLINED message from Moneris", "Test_Scnario": "SA Tool goes offline before payment response is received", "Test_Sce_Description": "This scenario tests the functionality of the SA Tool when it goes offline before the payment response is received.", "Expected_Results": "The SA Tool should lose its connection to the Moneris backend and be unable to retrieve the status of the payment. The SA Tool payment request should time out and an error message should be displayed to the operator. The operator should confirm and return to the Payment Method screen. The customer may choose to proceed with a different payment method."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "PIN pad transmits DECLINED message from Moneris", "Test_Scnario": "Customer attempts to tap an Open Payments media not on the approved media list while the device is in Pilot mode", "Test_Sce_Description": "This scenario tests the functionality of the device when it is provisioned in beta mode and an Open Payments media that is not on the approved media list is tapped on the device.", "Expected_Results": "The device should check the approved media list. If the media is not found on the approved media list, the Declined \u2013 Not Accepted, Tap Farecard screen should be provided to the cardholder. If the media is on the approved media list while the device is in beta mode, the steps should continue as stated in the main use case."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "PIN pad transmits DECLINED message from Moneris", "Test_Scnario": "Customer\u2019s Open Payments Media is on the BIN Blocking List", "Test_Sce_Description": "This scenario tests the functionality of the device when the customer\u2019s Open Payments Media is on the BIN Blocking List.", "Expected_Results": "The device should check its local BIN Blocking list. If the card\u2019s BIN is found to be on the BIN Blocking List, the device should play the decline audio tone and display the Declined \u2013 Try Another Card (BIN Blocked) screen. If the media passes the BIN check, the steps should continue as stated in the main use case."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "PIN pad transmits DECLINED message from Moneris", "Test_Scnario": "Customer is travelling with an Interac Card, and ATS returns a decline response due to Media In Debt", "Test_Sce_Description": "This scenario tests the functionality of the device when the customer is travelling with an Interac Card, and ATS returns a decline response due to Media In Debt.", "Expected_Results": "The device should send the tap to ATS and return a response that the Interac media is on the deny list. The right to travel should not be conferred and the Declined \u2013 Tap Again (in X Seconds) screen (Interac \u2013 Trying to Pay Unpaid Fares) screen should be provided to the cardholder."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "PIN pad transmits DECLINED message from Moneris", "Test_Scnario": "Customer is travelling with an Interac Card, device is offline, and Interac media is on the local deny list due to Media In Debt", "Test_Sce_Description": "This scenario tests the functionality of the device when the customer is travelling with an Interac Card, the device is offline, and Interac media is on the local deny list due to Media In Debt.", "Expected_Results": "The device should check the local deny list. If the media is on the local deny list due to reason Media in Debt, the right to travel should not be conferred and the Declined \u2013 Tap Again (in X Seconds) screen (Interac \u2013 Trying to Pay Unpaid Fares) screen should be provided to the cardholder."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "PIN pad transmits DECLINED message from Moneris", "Test_Scnario": "Customer taps Interac Card while Interac is disabled on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the device when the customer taps Interac Card while Interac is disabled on SA Tool.", "Expected_Results": "The device should detect the Interac media and determine that the media tapped is not supported and display an error message. The right to travel should not be conferred and a transaction should not be recorded."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "PIN pad transmits DECLINED message from Moneris", "Test_Scnario": "Customer taps Open Payment Card while Open Payments are disabled on SA Tool", "Test_Sce_Description": "This scenario tests the functionality of the device when the customer taps Open Payment Card while Open Payments are disabled on SA Tool.", "Expected_Results": "The device should detect the Open Payment Card and determine that the media tapped is not supported and display an error message. The right to travel should not be conferred and a transaction should not be recorded."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to load Farecard after payment has been processed", "Test_Scnario": "Multiple NFC media presented to the device", "Test_Sce_Description": "In this scenario, the customer presents multiple NFC medias to the card reader at once. The device should block all user functionality and present an Anti-Collision toast message to the customer.", "Expected_Results": "The device blocks all user functionality and presents an Anti-Collision toast message to the customer. An error is captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to load Farecard after payment has been processed", "Test_Scnario": "Non-activated Farecard tapped on SA Tool", "Test_Sce_Description": "In this scenario, a non-activated Farecard is tapped on the device. The device should detect that the Farecard is not activated and provide feedback to the Cardholder of an unsuccessful transaction due to inactive farecard.", "Expected_Results": "The device detects that the Farecard is not activated and provides feedback to the Cardholder of an unsuccessful transaction due to inactive farecard. An error is captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to load Farecard after payment has been processed", "Test_Scnario": "Card reading error occurs when Farecard is tapped on SA Tool", "Test_Sce_Description": "In this scenario, a Cardholder taps Farecard on an SA Tool and a Card reading error occurs. The device should not provide any feedback and screen remains \u201cIn-Service\u201d display.", "Expected_Results": "The device does not provide any feedback and screen remains \u201cIn-Service\u201d display. An error is captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to load Farecard after payment has been processed", "Test_Scnario": "Card write error occurs when Farecard is tapped on SA Tool", "Test_Sce_Description": "In this scenario, a Farecard is tapped on an SA Tool and a card write error occurs. The device should not provide any feedback and screen remains \u201cIn-Service\u201d display.", "Expected_Results": "The device does not provide any feedback and screen remains \u201cIn-Service\u201d display. The device deletes the transaction information. An error is captured and logged in the background and in the SOTI logs."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to load Farecard after payment has been processed", "Test_Scnario": "Farecard tapped is the incorrect Farecard Type", "Test_Sce_Description": "In this scenario, a Farecard of incorrect type is tapped on the device. The device should identify the Farecard Type to be incorrect for the mode the operator is currently operating in.", "Expected_Results": "The SA Tool application identifies the Farecard Type to be incorrect for the mode the operator is currently operating in and notifies the operator of the incorrect Farecard Type. The use case terminates."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to load Farecard after payment has been processed", "Test_Scnario": "Non-Farecard tapped to the reader", "Test_Sce_Description": "In this scenario, a Non-Farecard is tapped to the reader. The SA Tool application should identify the card to be a non-Farecard and display an error pop up message.", "Expected_Results": "The SA Tool application identifies the card to be a non-Farecard and displays an error pop up message."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to load Farecard after payment has been processed", "Test_Scnario": "Failure to read customer\u2019s Virtual Card", "Test_Sce_Description": "In this scenario, the SA Tool application detects the Virtual Card and fails to read it correctly. The operator should close the error prompt and tap the card to try again.", "Expected_Results": "The NFC reader detects the Virtual Card but is unable to read it. SA Tool application will indicate to the operator that the Virtual Card read has failed."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to load Farecard after payment has been processed", "Test_Scnario": "Non-Virtual Card tapped to the reader", "Test_Sce_Description": "In this scenario, a Non-Virtual Card is tapped to the reader. The SA Tool application should identify the card to be a non-Virtual Card and display an error pop up message.", "Expected_Results": "The SA Tool application identifies the card to be a non-Virtual Card and displays an error pop up message."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to load Farecard after payment has been processed", "Test_Scnario": "Customer\u2019s Farecard is blocked \u2013 Virtual Card", "Test_Sce_Description": "In this scenario, the customer\u2019s Farecard is blocked. The SA Tool application should detect that the Farecard is blocked and display the Farecard query screen indicating that the Farecard has been blocked.", "Expected_Results": "The SA Tool application detects that the Farecard is blocked and displays the Farecard query screen indicating that the Farecard has been blocked. Operator will not be able to take any further actions on the Farecard."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to load Farecard after payment has been processed", "Test_Scnario": "SA Tool shopping cart has ineligible products", "Test_Sce_Description": "In this scenario, the operator is in the middle of loading products and the products that were added to the card are now ineligible for purchase. The device should display an error confirming that one or more of the products are not available for sale.", "Expected_Results": "Device displays an error confirming that one or more of the products are not available for sale. Operator removes the ineligible products from cart and reattempts the shopping flow."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to load Farecard after payment has been processed", "Test_Scnario": "ATS failed to load", "Test_Sce_Description": "In this scenario, the operator has completed the SA Tool shopping flow and ATS is unable to load products to the customer\u2019s account. The SA Tool should inform operator that the products purchased were not added to the user\u2019s account.", "Expected_Results": "SA Tool informs operator that the products purchased were not added to the user\u2019s account. The Operator may attempt the checkout again or provide the customer a refund if the customer paid with cash."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to receipt printer", "Test_Scnario": "Failure to connect to receipt printer during a transaction", "Test_Sce_Description": "This scenario tests the situation where the operator is performing a transaction that requires printing, and the connection to the receipt printer fails. The operator attempts to begin a user flow which requires the use of the receipt printer. Before beginning the flow, the SA Tool checks the connection status to the receipt printer.", "Expected_Results": "If there is no connection to the receipt printer, the SA Tool should display the relevant error message and the operator can choose to proceed with the flow without printing capabilities, or exit the flow."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to receipt printer", "Test_Scnario": "Successful connection to receipt printer during a transaction", "Test_Sce_Description": "This scenario tests the situation where the operator is performing a transaction that requires printing, and the connection to the receipt printer is successful. The operator attempts to begin a user flow which requires the use of the receipt printer. Before beginning the flow, the SA Tool checks the connection status to the receipt printer.", "Expected_Results": "If there is a successful connection to the receipt printer, the SA Tool should allow the operator to proceed with the flow with printing capabilities."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to receipt printer", "Test_Scnario": "Failure to connect to receipt printer after a successful transaction", "Test_Sce_Description": "This scenario tests the situation where the operator has completed a successful transaction that requires printing, and the connection to the receipt printer fails. The SA Tool checks the connection status to the receipt printer after the transaction.", "Expected_Results": "If there is no connection to the receipt printer after a successful transaction, the SA Tool should display the relevant error message and the operational procedures should apply to ensure that the sold product is delivered to the customer or refunded."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to receipt printer", "Test_Scnario": "Failure to connect to receipt printer during a refund", "Test_Sce_Description": "This scenario tests the situation where the operator is performing a refund that requires printing, and the connection to the receipt printer fails. The operator attempts to begin a user flow which requires the use of the receipt printer. Before beginning the flow, the SA Tool checks the connection status to the receipt printer.", "Expected_Results": "If there is no connection to the receipt printer, the SA Tool should display the relevant error message and the operator can choose to proceed with the flow without printing capabilities, or exit the flow."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to receipt printer", "Test_Scnario": "Failure to connect to receipt printer during a reversal", "Test_Sce_Description": "This scenario tests the situation where the operator is performing a reversal that requires printing, and the connection to the receipt printer fails. The operator attempts to begin a user flow which requires the use of the receipt printer. Before beginning the flow, the SA Tool checks the connection status to the receipt printer.", "Expected_Results": "If there is no connection to the receipt printer, the SA Tool should display the relevant error message and the operator can choose to proceed with the flow without printing capabilities, or exit the flow."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to receipt printer", "Test_Scnario": "Failure to connect to receipt printer during Non-transit Product Sales", "Test_Sce_Description": "This scenario tests the situation where the operator is performing a Non-transit Product Sales that requires printing, and the connection to the receipt printer fails. The operator attempts to begin a user flow which requires the use of the receipt printer. Before beginning the flow, the SA Tool checks the connection status to the receipt printer.", "Expected_Results": "If there is no connection to the receipt printer, the SA Tool should display the relevant error message and the operator can choose to proceed with the flow without printing capabilities, or exit the flow."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to Pin Pad", "Test_Scnario": "Failure to connect to Pin Pad during a transaction", "Test_Sce_Description": "This scenario tests the situation where the SA Tool Operator is performing a transaction which requires use of Pin Pad, and connection with the Pin Pad fails.", "Expected_Results": "The SA Tool should display the relevant error message and the operator should be able to choose to wait for the Pin Pad to connect in the background or exit the flow. If the connection to the Pin Pad is not automatically established, the operator should be able to manually attempt to connect an available Pin Pad."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to Pin Pad", "Test_Scnario": "Successful connection to Pin Pad after failure", "Test_Sce_Description": "This scenario tests the situation where the SA Tool Operator has experienced a failure to connect to the Pin Pad, but then the connection is successfully established.", "Expected_Results": "The SA Tool should allow the operator to resume the transaction that requires the use of the Pin Pad."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to Pin Pad", "Test_Scnario": "Failure to connect to Pin Pad during a refund transaction", "Test_Sce_Description": "This scenario tests the situation where the SA Tool Operator is performing a refund transaction which requires use of Pin Pad, and connection with the Pin Pad fails.", "Expected_Results": "The SA Tool should display the relevant error message and the operator should be able to choose to wait for the Pin Pad to connect in the background or exit the flow. If the connection to the Pin Pad is not automatically established, the operator should be able to manually attempt to connect an available Pin Pad."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to Pin Pad", "Test_Scnario": "Failure to connect to Pin Pad during a debit or credit transaction", "Test_Sce_Description": "This scenario tests the situation where the SA Tool Operator is performing a debit or credit transaction which requires use of Pin Pad, and connection with the Pin Pad fails.", "Expected_Results": "The SA Tool should display the relevant error message and the operator should be able to choose to wait for the Pin Pad to connect in the background or exit the flow. If the connection to the Pin Pad is not automatically established, the operator should be able to manually attempt to connect an available Pin Pad."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to Pin Pad", "Test_Scnario": "Failure to connect to Pin Pad during a non-transit product sales transaction", "Test_Sce_Description": "This scenario tests the situation where the SA Tool Operator is performing a non-transit product sales transaction which requires use of Pin Pad, and connection with the Pin Pad fails.", "Expected_Results": "The SA Tool should display the relevant error message and the operator should be able to choose to wait for the Pin Pad to connect in the background or exit the flow. If the connection to the Pin Pad is not automatically established, the operator should be able to manually attempt to connect an available Pin Pad."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to Pin Pad", "Test_Scnario": "Failure to connect to Pin Pad during a reversal transaction", "Test_Sce_Description": "This scenario tests the situation where the SA Tool Operator is performing a reversal transaction which requires use of Pin Pad, and connection with the Pin Pad fails.", "Expected_Results": "The SA Tool should display the relevant error message and the operator should be able to choose to wait for the Pin Pad to connect in the background or exit the flow. If the connection to the Pin Pad is not automatically established, the operator should be able to manually attempt to connect an available Pin Pad."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to Pin Pad", "Test_Scnario": "Failure to connect to Pin Pad during a transaction that changes the e-Purse", "Test_Sce_Description": "This scenario tests the situation where the SA Tool Operator is performing a transaction that changes the e-Purse and requires use of Pin Pad, and connection with the Pin Pad fails.", "Expected_Results": "The SA Tool should display the relevant error message and the operator should be able to choose to wait for the Pin Pad to connect in the background or exit the flow. If the connection to the Pin Pad is not automatically established, the operator should be able to manually attempt to connect an available Pin Pad."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Printer Connection", "Use_Case_Name": "Failure to connect to Pin Pad", "Test_Scnario": "Failure to connect to Pin Pad during a transaction that requires the use of the receipt printer", "Test_Sce_Description": "This scenario tests the situation where the SA Tool Operator is performing a transaction that requires the use of the receipt printer and the Pin Pad, and connection with the Pin Pad fails.", "Expected_Results": "The SA Tool should display the relevant error message and the operator should be able to choose to wait for the Pin Pad to connect in the background or exit the flow. If the connection to the Pin Pad is not automatically established, the operator should be able to manually attempt to connect an available Pin Pad."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Virtual Card", "Test_Scnario": "Testing the communication interface of the SA Tool with the ATS", "Test_Sce_Description": "This scenario will test the communication interface of the SA Tool with the ATS over Client private cellular network or Wi-Fi. The test will involve sending transaction-related data to ATS and downloading the VC Media local deny list from ATS.", "Expected_Results": "The SA Tool should be able to send all transaction-related data to ATS and download the VC Media local deny list from ATS successfully."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Virtual Card", "Test_Scnario": "Testing the In-Service State of the SA Tool", "Test_Sce_Description": "This scenario will test the normal operational state of the SA Tool. The test will involve launching the SA Tool application and interacting with the device in both online and offline modes.", "Expected_Results": "The SA Tool application should be successfully launched and the device should allow operators to interact with it in both online and offline modes."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Virtual Card", "Test_Scnario": "Testing the Open Payments Modes and Configurations of the SA Tool", "Test_Sce_Description": "This scenario will test the real-time and queued modes of the SA Tool. The test will involve making Open Payments fare payments & inspections and sending the taps collected to ATS.", "Expected_Results": "The SA Tool should be able to make Open Payments fare payments & inspections in real-time mode and send the taps collected to ATS in queued mode."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Virtual Card", "Test_Scnario": "Testing the Degraded Mode Configuration of the SA Tool", "Test_Sce_Description": "This scenario will test the degraded mode configuration of the SA Tool. The test will involve setting the device in degraded mode and checking if it can only accept Farecard s.", "Expected_Results": "The SA Tool should only accept Farecard s when it is set in degraded mode."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Virtual Card", "Test_Scnario": "Testing the Real-Time Mode for Virtual Cards of the SA Tool", "Test_Sce_Description": "This scenario will test the real-time mode for Virtual Cards of the SA Tool. The test will involve providing a near real-time response to the Operator of the result for the customer\u2019s media.", "Expected_Results": "The SA Tool should be able to provide a near real-time response to the Operator of the result for the customer\u2019s media in real-time mode for Virtual Cards."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Virtual Card", "Test_Scnario": "Testing the Queued Mode for Virtual Cards of the SA Tool", "Test_Sce_Description": "This scenario will test the queued mode for Virtual Cards of the SA Tool. The test will involve evaluating the tap result offline based on the scratchpad and the local deny list and sending the taps collected to ATS.", "Expected_Results": "The SA Tool should be able to evaluate the tap result offline based on the scratchpad and the local deny list and send the taps collected to ATS in queued mode for Virtual Cards."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Virtual Card", "Test_Scnario": "Testing the Degraded Mode for Virtual Cards of the SA Tool", "Test_Sce_Description": "This scenario will test the degraded mode for Virtual Cards of the SA Tool. The test will involve setting the device in degraded mode and checking if it can only accept Farecard taps.", "Expected_Results": "The SA Tool should only accept Farecard taps when it is set in degraded mode for Virtual Cards."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Virtual Card", "Test_Scnario": "Testing the Alternate Flows of the SA Tool", "Test_Sce_Description": "This scenario will test the alternate flows of the SA Tool. The test will involve accepting fare payment from a Virtual Card using ePurse Balance when the customer\u2019s Virtual Card is unreadable, the customer has a Concession other than Adult, Child, or Discreet Concessions on their Virtual Card, the customer has a registered Virtual Card with positive ePurse Balance less than the fare amount, the transaction is within Intra-SP Transfer window, and the transaction is within Inter-SP Transfer window.", "Expected_Results": "The SA Tool should be able to accept fare payment from a Virtual Card using ePurse Balance in all the alternate flows."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "In-Service State", "Test_Scnario": "Testing the functionality of SA Tool in Out-of-Service state", "Test_Sce_Description": "This scenario is to test if the SA Tool is unable to accept a Farecard for any kind of functionality when it is in \u201cOut-of-Service\u201d state and may require maintenance to restore out-of-order components.", "Expected_Results": "The SA Tool should not accept any Farecard and should indicate that it requires maintenance."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "In-Service State", "Test_Scnario": "Testing the functionality of SA Tool when operator is signed-in and device goes into out-of-service state", "Test_Sce_Description": "This scenario is to test if the SA Tool application will not close the operator\u2019s shift unless the operator has requested to sign-off when an operator is signed-in and the device goes into out-of-service state.", "Expected_Results": "The operator's shift should not be closed unless the operator requests to sign-off."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "In-Service State", "Test_Scnario": "Testing the functionality of SA Tool in Standby state", "Test_Sce_Description": "This scenario is to test if the SA Tool can temporarily suspend all functionality while in Standby state and if it switches into a Standby state where the screen will turn off after remaining inactive for a configurable period of time.", "Expected_Results": "The SA Tool should suspend all functionality and the screen should turn off after remaining inactive for a configurable period of time."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "In-Service State", "Test_Scnario": "Testing the functionality of SA Tool when it is running in the background", "Test_Sce_Description": "This scenario is to test if the SA Tool device allows the operator to use authorized third-party applications as needed and if the SA Tool PDS application is running but is not in the foreground, the application will be in Standby State.", "Expected_Results": "The SA Tool should allow the operator to use authorized third-party applications and should be in Standby State when it is running in the background."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "In-Service State", "Test_Scnario": "Testing the functionality of SA Tool in Revenue Mode", "Test_Sce_Description": "This scenario is to test if the Revenue Mode allows the SA Tool operator to interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures.", "Expected_Results": "The SA Tool should allow the operator to interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures in Revenue Mode."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "In-Service State", "Test_Scnario": "Testing the functionality of SA Tool in Training Mode", "Test_Sce_Description": "This scenario is to test if the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions.", "Expected_Results": "The SA Tool should allow the operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions in Training Mode."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "In-Service State", "Test_Scnario": "Testing the functionality of SA Tool when switching from Standby to In-Service State", "Test_Sce_Description": "This scenario is to test if an operator can switch the SA Tool from standby to in-service state by pressing the physical power button and signing in to the device lock screen.", "Expected_Results": "The operator should be able to switch the SA Tool from standby to in-service state by pressing the physical power button and signing in to the device lock screen."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "In-Service State", "Test_Scnario": "Testing the functionality of SA Tool when switching from In-Service to Standby State", "Test_Sce_Description": "This scenario is to test if an operator can switch the SA Tool from in-service to standby state by pressing the physical power button once.", "Expected_Results": "The operator should be able to switch the SA Tool from in-service to standby state by pressing the physical power button once."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Real-Time Mode", "Test_Scnario": "Testing the communication interface of the SA Tool with the ATS", "Test_Sce_Description": "This test scenario is to verify that the SA Tool can communicate with the ATS over Client private cellular network or Wi-Fi and send all transaction-related data to ATS. This data encompasses card sales, fare payments, inspections, etc.", "Expected_Results": "The SA Tool should be able to communicate with the ATS over Client private cellular network or Wi-Fi and send all transaction-related data to ATS successfully."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Real-Time Mode", "Test_Scnario": "Testing the In-Service State of the SA Tool", "Test_Sce_Description": "This test scenario is to verify that the SA Tool application is successfully launched and in the foreground during the In-Service state. The In-service state has two modes: Online and Offline. Both allow operators to interact with the device, but with different functionalities.", "Expected_Results": "The SA Tool application should be successfully launched and in the foreground during the In-Service state. The In-service state should have two modes: Online and Offline."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Real-Time Mode", "Test_Scnario": "Testing the Real-Time Mode of the SA Tool", "Test_Sce_Description": "This test scenario is to verify that in real-time mode, Open Payments fare payments & inspections provide a near real-time response to the Operator of the result for the customer\u2019s media. Real-time mode requires the device to have an active internet connection to ATS.", "Expected_Results": "In real-time mode, Open Payments fare payments & inspections should provide a near real-time response to the Operator of the result for the customer\u2019s media. Real-time mode should require the device to have an active internet connection to ATS."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Real-Time Mode", "Test_Scnario": "Testing the Queued Mode of the SA Tool", "Test_Sce_Description": "This test scenario is to verify that in Queued mode, the device sends the taps collected to ATS, whereby no true inspection or fare payment result is provided to the Operator. When the device is configured in queued mode, it will be unknown to the Operator if the customer has successfully paid their fare.", "Expected_Results": "In Queued mode, the device should send the taps collected to ATS, whereby no true inspection or fare payment result is provided to the Operator. When the device is configured in queued mode, it should be unknown to the Operator if the customer has successfully paid their fare."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Real-Time Mode", "Test_Scnario": "Testing the Out-of-Service State of the SA Tool", "Test_Sce_Description": "This test scenario is to verify that if a SA Tool is in Out-of-Service state, it is unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components.", "Expected_Results": "If a SA Tool is in Out-of-Service state, it should be unable to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Real-Time Mode", "Test_Scnario": "Testing the Standby State of the SA Tool", "Test_Sce_Description": "This test scenario is to verify that an operator can temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool will switch into a Standby state where the screen will turn off.", "Expected_Results": "An operator should be able to temporarily suspend all SA Tool functionality while in Standby state. After the SA Tool remains inactive for a configurable period of time, the SA Tool should switch into a Standby state where the screen will turn off."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Real-Time Mode", "Test_Scnario": "Testing the Revenue Mode of the SA Tool", "Test_Sce_Description": "This test scenario is to verify that the Revenue Mode allows the SA Tool operator to interact with customers. In this mode, the operator can perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures.", "Expected_Results": "The Revenue Mode should allow the SA Tool operator to interact with customers. In this mode, the operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Real-Time Mode", "Test_Scnario": "Testing the Training Mode of the SA Tool", "Test_Sce_Description": "This test scenario is to verify that the Training Mode allows the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions.", "Expected_Results": "The Training Mode should allow the SA Tool operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Queued Mode", "Test_Scnario": "Testing the communication interface of the SA Tool with the ATS", "Test_Sce_Description": "This test scenario is designed to verify the communication interface of the SA Tool with the ATS. The SA Tool should be able to send all transaction-related data to the ATS over Client's private cellular network or Wi-Fi.", "Expected_Results": "The SA Tool should successfully send all transaction-related data to the ATS without any errors or delays."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Queued Mode", "Test_Scnario": "Testing the In-Service State of the SA Tool", "Test_Sce_Description": "This test scenario is designed to verify the In-Service State of the SA Tool. The SA Tool application should be successfully launched and in the foreground during the In-Service State.", "Expected_Results": "The SA Tool should successfully launch the application and bring it to the foreground during the In-Service State."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Queued Mode", "Test_Scnario": "Testing the Real-Time Mode of the SA Tool", "Test_Sce_Description": "This test scenario is designed to verify the Real-Time Mode of the SA Tool. The SA Tool should provide a near real-time response to the Operator of the result for the customer\u2019s media in Real-Time Mode.", "Expected_Results": "The SA Tool should successfully provide a near real-time response to the Operator of the result for the customer\u2019s media in Real-Time Mode."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Queued Mode", "Test_Scnario": "Testing the Queued Mode of the SA Tool", "Test_Sce_Description": "This test scenario is designed to verify the Queued Mode of the SA Tool. The SA Tool should send the taps collected to ATS in Queued Mode.", "Expected_Results": "The SA Tool should successfully send the taps collected to ATS in Queued Mode."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Queued Mode", "Test_Scnario": "Testing the Out-of-Service State of the SA Tool", "Test_Sce_Description": "This test scenario is designed to verify the Out-of-Service State of the SA Tool. The SA Tool should be unable to accept a Farecard for any kind of functionality in Out-of-Service State.", "Expected_Results": "The SA Tool should successfully be unable to accept a Farecard for any kind of functionality in Out-of-Service State."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Queued Mode", "Test_Scnario": "Testing the Standby State of the SA Tool", "Test_Sce_Description": "This test scenario is designed to verify the Standby State of the SA Tool. The SA Tool should turn off the screen and disconnect from all the peripherals in Standby State.", "Expected_Results": "The SA Tool should successfully turn off the screen and disconnect from all the peripherals in Standby State."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Queued Mode", "Test_Scnario": "Testing the Revenue Mode of the SA Tool", "Test_Sce_Description": "This test scenario is designed to verify the Revenue Mode of the SA Tool. The SA Tool should allow the operator to interact with customers in Revenue Mode.", "Expected_Results": "The SA Tool should successfully allow the operator to interact with customers in Revenue Mode."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Queued Mode", "Test_Scnario": "Testing the Training Mode of the SA Tool", "Test_Sce_Description": "This test scenario is designed to verify the Training Mode of the SA Tool. The SA Tool should mimic all functionality available within Sales Mode without accepting payment in Training Mode.", "Expected_Results": "The SA Tool should successfully mimic all functionality available within Sales Mode without accepting payment in Training Mode."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Queued Mode", "Test_Scnario": "Testing the Configurable Functionality of the SA Tool", "Test_Sce_Description": "This test scenario is designed to verify the Configurable Functionality of the SA Tool. The SA Tool should allow the operator to modify Card Concession and Unblock Farecard.", "Expected_Results": "The SA Tool should successfully allow the operator to modify Card Concession and Unblock Farecard."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Queued Mode", "Test_Scnario": "Testing the Device Parameter Tool Configurations of the SA Tool", "Test_Sce_Description": "This test scenario is designed to verify the Device Parameter Tool Configurations of the SA Tool. The SA Tool should be configured under the Open Payments release in the Device Parameter Tool.", "Expected_Results": "The SA Tool should successfully be configured under the Open Payments release in the Device Parameter Tool."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Degraded Mode", "Test_Scnario": "Testing the Out-of-Service State of the SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in the 'Out-of-Service' state. The tool should not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components.", "Expected_Results": "The SA Tool should not accept any Farecard and should indicate that it requires maintenance."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Degraded Mode", "Test_Scnario": "Testing the Standby State of the SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in the 'Standby' state. The screen should be turned off and the tool should disconnect from all peripherals to conserve battery life.", "Expected_Results": "The SA Tool should disconnect from all peripherals and the screen should be turned off."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Degraded Mode", "Test_Scnario": "Testing the Revenue Mode of the SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in the 'Revenue' mode. The operator should be able to perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures.", "Expected_Results": "The SA Tool should allow the operator to perform all the mentioned functionalities in the 'Revenue' mode."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Degraded Mode", "Test_Scnario": "Testing the Training Mode of the SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in the 'Training' mode. The tool should mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions.", "Expected_Results": "The SA Tool should mimic all functionalities of the Sales Mode without accepting any payments."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Degraded Mode", "Test_Scnario": "Testing the Real-Time Mode of the SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in the 'Real-Time' mode. The tool should provide a near real-time response to the Operator of the result for the customer\u2019s media.", "Expected_Results": "The SA Tool should provide a near real-time response to the Operator."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Degraded Mode", "Test_Scnario": "Testing the Queued Mode of the SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in the 'Queued' mode. The device should send the taps collected to ATS, whereby no true inspection or fare payment result is provided to the Operator.", "Expected_Results": "The SA Tool should send the taps collected to ATS without providing any true inspection or fare payment result to the Operator."}, {"Function_Flow_Name": "Establish Wi-Fi or cellular network connection", "Sub_Flow_Name": "Establish Payment Terminal Connection", "Use_Case_Name": "Degraded Mode", "Test_Scnario": "Testing the Degraded Mode of the SA Tool", "Test_Sce_Description": "This scenario will test the functionality of the SA Tool when it is in the 'Degraded' mode. The tool should only accept Farecard taps.", "Expected_Results": "The SA Tool should only accept Farecard taps in the 'Degraded' mode."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "In-App Training and FAQ", "Use_Case_Name": "Change Operator Language on SA Tool application", "Test_Scnario": "Change Operator Language on SA Tool application", "Test_Sce_Description": "This scenario tests the functionality of changing the language of the SA Tool application by the operator. The operator should be able to switch between English and French.", "Expected_Results": "The language of the SA Tool application should change immediately across all screens when the operator switches the language. The change should also be synchronized with the operator\u2019s user account in the subsystem."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "In-App Training and FAQ", "Use_Case_Name": "Change Operator Language on SA Tool application", "Test_Scnario": "Change Language on SA Tool application while SA Tool is Offline", "Test_Sce_Description": "This scenario tests the functionality of changing the language of the SA Tool application by the operator while the SA Tool is offline. The operator should be able to switch between English and French even when the tool is offline.", "Expected_Results": "The language of the SA Tool application should change immediately across all screens when the operator switches the language. The change should be stored in store-and-forward memory and updated in the Subsystem when the network connection is re-established."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "In-App Training and FAQ", "Use_Case_Name": "Change Operator Language on SA Tool application", "Test_Scnario": "Adjust Audio Tone Volume", "Test_Sce_Description": "This scenario tests the functionality of adjusting the audio tone volume of the SA Tool application by the operator. The operator should be able to adjust the volume of the CLIENT tones (accepted, warning and declined) tones for Farecard taps.", "Expected_Results": "The volume of the CLIENT tones should change as per the operator's adjustment. If the operator presses the back button on the settings screen, the application should revert to the last saved configuration. If the operator selects done, the desired volume should be saved for the shift. The volume should reset to default volume when the operator signs out or a new operator signs in."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "In-App Training and FAQ", "Use_Case_Name": "Change Operator Language on SA Tool application", "Test_Scnario": "Operator Configures Vibration Control", "Test_Sce_Description": "This scenario tests the functionality of configuring vibration control on the SA Tool by the operator. The operator should be able to select the desired vibration level.", "Expected_Results": "The vibration control should change as per the operator's configuration. If the operator presses the back button on the settings screen, the application should revert to the last saved configuration. If the operator selects Apply, the desired vibration control should be saved for the shift. The default haptic feedback should be reset when the operator signs out or a new operator signs in."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "In-App Training and FAQ", "Use_Case_Name": "Change Operator Language on SA Tool application", "Test_Scnario": "Operator selects new Route/Line", "Test_Sce_Description": "This scenario tests the functionality of selecting desired route/lines for inspection purposes on the SA Tool by the operator. The operator should be able to select the desired route/line depending on their inspection location.", "Expected_Results": "The operator should be able to select the desired route/line for inspection. If the operator selects a route/line different than the current route, the trip and stop selections should be reset. The operator should then proceed to select the desired trip and stop. In case of bus, operator should also enter the Vehicle Id."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "In-App Training and FAQ", "Use_Case_Name": "In-App Training and FAQs", "Test_Scnario": "Verify the functionality of SA Tool when operator navigates away from the application", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the operator switches to a third party application. The SA Tool application should run in the background and go into standby state.", "Expected_Results": "The SA Tool application should successfully run in the background and go into standby state when the operator switches to a third party application."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "In-App Training and FAQ", "Use_Case_Name": "In-App Training and FAQs", "Test_Scnario": "Verify the error message when operator attempts to change SP on the login screen", "Test_Sce_Description": "This scenario is to test the error message displayed by the SA Tool application when the operator attempts to change SP on the login screen.", "Expected_Results": "The SA Tool application should notify the operator with a corresponding error message when an attempt is made to change SP on the login screen."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "In-App Training and FAQ", "Use_Case_Name": "In-App Training and FAQs", "Test_Scnario": "Verify the functionality of In-App Training and FAQs", "Test_Sce_Description": "This scenario is to test the functionality of the In-App Training and FAQs. The operator should be able to access the training and FAQs, and the content should be stored locally on the device.", "Expected_Results": "The operator should be able to successfully access the In-App Training and FAQs. The content should be stored locally on the device and updated whenever there are changes."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "In-App Training and FAQ", "Use_Case_Name": "In-App Training and FAQs", "Test_Scnario": "Verify the functionality of SA Tool when it is offline", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when it is offline. The operator should be able to launch the In-App Training and FAQ, and the SA Tool should display the last saved content.", "Expected_Results": "The SA Tool should successfully launch the In-App Training and FAQ and display the last saved content when it is offline."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "In-App Training and FAQ", "Use_Case_Name": "In-App Training and FAQs", "Test_Scnario": "Verify the functionality of SA Tool when In-App Training content is updated", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the In-App Training content is updated. The training being played by the operator should continue to play while the new content is downloaded to the device.", "Expected_Results": "The training being played by the operator should continue to play while the new content is downloaded to the device. The updated content should be available the next time the In-App Training and FAQ is launched."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "In-App Training and FAQ", "Use_Case_Name": "In-App Training and FAQs", "Test_Scnario": "Verify the error message when In-App Training has not been downloaded to the SA Tool", "Test_Sce_Description": "This scenario is to test the error message displayed by the SA Tool when the In-App Training has not been downloaded. The SA Tool should display a toast message on the Inspection home screen notifying the operator that there is no content available.", "Expected_Results": "The SA Tool should display a toast message on the Inspection home screen notifying the operator that there is no content available when the In-App Training has not been downloaded."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "In-App Training and FAQ", "Use_Case_Name": "In-App Training and FAQs", "Test_Scnario": "Verify the error message when In-App Training has been remotely disabled from the SA Tool", "Test_Sce_Description": "This scenario is to test the error message displayed by the SA Tool when the In-App Training has been remotely disabled. The SA Tool should display a message on the Help screen notifying the operator that there is no content available.", "Expected_Results": "The SA Tool should display a message on the Help screen notifying the operator that there is no content available when the In-App Training has been remotely disabled."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "In-App Training and FAQ", "Use_Case_Name": "In-App Training and FAQs", "Test_Scnario": "Verify the functionality of changing operator language on SA Tool application", "Test_Sce_Description": "This scenario is to test the functionality of changing the operator language on the SA Tool application. The operator should be able to change the language of the application and the change should be applied in all the application screens immediately.", "Expected_Results": "The operator should be able to successfully change the language of the SA Tool application. The change should be applied in all the application screens immediately."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "In-App Training and FAQ", "Use_Case_Name": "In-App Training and FAQs", "Test_Scnario": "Verify the functionality of changing language on SA Tool application while it is offline", "Test_Sce_Description": "This scenario is to test the functionality of changing the language on the SA Tool application when it is offline. The operator should be able to change the language of the application.", "Expected_Results": "The operator should be able to successfully change the language of the SA Tool application when it is offline."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "In-App Training has not been downloaded to the SA Tool", "Test_Scnario": "Verify the functionality of SA Tool when operator navigates away from the application", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the operator switches to a third party application. The SA Tool application should run in the background and go into standby state.", "Expected_Results": "The SA Tool application should successfully run in the background and go into standby state when the operator switches to a third party application."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "In-App Training has not been downloaded to the SA Tool", "Test_Scnario": "Verify the error message when operator attempts to change SP on the login screen", "Test_Sce_Description": "This scenario is to test the error message displayed when the operator attempts to change SP on the login screen. The SA Tool application should notify the operator with a corresponding error message.", "Expected_Results": "The SA Tool application should successfully display an error message when the operator attempts to change SP on the login screen."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "In-App Training has not been downloaded to the SA Tool", "Test_Scnario": "Verify the functionality of In-App Training and FAQs", "Test_Sce_Description": "This scenario is to test the functionality of the In-App Training and FAQs. The operator should be able to access in-app training and FAQs, which will assist the operator and answer common questions on CLIENT and CLIENT products, as well as the usage of the application.", "Expected_Results": "The operator should successfully be able to access in-app training and FAQs."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "In-App Training has not been downloaded to the SA Tool", "Test_Scnario": "Verify the functionality of SA Tool when it is offline", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when it is offline. The operator should be able to launch In-App Training and FAQ and the SA Tool should load and display the last saved content (homepage) on the device.", "Expected_Results": "The SA Tool should successfully load and display the last saved content (homepage) on the device when it is offline."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "In-App Training has not been downloaded to the SA Tool", "Test_Scnario": "Verify the functionality of SA Tool when In-App Training and FAQ is updated", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when the In-App Training and FAQ is updated. The training being played by the operator should continue to play while the new content is downloaded to the device.", "Expected_Results": "The training being played by the operator should successfully continue to play while the new content is downloaded to the device."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "In-App Training has not been downloaded to the SA Tool", "Test_Scnario": "Verify the error message when In-App Training has not been downloaded to the SA Tool", "Test_Sce_Description": "This scenario is to test the error message displayed when the In-App Training has not been downloaded to the SA Tool. The SA Tool should display a toast message on the Inspection home screen notifying the operator that there is no content available.", "Expected_Results": "The SA Tool should successfully display a toast message on the Inspection home screen notifying the operator that there is no content available."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "In-App Training has not been downloaded to the SA Tool", "Test_Scnario": "Verify the error message when In-App Training has been remotely disabled from the SA Tool", "Test_Sce_Description": "This scenario is to test the error message displayed when the In-App Training has been remotely disabled from the SA Tool. The SA Tool should display a message on the Help screen notifying the operator that there is no content available.", "Expected_Results": "The SA Tool should successfully display a message on the Help screen notifying the operator that there is no content available."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "In-App Training has not been downloaded to the SA Tool", "Test_Scnario": "Verify the functionality of changing operator language on SA Tool application", "Test_Sce_Description": "This scenario is to test the functionality of changing the operator language on the SA Tool application. The operator should be able to slide the toggle switch between English and French.", "Expected_Results": "The operator should successfully be able to slide the toggle switch between English and French."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "In-App Training has not been downloaded to the SA Tool", "Test_Scnario": "Verify the functionality of changing language on SA Tool application while it is offline", "Test_Sce_Description": "This scenario is to test the functionality of changing the language on the SA Tool application while it is offline. The operator should be able to change the language even when the SA Tool is offline.", "Expected_Results": "The operator should successfully be able to change the language on the SA Tool application even when it is offline."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "In-App Training has been remotely disabled from the SA Tool after Operator navigates to Help Screen", "Test_Scnario": "Verify the functionality of In-App Training and FAQ when SA Tool is Offline", "Test_Sce_Description": "This scenario is to test the functionality of the In-App Training and FAQ feature when the SA Tool is offline. The operator should be able to access the last saved content on the device.", "Expected_Results": "The SA Tool should launch a lockdown browser and load the last saved content (homepage) on the device even when it is offline."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "In-App Training has been remotely disabled from the SA Tool after Operator navigates to Help Screen", "Test_Scnario": "Verify the functionality of In-App Training and FAQ when content is updated", "Test_Sce_Description": "This scenario is to test the functionality of the In-App Training and FAQ feature when the content is being updated. The operator should be able to continue with the current training while the new content is being downloaded.", "Expected_Results": "The training being played by the operator should continue to play while the new content is downloaded to the device. The updated content should be available the next time the In-App Training and FAQ is launched."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "In-App Training has been remotely disabled from the SA Tool after Operator navigates to Help Screen", "Test_Scnario": "Verify the functionality of In-App Training when it has not been downloaded to the SA Tool", "Test_Sce_Description": "This scenario is to test the functionality of the In-App Training feature when it has not been downloaded to the SA Tool. The operator should be notified that there is no content available.", "Expected_Results": "The SA Tool should display a toast message on the Inspection home screen notifying the operator that there is no content available."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "In-App Training has been remotely disabled from the SA Tool after Operator navigates to Help Screen", "Test_Scnario": "Verify the functionality of In-App Training when it has been remotely disabled from the SA Tool", "Test_Sce_Description": "This scenario is to test the functionality of the In-App Training feature when it has been remotely disabled from the SA Tool after the operator navigates to the Help Screen.", "Expected_Results": "The SA Tool should not allow the operator to access the In-App Training feature and should notify the operator that the feature has been disabled."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "In-App Training has been remotely disabled from the SA Tool after Operator navigates to Help Screen", "Test_Scnario": "Verify the functionality of SA Tool in Standby State", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when it is in Standby State. The operator should be able to resume the functionality of the SA Tool application by switching back to it.", "Expected_Results": "The SA Tool should disconnect from all the peripherals i.e. the card reader, PIN pad and the printer to conserve battery life when in Standby State. The operator should be able to resume the functionality of the SA Tool application by switching back to it."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "In-App Training has been remotely disabled from the SA Tool after Operator navigates to Help Screen", "Test_Scnario": "Verify the functionality of SA Tool in Out-of-Service State", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when it is in Out-of-Service State. The operator should not be able to accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components.", "Expected_Results": "The SA Tool should not accept a Farecard for any kind of functionality and may require maintenance to restore out-of-order components when in Out-of-Service State. The SA Tool application should not close the operator\u2019s shift unless the operator has requested to sign-off."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "In-App Training has been remotely disabled from the SA Tool after Operator navigates to Help Screen", "Test_Scnario": "Verify the functionality of SA Tool in Revenue Mode", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when it is in Revenue Mode. The operator should be able to interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures.", "Expected_Results": "The SA Tool should allow the operator to interact with customers and perform inspection, fare payments, sales, refunds/reversals, farecard queries, and other customer service gestures when in Revenue Mode."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "In-App Training has been remotely disabled from the SA Tool after Operator navigates to Help Screen", "Test_Scnario": "Verify the functionality of SA Tool in Training Mode", "Test_Sce_Description": "This scenario is to test the functionality of the SA Tool when it is in Training Mode. The operator should be able to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions.", "Expected_Results": "The SA Tool should allow the operator to mimic all functionality available within Sales Mode without accepting payment, and only sending non-revenue transactions when in Training Mode."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "Change Language on SA Tool application while SA Tool is Offline", "Test_Scnario": "Change Language on SA Tool application while SA Tool is Offline", "Test_Sce_Description": "Verify that the operator is able to change the language of the SA Tool application while the device is offline.", "Expected_Results": "The language preference should be stored in store-and-forward memory. The language should be updated in the Subsystem when the network connection is re-established."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "Change Language on SA Tool application while SA Tool is Offline", "Test_Scnario": "Verify the functionality of the language toggle", "Test_Sce_Description": "Check if the operator is able to slide the toggle switch between English and French.", "Expected_Results": "The operator should be able to slide the toggle switch between English and French."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "Change Language on SA Tool application while SA Tool is Offline", "Test_Scnario": "Check the synchronization of language preference change", "Test_Sce_Description": "Verify if the language preference change is synchronized with the operator\u2019s user account in the subsystem.", "Expected_Results": "The language preference change should be synchronized with the operator\u2019s user account in the subsystem."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "Change Language on SA Tool application while SA Tool is Offline", "Test_Scnario": "Verify the language change in all application screens", "Test_Sce_Description": "Check if the language change is applied in all the application screens immediately.", "Expected_Results": "The language change should be applied in all the application screens immediately."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "Change Language on SA Tool application while SA Tool is Offline", "Test_Scnario": "Check the language change in offline mode", "Test_Sce_Description": "Verify if the language change is stored in store-and-forward memory when the SA Tool is offline.", "Expected_Results": "The language change should be stored in store-and-forward memory when the SA Tool is offline."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "Change Language on SA Tool application while SA Tool is Offline", "Test_Scnario": "Verify the language update in the Subsystem", "Test_Sce_Description": "Check if the language is updated in the Subsystem when the network connection is re-established.", "Expected_Results": "The language should be updated in the Subsystem when the network connection is re-established."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "Change Language on SA Tool application while SA Tool is Offline", "Test_Scnario": "Check the language toggle in other screens", "Test_Sce_Description": "Verify if the language toggle located in other screens only changes the language of that screen and does not affect the operator language.", "Expected_Results": "The language toggle located in other screens should only change the language of that screen and should not affect the operator language."}, {"Function_Flow_Name": "Change operator language", "Sub_Flow_Name": "Download Remote Lists", "Use_Case_Name": "Change Language on SA Tool application while SA Tool is Offline", "Test_Scnario": "Verify the language of Line, Trip and Station fields", "Test_Sce_Description": "Check if the Line, Trip and Station fields from the Inspection Parameters screens have short names coming from topology and do not have French equivalents.", "Expected_Results": "The Line, Trip and Station fields from the Inspection Parameters screens should have short names coming from topology and should not have French equivalents."}]